{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":false},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":false},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1418908898000},{"_id":"scaffolds/page.md","mtime":1418908898000},{"_id":"scaffolds/photo.md","mtime":1418908898000},{"_id":"scaffolds/post.md","mtime":1418908898000},{"_id":"source/favicon.ico","mtime":1418908898000},{"_id":"source/_posts/2012-10-24-改变光标的样式.md","mtime":1418908898000},{"_id":"source/_posts/2012-10-25-几个小练习.md","mtime":1418908898000},{"_id":"source/_posts/2012-10-26-下拉菜单和标签页效果.md","mtime":1418908898000},{"_id":"source/_posts/2012-10-29-光标悬浮时其他区域变暗.md","mtime":1418908898000},{"_id":"source/_posts/2012-10-30-CSS3写动态进度条.md","mtime":1418908898000},{"_id":"source/_posts/2012-10-31-动态划出窗口信息.md","mtime":1418908898000},{"_id":"source/_posts/2012-11-03-网页中间弹出文本框.md","mtime":1418908898000},{"_id":"source/_posts/2012-11-05-瀑布流效果.md","mtime":1418908898000},{"_id":"source/_posts/2012-11-06-仿Win8界面.md","mtime":1418908898000},{"_id":"source/_posts/2012-11-11-CSS3几个新属性的测试.md","mtime":1418908898000},{"_id":"source/_posts/2012-11-12-CSS剪贴图像的几种方法 .md","mtime":1418908898000},{"_id":"source/_posts/2012-11-13-网页div浮动布局CSS3属性尝试.md","mtime":1418908898000},{"_id":"source/_posts/2012-12-仿学校官网主页.md","mtime":1418908898000},{"_id":"source/_posts/2012-12-新练习 .md","mtime":1418908898000},{"_id":"source/_posts/2012文教夏令营.md","mtime":1418908898000},{"_id":"source/_posts/2013-03-CSS和JQuery下拉菜单练习.md","mtime":1418908898000},{"_id":"source/_posts/2013-03-CSS和JQuery多方式Tab练习.md","mtime":1418908898000},{"_id":"source/_posts/2013-03-jquery.ajax()表单验证练习.md","mtime":1418908898000},{"_id":"source/_posts/2013-04-鼠标悬浮图片出现描述信息.md","mtime":1418908898000},{"_id":"source/_posts/2013-05-瀑布流效果的制作.md","mtime":1418908898000},{"_id":"source/_posts/2013，顾自地来了.md","mtime":1418908898000},{"_id":"source/_posts/2014-07-好文阅读.md","mtime":1418908898000},{"_id":"source/_posts/Base-64-编码.md","mtime":1418908898000},{"_id":"source/_posts/CSS3属性扫盲笔记.md","mtime":1418908898000},{"_id":"source/_posts/CSS最佳实践.md","mtime":1418908898000},{"_id":"source/_posts/CSS碎片积累.md","mtime":1418908898000},{"_id":"source/_posts/Cookies学习笔记.md","mtime":1418908898000},{"_id":"source/_posts/Git-fork-别人的项目后更新代码的方法.md","mtime":1418908898000},{"_id":"source/_posts/Goagent使用心得.md","mtime":1418908898000},{"_id":"source/_posts/HTML5-WebSocket API 学习.md","mtime":1418908898000},{"_id":"source/_posts/HTML5与CSS3-新特性尝试.md","mtime":1418908898000},{"_id":"source/_posts/HTML5移动开发方案探索.md","mtime":1418908898000},{"_id":"source/_posts/JQuery常用方法.md","mtime":1418908898000},{"_id":"source/_posts/JSON数据类型的学习.md","mtime":1418908898000},{"_id":"source/_posts/JavaScript 碎片.md","mtime":1418908898000},{"_id":"source/_posts/Javascript 异步加载.md","mtime":1418908898000},{"_id":"source/_posts/Javascript 闭包的学习.md","mtime":1418908898000},{"_id":"source/_posts/Javascript碎片积累.md","mtime":1418908898000},{"_id":"source/_posts/Karma-和-Jasmine-学习笔记.md","mtime":1418908898000},{"_id":"source/_posts/MEANJS-学习笔记.md","mtime":1418908898000},{"_id":"source/_posts/Mac OS 下MySQL配置与乱码解决.md","mtime":1418908898000},{"_id":"source/_posts/Meta标签属性学习.md","mtime":1418908898000},{"_id":"source/_posts/MongoDB入门-CRUD简单操作 .md","mtime":1418908898000},{"_id":"source/_posts/NODE-写一个socket.io聊天室.md","mtime":1418908898000},{"_id":"source/_posts/NODE-调试方法.md","mtime":1418908898000},{"_id":"source/_posts/NODE入门-一些常用的DNS模块.md","mtime":1418908898000},{"_id":"source/_posts/NODE入门-简单爬虫.md","mtime":1418908898000},{"_id":"source/_posts/NODE入门-简单的文件管理器.md","mtime":1418908898000},{"_id":"source/_posts/NPM SSL错误的解决.md","mtime":1418908898000},{"_id":"source/_posts/NPM-update--g-错误的解决.md","mtime":1418908898000},{"_id":"source/_posts/Nodejs-的-stream-使用指南.md","mtime":1418908898000},{"_id":"source/_posts/PhoneGap入门-用Ionic+Angular创建Hybrid应用.md","mtime":1418908898000},{"_id":"source/_posts/Sass-学习笔记.md","mtime":1418908898000},{"_id":"source/_posts/Velocity-学习笔记.md","mtime":1418908898000},{"_id":"source/_posts/Web-worker-的简单使用.md","mtime":1418908898000},{"_id":"source/_posts/XMLHttpRequest-对象新特性.md","mtime":1418908898000},{"_id":"source/_posts/bytewiser-练习.md","mtime":1418908898000},{"_id":"source/_posts/express提供的中间件.md","mtime":1418908898000},{"_id":"source/_posts/grunt_学习笔记.md","mtime":1418908898000},{"_id":"source/_posts/html5-file-api-e5ada6e4b9a0.md","mtime":1418908898000},{"_id":"source/_posts/html5-新特性尝鲜.md","mtime":1418908898000},{"_id":"source/_posts/jQuery动画函数animate()的学习.md","mtime":1418908898000},{"_id":"source/_posts/jQuery碎片积累.md","mtime":1418908898000},{"_id":"source/_posts/javascript-e69c80e4bdb3e5ae9ee8b7b5.md","mtime":1418908898000},{"_id":"source/_posts/learnyounode-练习.md","mtime":1418908898000},{"_id":"source/_posts/linux_学习笔记.md","mtime":1418908898000},{"_id":"source/_posts/lodashjs-学习笔记.md","mtime":1418908898000},{"_id":"source/_posts/meta-viewport-标签.md","mtime":1418908898000},{"_id":"source/_posts/momentjs-学习笔记.md","mtime":1418908898000},{"_id":"source/_posts/mongodb-学习笔记.md","mtime":1418908898000},{"_id":"source/_posts/mongoose-学习笔记.md","mtime":1418908898000},{"_id":"source/_posts/nodejs-buffer对象.md","mtime":1418908898000},{"_id":"source/_posts/nodejs-fs模块操作文件系统.md","mtime":1418908898000},{"_id":"source/_posts/nodejs-编写命令行脚本.md","mtime":1418908898000},{"_id":"source/_posts/nodejs-进程与子进程.md","mtime":1418908898000},{"_id":"source/_posts/nodejs常用模块.md","mtime":1418908898000},{"_id":"source/_posts/ubuntu下部署nodejs+mongodb.md","mtime":1418908898000},{"_id":"source/_posts/web前端开发入门提高 js书籍.md","mtime":1418908898000},{"_id":"source/_posts/wordpress for SAE 搬家心得.md","mtime":1418908898000},{"_id":"source/_posts/《JavaScript精粹》笔记.md","mtime":1418908898000},{"_id":"source/_posts/《锋利的JQuery》笔记.md","mtime":1418908898000},{"_id":"source/_posts/【译】ES6 Generators（1）基础篇.md","mtime":1418908898000},{"_id":"source/_posts/【译】ES6 Generators（2）深入篇.md","mtime":1418908898000},{"_id":"source/_posts/【译】ES6 Generators（3）异步篇.md","mtime":1418908898000},{"_id":"source/_posts/【译】ES6 Generators（4）并发篇.md","mtime":1418908898000},{"_id":"source/_posts/【译】HTML5-prefetch.md","mtime":1418908898000},{"_id":"source/_posts/一通懒觉引发的心理革命.md","mtime":1418908898000},{"_id":"source/_posts/人在囧途.md","mtime":1418908898000},{"_id":"source/_posts/使用-workspace-和-source-map-功能在-chrome-中修改并保存文件.md","mtime":1418908898000},{"_id":"source/_posts/使用CSS3的filter属性实现模糊效果.md","mtime":1418908898000},{"_id":"source/_posts/使用_formdata_模拟表单控件.md","mtime":1418908898000},{"_id":"source/_posts/使用net模块创建tcp服务器.md","mtime":1418908898000},{"_id":"source/_posts/写在2012暑假.md","mtime":1418908898000},{"_id":"source/_posts/创建http","mtime":1418908898000},{"_id":"source/_posts/创建http:https服务器与客户端.md","mtime":1418908898000},{"_id":"source/_posts/初探Javascript的Device API.md","mtime":1418908898000},{"_id":"source/_posts/前端工具收集.md","mtime":1418908898000},{"_id":"source/_posts/图片预加载和判断图片是否加载完成.md","mtime":1418908898000},{"_id":"source/_posts/圣诞贺卡-世界末日-冬至-想家.md","mtime":1418908898000},{"_id":"source/_posts/坎坷大学路-大三下.md","mtime":1418908898000},{"_id":"source/_posts/坎坷大学路.md","mtime":1418908898000},{"_id":"source/_posts/天酬勤·笨先飞.md","mtime":1418908898000},{"_id":"source/_posts/小赖的职业生涯规划书.md","mtime":1418908898000},{"_id":"source/_posts/常用字符集和编码格式.md","mtime":1418908898000},{"_id":"source/_posts/慎用text-indent的负值.md","mtime":1418908898000},{"_id":"source/_posts/正则表达式.md","mtime":1418908898000},{"_id":"source/_posts/用MySQLdb包连接数据库.md","mtime":1418908898000},{"_id":"source/_posts/移动 Web 开发技巧.md","mtime":1418908898000},{"_id":"source/_posts/第二通懒觉引发的心里革命.md","mtime":1418908898000},{"_id":"source/_posts/绝对有惊喜！！！.md","mtime":1418908898000},{"_id":"source/_posts/编写爬虫会使用到的一些模块.md","mtime":1418908898000},{"_id":"source/_posts/读书笔记-程序员的思维修炼.md","mtime":1418908898000},{"_id":"source/_posts/阻止元素被选中及清除选中的方法.md","mtime":1418908898000},{"_id":"source/about/index.md","mtime":1418908898000},{"_id":"source/codereading/index.md","mtime":1418908898000},{"_id":"source/git/index.md","mtime":1418908898000},{"_id":"source/svn/index.md","mtime":1418908898000},{"_id":"source/web/index.md","mtime":1418908898000},{"_id":"themes/landscape/Gruntfile.js","mtime":1418908898000},{"_id":"themes/landscape/LICENSE","mtime":1418908898000},{"_id":"themes/landscape/README.md","mtime":1418908898000},{"_id":"themes/landscape/_config.yml","mtime":1418908898000},{"_id":"themes/landscape/package.json","mtime":1418908898000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1418908898000},{"_id":"themes/landscape/scripts/pace.min.js","mtime":1418908898000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/category.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/index.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/page.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/post.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/nav.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1418908898000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1418908898000},{"_id":"themes/landscape/source/js/script.js","mtime":1418908898000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/style.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1418908898000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1418908898000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1418908898000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1418908898000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1418908898000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1418908898000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1418908898000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1418908898000}],"Category":[{"name":"每日一发","_id":"casje7dbzdekawgu","posts":["yddulj3fmwrec9o9","jpym8uswjy9t6z2m","mlgraisrki2rdzy0","kgjb7sii70v4blad","cc0pcoldq8qj8owd","7misobmoksiu9xhd","empqq2el28cxfzpx","u5zn12fn41yagq59","janpuveuf0d5qiwj","pwbvozr7d23e0oay","71mvr0y93g0k2jgb","3mto2sgk8k71wrba","439n5uo6q2tlrgsf","fabc1017baidxr08","hb5cf96mu9wm6g40","1buwzhuxycbojjyd","xbpldk5os3k9wgy2","k2erik8kzoq1blvq","geqoxfgvsptrbl2j","xejg9a6um4l9xz0i","63zy40rhfom3i4ku"]},{"name":"来思碑记","_id":"9wpmord5537fjtil","posts":["hfqfc3hd3eep1vpj","nh1wf32wbfvsbqt4","9nymc97zho7q1ghj","i9lddeeysor8sg8s","c9imm8cdifk5b1mp","hvio09xu5mn51jtb","aiqfhb8qv5s26r68","83ql16a25odysdoo","elw5j550669yytha","olehtsnx7o84ywc2","ihyc5zvtloakkob1"]},{"name":"好文阅读","_id":"nljx37d4umfi1cg8","posts":["8ightfglq4refdhe"]},{"name":"Javascript","_id":"be592wtznj5wcvwn","posts":["33w1xg93csf647du","k2eq7hpquqfmsxqn","0kd08psdc0jw3ew3","mval4mujtyq0h0tk","vtojnzasx4b5kcsn","g12207mg0li84e5b","qhc8eq8w87z9vzgu","6z9cl40ewtql9s4n","4jzyuz20hpa2e0fy","m35zp0ot8ct34taf","uy1v1i0ha3f7h7cx","xe832755ce1rfcyi","bxfzndcu6tn8xe6f","10gtd4mqpoexkrye","cb4jfl64br2crlws","9nmqc3409zti7mme"]},{"name":"CSS","_id":"tavxphreei8q4tj6","posts":["v6lcce3sbbh5wp4z","rkn4yq8vsp2pzq7n","yn87bgs8j1qwbm72","38mznzbw3ejfso7n","p52r81x7wzc1ra4r"]},{"name":"Tools","_id":"s1fvmf8yl7edxxwd","posts":["vyvtuadkaahc9iky","ri6vh6igmjo3livv","uflx76vgojlsdkwz","l2p31b8gehozjcl5","pd18ykc82c0445au","3payigcpe21j0e8n"]},{"name":"HTML","_id":"bzketmbod14nx67f","posts":["w7jqfpv0kcln8v70","9yxti6vofyzpv9lv","bh9p8yeyqfw7aetm","t0vbr8w79l78nfxk","ecnmmq4reusftmws","fqybili5m2yoj97l","8jlageesnyq9rf09","rqz1jcjls20icycj"]},{"name":"Hybrid","_id":"4zflw43es4sy619n","posts":["7wdf7dk76ekdzpd6","203h2lih97h8ztiz"]},{"name":"碎片积累","_id":"knp5ebanrmmmakfi","posts":["gcb69q21rvfv19hp"]},{"name":"后台编程","_id":"xj8ghuavw6jblfpw","posts":["6g3z8atefmni0qus","ycqvbf3sibvg30a2"]},{"name":"Node","_id":"f1q8dl6bbauvoh8x","posts":["nt98bq48a1miz4dg","p7w7fni30tg1iv5k","hxoum11bd2ie3td8","hegvjbgtkj48n205","3jycg9g11svu07aj","odzhwro8tfhh8wl1","kduv0n4k6ityygde","abqj3wp6s3qzksek","oyi1ibz91pxa1nk0","gd1ah19g06ejnri3","0hqnwivs1p2terki","1xo2ohxclwjobgap","9jl4r414qt1zfjmy","dmj6cdd9spobe5qg","efn8uirfln4qw9u7","08ovdk9i2x79zk8j","wipkjyhmh00olvw1","jprjnyzv18tspcei","x30wgnpawbi3h14g","ys1vflummj07en07","avfnohbv9270xm9m","xwlizw8d7078999t","1r52i15q8w1k3rwf","76plflyicutx1rwm","cxplyb163yg0s3q5"]},{"name":"HTML5","_id":"05nmlpfrdhtw0ggm","posts":["7c0mmpwb9wg7yy58"]},{"name":"Linux","_id":"m2dq33qewj6qwyei","posts":["hpbrl9l8rmsirmlt"]},{"name":"Database","_id":"b77a2jgxm72gxq7s","posts":["rzidvpo7izc0xi0y","cg1piu34k6etmjz7"]},{"name":"Translate","_id":"5mkw9mventxlp5vo","posts":["78id1lhzpfaa8sqm","rq9o2jpliix1g95f","le0utyo4vy3m87dq","5th0kei1kug0pll9","k5rx1cc3w6vunyxv"]},{"name":"Tips","_id":"6hh7z5eshfa189mb","posts":["o9urrtoys1sxk9z8"]},{"name":"Reading","_id":"e1sopqoq892o5i0t","posts":["dnp507dojfo0v2vf"]}],"Page":[{"title":"我是谁","date":1400208869000,"content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> me = {</div><div class=\"line\">\tname: <span class=\"string\">'小赖'</span>,</div><div class=\"line\">\tage: <span class=\"number\">18</span>, <span class=\"comment\">// 你不信就算了！！！</span></div><div class=\"line\">\temail: <span class=\"string\">'laixiaolai@foxmail.com'</span>,</div><div class=\"line\">\twebsite: <span class=\"string\">'laispace.com'</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><img src=\"http://lailife.u.qiniudn.com/xiaolai.jpg\" alt=\"\"></p>\n","source":"about/index.md","raw":"title: 我是谁\n\ndate: 2014-05-16 10:54:29\n\n---\n\n```\nvar me = {\n\tname: '小赖',\n\tage: 18, // 你不信就算了！！！\n\temail: 'laixiaolai@foxmail.com',\n\twebsite: 'laispace.com'\n}\n```\n\n![](http://lailife.u.qiniudn.com/xiaolai.jpg)","updated":1418908898000,"path":"about/index.html","excerpt":"","_id":"393aes5irhnz5pbm","comments":true,"layout":"page"},{"title":"源码阅读笔记","date":1418871269000,"content":"<p><a href=\"https://github.com/laispace/codeReadingNotes\" target=\"_blank\" rel=\"external\">https://github.com/laispace/codeReadingNotes</a></p>\n","source":"codereading/index.md","raw":"title: 源码阅读笔记\r\ndate: 2014-12-18 10:54:29\r\n---\r\n\r\n\r\nhttps://github.com/laispace/codeReadingNotes","updated":1418908898000,"path":"codereading/index.html","excerpt":"","_id":"9mlo3mlrohe7svo7","comments":true,"layout":"page"},{"title":"GIT 常用命令","date":1400208869000,"content":"<p>HEAD指向的版本就是当前版本</p>\n<ul>\n<li><p>log 记录</p>\n<pre><code>  <span class=\"comment\"># 查 看提交历史</span>\n  $ git <span class=\"built_in\">log</span>\n\n  <span class=\"comment\"># log --graph 查看分支合并图</span>\n  $ git <span class=\"built_in\">log</span> <span class=\"comment\">--graph</span>\n</code></pre></li>\n<li><p>reflog 命令历史</p>\n<pre><code>  <span class=\"comment\"># 记录命令的操作历史</span>\n  <span class=\"variable\">$ </span>git reflog        \n</code></pre></li>\n<li><p>reset 回退</p>\n<pre><code>  <span class=\"comment\"># 回退到上一个版本</span>\n  <span class=\"variable\">$ </span>git reset --hard <span class=\"constant\">HEAD</span>^\n\n  <span class=\"comment\"># 回退到上两个版本</span>\n  <span class=\"variable\">$ </span>git reset --hard <span class=\"constant\">HEAD</span>^^\n\n  <span class=\"comment\"># 回退到上48个版本</span>\n  <span class=\"variable\">$ </span>git reset --hard <span class=\"constant\">HEAD</span>~<span class=\"number\">48</span>\n\n  <span class=\"comment\"># 回退到以 id 为 3628164 的版本</span>\n  <span class=\"variable\">$ </span>git reset --hard <span class=\"number\">3628164</span>  \n</code></pre></li>\n<li><p>remote 远程</p>\n<pre><code>  <span class=\"comment\"># remote add 添加远程仓库             </span>\n  <span class=\"variable\">$ </span>git remote add origin git<span class=\"variable\">@server</span>-<span class=\"symbol\">name:</span>username/repoName.git\n\n  <span class=\"comment\"># remote -v 查看远程仓库</span>\n  <span class=\"variable\">$ </span>git remote -v \n</code></pre></li>\n<li><p>push 推送到远程</p>\n<pre><code>  <span class=\"comment\"># 将本地的主分支推送到远程</span>\n  <span class=\"variable\">$ </span>git push -u origin master\n</code></pre></li>\n</ul>\n<ul>\n<li><p>pull 从远程拉取</p>\n<pre><code>  <span class=\"variable\">$ </span>git pull\n</code></pre></li>\n<li><p>clone 从远程克隆</p>\n<pre><code>  <span class=\"variable\">$ </span>git clone git<span class=\"variable\">@server</span>-<span class=\"symbol\">name:</span>username/repoName.git\n</code></pre></li>\n</ul>\n<ul>\n<li><p>branch 分支     </p>\n<pre><code>  <span class=\"comment\"># 查看当前分支</span>\n  <span class=\"variable\">$ </span>git branch\n\n  <span class=\"comment\"># branch filename 创建分支</span>\n  <span class=\"variable\">$ </span>git branch testBranch\n\n  <span class=\"comment\"># branch -d 删除分支        </span>\n  <span class=\"comment\"># 合并成功后，删除 testBranch 分支</span>\n  <span class=\"variable\">$ </span>git branch -d testBranch \n\n  <span class=\"comment\"># 若合并失败，则手动解决冲突后，执行</span>\n  <span class=\"variable\">$ </span>git add conflictedFile.md \n  <span class=\"variable\">$ </span>git commit -m <span class=\"string\">\"conflict fixed\"</span>    \n\n  <span class=\"comment\"># - branch --set-upstream 关联本地与远程分支</span>\n  <span class=\"comment\"># 建立本地分支与远程分支的关联，名字最好一致！</span>\n  <span class=\"variable\">$ </span>git branch --set-upstream branch-name origin/branch-name； \n</code></pre></li>\n<li><p>checkout 切换</p>\n<pre><code>  <span class=\"comment\"># checkout -b 创建并切换分支</span>\n  <span class=\"comment\"># 创建一个名为 testBranch 的分支，-b 表示创建并切换</span>\n  <span class=\"variable\">$ </span>git checkout -b testBranch\n  <span class=\"comment\"># -b 表示创建并切换，相当于：</span>\n  <span class=\"comment\"># git branch testBranch</span>\n  <span class=\"comment\"># git checkout testBranch</span>\n\n  <span class=\"comment\"># checkout -- 撤销</span>\n  <span class=\"comment\"># 把 README.md 在工作区的修改全部撤销(回到最近一次git commit或git add时的状态)</span>\n  <span class=\"variable\">$ </span>git checkout -- <span class=\"constant\">README</span>.md \n</code></pre></li>\n</ul>\n<pre><code>    <span class=\"comment\"># checkout filename 切换分支        </span>\n    <span class=\"comment\"># 切换回主分支</span>\n    <span class=\"variable\">$ </span>git checkout master\n</code></pre><ul>\n<li><p>merge 合并分支</p>\n<pre><code>  <span class=\"comment\"># 将 testBranch 分支的内容合并到主分支</span>\n  <span class=\"variable\">$ </span>git merge testBranch\n</code></pre></li>\n<li><p>tag 标签</p>\n<pre><code>  <span class=\"comment\"># 创建标签</span>\n  <span class=\"variable\">$ </span>git tag v2.<span class=\"number\">0</span>\n\n  <span class=\"comment\"># 查看所有标签</span>\n  <span class=\"variable\">$ </span>git tag\n\n  <span class=\"comment\"># 查看特定标签信息</span>\n  <span class=\"variable\">$ </span>git show v2.<span class=\"number\">0</span>\n\n  <span class=\"comment\"># 删除标签</span>\n  <span class=\"variable\">$ </span>git tag -d v2.<span class=\"number\">0</span>\n\n  <span class=\"comment\"># 创建的标签都只存储在本地</span>\n  <span class=\"comment\"># 手动推送标签到远程</span>\n  <span class=\"variable\">$ </span>git push origin v2.<span class=\"number\">0</span>\n\n  <span class=\"comment\"># 手动推送所有标签到远程</span>\n  <span class=\"variable\">$ </span>git push origin --tags\n</code></pre></li>\n<li><p>自定义配置</p>\n<pre><code>  # 配置别名，如 <span class=\"keyword\">st</span> 表示 status，<span class=\"keyword\">co</span> 表示 checkout，ci 表示commit，<span class=\"keyword\">br</span> 表示 branch\n  $ git config --<span class=\"keyword\">global</span> alias.<span class=\"keyword\">st</span> status   \n  $ git config --<span class=\"keyword\">global</span> alias.<span class=\"keyword\">co</span> checkout\n  $ git config --<span class=\"keyword\">global</span> alias.ci commit\n  $ git config --<span class=\"keyword\">global</span> alias.<span class=\"keyword\">br</span> branch\n</code></pre></li>\n</ul>\n<ul>\n<li>忽略文件被git追踪：</li>\n</ul>\n<p>项目根目录下创建.gitignore文件后将需要忽略的文件写入即可。</p>\n<p>除自己新建手写这个文件外，可在<a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"external\">这里</a>看到配置好的 .gitignore       </p>\n<ul>\n<li>fork 别人的项目后更新代码的方法</li>\n</ul>\n<ol>\n<li><p>举个例子，需要 fork 这个项目 <a href=\"https://github.com/tarobjtu/WebFundamentals.git\" target=\"_blank\" rel=\"external\">https://github.com/tarobjtu/WebFundamentals.git</a></p>\n</li>\n<li><p>点击 fork, 就会复制一份代码到自己的 repo <a href=\"https://github.com/laispace/WebFundamentals.git\" target=\"_blank\" rel=\"external\">https://github.com/laispace/WebFundamentals.git</a></p>\n</li>\n<li><p>本地 clone 自己 repo 中的这个项目</p>\n<p> $ git clone <a href=\"https://github.com/laispace/WebFundamentals.git\" target=\"_blank\" rel=\"external\">https://github.com/laispace/WebFundamentals.git</a></p>\n</li>\n<li><p>添加自己的远程仓库</p>\n<p> $ cd WebFundamentals<br> $ git remote add laispace <a href=\"https://github.com/laispace/WebFundamentals.git\" target=\"_blank\" rel=\"external\">https://github.com/laispace/WebFundamentals.git</a></p>\n</li>\n<li><p>修改代码后进行 push</p>\n<p> $ git add —all<br> $ git commit -m ‘edit some files’<br> $ git push</p>\n</li>\n</ol>\n<p>这时候，如果源仓库 tarobjtu 的项目代码进行了更新，而我们自己 fork 下来的代码想要合并这些更新怎么做呢？</p>\n<ol>\n<li><p>添加源项目的远程仓库</p>\n<p> $ git remote add tarobjtu <a href=\"https://github.com/tarobjtu/WebFundamentals.git\" target=\"_blank\" rel=\"external\">https://github.com/tarobjtu/WebFundamentals.git</a><br> // 这时候可以看到有两个源了<br> $ git remote<br> // laispace<br> // tarobjtu</p>\n</li>\n<li><p>拉取源仓库的代码到本地</p>\n<p> $ git fetch tarobjtu</p>\n</li>\n<li><p>合并源仓库的 master 分支代码到本地</p>\n<p> $ git merge tarobjtu/master</p>\n</li>\n<li><p>提交代码到我们自己的仓库</p>\n<p> $ git add —all<br> $ git commit -m ‘合并源仓库代码’<br> $ git push</p>\n</li>\n</ol>\n<h3 id=\"参考资料\">参考资料</h3>\n<ol>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">Git教程</a>                  </li>\n</ol>\n","source":"git/index.md","raw":"title: 'GIT 常用命令'\r\ndate: 2014-05-16 10:54:29\r\n---\r\nHEAD指向的版本就是当前版本\r\n\r\n\r\n- log 记录\r\n\r\n        # 查 看提交历史\r\n        $ git log\r\n        \r\n        # log --graph 查看分支合并图\r\n        $ git log --graph\r\n        \r\n- reflog 命令历史\r\n\r\n        # 记录命令的操作历史\r\n        $ git reflog        \r\n        \r\n- reset 回退\r\n\r\n        # 回退到上一个版本\r\n        $ git reset --hard HEAD^\r\n        \r\n        # 回退到上两个版本\r\n        $ git reset --hard HEAD^^\r\n        \r\n        # 回退到上48个版本\r\n        $ git reset --hard HEAD~48\r\n\r\n        # 回退到以 id 为 3628164 的版本\r\n        $ git reset --hard 3628164  \r\n        \r\n- remote 远程\r\n\r\n        # remote add 添加远程仓库             \r\n        $ git remote add origin git@server-name:username/repoName.git\r\n\r\n        # remote -v 查看远程仓库\r\n        $ git remote -v \r\n        \r\n- push 推送到远程\r\n        \r\n        # 将本地的主分支推送到远程\r\n        $ git push -u origin master\r\n        \r\n\r\n- pull 从远程拉取\r\n    \r\n        $ git pull\r\n\r\n- clone 从远程克隆\r\n\r\n        $ git clone git@server-name:username/repoName.git\r\n    \r\n    \r\n- branch 分支     \r\n\r\n        # 查看当前分支\r\n        $ git branch\r\n        \r\n        # branch filename 创建分支\r\n        $ git branch testBranch\r\n        \r\n        # branch -d 删除分支        \r\n        # 合并成功后，删除 testBranch 分支\r\n        $ git branch -d testBranch \r\n        \r\n        # 若合并失败，则手动解决冲突后，执行\r\n        $ git add conflictedFile.md \r\n        $ git commit -m \"conflict fixed\"    \r\n        \r\n        # - branch --set-upstream 关联本地与远程分支\r\n        # 建立本地分支与远程分支的关联，名字最好一致！\r\n        $ git branch --set-upstream branch-name origin/branch-name； \r\n                \r\n- checkout 切换\r\n\r\n        # checkout -b 创建并切换分支\r\n        # 创建一个名为 testBranch 的分支，-b 表示创建并切换\r\n        $ git checkout -b testBranch\r\n        # -b 表示创建并切换，相当于：\r\n        # git branch testBranch\r\n        # git checkout testBranch\r\n\r\n        # checkout -- 撤销\r\n        # 把 README.md 在工作区的修改全部撤销(回到最近一次git commit或git add时的状态)\r\n        $ git checkout -- README.md \r\n        \r\n                \r\n        # checkout filename 切换分支        \r\n        # 切换回主分支\r\n        $ git checkout master\r\n        \r\n- merge 合并分支\r\n        \r\n        # 将 testBranch 分支的内容合并到主分支\r\n        $ git merge testBranch\r\n\r\n- tag 标签\r\n\r\n        # 创建标签\r\n        $ git tag v2.0\r\n\r\n        # 查看所有标签\r\n        $ git tag\r\n        \r\n        # 查看特定标签信息\r\n        $ git show v2.0\r\n        \r\n        # 删除标签\r\n        $ git tag -d v2.0\r\n        \r\n        # 创建的标签都只存储在本地\r\n        # 手动推送标签到远程\r\n        $ git push origin v2.0\r\n        \r\n        # 手动推送所有标签到远程\r\n        $ git push origin --tags\r\n        \r\n- 自定义配置\r\n\r\n        # 配置别名，如 st 表示 status，co 表示 checkout，ci 表示commit，br 表示 branch\r\n        $ git config --global alias.st status   \r\n        $ git config --global alias.co checkout\r\n        $ git config --global alias.ci commit\r\n        $ git config --global alias.br branch\r\n    \r\n        \r\n\r\n- 忽略文件被git追踪：\r\n\r\n项目根目录下创建.gitignore文件后将需要忽略的文件写入即可。\r\n\r\n除自己新建手写这个文件外，可在[这里](https://github.com/github/gitignore)看到配置好的 .gitignore       \r\n\r\n\r\n\r\n- fork 别人的项目后更新代码的方法\r\n\r\n1. 举个例子，需要 fork 这个项目 https://github.com/tarobjtu/WebFundamentals.git\r\n\r\n2. 点击 fork, 就会复制一份代码到自己的 repo https://github.com/laispace/WebFundamentals.git\r\n\r\n3. 本地 clone 自己 repo 中的这个项目\r\n\r\n    $ git clone https://github.com/laispace/WebFundamentals.git\r\n\r\n4. 添加自己的远程仓库\r\n    \r\n    $ cd WebFundamentals\r\n    $ git remote add laispace https://github.com/laispace/WebFundamentals.git\r\n\r\n5. 修改代码后进行 push\r\n\r\n    $ git add --all\r\n    $ git commit -m 'edit some files'\r\n    $ git push\r\n\r\n这时候，如果源仓库 tarobjtu 的项目代码进行了更新，而我们自己 fork 下来的代码想要合并这些更新怎么做呢？\r\n\r\n6. 添加源项目的远程仓库\r\n\r\n    $ git remote add tarobjtu https://github.com/tarobjtu/WebFundamentals.git\r\n    // 这时候可以看到有两个源了\r\n    $ git remote  \r\n    // laispace\r\n    // tarobjtu\r\n\r\n7. 拉取源仓库的代码到本地\r\n    \r\n    $ git fetch tarobjtu\r\n\r\n8. 合并源仓库的 master 分支代码到本地\r\n\r\n    $ git merge tarobjtu/master\r\n\r\n9. 提交代码到我们自己的仓库\r\n\r\n    $ git add --all\r\n    $ git commit -m '合并源仓库代码'\r\n    $ git push\r\n\r\n\r\n\r\n### 参考资料\r\n\r\n1. [Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)                  \r\n        \r\n        \r\n        \r\n","updated":1418908898000,"path":"git/index.html","excerpt":"","_id":"eama81sldngrj01x","comments":true,"layout":"page"},{"title":"SVN 常用命令","date":1400208869000,"content":"<pre><code>   <span class=\"comment\"> //svn up/cleanup/co/st/diff/ci/sw/merge/info</span>\n\n   <span class=\"comment\"> // help 帮助</span>\n    svn help\n    svn help ci\n\n   <span class=\"comment\"> // checkout 复制到本地</span>\n    svn checkout <span class=\"built_in\">URL</span>\n   <span class=\"comment\"> // 简写</span>\n    svn co <span class=\"built_in\">URL</span>\n\n   <span class=\"comment\"> // add 添加文件</span>\n    svn <span class=\"built_in\">add</span> FILE\n   <span class=\"comment\"> // rm 删除文件/目录</span>\n    svn rm FILE\n\n   <span class=\"comment\"> // commit 提交</span>\n    svn commit -m <span class=\"string\">'first commit'</span>\n   <span class=\"comment\"> // 简写</span>\n    svn ci\n\n   <span class=\"comment\"> // update 更新到某个版本</span>\n    svn update -r m <span class=\"built_in\">URL</span>\n   <span class=\"comment\"> // 简写</span>\n    svn up\n\n   <span class=\"comment\"> // status 查看文件或目录状态</span>\n   <span class=\"comment\"> // 不显示子目录状态</span>\n    svn status <span class=\"built_in\">URL</span>\n   <span class=\"comment\"> // 显示子目录状态</span>\n    svn status -v <span class=\"built_in\">URL</span>\n   <span class=\"comment\"> // 简写 </span>\n    svn st\n\n   <span class=\"comment\"> // log 查看当前工作副本</span>\n    svn <span class=\"built_in\">log</span>\n\n   <span class=\"comment\"> // delete 删除文件</span>\n    svn <span class=\"built_in\">delete</span> <span class=\"built_in\">URL</span> -m <span class=\"string\">'delete a file'</span>\n\n   <span class=\"comment\"> // info 查看日志</span>\n    svn info <span class=\"built_in\">URL</span>\n\n   <span class=\"comment\"> // diff 对比差异</span>\n   <span class=\"comment\"> // 被修改文件与基础版本对比</span>\n    svn diff \n   <span class=\"comment\"> // 与最新版本对比</span>\n    svn diff -r head\n   <span class=\"comment\"> // 版本 m 与版本 n 对比</span>\n    svn diff -r m:n <span class=\"built_in\">URL</span>\n   <span class=\"comment\"> // 简写 </span>\n    svn di\n\n   <span class=\"comment\"> // merge 将版本 m 和版本 n 合并</span>\n    svn <span class=\"built_in\">merge</span> -r m:n <span class=\"built_in\">URL</span>\n\n   <span class=\"comment\"> // switch 切换到某一个版本</span>\n    svn <span class=\"keyword\">switch</span> <span class=\"built_in\">URL</span>\n\n   <span class=\"comment\"> // cleanup 回到一个稳定的状态</span>\n    svn cleanup\n</code></pre><ul>\n<li><p>SVN 小记</p>\n<p>  创建分支:</p>\n<p>  svn copy <a href=\"http://mysvn.laispace.com/myproj/trunk\" target=\"_blank\" rel=\"external\">http://mysvn.laispace.com/myproj/trunk</a> <a href=\"http://mysvn.laispace.com/myproj/branches/xiaolai\" target=\"_blank\" rel=\"external\">http://mysvn.laispace.com/myproj/branches/xiaolai</a> -m ‘创建一个名为 xiaolai 的分支’</p>\n<p>  拉取代码:</p>\n<p>  svn checkout <a href=\"http://mysvn.laispace.com/myproj/branches/xiaolai\" target=\"_blank\" rel=\"external\">http://mysvn.laispace.com/myproj/branches/xiaolai</a></p>\n<p>  在分支上编写代码后, svn commit 后, 切换到主干目录, 进行合并</p>\n<p>  svn merge <a href=\"http://mysvn.laispace.com/myproj/branches/xiaolai\" target=\"_blank\" rel=\"external\">http://mysvn.laispace.com/myproj/branches/xiaolai</a></p>\n<p>  合并完后, 查看已合并信息:</p>\n<p>  svn mergeinfo <a href=\"http://mysvn.laispace.com/myproj/branches/xiaolai\" target=\"_blank\" rel=\"external\">http://mysvn.laispace.com/myproj/branches/xiaolai</a></p>\n<p>  合并完后, 查看未合并信息:</p>\n<p>  svn merginfo <a href=\"http://mysvn.laispace.com/myproj/branches/xiaolai\" target=\"_blank\" rel=\"external\">http://mysvn.laispace.com/myproj/branches/xiaolai</a> —show-revs eligible</p>\n</li>\n</ul>\n<ul>\n<li><p>SVN 分支 branch 与标记 tag 的区别</p>\n<p>  分支用于在并行开发，这里的并行是指和trunk(主分支)的并行。<br>  而tag是用来做一个里程碑（milestone），不管是不是release，都是一个可用的版本。</p>\n</li>\n</ul>\n<p><img src=\"http://lailife.u.qiniudn.com/xiaolai.jpg\" alt=\"\"></p>\n","source":"svn/index.md","raw":"title: 'SVN 常用命令'\r\ndate: 2014-05-16 10:54:29\r\n---\r\n\r\n        //svn up/cleanup/co/st/diff/ci/sw/merge/info\r\n        \r\n        // help 帮助\r\n        svn help\r\n        svn help ci\r\n        \r\n        // checkout 复制到本地\r\n        svn checkout URL\r\n        // 简写\r\n        svn co URL\r\n        \r\n        // add 添加文件\r\n        svn add FILE\r\n        // rm 删除文件/目录\r\n        svn rm FILE\r\n        \r\n        // commit 提交\r\n        svn commit -m 'first commit'\r\n        // 简写\r\n        svn ci\r\n        \r\n        // update 更新到某个版本\r\n        svn update -r m URL\r\n        // 简写\r\n        svn up\r\n        \r\n        // status 查看文件或目录状态\r\n        // 不显示子目录状态\r\n        svn status URL\r\n        // 显示子目录状态\r\n        svn status -v URL\r\n        // 简写 \r\n        svn st\r\n        \r\n        // log 查看当前工作副本\r\n        svn log\r\n        \r\n        // delete 删除文件\r\n        svn delete URL -m 'delete a file'\r\n        \r\n        // info 查看日志\r\n        svn info URL\r\n        \r\n        // diff 对比差异\r\n        // 被修改文件与基础版本对比\r\n        svn diff \r\n        // 与最新版本对比\r\n        svn diff -r head\r\n        // 版本 m 与版本 n 对比\r\n        svn diff -r m:n URL\r\n        // 简写 \r\n        svn di\r\n        \r\n        // merge 将版本 m 和版本 n 合并\r\n        svn merge -r m:n URL\r\n        \r\n        // switch 切换到某一个版本\r\n        svn switch URL\r\n        \r\n        // cleanup 回到一个稳定的状态\r\n        svn cleanup\r\n\r\n- SVN 小记\r\n    \r\n    创建分支:\r\n\r\n    svn copy http://mysvn.laispace.com/myproj/trunk http://mysvn.laispace.com/myproj/branches/xiaolai -m '创建一个名为 xiaolai 的分支'\r\n\r\n    拉取代码:\r\n\r\n    svn checkout http://mysvn.laispace.com/myproj/branches/xiaolai\r\n\r\n    在分支上编写代码后, svn commit 后, 切换到主干目录, 进行合并\r\n\r\n    svn merge http://mysvn.laispace.com/myproj/branches/xiaolai\r\n\r\n    合并完后, 查看已合并信息:\r\n\r\n    svn mergeinfo http://mysvn.laispace.com/myproj/branches/xiaolai\r\n\r\n    合并完后, 查看未合并信息:\r\n\r\n    svn merginfo http://mysvn.laispace.com/myproj/branches/xiaolai --show-revs eligible\r\n\r\n\r\n- SVN 分支 branch 与标记 tag 的区别\r\n    \r\n    分支用于在并行开发，这里的并行是指和trunk(主分支)的并行。\r\n    而tag是用来做一个里程碑（milestone），不管是不是release，都是一个可用的版本。\r\n\r\n\r\n\r\n\r\n![](http://lailife.u.qiniudn.com/xiaolai.jpg)","updated":1418908898000,"path":"svn/index.html","excerpt":"","_id":"czkyh2dueb31x5pb","comments":true,"layout":"page"},{"title":"移动 Web 开发","date":1418871269000,"content":"<h1 id=\"调试技巧\">调试技巧</h1>\n<ul>\n<li>使用Fiddler 快速 bugfix 的办法</li>\n</ul>\n<p>线上出一个小问题时, 定位到具体某一个文件比如 online.js<br>使用 Fiddler 将这个文件保存为 offline.js 到本地, 并设置 AutoResponder 将这个线上文件 online.js 的请求映射到 offline.js<br>接着就开始改动, 这样还没拉代码就先定位并解决问题了, 轻快~</p>\n<ul>\n<li>调试 iOS 端真机环境页面</li>\n</ul>\n<p>用 Chrome 模拟器并不能百分百模拟真机.</p>\n<p>用 Fiddler 只能进行抓包调试, 对 UI 调试比较无力吧.</p>\n<p>用 Weinre 远程调试在 PC 上成功, 但映射到 iOS 上时毫无反应,<br>不知道是不是因为同时启用了 Weinre 代理服务器和 Fiddler 代理服务器.</p>\n<p>想自用一个在外网的机子搭建 Weinre 代理服务器(这样就不需要 PC 和 iOS 都在同一个局域网下), 但是内网 ssh 连接不上…内网这么多限制, 真是麻烦.</p>\n<p>用 Fiddler 开启代理, iOS 接入 PC 所在的网络并设置代理为 Fiddler 服务器, 用 Mac 连接 iPhone, 使用 Safari 调试. 这个目前看来, 是最爽的了.</p>\n","source":"web/index.md","raw":"title: 移动 Web 开发\r\ndate: 2014-12-18 10:54:29\r\n---\r\n\r\n\r\n# 调试技巧\r\n\r\n-  使用Fiddler 快速 bugfix 的办法\r\n\r\n线上出一个小问题时, 定位到具体某一个文件比如 online.js\r\n使用 Fiddler 将这个文件保存为 offline.js 到本地, 并设置 AutoResponder 将这个线上文件 online.js 的请求映射到 offline.js\r\n接着就开始改动, 这样还没拉代码就先定位并解决问题了, 轻快~\r\n\r\n- 调试 iOS 端真机环境页面\r\n\r\n用 Chrome 模拟器并不能百分百模拟真机.\r\n\r\n用 Fiddler 只能进行抓包调试, 对 UI 调试比较无力吧.\r\n\r\n用 Weinre 远程调试在 PC 上成功, 但映射到 iOS 上时毫无反应, \r\n不知道是不是因为同时启用了 Weinre 代理服务器和 Fiddler 代理服务器.\r\n\r\n想自用一个在外网的机子搭建 Weinre 代理服务器(这样就不需要 PC 和 iOS 都在同一个局域网下), 但是内网 ssh 连接不上…内网这么多限制, 真是麻烦.\r\n\r\n用 Fiddler 开启代理, iOS 接入 PC 所在的网络并设置代理为 Fiddler 服务器, 用 Mac 连接 iPhone, 使用 Safari 调试. 这个目前看来, 是最爽的了.\r\n","updated":1418908898000,"path":"web/index.html","excerpt":"","_id":"zehkgnbaeyosh860","comments":true,"layout":"page"}],"Post":[{"title":"2012-10-24-改变光标的样式","tags":[],"id":124,"categories":["casje7dbzdekawgu"],"date":1351100792000,"content":"<div> 今天查阅资料学习怎样改变光标的样式，制作一些炫丽的光标效果。<br><div>     第一种方法：改变光标样式的方法无非就是利用第三方控件或者利用CSS样式。</div><br><div>     1.查阅相关属性：</div><br><table style=\"color: #000000; font-family: Arial, Helvetica, sans-serif; font-size: 14px; line-height: 26px; background-color: #ffffff; border-collapse: collapse;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\"><br><tbody><br><tr><br><td style=\"border: 1pt solid black; padding: 0cm 5.4pt; width: 213.05pt; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">默认</span></td><br><td style=\"border-top-color: black; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-top-width: 1pt; border-top-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">default</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">文字/编辑</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">text</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">自动</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">auto</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">手形</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">pointer, hand(hand</span><span style=\"font-size: 10pt;\">是IE专有)</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">可移动对象</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">move</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">不允许</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">not-allowed</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">无法释放</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">no-drop</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">等待/沙漏</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">wait</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">帮助</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">help</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">十字准星</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">crosshair</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向上改变大小(North)</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">n-resize</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向下改变大小(South)</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">s_resize </span><span style=\"font-size: 10pt;\">与n-resize效果相同</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向左改变大小(West)</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">w-resize</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向右改变大小(East)</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">e-resize </span><span style=\"font-size: 10pt;\">与w-resize效果相同</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向左上改变大小（NorthWest）</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">nw-resize</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向左下改变大小（SouthWest）</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">sw-resize</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向右上改变大小（NorthEast）</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">ne-resize </span><span style=\"font-size: 10pt;\">与sw-resize效果相同</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向右下改变大小（SouthEast）</span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">se-resize </span><span style=\"font-size: 10pt;\">与nw-resize效果相同</span></td><br></tr><br><tr><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\"><strong>自定义光标</strong></span></td><br><td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><br><div><strong><span style=\"font-size: 10pt;\">url(‘</span><span style=\"font-size: 10pt;\">光标地址’)</span></strong></div></td><br></tr><br></tbody><br></table><br>2. 测试表中所有的属性<br><div><img src=\"file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(1\" alt=\"\">.png)<img src=\"file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(2\" alt=\"\">.png)<img src=\"file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(3\" alt=\"\">.png)<img src=\"file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(4\" alt=\"\">.png)<br><div></div><br><div>详细见<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-24/cursor.html\" title=\"Demo-用CSS改变光标样式\" target=\"_blank\" rel=\"external\">Demo-cursor.html</a></div><br><div>第二种方法：<span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">利用第三方控件的方法</span></div><br><div>     <span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">将以下代码加到网页文件的&lt;head&gt;&lt;/head&gt;之间：</span></div><br><div><span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">&lt;script language=javascript&gt;</span><span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">var Loaded=false;var Flag=false;</span><span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">&lt;/script&gt;</span></div><br><div><span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">&lt;script src=’<a href=\"http://files.cometsystems.com/javascript/lc2000.js\" target=\"_blank\" rel=\"external\">http://files.cometsystems.com/javascript/lc2000.js</a>‘ </span><span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">language=javascript&gt;</span><span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">&lt;/script&gt;</span></div><br><div><span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">&lt;script language=javascript&gt;if(Loaded&amp;&amp;Flag)TheCometCursor(‘cd_electric’,0,626);&lt;/script&gt;</span><br><span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">    修改后，浏览此网页的时候浏览器会弹出一个“安全设置警告”，点击“是”，系统自动安装控件，鼠标就可以按照你的需要显示了。</span><br><span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">    选择需要的鼠标样式：登陆网站</span><span style=\"text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff; color: #0099cc;\"><a href=\"http://www.cometzone.com/\" target=\"_blank\" rel=\"external\">http://www.cometzone.com</a> （</span><span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">14个大类4000多种鼠标，制作精美，点击相应的鼠标图片就可预览到不同的效果。）</span><br><span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">    选中鼠标后，点击网页左边导航的“GET CURSOR CODE”链接，转到下一页，再点击“Select Code”按钮，按钮下这个多行文本框里面的内容就是上面提供的代码，只是代码中TheCometCursor(‘cd_electric’,0,626)部分不同，显示的鼠标状态也不同.</span><br><br><div style=\"color: #000000; font-family: Tahoma; line-height: normal; text-align: -webkit-auto; font-size: medium;\"></div><br><div style=\"color: #000000; font-family: Tahoma; line-height: normal; text-align: -webkit-auto; font-size: medium;\"></div><br></div><br></div><br></div>","source":"_posts/2012-10-24-改变光标的样式.md","raw":"title: 2012-10-24-改变光标的样式\ntags:\nid: 124\ncategories:\n  - 每日一发\ndate: 2012-10-25 01:46:32\n---\n\n<div> 今天查阅资料学习怎样改变光标的样式，制作一些炫丽的光标效果。\n<div>     第一种方法：改变光标样式的方法无非就是利用第三方控件或者利用CSS样式。</div>\n<div>     1.查阅相关属性：</div>\n<table style=\"color: #000000; font-family: Arial, Helvetica, sans-serif; font-size: 14px; line-height: 26px; background-color: #ffffff; border-collapse: collapse;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td style=\"border: 1pt solid black; padding: 0cm 5.4pt; width: 213.05pt; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">默认</span></td>\n<td style=\"border-top-color: black; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-top-width: 1pt; border-top-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">default</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">文字/编辑</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">text</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">自动</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">auto</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">手形</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">pointer, hand(hand</span><span style=\"font-size: 10pt;\">是IE专有)</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">可移动对象</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">move</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">不允许</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">not-allowed</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">无法释放</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">no-drop</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">等待/沙漏</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">wait</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">帮助</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">help</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">十字准星</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">crosshair</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向上改变大小(North)</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">n-resize</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向下改变大小(South)</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">s_resize </span><span style=\"font-size: 10pt;\">与n-resize效果相同</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向左改变大小(West)</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">w-resize</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向右改变大小(East)</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">e-resize </span><span style=\"font-size: 10pt;\">与w-resize效果相同</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向左上改变大小（NorthWest）</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">nw-resize</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向左下改变大小（SouthWest）</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">sw-resize</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向右上改变大小（NorthEast）</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">ne-resize </span><span style=\"font-size: 10pt;\">与sw-resize效果相同</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">向右下改变大小（SouthEast）</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">se-resize </span><span style=\"font-size: 10pt;\">与nw-resize效果相同</span></td>\n</tr>\n<tr>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: black; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; border-left-width: 1pt; border-left-style: solid; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\"><span style=\"font-size: 10pt;\">**自定义光标**</span></td>\n<td style=\"border-top-color: #ece9d8; border-right-color: black; border-bottom-color: black; border-left-color: #ece9d8; border-right-width: 1pt; border-right-style: solid; padding: 0cm 5.4pt; width: 213.05pt; border-bottom-width: 1pt; border-bottom-style: solid; background-color: transparent;\" valign=\"top\" width=\"284\">\n<div>**<span style=\"font-size: 10pt;\">url('</span><span style=\"font-size: 10pt;\">光标地址')</span>**</div></td>\n</tr>\n</tbody>\n</table>\n2\\. 测试表中所有的属性\n<div>![](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(1).png)![](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(2).png)![](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(3).png)![](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/Image(4).png)\n<div></div>\n<div>详细见[Demo-cursor.html](http://www.laispace.com/xiaospace/demo/2012-10-24/cursor.html \"Demo-用CSS改变光标样式\")</div>\n<div>第二种方法：<span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">利用第三方控件的方法</span></div>\n<div>     <span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">将以下代码加到网页文件的&lt;head&gt;&lt;/head&gt;之间：</span></div>\n<div><span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">&lt;script language=javascript&gt;</span><span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">var Loaded=false;var Flag=false;</span><span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">&lt;/script&gt;</span></div>\n<div><span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">&lt;script src='http://files.cometsystems.com/javascript/lc2000.js' </span><span style=\"font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">language=javascript&gt;</span><span style=\"background-color: #ffffff; font-family: Arial, Helvetica, sans-serif; line-height: 26px;\">&lt;/script&gt;</span></div>\n<div><span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">&lt;script language=javascript&gt;if(Loaded&amp;&amp;Flag)TheCometCursor('cd_electric',0,626);&lt;/script&gt;</span>\n<span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">    修改后，浏览此网页的时候浏览器会弹出一个“安全设置警告”，点击“是”，系统自动安装控件，鼠标就可以按照你的需要显示了。</span>\n<span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">    选择需要的鼠标样式：登陆网站</span><span style=\"text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff; color: #0099cc;\">[http://www.cometzone.com](http://www.cometzone.com/) （</span><span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">14个大类4000多种鼠标，制作精美，点击相应的鼠标图片就可预览到不同的效果。）</span>\n<span style=\"color: #000000; text-align: -webkit-auto; font-size: medium; font-family: Arial, Helvetica, sans-serif; line-height: 26px; background-color: #ffffff;\">    选中鼠标后，点击网页左边导航的“GET CURSOR CODE”链接，转到下一页，再点击“Select Code”按钮，按钮下这个多行文本框里面的内容就是上面提供的代码，只是代码中TheCometCursor('cd_electric',0,626)部分不同，显示的鼠标状态也不同.</span>\n\n<div style=\"color: #000000; font-family: Tahoma; line-height: normal; text-align: -webkit-auto; font-size: medium;\"></div>\n<div style=\"color: #000000; font-family: Tahoma; line-height: normal; text-align: -webkit-auto; font-size: medium;\"></div>\n</div>\n</div>\n</div>","slug":"2012-10-24-改变光标的样式","updated":1418908898000,"excerpt":"","_id":"yddulj3fmwrec9o9","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012-10-25-几个小练习","id":133,"categories":["casje7dbzdekawgu"],"date":1351182028000,"tags":[],"content":"<p>郁闷死了，刚打好字浏览器就突然崩溃，就不再重新写了，直接上Demo。</p>\n<p>1.<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-25/vote.html\" title=\"模拟投票\" target=\"_blank\" rel=\"external\">模拟投票</a></p>\n<p>&nbsp;</p>\n<p>2.<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-25/changeSelectedWord.html\" title=\"改变选中文字的样式\" target=\"_blank\" rel=\"external\">改变选中文字的样式</a></p>\n<p>&nbsp;</p>\n<p>3.<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-25/changetitle.html\" title=\"改变提示信息title的样式\" target=\"_blank\" rel=\"external\">改变提示信息的样式</a></p>\n<p>&nbsp;</p>\n<p>4.<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-25/magnifypictures.html\" title=\"鼠标悬浮放大图片预览\" target=\"_blank\" rel=\"external\">鼠标悬浮放大图片</a></p>\n<p>&nbsp;</p>\n<p>5.<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-25/editableTable.html\" title=\"可编辑的表格\" target=\"_blank\" rel=\"external\">可编辑的表格</a></p>\n","source":"_posts/2012-10-25-几个小练习.md","raw":"title: 2012-10-25-几个小练习\nid: 133\ncategories:\n  - 每日一发\ndate: 2012-10-26 00:20:28\ntags:\n---\n\n郁闷死了，刚打好字浏览器就突然崩溃，就不再重新写了，直接上Demo。\n\n1.[模拟投票](http://www.laispace.com/xiaospace/demo/2012-10-25/vote.html \"模拟投票\")\n\n&nbsp;\n\n2.[改变选中文字的样式](http://www.laispace.com/xiaospace/demo/2012-10-25/changeSelectedWord.html \"改变选中文字的样式\")\n\n&nbsp;\n\n3.[改变提示信息的样式](http://www.laispace.com/xiaospace/demo/2012-10-25/changetitle.html \"改变提示信息title的样式\")\n\n&nbsp;\n\n4.[鼠标悬浮放大图片](http://www.laispace.com/xiaospace/demo/2012-10-25/magnifypictures.html \"鼠标悬浮放大图片预览\")\n\n&nbsp;\n\n5.[可编辑的表格](http://www.laispace.com/xiaospace/demo/2012-10-25/editableTable.html \"可编辑的表格\")","slug":"2012-10-25-几个小练习","updated":1418908898000,"excerpt":"","_id":"jpym8uswjy9t6z2m","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012-10-26-下拉菜单和标签页效果","id":136,"categories":["casje7dbzdekawgu"],"date":1351270543000,"tags":[],"content":"<p>实现了简单的功能，CSS还未优化。</p>\n<p>1.纵向和横向下拉菜单，<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-26/1.html\" title=\"下拉菜单\" target=\"_blank\" rel=\"external\">demo/2012-10-26/1.html</a></p>\n<p>是个二级菜单，多级菜单原理相同，按需要再制作。</p>\n<p>2.标签页效果，<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-26/2.html\" title=\"标签页效果\" target=\"_blank\" rel=\"external\">demo/2012-10-26/2.html</a></p>\n<p>看似简单，但细节倒是不少。</p>\n<p>&nbsp;</p>\n<p>目前学习jquery还很吃力，但一定得坚持多做练习！</p>\n","source":"_posts/2012-10-26-下拉菜单和标签页效果.md","raw":"title: 2012-10-26-下拉菜单和标签页效果\nid: 136\ncategories:\n  - 每日一发\ndate: 2012-10-27 00:55:43\ntags:\n---\n\n实现了简单的功能，CSS还未优化。\n\n1.纵向和横向下拉菜单，[demo/2012-10-26/1.html](http://www.laispace.com/xiaospace/demo/2012-10-26/1.html \"下拉菜单\")\n\n是个二级菜单，多级菜单原理相同，按需要再制作。\n\n2.标签页效果，[demo/2012-10-26/2.html](http://www.laispace.com/xiaospace/demo/2012-10-26/2.html \"标签页效果\")\n\n看似简单，但细节倒是不少。\n\n&nbsp;\n\n目前学习jquery还很吃力，但一定得坚持多做练习！","slug":"2012-10-26-下拉菜单和标签页效果","updated":1418908898000,"excerpt":"","_id":"mlgraisrki2rdzy0","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012-10-29-光标悬浮时其他区域变暗","id":146,"categories":["casje7dbzdekawgu"],"date":1351530389000,"tags":[],"content":"<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/10/2012-10-30_0056361.png\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/10/2012-10-30_0056361.png\" alt=\"\" title=\"2012-10-30_005636\"></a></p>\n<p>光标悬浮时显示figcaption图片说明，并将其余图片变暗，<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-29/1.html\" target=\"_blank\" rel=\"external\">demo</a></p>\n","source":"_posts/2012-10-29-光标悬浮时其他区域变暗.md","raw":"title: 2012-10-29-光标悬浮时其他区域变暗\nid: 146\ncategories:\n  - 每日一发\ndate: 2012-10-30 01:06:29\ntags:\n---\n\n[![](http://www.laispace.com/wp-content/uploads/2012/10/2012-10-30_0056361.png \"2012-10-30_005636\")](http://www.laispace.com/wp-content/uploads/2012/10/2012-10-30_0056361.png)\n\n光标悬浮时显示figcaption图片说明，并将其余图片变暗，[demo](http://www.laispace.com/xiaospace/demo/2012-10-29/1.html)","slug":"2012-10-29-光标悬浮时其他区域变暗","updated":1418908898000,"excerpt":"","_id":"kgjb7sii70v4blad","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012-10-30-CSS3写动态进度条","id":150,"categories":["casje7dbzdekawgu"],"date":1351617192000,"tags":[],"content":"<p>1.进度条效果</p>\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010836.png\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010836-300x199.png\" alt=\"\" title=\"2012-10-31_010836\"></a></p>\n<p>在一个div内包含空的span元素，通过CSS3来控制这个属性的背景以及宽度，就写出了进度条的效果，页面加载时进度条滚动使用的新属性animation并自定义了关键帧，<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-30/1.html\" target=\"_blank\" rel=\"external\">demo</a></p>\n<p>&nbsp;</p>\n<p>2.chrome云语音输入</p>\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010923.png\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010923.png\" alt=\"\" title=\"2012-10-31_010923\"></a></p>\n<p>只能在webkit内核的浏览器中使用，貌似是使用了谷歌的云语音功能，但是语音识别效果并不理想额，<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-30/2.html\" target=\"_blank\" rel=\"external\">demo</a></p>\n","source":"_posts/2012-10-30-CSS3写动态进度条.md","raw":"title: 2012-10-30-CSS3写动态进度条\nid: 150\ncategories:\n  - 每日一发\ndate: 2012-10-31 01:13:12\ntags:\n---\n\n1.进度条效果\n\n[![](http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010836-300x199.png \"2012-10-31_010836\")](http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010836.png)\n\n在一个div内包含空的span元素，通过CSS3来控制这个属性的背景以及宽度，就写出了进度条的效果，页面加载时进度条滚动使用的新属性animation并自定义了关键帧，[demo](http://www.laispace.com/xiaospace/demo/2012-10-30/1.html)\n\n&nbsp;\n\n2.chrome云语音输入\n\n[![](http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010923.png \"2012-10-31_010923\")](http://www.laispace.com/wp-content/uploads/2012/10/2012-10-31_010923.png)\n\n只能在webkit内核的浏览器中使用，貌似是使用了谷歌的云语音功能，但是语音识别效果并不理想额，[demo](http://www.laispace.com/xiaospace/demo/2012-10-30/2.html)","slug":"2012-10-30-CSS3写动态进度条","updated":1418908898000,"excerpt":"","_id":"cc0pcoldq8qj8owd","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012-10-31-动态划出窗口信息","id":155,"categories":["casje7dbzdekawgu"],"date":1351700774000,"tags":[],"content":"<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-01_002252.png\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-01_002252.png\" alt=\"\" title=\"2012-11-01_002252\"></a></p>\n<p>放在个人主页上，点击LaiXiaoLai后滑出窗口，显示个人信息，滑出窗口右下角的【收起】，收回窗口，可在这个窗口上放大量信息，并且因为预加载，打开时一般已经加载完毕，<a href=\"http://www.laispace.com/xiaospace/demo/2012-10-31/1.html\" target=\"_blank\" rel=\"external\">demo</a></p>\n","source":"_posts/2012-10-31-动态划出窗口信息.md","raw":"title: 2012-10-31-动态划出窗口信息\nid: 155\ncategories:\n  - 每日一发\ndate: 2012-11-01 00:26:14\ntags:\n---\n\n[![](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-01_002252.png \"2012-11-01_002252\")](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-01_002252.png)\n\n放在个人主页上，点击LaiXiaoLai后滑出窗口，显示个人信息，滑出窗口右下角的【收起】，收回窗口，可在这个窗口上放大量信息，并且因为预加载，打开时一般已经加载完毕，[demo](http://www.laispace.com/xiaospace/demo/2012-10-31/1.html)","slug":"2012-10-31-动态划出窗口信息","updated":1418908898000,"excerpt":"","_id":"7misobmoksiu9xhd","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012-11-03-网页中间弹出文本框","id":164,"categories":["casje7dbzdekawgu"],"date":1351960579000,"tags":[],"content":"<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-04_002723.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-04_002723-300x194.jpg\" alt=\"\" title=\"2012-11-04_002723\"></a></p>\n<p>&nbsp;</p>\n<p>核心代码是：</p>\n<p>$(“#button”).click(function(){<br>var curwidth = document.body.scrollWidth;//获得当前屏幕可见部分的宽和高<br>var curheight = document.body.scrollHeight;//思考用了哪种高宽！<br>var tipswidth = $(“.tips”).width(); //获得通知栏的宽和高<br>var tipsheight = $(“.tips”).height();<br>var left = (curwidth - tipswidth) / 2 ; //计算通知栏应在的位置<br>var top = (curheight - tipsheight) / 2 ;<br>$(“.tips”).css(“left”,left);<br>$(“.tips”).css(“top”,top);</p>\n<p>$(“.tips”).fadeTo(4000,1).delay(5000).fadeTo(3000,0);<br>});<br>});</p>\n<p>&nbsp;</p>\n<p>各种宽度高度，不一一allert加上草稿纸上多加画画，还真搞不懂分不清：</p>\n<p>网页可见区域宽： document.body.clientWidth<br>网页可见区域高： document.body.clientHeight<br>网页可见区域宽： document.body.offsetWidth (包括边线的宽)<br>网页可见区域高： document.body.offsetHeight (包括边线的高)<br>网页正文全文宽： document.body.scrollWidth<br>网页正文全文高： document.body.scrollHeight<br>网页被卷去的高： document.body.scrollTop<br>网页被卷去的左： document.body.scrollLeft<br>网页正文部分上： window.screenTop<br>网页正文部分左： window.screenLeft<br>屏幕分辨率的高： window.screen.height<br>屏幕分辨率的宽： window.screen.width<br>屏幕可用工作区高度： window.screen.availHeight<br>屏幕可用工作区宽度： window.screen.availWidth</p>\n<p>CSS3很强大，能做出很炫的效果。</p>\n<p>点击按钮就可以弹出像信封的提示框，见<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-03/1.html\" target=\"_blank\" rel=\"external\">Demo</a>.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n","source":"_posts/2012-11-03-网页中间弹出文本框.md","raw":"title: 2012-11-03-网页中间弹出文本框\nid: 164\ncategories:\n  - 每日一发\ndate: 2012-11-04 00:36:19\ntags:\n---\n\n[![](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-04_002723-300x194.jpg \"2012-11-04_002723\")](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-04_002723.jpg)\n\n&nbsp;\n\n核心代码是：\n\n$(\"#button\").click(function(){\nvar curwidth = document.body.scrollWidth;//获得当前屏幕可见部分的宽和高\nvar curheight = document.body.scrollHeight;//思考用了哪种高宽！\nvar tipswidth = $(\".tips\").width(); //获得通知栏的宽和高\nvar tipsheight = $(\".tips\").height();\nvar left = (curwidth - tipswidth) / 2 ; //计算通知栏应在的位置\nvar top = (curheight - tipsheight) / 2 ;\n$(\".tips\").css(\"left\",left);\n$(\".tips\").css(\"top\",top);\n\n$(\".tips\").fadeTo(4000,1).delay(5000).fadeTo(3000,0);\n});\n});\n\n&nbsp;\n\n各种宽度高度，不一一allert加上草稿纸上多加画画，还真搞不懂分不清：\n\n网页可见区域宽： document.body.clientWidth\n网页可见区域高： document.body.clientHeight\n网页可见区域宽： document.body.offsetWidth (包括边线的宽)\n网页可见区域高： document.body.offsetHeight (包括边线的高)\n网页正文全文宽： document.body.scrollWidth\n网页正文全文高： document.body.scrollHeight\n网页被卷去的高： document.body.scrollTop\n网页被卷去的左： document.body.scrollLeft\n网页正文部分上： window.screenTop\n网页正文部分左： window.screenLeft\n屏幕分辨率的高： window.screen.height\n屏幕分辨率的宽： window.screen.width\n屏幕可用工作区高度： window.screen.availHeight\n屏幕可用工作区宽度： window.screen.availWidth\n\nCSS3很强大，能做出很炫的效果。\n\n点击按钮就可以弹出像信封的提示框，见[Demo](http://www.laispace.com/xiaospace/demo/2012-11-03/1.html).\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;","slug":"2012-11-03-网页中间弹出文本框","updated":1418908898000,"excerpt":"","_id":"empqq2el28cxfzpx","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012-11-05-瀑布流效果","id":169,"categories":["casje7dbzdekawgu"],"date":1352130048000,"tags":[],"content":"<p>瀑布流是众多流行网站使用的一种技术，有几种方法实现。</p>\n<p>方法1：<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-05/1.html\" target=\"_blank\" rel=\"external\">等宽高块浮动</a></p>\n<p>&nbsp;</p>\n<p>方法2：<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-05/2.html\" target=\"_blank\" rel=\"external\">等宽列浮动</a></p>\n<p>&nbsp;</p>\n<p>方法3：<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-05/3.html\" target=\"_blank\" rel=\"external\">CSS3定义</a></p>\n<p>&nbsp;</p>\n<p>方法4：<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-05/4.html\" target=\"_blank\" rel=\"external\">绝对定位</a></p>\n<p>&nbsp;</p>\n<p>CSS3<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-05/5.html\" target=\"_blank\" rel=\"external\">瀑布流效果</a></p>\n<p>&nbsp;</p>\n<p>来自<a href=\"http://blogread.cn/it/article.php?id=4337&amp;f=sa\" target=\"_blank\" rel=\"external\">http://blogread.cn/it/article.php?id=4337&amp;f=sa</a></p>\n<p><a href=\"http://blogread.cn/it/article.php?id=5804\" target=\"_blank\" rel=\"external\">http://blogread.cn/it/article.php?id=5804</a></p>\n","source":"_posts/2012-11-05-瀑布流效果.md","raw":"title: 2012-11-05-瀑布流效果\nid: 169\ncategories:\n  - 每日一发\ndate: 2012-11-05 23:40:48\ntags:\n---\n\n瀑布流是众多流行网站使用的一种技术，有几种方法实现。\n\n方法1：[等宽高块浮动](http://www.laispace.com/xiaospace/demo/2012-11-05/1.html)\n\n&nbsp;\n\n方法2：[等宽列浮动](http://www.laispace.com/xiaospace/demo/2012-11-05/2.html)\n\n&nbsp;\n\n方法3：[CSS3定义](http://www.laispace.com/xiaospace/demo/2012-11-05/3.html)\n\n&nbsp;\n\n方法4：[绝对定位](http://www.laispace.com/xiaospace/demo/2012-11-05/4.html)\n\n&nbsp;\n\nCSS3[瀑布流效果](http://www.laispace.com/xiaospace/demo/2012-11-05/5.html)\n\n&nbsp;\n\n来自[http://blogread.cn/it/article.php?id=4337&amp;f=sa](http://blogread.cn/it/article.php?id=4337&amp;f=sa)\n\n[http://blogread.cn/it/article.php?id=5804](http://blogread.cn/it/article.php?id=5804)","slug":"2012-11-05-瀑布流效果","updated":1418908898000,"excerpt":"","_id":"u5zn12fn41yagq59","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012-11-06-仿Win8界面","id":182,"categories":["casje7dbzdekawgu"],"date":1352216737000,"tags":[],"content":"<p>喜欢win8的界面风格-简约。<a href=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-06_233545.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-06_233545-300x192.jpg\" alt=\"\" title=\"2012-11-06_233545\"></a></p>\n<p>自己照着图片写了个简单的仿页面，代码不是最好的，但效果还是不错的，<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-06/1.html\" target=\"_blank\" rel=\"external\">demo</a></p>\n<p>&nbsp;</p>\n<p>一个网友推荐了一个写好的<a href=\"http://win8dh.com/\" target=\"_blank\" rel=\"external\">仿页面</a>，有时间再好好琢磨学习吧。</p>\n","source":"_posts/2012-11-06-仿Win8界面.md","raw":"title: 2012-11-06-仿Win8界面\nid: 182\ncategories:\n  - 每日一发\ndate: 2012-11-06 23:45:37\ntags:\n---\n\n喜欢win8的界面风格-简约。[![](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-06_233545-300x192.jpg \"2012-11-06_233545\")](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-06_233545.jpg)\n\n自己照着图片写了个简单的仿页面，代码不是最好的，但效果还是不错的，[demo](http://www.laispace.com/xiaospace/demo/2012-11-06/1.html)\n\n&nbsp;\n\n一个网友推荐了一个写好的[仿页面](http://win8dh.com/)，有时间再好好琢磨学习吧。","slug":"2012-11-06-仿Win8界面","updated":1418908898000,"excerpt":"","_id":"janpuveuf0d5qiwj","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012-11-11-CSS3几个新属性的测试","id":193,"categories":["casje7dbzdekawgu"],"date":1352643247000,"tags":[],"content":"<p>CSS3中过渡、圆角、阴影等的测试，只在chrome下测试，没写其他浏览器下的Hack代码。</p>\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-11_220357.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-11_220357-279x300.jpg\" alt=\"\" title=\"2012-11-11_220357\"></a></p>\n<div> 核心代码：</div><br><div><br><br>.ease{<br>-webkit-transition:all 4s ease;<br>}<br><br>.ease-in{<br>-webkit-transition:all 4s ease-in;<br>}<br><br>.ease-out{<br>-webkit-transition:all 4s ease-out;<br>}<br><br>.ease-in-out{<br>-webkit-transition:all 4s ease-in-out;<br>}<br><br>.linear{<br>-webkit-transition:all 4s linear;<br>}<br><br>#trs:hover .trs{<br>margin-left: 400px;/<em>向右偏移</em>/<br>-webkit-transform:rotate(25deg);/<em>旋转</em>/<br>color:red;/<em>更换字体颜色</em>/<br>font-size: 1.5em;/<em>更换字体大小</em>/<br>background:-webkit-gradient(linear, left bottom, left top,color-stop(0, #b6ebf7), color-stop(0.80, #fff));/<em>背景平滑过渡</em>/<br>border-radius: 25px;/<em>增加圆角</em>/<br>}<br><br>&nbsp;<br><br><a href=\"http://www.laispace.com/xiaospace/demo/2012-11-11/1.html\" target=\"_blank\" rel=\"external\">demo</a><br><br></div>","source":"_posts/2012-11-11-CSS3几个新属性的测试.md","raw":"title: 2012-11-11-CSS3几个新属性的测试\nid: 193\ncategories:\n  - 每日一发\ndate: 2012-11-11 22:14:07\ntags:\n---\n\nCSS3中过渡、圆角、阴影等的测试，只在chrome下测试，没写其他浏览器下的Hack代码。\n\n[![](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-11_220357-279x300.jpg \"2012-11-11_220357\")](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-11_220357.jpg)\n<div> 核心代码：</div>\n<div>\n\n.ease{\n-webkit-transition:all 4s ease;\n}\n\n.ease-in{\n-webkit-transition:all 4s ease-in;\n}\n\n.ease-out{\n-webkit-transition:all 4s ease-out;\n}\n\n.ease-in-out{\n-webkit-transition:all 4s ease-in-out;\n}\n\n.linear{\n-webkit-transition:all 4s linear;\n}\n\n#trs:hover .trs{\nmargin-left: 400px;/*向右偏移*/\n-webkit-transform:rotate(25deg);/*旋转*/\ncolor:red;/*更换字体颜色*/\nfont-size: 1.5em;/*更换字体大小*/\nbackground:-webkit-gradient(linear, left bottom, left top,color-stop(0, #b6ebf7), color-stop(0.80, #fff));/*背景平滑过渡*/\nborder-radius: 25px;/*增加圆角*/\n}\n\n&nbsp;\n\n[demo](http://www.laispace.com/xiaospace/demo/2012-11-11/1.html)\n\n</div>","slug":"2012-11-11-CSS3几个新属性的测试","updated":1418908898000,"excerpt":"","_id":"pwbvozr7d23e0oay","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012-11-12-CSS剪贴图像的几种方法","id":198,"categories":["casje7dbzdekawgu"],"date":1352732924000,"tags":[],"content":"<p>在不改变原来图片大小的情况下，剪切有几个方法（每种方法都要把img包在一个元素内来定位）：</p>\n<p>1.用margin给img切图</p>\n<p>&lt;style&gt;<br>p{<br>width:400px;<br>height:300px;<br>margin-right:20px;<br>border: 5px lightblue solid;<br>float: left;<br>overflow: hidden;/<em>设置溢出隐藏</em>/<br>}<br>img#usemargin{<br>margin:-40px -40px -40px -40px;<br>}<br>&lt;/style&gt;</p>\n<p><a href=\"http://www.laispace.com/xiaospace/demo/2012-11-12/1.html\" target=\"_blank\" rel=\"external\">demo1</a></p>\n<p>2.用absolute给img切图</p>\n<p>&lt;style&gt;<br>p{<br>width:400px;<br>height:300px;<br>margin-right:20px;<br>border: 5px lightblue solid;<br>float: left;<br>overflow: hidden;/<em>设置溢出隐藏,必需</em>/<br>position: relative;/<em>必需！</em>/<br>}<br>img#useabsolute{<br>position:absolute;/<em>必需！</em>/<br>top:-40px;<br>right:-50px;<br>}<br>&lt;/style&gt;</p>\n<p><a href=\"http://www.laispace.com/xiaospace/demo/2012-11-12/2.html\" target=\"_blank\" rel=\"external\">demo2</a></p>\n<p>3.用clip给img切图</p>\n<p>&lt;style&gt;<br>p{<br>width:400px;<br>height:300px;<br>margin-right:20px;<br>border: 5px lightblue solid;<br>float: left;</p>\n<p>position: relative;/<em>必需！</em>/<br>}<br>img#useclip{<br>position:absolute;/<em>必需！</em>/<br>clip: rect(20px 225px 200px 55px);</p>\n<p>}<br>img#withoutclip{<br>opacity:0.4;<br>}<br>&lt;/style&gt;</p>\n<p><a href=\"http://www.laispace.com/xiaospace/demo/2012-11-12/3.html\" target=\"_blank\" rel=\"external\">demo3</a></p>\n<p>4.用clip给背景切图</p>\n<p>&lt;style&gt;</p>\n<p>div{<br>float:left;<br>margin-right: 20px;<br>}<br>div#noclip{<br>background:url(2.jpg) no-repeat;<br>width:400px;<br>height:300px;<br>opacity:0.5;</p>\n<p>}<br>div#clip{<br>background:url(2.jpg);<br>width:400px;<br>height:300px;<br>text-align: center;<br>line-height: 130px;<br>border:1px solid white;<br>opacity:1;<br>/<em>使用clip的条件是position:absolute，父元素则为position:relative</em>/<br>position: absolute;<br>clip:rect(50px 250px 150px 50px);<br>/<em>注意，在IE8以及其以下的版本，在使用clip属性时需要注意语法：clip (top,right,bottom,left);</em>/<br>}</p>\n<p>&lt;/style&gt;</p>\n<p><a href=\"http://www.laispace.com/xiaospace/demo/2012-11-12/4.html\" target=\"_blank\" rel=\"external\">demo4</a></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>5.显然，最好用的就是clip方法了</p>\n","source":"_posts/2012-11-12-CSS剪贴图像的几种方法 .md","raw":"title: 2012-11-12-CSS剪贴图像的几种方法\nid: 198\ncategories:\n  - 每日一发\ndate: 2012-11-12 23:08:44\ntags:\n---\n\n在不改变原来图片大小的情况下，剪切有几个方法（每种方法都要把img包在一个元素内来定位）：\n\n1.用margin给img切图\n\n&lt;style&gt;\np{\nwidth:400px;\nheight:300px;\nmargin-right:20px;\nborder: 5px lightblue solid;\nfloat: left;\noverflow: hidden;/*设置溢出隐藏*/\n}\nimg#usemargin{\nmargin:-40px -40px -40px -40px;\n}\n&lt;/style&gt;\n\n[demo1](http://www.laispace.com/xiaospace/demo/2012-11-12/1.html)\n\n2.用absolute给img切图\n\n&lt;style&gt;\np{\nwidth:400px;\nheight:300px;\nmargin-right:20px;\nborder: 5px lightblue solid;\nfloat: left;\noverflow: hidden;/*设置溢出隐藏,必需*/\nposition: relative;/*必需！*/\n}\nimg#useabsolute{\nposition:absolute;/*必需！*/\ntop:-40px;\nright:-50px;\n}\n&lt;/style&gt;\n\n[demo2](http://www.laispace.com/xiaospace/demo/2012-11-12/2.html)\n\n3.用clip给img切图\n\n&lt;style&gt;\np{\nwidth:400px;\nheight:300px;\nmargin-right:20px;\nborder: 5px lightblue solid;\nfloat: left;\n\nposition: relative;/*必需！*/\n}\nimg#useclip{\nposition:absolute;/*必需！*/\nclip: rect(20px 225px 200px 55px);\n\n}\nimg#withoutclip{\nopacity:0.4;\n}\n&lt;/style&gt;\n\n[demo3](http://www.laispace.com/xiaospace/demo/2012-11-12/3.html)\n\n4.用clip给背景切图\n\n&lt;style&gt;\n\ndiv{\nfloat:left;\nmargin-right: 20px;\n}\ndiv#noclip{\nbackground:url(2.jpg) no-repeat;\nwidth:400px;\nheight:300px;\nopacity:0.5;\n\n}\ndiv#clip{\nbackground:url(2.jpg);\nwidth:400px;\nheight:300px;\ntext-align: center;\nline-height: 130px;\nborder:1px solid white;\nopacity:1;\n/*使用clip的条件是position:absolute，父元素则为position:relative*/\nposition: absolute;\nclip:rect(50px 250px 150px 50px);\n/*注意，在IE8以及其以下的版本，在使用clip属性时需要注意语法：clip (top,right,bottom,left);*/\n}\n\n&lt;/style&gt;\n\n[demo4](http://www.laispace.com/xiaospace/demo/2012-11-12/4.html)\n\n&nbsp;\n\n&nbsp;\n\n5.显然，最好用的就是clip方法了","slug":"2012-11-12-CSS剪贴图像的几种方法 ","updated":1418908898000,"excerpt":"","_id":"71mvr0y93g0k2jgb","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012-11-13-网页div浮动布局CSS3属性尝试","id":201,"categories":["casje7dbzdekawgu"],"date":1352826626000,"tags":[],"content":"<p>闲来没事，动手用float来布局网页，使用了不少CSS3的新属性，效果挺不错的。</p>\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-14_010118.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/11/2012-11-14_010118-300x196.jpg\" alt=\"\" title=\"2012-11-14_010118\"></a></p>\n<p>没有好好花时间去做Hack，就先这样吧，<a href=\"http://www.laispace.com/xiaospace/demo/2012-11-13/1.html\" target=\"_blank\" rel=\"external\">demo</a></p>\n","source":"_posts/2012-11-13-网页div浮动布局CSS3属性尝试.md","raw":"title: 2012-11-13-网页div浮动布局CSS3属性尝试\nid: 201\ncategories:\n  - 每日一发\ndate: 2012-11-14 01:10:26\ntags:\n---\n\n闲来没事，动手用float来布局网页，使用了不少CSS3的新属性，效果挺不错的。\n\n[![](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-14_010118-300x196.jpg \"2012-11-14_010118\")](http://www.laispace.com/wp-content/uploads/2012/11/2012-11-14_010118.jpg)\n\n没有好好花时间去做Hack，就先这样吧，[demo](http://www.laispace.com/xiaospace/demo/2012-11-13/1.html)","slug":"2012-11-13-网页div浮动布局CSS3属性尝试","updated":1418908898000,"excerpt":"","_id":"3mto2sgk8k71wrba","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012-12-仿学校官网主页","id":264,"categories":["casje7dbzdekawgu"],"date":1356268244000,"tags":[],"content":"<p>仿SCUT主页，没有精细到每一个px，目的是练习布局。</p>\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/12/2012-12-23_210612.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/12/2012-12-23_210612.jpg\" alt=\"\" title=\"2012-12-23_210612\"></a></p>\n<p>其中下拉菜单用纯CSS写的，还尝试用了Sprite图片，写起来还很生疏，需要多加练习。</p>\n<p>代码没有优化，因为赶着复习期末考试了，就先放着吧，上<a href=\"http://www.laispace.com/xiaospace/demo/2012-12-SCUT_index/\" target=\"_blank\" rel=\"external\">demo</a></p>\n","source":"_posts/2012-12-仿学校官网主页.md","raw":"title: 2012-12-仿学校官网主页\nid: 264\ncategories:\n  - 每日一发\ndate: 2012-12-23 21:10:44\ntags:\n---\n\n仿SCUT主页，没有精细到每一个px，目的是练习布局。\n\n[![](http://www.laispace.com/wp-content/uploads/2012/12/2012-12-23_210612.jpg \"2012-12-23_210612\")](http://www.laispace.com/wp-content/uploads/2012/12/2012-12-23_210612.jpg)\n\n其中下拉菜单用纯CSS写的，还尝试用了Sprite图片，写起来还很生疏，需要多加练习。\n\n代码没有优化，因为赶着复习期末考试了，就先放着吧，上[demo](http://www.laispace.com/xiaospace/demo/2012-12-SCUT_index/)","slug":"2012-12-仿学校官网主页","updated":1418908898000,"excerpt":"","_id":"439n5uo6q2tlrgsf","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012-12-新练习","id":217,"categories":["casje7dbzdekawgu"],"date":1354721319000,"tags":[],"content":"<p>最近比较忙，没有坚持每日一练了，但是看了不少书，理论知识长了不少发现写起东西来也比较顺畅了，以后写练习以月为一个单位汇总吧。</p>\n<p>1.纯CSS3或JQ实现文本框动态下拉，<a href=\"http://www.laispace.com/xiaospace/demo/2012-12/%E7%BA%AFCSS3%E5%92%8CJQ%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E6%A1%86%E5%8A%A8%E6%80%81%E4%B8%8B%E6%8B%89%20-%20%E5%89%AF%E6%9C%AC.html\" target=\"_blank\" rel=\"external\">demo</a></p>\n<p>2.写了个小页面，用来记录我的IDP计划，<a href=\"http://www.laispace.com/xiaospace/demo/2012-12/idp.html\" target=\"_blank\" rel=\"external\">demo</a></p>\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/12/2012-12-05_232639.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/12/2012-12-05_232639.jpg\" alt=\"\" title=\"2012-12-05_232639\"></a></p>\n","source":"_posts/2012-12-新练习 .md","raw":"title: 2012-12-新练习\nid: 217\ncategories:\n  - 每日一发\ndate: 2012-12-05 23:28:39\ntags:\n---\n\n最近比较忙，没有坚持每日一练了，但是看了不少书，理论知识长了不少发现写起东西来也比较顺畅了，以后写练习以月为一个单位汇总吧。\n\n1.纯CSS3或JQ实现文本框动态下拉，[demo](http://www.laispace.com/xiaospace/demo/2012-12/%E7%BA%AFCSS3%E5%92%8CJQ%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E6%A1%86%E5%8A%A8%E6%80%81%E4%B8%8B%E6%8B%89%20-%20%E5%89%AF%E6%9C%AC.html)\n\n2.写了个小页面，用来记录我的IDP计划，[demo](http://www.laispace.com/xiaospace/demo/2012-12/idp.html)\n\n[![](http://www.laispace.com/wp-content/uploads/2012/12/2012-12-05_232639.jpg \"2012-12-05_232639\")](http://www.laispace.com/wp-content/uploads/2012/12/2012-12-05_232639.jpg)","slug":"2012-12-新练习 ","updated":1418908898000,"excerpt":"","_id":"fabc1017baidxr08","comments":true,"layout":"post","photos":[],"link":""},{"title":"2012文教夏令营","id":51,"categories":["9wpmord5537fjtil"],"date":1344555179000,"tags":[],"content":"<p><strong><span style=\"font-family: 宋体;\">   营会终于告一段落了，翻看了自七月以来的所有工作备忘、邮件。此时回顾，文教你又锻炼了我。回想电话联络学生的场景、营会四天三夜的每个细节，以及我坚持在写的营会日记，突然感觉自己矫情了。</span>**</strong><span style=\"font-family: 宋体;\">   </span>**</p>\n<p><div align=\"left\"><strong><span style=\"font-family: 宋体;\">   早上整理了自己的日记、你们的反馈、你们的留言条、我们的照片，然后，就不想说然后了。</span></strong></div></p>\n<p><div align=\"left\"><strong>有太多的话要说，但打死我也不承认我是多情的 - - ！</strong></div></p>\n<p><div align=\"left\"><strong><span style=\"font-family: 宋体;\">不说太多，留给自己慢慢体会。</span></strong></div></p>\n<p><div align=\"left\"><strong><span style=\"font-family: 宋体;\">   以下，是你们留给我的宝贵财富，感谢文教，更感谢你们！</span></strong></div></p>\n<p><div align=\"left\"><strong><span style=\"font-family: 宋体;\">别忘了来华工找四两哥喝汤啊！！！！！<br></span></strong></div></p>\n<p><div align=\"left\"><strong> </strong></div></p>\n<p><div align=\"left\"></div></p>\n<p><div align=\"left\"><strong><span style=\"font-family: 宋体; font-size: small;\">Part1 文教版</span></strong></div></p>\n<p><div align=\"left\"><span style=\"font-family: 宋体; font-size: small;\"><br></span></div></p>\n<div align=\"left\">\n\n<p>念雯</p>\n<p>世界很大，我想要的很少。文教，谢谢！</p>\n<p>&nbsp;</p>\n<p>清燕</p>\n<p>文教的成员，I love you ！</p>\n<p>&nbsp;</p>\n<p>宝新</p>\n<p>文教好！也祝越办越好！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>嘉奇</p>\n<p>因文教而聚，因友谊而欢，因信仰而别。</p>\n<p>&nbsp;</p>\n<p>海青</p>\n<p>希望文教越来越好！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>第一次参加文教，开心！愿文教的爱能绵延不绝。这次很Happpy!真的！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>智韬</p>\n<p>我还会再回来的！</p>\n<p>&nbsp;</p>\n<p>念祖</p>\n<p>希望文教带领更多的人往前冲冲冲！</p>\n<p>&nbsp;</p>\n<p>你们辛苦啦，谢谢你们！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>第一次参加集体活动就是文教了。忘不了，很开心！</p>\n<p>&nbsp;</p>\n<p>我爱文教！</p>\n<p>&nbsp;</p>\n<p>深深祝愿，一切安好！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>静周</p>\n<p>拍了很多照片留念，我成人路上的珍贵纪念。经历了一些事情，才会慢慢成长。谢谢文教，辛苦了喵，师兄师姐们！</p>\n<p>&nbsp;</p>\n<p>婷婷</p>\n<p>我的很多第一次尝试在文教，所以在文教我成长了自己。感谢文教给了我机会，也为我自己能抓住机会而鼓掌。与文教的缘分，待续……</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>清燕</p>\n<p>那是一种最真诚的交流，一种心与心之间的交流，只可意会不可言传。睡觉时有种叫 “幸福” 的暖流在我心中流动。</p>\n<p>&nbsp;</p>\n<p>慧敏</p>\n<p>我却收获了欢笑，感受到了文教大家庭的温暖。非常感谢这次营会，真的！</p>\n<p>&nbsp;</p>\n<p>大勇</p>\n<p>那一刻，我感觉彻底放开了自我，不再有腼腆和不自信的束缚，我的前面不再是巨石，我感觉到了友情，感觉到了自己突破的见证，感觉到了表现自己的欲望……</p>\n<p>这次文教夏令营，在这种轻松愉快的氛围，在大家的热情鼓励和帮助下，我终于慢慢走出自己的阴影，释放自我。</p>\n<p>&nbsp;</p>\n<p>育广</p>\n<p>因为文教而聚在了一起，大家毫无嫌隙地、毫无顾忌地玩在一起，那一个个场景，实在令人难忘。</p>\n<p>&nbsp;</p>\n<p>碧莲</p>\n<p>I know everyone !</p>\n<p>I see everyone !</p>\n<p>I hear everyone !</p>\n<p>I feel everyone !</p>\n<p>I love everyone !</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>蒋清</p>\n<p>总之总之，参加文教我不会后悔，收获到的如江水般我无法说完。我很喜欢文教，能够加入我觉得意义不在单纯的奖学、助学金。文教传承的感恩、友谊我是真的明白、体会。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>钊漩</p>\n<p>在这次营会中，我结识了很多朋友。我想如果没有参加这个营会，我与他们可能永远没有交集。能够认识他们，我感到非常高兴。</p>\n<p>&nbsp;</p>\n<p>刘艳</p>\n<p>对小赖学长说过，面对未知，人总会有一种莫名的恐惧感。我很害怕那些无法由自己掌控的未来，但文教却告诉我：未知并不可怕，可怕的是那颗将自己尘封的心。我会慢慢学会成长，学会面对，为生活加油喝彩。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>淼锋</p>\n<p>美好的时光总是容易让人怀念，不过还好我拍下了很多照片，记住了每一个开心的笑脸。</p>\n<p>很爱过去的充满欢笑的这几天。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>凤媚</p>\n<p>文教给我的总体印象是很好的，因为她是由很多有心人组织的大家庭，而且她不仅可以在物质上帮助需要的人，更多的是从精神上鼓励他们，使得学生们能首先从心理上战胜自己，超越自己。而且文教让我们明白了 “心连心” 的重要性，做事不能太功利，有时也要做一些无回报的活动，因为都需要我一份爱心。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>海青</p>\n<p>希望师兄师姐们都要好好的，永远幸福，forever love!!</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>维业</p>\n<p>我相信，相信文教会壮大，会越来越好。每一次举办都会让文教越来越强，我也相信文教的精神、爱会永远传承。没有过不去的坎，有了爱，世界会更加美好。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>佳慧</p>\n<p>文教真心能做到这样，非常不容易，她让一群不甚熟悉的人High得手舞足蹈，还有谁有这个魔力？</p>\n<p>文教给予我们的有物质的，更重要的，在于精神。无形之中，她已经播下了许许多多的种子。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>思征</p>\n<p>营会越办越好！</p>\n<p>&nbsp;</p>\n<p>清菊</p>\n<p>其实还有很多想说的话，但我更想让它们留在我的内心，永远，永远。</p>\n<p>念祖</p>\n<p>希望时光能停留，可惜，天下没有不散的宴席。</p>\n<p>&nbsp;</p>\n<p>翠芬</p>\n<p>从师兄师姐身上学到了很多正能量的东西，这使我个人也坚定了一些梦想。当然最大的收获就是认识了好多朋友 ······</p>\n<p>总之呢，真的非常喜欢这个活动。</p>\n<p>&nbsp;</p>\n<p>宝珠</p>\n<p>我喜欢这个大家庭，我想成为其中一员。</p>\n<p>&nbsp;</p>\n<p>海珠</p>\n<p>只有融入他们，才会真正地感受到温暖。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>杨州</p>\n<p>留下太多难以言表的记忆。</p>\n<p></p></div><p></p>\n<p><div align=\"left\">欢迎在评论中补充哦O(∩_∩)O~</div></p>\n<p><div align=\"left\"></div></p>\n<p><div align=\"left\"><a id=\"more\"></a></div></p>\n<p><div align=\"left\"></div></p>\n<p><div align=\"left\"></div></p>\n<div>\n\n<p>&nbsp;</p>\n<p><strong>Part2 小赖版</strong></p>\n<p></p></div><p></p>\n<div>\n\n<p>&nbsp;</p>\n<p>小赖  小赖！</p>\n<p>&nbsp;</p>\n<p></p></div><p></p>\n<p><div>清声学长，我超喜欢你上次的学习分享，我学到很多。</div></p>\n<div>\n\n<p>昨天我听了其他学姐学长说大学里并没有想象中那么好，很多事都会改变。</p>\n<p>但我依旧相信梦想，我会坚持自己的信仰。</p>\n<p>以后有什么困难，我都会麻烦你哦！</p>\n<p>这次营会，我不是不高兴而是在思考我今后的路。4次营会让我印象最深的就是你说的话！</p>\n<p>好吧，我们还会见面的。我希望下次见到你，你可以多笑笑，烦恼怕什么，活得开心才最重要。（嘉奇）</p>\n<p>&nbsp;</p>\n<p>小赖，有活动就Call me!（智韬）</p>\n<p>&nbsp;</p>\n<p>小赖哥，你讲话好有哲理啊，好多都很受用呢~祝你天天开心！（艳萍）</p>\n<p>&nbsp;</p>\n<p>小赖哥，很谢谢你的帮忙。说实话，你说的特别多话，让我很受益，我不知道怎么表达。但，这份特殊的爱，一直在心中。（蒋清）</p>\n<p>&nbsp;</p>\n<p>小赖学长，你这人很好！很健谈，又有组织能力！不过我觉得你不要在乎别人说你是否严肃，毕竟一个人的气质是天生的，那才是你的真性情！我们都要加油哦！（海青）</p>\n<p>&nbsp;</p>\n<p>呵呵，学长加油！营会办得越来越出色了！（思征）</p>\n<p>&nbsp;</p>\n<p>清声小赖子，居然忘了我是大麻人…太桑心了…我都还记得你是小留的。你好厉害，会变得更棒。潜力股哦…（玲志）</p>\n<p>&nbsp;</p>\n<p>赖小赖，你有才华，有能力，对有些情况有你独特的见解！</p>\n<p>两个字，“不错”！</p>\n<p>真是后生可 wei 啊,哈哈…（清燕）</p>\n<p>&nbsp;</p>\n<p>清声，小赖，师兄，同乡：很开心，很高兴，可以再见到你，再次成为朋友。你要加油，好好加油，祝福你。（婷婷）</p>\n<p>&nbsp;</p>\n<p>呼呼，赖小赖，好久不见了捏，莫名的感动啊！头发长了好帅啊！太有哲理的讲话，我喜欢！继续Open继续Smile，大学继续加油！（嘉宸）</p>\n<p>&nbsp;</p>\n<p>小赖，别再忘记点我名了！！！（宝珠）</p>\n<p>&nbsp;</p>\n<p>小赖学长，其实你也没有那么沉重啦。就是感觉你好像有点累。记得不要皱眉哦。开心哈！</p>\n<p>&nbsp;</p>\n<p>小赖，你经历好丰富，希望有机会能一睹你的风采！不要忘了我（菊珍）</p>\n<p>&nbsp;</p>\n<p>小赖，你辛苦了！我也要谢谢你，你让我明白了做人要有责任。</p>\n<p>&nbsp;</p>\n<p>清声，看你收那么多!真的不想再写给你！不过。你真的成熟又稳重，成长很多！以后想你自己跟我们讲你的成长故事！（反正我没听过）（小安妮）</p>\n<p>&nbsp;</p>\n<p>清声，哈哈，好像也叫你“声声”。这次，好样！（佳慧）</p>\n<p>&nbsp;</p>\n<p>小赖兄，你的主持很好，人是更好！你教会了我们很多。期待下次的见面。（家威）</p>\n<p>&nbsp;</p>\n<p>愿你有个灿烂的前程，获得幸福。</p>\n<p>&nbsp;</p>\n<p>小赖哥，我好爱你，嫁给我吧！我会一生一世守护你（大勇你这是恶心我嘛 - -！）</p>\n<p>&nbsp;</p>\n<p>小赖，真的好喜欢你啊！每次来文教你都会给我一些不同的感悟，崇拜你耶！喜欢你的那句话：有趣必有舍，有舍必有得。（习翔）</p>\n<p>&nbsp;</p>\n<p>看看！看看！看看！我又给你写了，因为你赖小赖哥于我意义不同，不常是因为你帮了我，而且在精神与一些做人的道理上，我学到了超多。</p>\n<p>&nbsp;</p>\n<p>小赖学长，To be honest，这次活动你组织的很不错。有机会把这些经验传授给我。</p>\n<p>&nbsp;</p>\n<p>不够自信，太严肃的赖小赖。此次，连我都觉得后面办的不错，就真的挺不错的了。以后，还有机会可以见面。期待…感谢…此次我学会了很多。（海珠）</p>\n<p>&nbsp;</p>\n<p>弟弟啊，恕我看到你的真人后，叫不出口“弟弟啊”。至于原因，你懂的…（姐姐？）</p>\n<p>&nbsp;</p>\n<p>清声，说实话，你真的很优秀，而且比我最初见你时又更成熟些了。加油O(∩_∩)O希望你以后能更加快乐、开心，做个阳光男孩。用于面对困境，是强者的表现。你是真正的强者。（叶茜）</p>\n<p>&nbsp;</p>\n<p>小赖哥，天降大任于斯人也。相信自己，未来会更好的，笑口常开哦！（维业）</p>\n<p>&nbsp;</p>\n<p>清声学长，我特别崇拜你。这次营会让我懂得一些道理，我希望今后你还是一样坚持自己的信仰。还有，虽然惨两天，但你的高度负责让我感动，但有些事要分给别人做，不要全揽给自己。虽然我也是这样，不过我在改咯！要相信自己，相信别人！</p>\n<p>&nbsp;</p>\n<p>笑起来的酒窝很好看</p>\n<p>&nbsp;</p>\n<p>小赖，谢谢。你是好人。（刘艳）</p>\n<p></p></div><p></p>\n<p><div></div></p>\n<p><div><strong>好吧，我承认，我很爱你们。</strong></div></p>\n<p><div><strong>但是，我打死也不说我很多情O(∩_∩)O~</strong></div></p>\n<p><div><strong>谢谢文教给我的这笔财富。</strong></div><br></p>\n<p><div></div><br></p>\n<p><div></div></p>\n<address><span style=\"color: #3366ff;\"><strong><a href=\"http://http://v.youku.com/v_show/id_XNDM4MTA5MDY0.html?f=17856494\" title=\"CCPS梅州营会纪念\" target=\"_blank\" rel=\"external\"><span style=\"color: #3366ff;\">点击观看2012文教梅州营会纪念视频</span></a></strong></span></address>","source":"_posts/2012文教夏令营.md","raw":"title: 2012文教夏令营\nid: 51\ncategories:\n  - 来思碑记\ndate: 2012-08-10 07:32:59\ntags:\n---\n\n**<span style=\"font-family: 宋体;\">   营会终于告一段落了，翻看了自七月以来的所有工作备忘、邮件。此时回顾，文教你又锻炼了我。回想电话联络学生的场景、营会四天三夜的每个细节，以及我坚持在写的营会日记，突然感觉自己矫情了。</span>****<span style=\"font-family: 宋体;\">   </span>**\n<div align=\"left\">**<span style=\"font-family: 宋体;\">   早上整理了自己的日记、你们的反馈、你们的留言条、我们的照片，然后，就不想说然后了。</span>**</div>\n<div align=\"left\">**有太多的话要说，但打死我也不承认我是多情的 - - ！**</div>\n<div align=\"left\">**<span style=\"font-family: 宋体;\">不说太多，留给自己慢慢体会。</span>**</div>\n<div align=\"left\">**<span style=\"font-family: 宋体;\">   以下，是你们留给我的宝贵财富，感谢文教，更感谢你们！</span>**</div>\n<div align=\"left\">**<span style=\"font-family: 宋体;\">别忘了来华工找四两哥喝汤啊！！！！！\n</span>**</div>\n<div align=\"left\">** **</div>\n<div align=\"left\"></div>\n<div align=\"left\">**<span style=\"font-family: 宋体; font-size: small;\">Part1 文教版</span>**</div>\n<div align=\"left\"><span style=\"font-family: 宋体; font-size: small;\">\n</span></div>\n<div align=\"left\">\n\n念雯\n\n世界很大，我想要的很少。文教，谢谢！\n\n&nbsp;\n\n清燕\n\n文教的成员，I love you ！\n\n&nbsp;\n\n宝新\n\n文教好！也祝越办越好！\n\n&nbsp;\n\n&nbsp;\n\n嘉奇\n\n因文教而聚，因友谊而欢，因信仰而别。\n\n&nbsp;\n\n海青\n\n希望文教越来越好！\n\n&nbsp;\n\n&nbsp;\n\n第一次参加文教，开心！愿文教的爱能绵延不绝。这次很Happpy!真的！\n\n&nbsp;\n\n&nbsp;\n\n智韬\n\n我还会再回来的！\n\n&nbsp;\n\n念祖\n\n希望文教带领更多的人往前冲冲冲！\n\n&nbsp;\n\n你们辛苦啦，谢谢你们！\n\n&nbsp;\n\n&nbsp;\n\n第一次参加集体活动就是文教了。忘不了，很开心！\n\n&nbsp;\n\n我爱文教！\n\n&nbsp;\n\n深深祝愿，一切安好！\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n静周\n\n拍了很多照片留念，我成人路上的珍贵纪念。经历了一些事情，才会慢慢成长。谢谢文教，辛苦了喵，师兄师姐们！\n\n&nbsp;\n\n婷婷\n\n我的很多第一次尝试在文教，所以在文教我成长了自己。感谢文教给了我机会，也为我自己能抓住机会而鼓掌。与文教的缘分，待续......\n\n&nbsp;\n\n&nbsp;\n\n清燕\n\n那是一种最真诚的交流，一种心与心之间的交流，只可意会不可言传。睡觉时有种叫 “幸福” 的暖流在我心中流动。\n\n&nbsp;\n\n慧敏\n\n我却收获了欢笑，感受到了文教大家庭的温暖。非常感谢这次营会，真的！\n\n&nbsp;\n\n大勇\n\n那一刻，我感觉彻底放开了自我，不再有腼腆和不自信的束缚，我的前面不再是巨石，我感觉到了友情，感觉到了自己突破的见证，感觉到了表现自己的欲望......\n\n这次文教夏令营，在这种轻松愉快的氛围，在大家的热情鼓励和帮助下，我终于慢慢走出自己的阴影，释放自我。\n\n&nbsp;\n\n育广\n\n因为文教而聚在了一起，大家毫无嫌隙地、毫无顾忌地玩在一起，那一个个场景，实在令人难忘。\n\n&nbsp;\n\n碧莲\n\nI know everyone !\n\nI see everyone !\n\nI hear everyone !\n\nI feel everyone !\n\nI love everyone !\n\n&nbsp;\n\n&nbsp;\n\n蒋清\n\n总之总之，参加文教我不会后悔，收获到的如江水般我无法说完。我很喜欢文教，能够加入我觉得意义不在单纯的奖学、助学金。文教传承的感恩、友谊我是真的明白、体会。\n\n&nbsp;\n\n&nbsp;\n\n钊漩\n\n在这次营会中，我结识了很多朋友。我想如果没有参加这个营会，我与他们可能永远没有交集。能够认识他们，我感到非常高兴。\n\n&nbsp;\n\n刘艳\n\n对小赖学长说过，面对未知，人总会有一种莫名的恐惧感。我很害怕那些无法由自己掌控的未来，但文教却告诉我：未知并不可怕，可怕的是那颗将自己尘封的心。我会慢慢学会成长，学会面对，为生活加油喝彩。\n\n&nbsp;\n\n&nbsp;\n\n淼锋\n\n美好的时光总是容易让人怀念，不过还好我拍下了很多照片，记住了每一个开心的笑脸。\n\n很爱过去的充满欢笑的这几天。\n\n&nbsp;\n\n&nbsp;\n\n凤媚\n\n文教给我的总体印象是很好的，因为她是由很多有心人组织的大家庭，而且她不仅可以在物质上帮助需要的人，更多的是从精神上鼓励他们，使得学生们能首先从心理上战胜自己，超越自己。而且文教让我们明白了 “心连心” 的重要性，做事不能太功利，有时也要做一些无回报的活动，因为都需要我一份爱心。\n\n&nbsp;\n\n&nbsp;\n\n海青\n\n希望师兄师姐们都要好好的，永远幸福，forever love!!\n\n&nbsp;\n\n&nbsp;\n\n维业\n\n我相信，相信文教会壮大，会越来越好。每一次举办都会让文教越来越强，我也相信文教的精神、爱会永远传承。没有过不去的坎，有了爱，世界会更加美好。\n\n&nbsp;\n\n&nbsp;\n\n佳慧\n\n文教真心能做到这样，非常不容易，她让一群不甚熟悉的人High得手舞足蹈，还有谁有这个魔力？\n\n文教给予我们的有物质的，更重要的，在于精神。无形之中，她已经播下了许许多多的种子。\n\n&nbsp;\n\n&nbsp;\n\n思征\n\n营会越办越好！\n\n&nbsp;\n\n清菊\n\n其实还有很多想说的话，但我更想让它们留在我的内心，永远，永远。\n\n念祖\n\n希望时光能停留，可惜，天下没有不散的宴席。\n\n&nbsp;\n\n翠芬\n\n从师兄师姐身上学到了很多正能量的东西，这使我个人也坚定了一些梦想。当然最大的收获就是认识了好多朋友 ······\n\n总之呢，真的非常喜欢这个活动。\n\n&nbsp;\n\n宝珠\n\n我喜欢这个大家庭，我想成为其中一员。\n\n&nbsp;\n\n海珠\n\n只有融入他们，才会真正地感受到温暖。\n\n&nbsp;\n\n&nbsp;\n\n杨州\n\n留下太多难以言表的记忆。\n\n</div>\n<div align=\"left\">欢迎在评论中补充哦O(∩_∩)O~</div>\n<div align=\"left\"></div>\n<div align=\"left\"><!--more--></div>\n<div align=\"left\">\n<div align=\"left\">\n<div>\n\n&nbsp;\n\n**Part2 小赖版**\n\n</div>\n<div>\n\n&nbsp;\n\n小赖  小赖！\n\n&nbsp;\n\n</div>\n<div>清声学长，我超喜欢你上次的学习分享，我学到很多。</div>\n<div>\n\n昨天我听了其他学姐学长说大学里并没有想象中那么好，很多事都会改变。\n\n但我依旧相信梦想，我会坚持自己的信仰。\n\n以后有什么困难，我都会麻烦你哦！\n\n这次营会，我不是不高兴而是在思考我今后的路。4次营会让我印象最深的就是你说的话！\n\n好吧，我们还会见面的。我希望下次见到你，你可以多笑笑，烦恼怕什么，活得开心才最重要。（嘉奇）\n\n&nbsp;\n\n小赖，有活动就Call me!（智韬）\n\n&nbsp;\n\n小赖哥，你讲话好有哲理啊，好多都很受用呢~祝你天天开心！（艳萍）\n\n&nbsp;\n\n小赖哥，很谢谢你的帮忙。说实话，你说的特别多话，让我很受益，我不知道怎么表达。但，这份特殊的爱，一直在心中。（蒋清）\n\n&nbsp;\n\n小赖学长，你这人很好！很健谈，又有组织能力！不过我觉得你不要在乎别人说你是否严肃，毕竟一个人的气质是天生的，那才是你的真性情！我们都要加油哦！（海青）\n\n&nbsp;\n\n呵呵，学长加油！营会办得越来越出色了！（思征）\n\n&nbsp;\n\n清声小赖子，居然忘了我是大麻人...太桑心了...我都还记得你是小留的。你好厉害，会变得更棒。潜力股哦...（玲志）\n\n&nbsp;\n\n赖小赖，你有才华，有能力，对有些情况有你独特的见解！\n\n两个字，“不错”！\n\n真是后生可 wei 啊,哈哈...（清燕）\n\n&nbsp;\n\n清声，小赖，师兄，同乡：很开心，很高兴，可以再见到你，再次成为朋友。你要加油，好好加油，祝福你。（婷婷）\n\n&nbsp;\n\n呼呼，赖小赖，好久不见了捏，莫名的感动啊！头发长了好帅啊！太有哲理的讲话，我喜欢！继续Open继续Smile，大学继续加油！（嘉宸）\n\n&nbsp;\n\n小赖，别再忘记点我名了！！！（宝珠）\n\n&nbsp;\n\n小赖学长，其实你也没有那么沉重啦。就是感觉你好像有点累。记得不要皱眉哦。开心哈！\n\n&nbsp;\n\n小赖，你经历好丰富，希望有机会能一睹你的风采！不要忘了我（菊珍）\n\n&nbsp;\n\n小赖，你辛苦了！我也要谢谢你，你让我明白了做人要有责任。\n\n&nbsp;\n\n清声，看你收那么多!真的不想再写给你！不过。你真的成熟又稳重，成长很多！以后想你自己跟我们讲你的成长故事！（反正我没听过）（小安妮）\n\n&nbsp;\n\n清声，哈哈，好像也叫你“声声”。这次，好样！（佳慧）\n\n&nbsp;\n\n小赖兄，你的主持很好，人是更好！你教会了我们很多。期待下次的见面。（家威）\n\n&nbsp;\n\n愿你有个灿烂的前程，获得幸福。\n\n&nbsp;\n\n小赖哥，我好爱你，嫁给我吧！我会一生一世守护你（大勇你这是恶心我嘛 - -！）\n\n&nbsp;\n\n小赖，真的好喜欢你啊！每次来文教你都会给我一些不同的感悟，崇拜你耶！喜欢你的那句话：有趣必有舍，有舍必有得。（习翔）\n\n&nbsp;\n\n看看！看看！看看！我又给你写了，因为你赖小赖哥于我意义不同，不常是因为你帮了我，而且在精神与一些做人的道理上，我学到了超多。\n\n&nbsp;\n\n小赖学长，To be honest，这次活动你组织的很不错。有机会把这些经验传授给我。\n\n&nbsp;\n\n不够自信，太严肃的赖小赖。此次，连我都觉得后面办的不错，就真的挺不错的了。以后，还有机会可以见面。期待...感谢...此次我学会了很多。（海珠）\n\n&nbsp;\n\n弟弟啊，恕我看到你的真人后，叫不出口“弟弟啊”。至于原因，你懂的...（姐姐？）\n\n&nbsp;\n\n清声，说实话，你真的很优秀，而且比我最初见你时又更成熟些了。加油O(∩_∩)O希望你以后能更加快乐、开心，做个阳光男孩。用于面对困境，是强者的表现。你是真正的强者。（叶茜）\n\n&nbsp;\n\n小赖哥，天降大任于斯人也。相信自己，未来会更好的，笑口常开哦！（维业）\n\n&nbsp;\n\n清声学长，我特别崇拜你。这次营会让我懂得一些道理，我希望今后你还是一样坚持自己的信仰。还有，虽然惨两天，但你的高度负责让我感动，但有些事要分给别人做，不要全揽给自己。虽然我也是这样，不过我在改咯！要相信自己，相信别人！\n\n&nbsp;\n\n笑起来的酒窝很好看\n\n&nbsp;\n\n小赖，谢谢。你是好人。（刘艳）\n\n</div>\n<div></div>\n<div>**好吧，我承认，我很爱你们。**</div>\n<div>**但是，我打死也不说我很多情O(∩_∩)O~**</div>\n<div>**谢谢文教给我的这笔财富。**</div>\n</div>\n<div></div>\n</div>\n<div></div>\n<address><span style=\"color: #3366ff;\">**[<span style=\"color: #3366ff;\">点击观看2012文教梅州营会纪念视频</span>](http://http://v.youku.com/v_show/id_XNDM4MTA5MDY0.html?f=17856494 \"CCPS梅州营会纪念\")**</span></address>","slug":"2012文教夏令营","updated":1418908898000,"excerpt":"<p><strong><span style=\"font-family: 宋体;\">   营会终于告一段落了，翻看了自七月以来的所有工作备忘、邮件。此时回顾，文教你又锻炼了我。回想电话联络学生的场景、营会四天三夜的每个细节，以及我坚持在写的营会日记，突然感觉自己矫情了。</span>**</strong><span style=\"font-family: 宋体;\">   </span>**</p>\n<p><div align=\"left\"><strong><span style=\"font-family: 宋体;\">   早上整理了自己的日记、你们的反馈、你们的留言条、我们的照片，然后，就不想说然后了。</span></strong></div></p>\n<p><div align=\"left\"><strong>有太多的话要说，但打死我也不承认我是多情的 - - ！</strong></div></p>\n<p><div align=\"left\"><strong><span style=\"font-family: 宋体;\">不说太多，留给自己慢慢体会。</span></strong></div></p>\n<p><div align=\"left\"><strong><span style=\"font-family: 宋体;\">   以下，是你们留给我的宝贵财富，感谢文教，更感谢你们！</span></strong></div></p>\n<p><div align=\"left\"><strong><span style=\"font-family: 宋体;\">别忘了来华工找四两哥喝汤啊！！！！！<br></span></strong></div></p>\n<p><div align=\"left\"><strong> </strong></div></p>\n<p><div align=\"left\"></div></p>\n<p><div align=\"left\"><strong><span style=\"font-family: 宋体; font-size: small;\">Part1 文教版</span></strong></div></p>\n<p><div align=\"left\"><span style=\"font-family: 宋体; font-size: small;\"><br></span></div></p>\n<div align=\"left\">\n\n<p>念雯</p>\n<p>世界很大，我想要的很少。文教，谢谢！</p>\n<p>&nbsp;</p>\n<p>清燕</p>\n<p>文教的成员，I love you ！</p>\n<p>&nbsp;</p>\n<p>宝新</p>\n<p>文教好！也祝越办越好！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>嘉奇</p>\n<p>因文教而聚，因友谊而欢，因信仰而别。</p>\n<p>&nbsp;</p>\n<p>海青</p>\n<p>希望文教越来越好！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>第一次参加文教，开心！愿文教的爱能绵延不绝。这次很Happpy!真的！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>智韬</p>\n<p>我还会再回来的！</p>\n<p>&nbsp;</p>\n<p>念祖</p>\n<p>希望文教带领更多的人往前冲冲冲！</p>\n<p>&nbsp;</p>\n<p>你们辛苦啦，谢谢你们！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>第一次参加集体活动就是文教了。忘不了，很开心！</p>\n<p>&nbsp;</p>\n<p>我爱文教！</p>\n<p>&nbsp;</p>\n<p>深深祝愿，一切安好！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>静周</p>\n<p>拍了很多照片留念，我成人路上的珍贵纪念。经历了一些事情，才会慢慢成长。谢谢文教，辛苦了喵，师兄师姐们！</p>\n<p>&nbsp;</p>\n<p>婷婷</p>\n<p>我的很多第一次尝试在文教，所以在文教我成长了自己。感谢文教给了我机会，也为我自己能抓住机会而鼓掌。与文教的缘分，待续……</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>清燕</p>\n<p>那是一种最真诚的交流，一种心与心之间的交流，只可意会不可言传。睡觉时有种叫 “幸福” 的暖流在我心中流动。</p>\n<p>&nbsp;</p>\n<p>慧敏</p>\n<p>我却收获了欢笑，感受到了文教大家庭的温暖。非常感谢这次营会，真的！</p>\n<p>&nbsp;</p>\n<p>大勇</p>\n<p>那一刻，我感觉彻底放开了自我，不再有腼腆和不自信的束缚，我的前面不再是巨石，我感觉到了友情，感觉到了自己突破的见证，感觉到了表现自己的欲望……</p>\n<p>这次文教夏令营，在这种轻松愉快的氛围，在大家的热情鼓励和帮助下，我终于慢慢走出自己的阴影，释放自我。</p>\n<p>&nbsp;</p>\n<p>育广</p>\n<p>因为文教而聚在了一起，大家毫无嫌隙地、毫无顾忌地玩在一起，那一个个场景，实在令人难忘。</p>\n<p>&nbsp;</p>\n<p>碧莲</p>\n<p>I know everyone !</p>\n<p>I see everyone !</p>\n<p>I hear everyone !</p>\n<p>I feel everyone !</p>\n<p>I love everyone !</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>蒋清</p>\n<p>总之总之，参加文教我不会后悔，收获到的如江水般我无法说完。我很喜欢文教，能够加入我觉得意义不在单纯的奖学、助学金。文教传承的感恩、友谊我是真的明白、体会。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>钊漩</p>\n<p>在这次营会中，我结识了很多朋友。我想如果没有参加这个营会，我与他们可能永远没有交集。能够认识他们，我感到非常高兴。</p>\n<p>&nbsp;</p>\n<p>刘艳</p>\n<p>对小赖学长说过，面对未知，人总会有一种莫名的恐惧感。我很害怕那些无法由自己掌控的未来，但文教却告诉我：未知并不可怕，可怕的是那颗将自己尘封的心。我会慢慢学会成长，学会面对，为生活加油喝彩。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>淼锋</p>\n<p>美好的时光总是容易让人怀念，不过还好我拍下了很多照片，记住了每一个开心的笑脸。</p>\n<p>很爱过去的充满欢笑的这几天。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>凤媚</p>\n<p>文教给我的总体印象是很好的，因为她是由很多有心人组织的大家庭，而且她不仅可以在物质上帮助需要的人，更多的是从精神上鼓励他们，使得学生们能首先从心理上战胜自己，超越自己。而且文教让我们明白了 “心连心” 的重要性，做事不能太功利，有时也要做一些无回报的活动，因为都需要我一份爱心。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>海青</p>\n<p>希望师兄师姐们都要好好的，永远幸福，forever love!!</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>维业</p>\n<p>我相信，相信文教会壮大，会越来越好。每一次举办都会让文教越来越强，我也相信文教的精神、爱会永远传承。没有过不去的坎，有了爱，世界会更加美好。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>佳慧</p>\n<p>文教真心能做到这样，非常不容易，她让一群不甚熟悉的人High得手舞足蹈，还有谁有这个魔力？</p>\n<p>文教给予我们的有物质的，更重要的，在于精神。无形之中，她已经播下了许许多多的种子。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>思征</p>\n<p>营会越办越好！</p>\n<p>&nbsp;</p>\n<p>清菊</p>\n<p>其实还有很多想说的话，但我更想让它们留在我的内心，永远，永远。</p>\n<p>念祖</p>\n<p>希望时光能停留，可惜，天下没有不散的宴席。</p>\n<p>&nbsp;</p>\n<p>翠芬</p>\n<p>从师兄师姐身上学到了很多正能量的东西，这使我个人也坚定了一些梦想。当然最大的收获就是认识了好多朋友 ······</p>\n<p>总之呢，真的非常喜欢这个活动。</p>\n<p>&nbsp;</p>\n<p>宝珠</p>\n<p>我喜欢这个大家庭，我想成为其中一员。</p>\n<p>&nbsp;</p>\n<p>海珠</p>\n<p>只有融入他们，才会真正地感受到温暖。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>杨州</p>\n<p>留下太多难以言表的记忆。</p>\n<p></p></div><p></p>\n<p><div align=\"left\">欢迎在评论中补充哦O(∩_∩)O~</div></p>\n<p><div align=\"left\"></div></p>\n<p><div align=\"left\">","_id":"hfqfc3hd3eep1vpj","comments":true,"layout":"post","photos":[],"link":""},{"title":"2013-03-CSS和JQuery下拉菜单练习","id":282,"categories":["casje7dbzdekawgu"],"date":1363343566000,"tags":[],"content":"<p>手生，光看书不动手去写代码，就不会发现细节问题，要不断地练习，熟能生巧！</p>\n<p>CSS和JQ分别实现下拉菜单，核心代码只有几行。</p>\n<p>[css]</p>\n<p>/<em>CSS下拉菜单</em>/<br> nav#css-menu&gt;ul&gt;li:hover ul{<br>     display: block;/<em>鼠标悬浮时显示下拉菜单</em>/<br> }</p>\n<p>[/css]<br>[javascript]</p>\n<p>/<em>jQuery下拉菜单</em>/<br> $(document).ready(function(){<br>     $(‘#jquery-menu&gt;ul&gt;li’).hover(function(){<br>     $(this).find(‘ul’).slideDown(‘slow’);<br>     },function(){<br>     $(this).find(‘ul’).slideUp(‘fast’);<br>     });<br> });</p>\n<p>[/javascript]</p>\n<p><a href=\"http://laispace.com/xiaospace/demo/2013-03/CSS和JQuery下拉菜单练习/index.html\" target=\"_blank\" rel=\"external\">Demo</a></p>\n","source":"_posts/2013-03-CSS和JQuery下拉菜单练习.md","raw":"title: 2013-03-CSS和JQuery下拉菜单练习\nid: 282\ncategories:\n  - 每日一发\ndate: 2013-03-15 18:32:46\ntags:\n---\n\n手生，光看书不动手去写代码，就不会发现细节问题，要不断地练习，熟能生巧！\n\nCSS和JQ分别实现下拉菜单，核心代码只有几行。\n\n[css]\n\n/*CSS下拉菜单*/\n nav#css-menu&gt;ul&gt;li:hover ul{\n     display: block;/*鼠标悬浮时显示下拉菜单*/\n }\n\n[/css]\n[javascript]\n\n/*jQuery下拉菜单*/\n $(document).ready(function(){\n     $('#jquery-menu&gt;ul&gt;li').hover(function(){\n     $(this).find('ul').slideDown('slow');\n     },function(){\n     $(this).find('ul').slideUp('fast');\n     });\n });\n\n[/javascript]\n\n[Demo](http://laispace.com/xiaospace/demo/2013-03/CSS和JQuery下拉菜单练习/index.html)","slug":"2013-03-CSS和JQuery下拉菜单练习","updated":1418908898000,"excerpt":"","_id":"hb5cf96mu9wm6g40","comments":true,"layout":"post","photos":[],"link":""},{"title":"2013-03-CSS和JQuery多方式Tab练习","id":286,"categories":["casje7dbzdekawgu"],"date":1363437604000,"tags":[],"content":"<p>今天练习的是Tab的制作，使用了CSS3的选择器和JQuery。</p>\n<p>练习页里有对应的原理声明，<a href=\"http://laispace.com/xiaospace/demo/2013-03/CSS和JQuery多方式Tab练习/index.html\" target=\"_blank\" rel=\"external\">Demo</a></p>\n<p>CSS还没找到方法实现鼠标停留在tab上时，对应的内容div保持显示，还要继续学习。</p>\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2013/03/2013-03-16_203807.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/03/2013-03-16_203807.jpg\" alt=\"\" title=\"2013-03-16_203807\"></a></p>\n","source":"_posts/2013-03-CSS和JQuery多方式Tab练习.md","raw":"title: 2013-03-CSS和JQuery多方式Tab练习\nid: 286\ncategories:\n  - 每日一发\ndate: 2013-03-16 20:40:04\ntags:\n---\n\n今天练习的是Tab的制作，使用了CSS3的选择器和JQuery。\n\n练习页里有对应的原理声明，[Demo](http://laispace.com/xiaospace/demo/2013-03/CSS和JQuery多方式Tab练习/index.html)\n\nCSS还没找到方法实现鼠标停留在tab上时，对应的内容div保持显示，还要继续学习。\n\n[![](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-16_203807.jpg \"2013-03-16_203807\")](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-16_203807.jpg)","slug":"2013-03-CSS和JQuery多方式Tab练习","updated":1418908898000,"excerpt":"","_id":"1buwzhuxycbojjyd","comments":true,"layout":"post","photos":[],"link":""},{"title":"2013-03-jquery.ajax()表单验证练习","id":292,"categories":["casje7dbzdekawgu"],"date":1364144477000,"tags":[],"content":"<p>今天学习了Json数据格式，并用$.ajax()发送表单：点击按钮发送数据到后台php文件，后台处理后返回Json，再用jquery读取Json数据</p>\n<p><div>成功发送数据到后台，我模拟了后台返回的数据（笨方法：直接赋值回来）：点击注册或登录按钮，就会检测表单。</div></p>\n<p><div>PS：这个页面没有真正的表单验证，不管输入什么都会显示出错误提示，因为我只是模拟后台，处理结果都是表单输入错误。</div></p>\n<p><div></div></p>\n<p><div>核心代码：</div></p>\n<p><div>1.php封装json数据，返回到前台：</div></p>\n<p><div><a href=\"http://www.laispace.com/wp-content/uploads/2013/03/html.jpg\" target=\"_blank\" rel=\"external\">\n</a><a href=\"http://www.laispace.com/wp-content/uploads/2013/03/2013-03-24_163652.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/03/2013-03-24_163652.jpg\" alt=\"\" title=\"2013-03-24_163652\"></a></div></p>\n<p><div>2.$.ajax()处理返回的json数据，控制表单的行为：<a href=\"http://www.laispace.com/wp-content/uploads/2013/03/2013-03-25_005442.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/03/2013-03-25_005442.jpg\" alt=\"\" title=\"2013-03-25_005442\"></a></div><br>最终效果，见<a href=\"http://laispace.com/xiaospace/demo/2013-03/%E7%99%BB%E9%99%86%E8%A1%A8%E5%8D%95%E9%82%AE%E7%AE%B1%E7%9A%84ajax%E9%AA%8C%E8%AF%81/login.html\" target=\"_blank\" rel=\"external\">Demo</a></p>\n","source":"_posts/2013-03-jquery.ajax()表单验证练习.md","raw":"title: 2013-03-jquery.ajax()表单验证练习\nid: 292\ncategories:\n  - 每日一发\ndate: 2013-03-25 01:01:17\ntags:\n---\n\n今天学习了Json数据格式，并用$.ajax()发送表单：点击按钮发送数据到后台php文件，后台处理后返回Json，再用jquery读取Json数据\n<div>成功发送数据到后台，我模拟了后台返回的数据（笨方法：直接赋值回来）：点击注册或登录按钮，就会检测表单。</div>\n<div>PS：这个页面没有真正的表单验证，不管输入什么都会显示出错误提示，因为我只是模拟后台，处理结果都是表单输入错误。</div>\n<div></div>\n<div>核心代码：</div>\n<div>1.php封装json数据，返回到前台：</div>\n<div>[\n](http://www.laispace.com/wp-content/uploads/2013/03/html.jpg)[![](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-24_163652.jpg \"2013-03-24_163652\")](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-24_163652.jpg)</div>\n<div>2.$.ajax()处理返回的json数据，控制表单的行为：[![](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-25_005442.jpg \"2013-03-25_005442\")](http://www.laispace.com/wp-content/uploads/2013/03/2013-03-25_005442.jpg)</div>\n最终效果，见[Demo](http://laispace.com/xiaospace/demo/2013-03/%E7%99%BB%E9%99%86%E8%A1%A8%E5%8D%95%E9%82%AE%E7%AE%B1%E7%9A%84ajax%E9%AA%8C%E8%AF%81/login.html)","slug":"2013-03-jquery.ajax()表单验证练习","updated":1418908898000,"excerpt":"","_id":"xbpldk5os3k9wgy2","comments":true,"layout":"post","photos":[],"link":""},{"title":"2013-04-鼠标悬浮图片出现描述信息","id":366,"categories":["casje7dbzdekawgu"],"date":1365771661000,"tags":[],"content":"<p>用jquery结合CSS3的动画，写了几个不同的效果。</p>\n<p><a href=\"http://laispace.com/XiaoSpace/Demo/2013-04/%E5%85%89%E6%A0%87%E6%82%AC%E6%B5%AE%E5%87%BA%E7%8E%B0%E5%85%88%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0%E7%9A%84%E5%8A%A8%E7%94%BB/\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/04/2013-04-12_204252.jpg\" alt=\"\" title=\"2013-04-12_204252\"></a></p>\n<p>原理：把图片描述放在title里，光标悬浮时用JQ将其显示出来，<a href=\"http://laispace.com/XiaoSpace/Demo/2013-04/%E5%85%89%E6%A0%87%E6%82%AC%E6%B5%AE%E5%87%BA%E7%8E%B0%E5%85%88%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0%E7%9A%84%E5%8A%A8%E7%94%BB/\" target=\"_blank\" rel=\"external\">DEMO</a></p>\n","source":"_posts/2013-04-鼠标悬浮图片出现描述信息.md","raw":"title: 2013-04-鼠标悬浮图片出现描述信息\nid: 366\ncategories:\n  - 每日一发\ndate: 2013-04-12 21:01:01\ntags:\n---\n\n用jquery结合CSS3的动画，写了几个不同的效果。\n\n[![](http://www.laispace.com/wp-content/uploads/2013/04/2013-04-12_204252.jpg \"2013-04-12_204252\")](http://laispace.com/XiaoSpace/Demo/2013-04/%E5%85%89%E6%A0%87%E6%82%AC%E6%B5%AE%E5%87%BA%E7%8E%B0%E5%85%88%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0%E7%9A%84%E5%8A%A8%E7%94%BB/)\n\n原理：把图片描述放在title里，光标悬浮时用JQ将其显示出来，[DEMO](http://laispace.com/XiaoSpace/Demo/2013-04/%E5%85%89%E6%A0%87%E6%82%AC%E6%B5%AE%E5%87%BA%E7%8E%B0%E5%85%88%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0%E7%9A%84%E5%8A%A8%E7%94%BB/)","slug":"2013-04-鼠标悬浮图片出现描述信息","updated":1418908898000,"excerpt":"","_id":"k2erik8kzoq1blvq","comments":true,"layout":"post","photos":[],"link":""},{"title":"2013-05-瀑布流效果的制作","id":379,"categories":["casje7dbzdekawgu"],"date":1367946658000,"tags":[],"content":"<p><a href=\"http://www.laispace.com/wp-content/uploads/2013/05/20130508.png\" target=\"_blank\" rel=\"external\">\n</a><a href=\"http://laispace.com/XiaoSpace/Demo/2013-05/%E7%80%91%E5%B8%83%E6%B5%81%E6%95%88%E6%9E%9C%E7%9A%84%E5%88%B6%E4%BD%9C/\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/05/20130508.png\" alt=\"\" title=\"20130508\"></a><a href=\"http://www.laispace.com/wp-content/uploads/2013/05/20130508.png\" target=\"_blank\" rel=\"external\">\n</a></p>\n<p>这个图片墙是动态瀑布流，思路是：</p>\n<p>1.动态计算用户视窗的宽度，计算出可显示多少列的图片；</p>\n<p>2.监听滚动条的变化,动态算出滚动时最短的是哪一列，当最短列底部露出后,用$.getJSON()方法获取新的一批图片，并遍历每一个图片，将新图片添加到最短列中（这时最短列是动态的啦）。</p>\n<p>3.监听视窗大小变化,动态算出窗口的新宽度值，重新对图片进行排列，并使用了动画效果。</p>\n<p>核心代码也有点长，就不贴出来了，直接看源码呗，我写满了注释O(∩_∩)O~ <a href=\"http://laispace.com/XiaoSpace/Demo/2013-05/%E7%80%91%E5%B8%83%E6%B5%81%E6%95%88%E6%9E%9C%E7%9A%84%E5%88%B6%E4%BD%9C/\" target=\"_blank\" rel=\"external\">Demo</a></p>\n<p>//—2013-05-09-优化————————————————————————————————————————————</p>\n<p>上面这个Demo,有一个细节，就是图片原始大小，是json文件里定义好的，即原图片大小本地计算好后写在json里，调用时直接使用了jData.width和jData.height属性，可我这样就没有灵活性了。</p>\n<p>合理的思路是这样的：json只存储图片路径，然后使用JS去获取图片的原始尺寸进行等比例缩放。</p>\n<p>查阅资料后确实JS发现有Image()对象，可以获得图片的原始尺寸：</p>\n<p>[javascript]<br>var objImg = new Image();// 新建Image对象，获得原始图片的尺寸，增大了灵活性<br>objImg.onload = function() {<br>    var iHeight = objImg .height * (iWidth / objImg .width); // iWidth恒定，使用原图片尺寸计算并设置等比例缩放后的图片高度&lt;/p&gt;<br>}<br>[/javascript]</p>\n<p>需要注意的是，这些计算需要放在onload函数中，保证计算时，图片已经加载完成，否则会得到iHeight为0。</p>\n<p>可直接看源码，找到修改的地方理解，<a href=\"http://laispace.com/XiaoSpace/Demo/2013-05/%E7%80%91%E5%B8%83%E6%B5%81%E6%95%88%E6%9E%9C%E7%9A%84%E5%88%B6%E4%BD%9C/v20130509.html\" target=\"_blank\" rel=\"external\">Demo2</a></p>\n","source":"_posts/2013-05-瀑布流效果的制作.md","raw":"title: 2013-05-瀑布流效果的制作\nid: 379\ncategories:\n  - 每日一发\ndate: 2013-05-08 01:10:58\ntags:\n---\n\n[\n](http://www.laispace.com/wp-content/uploads/2013/05/20130508.png)[![](http://www.laispace.com/wp-content/uploads/2013/05/20130508.png \"20130508\")](http://laispace.com/XiaoSpace/Demo/2013-05/%E7%80%91%E5%B8%83%E6%B5%81%E6%95%88%E6%9E%9C%E7%9A%84%E5%88%B6%E4%BD%9C/)[\n](http://www.laispace.com/wp-content/uploads/2013/05/20130508.png)\n\n这个图片墙是动态瀑布流，思路是：\n\n1.动态计算用户视窗的宽度，计算出可显示多少列的图片；\n\n2.监听滚动条的变化,动态算出滚动时最短的是哪一列，当最短列底部露出后,用$.getJSON()方法获取新的一批图片，并遍历每一个图片，将新图片添加到最短列中（这时最短列是动态的啦）。\n\n3.监听视窗大小变化,动态算出窗口的新宽度值，重新对图片进行排列，并使用了动画效果。\n\n核心代码也有点长，就不贴出来了，直接看源码呗，我写满了注释O(∩_∩)O~ [Demo](http://laispace.com/XiaoSpace/Demo/2013-05/%E7%80%91%E5%B8%83%E6%B5%81%E6%95%88%E6%9E%9C%E7%9A%84%E5%88%B6%E4%BD%9C/)\n\n//--2013-05-09-优化----------------------------------------------------------------------------------------\n\n上面这个Demo,有一个细节，就是图片原始大小，是json文件里定义好的，即原图片大小本地计算好后写在json里，调用时直接使用了jData.width和jData.height属性，可我这样就没有灵活性了。\n\n合理的思路是这样的：json只存储图片路径，然后使用JS去获取图片的原始尺寸进行等比例缩放。\n\n查阅资料后确实JS发现有Image()对象，可以获得图片的原始尺寸：\n\n[javascript]\nvar objImg = new Image();// 新建Image对象，获得原始图片的尺寸，增大了灵活性\nobjImg.onload = function() {\n    var iHeight = objImg .height * (iWidth / objImg .width); // iWidth恒定，使用原图片尺寸计算并设置等比例缩放后的图片高度&lt;/p&gt;\n}\n[/javascript]\n\n需要注意的是，这些计算需要放在onload函数中，保证计算时，图片已经加载完成，否则会得到iHeight为0。\n\n可直接看源码，找到修改的地方理解，[Demo2](http://laispace.com/XiaoSpace/Demo/2013-05/%E7%80%91%E5%B8%83%E6%B5%81%E6%95%88%E6%9E%9C%E7%9A%84%E5%88%B6%E4%BD%9C/v20130509.html)","slug":"2013-05-瀑布流效果的制作","updated":1418908898000,"excerpt":"","_id":"geqoxfgvsptrbl2j","comments":true,"layout":"post","photos":[],"link":""},{"title":"2013，顾自地来了","id":269,"categories":["9wpmord5537fjtil"],"date":1356971937000,"tags":[],"content":"<p>我在想，我该怎么总结我的2012。</p>\n<p>下午下了地铁回到学校就把柴静的书看完了，看完后就睡了一觉，起来是晚上七点半接着把《看见》新书发布会的视频看完，然后打个电话洗个澡回到被窝里，一直发呆到现在，想着：这是2012的最后一天，我到底该怎么总结我的2012。</p>\n<p>我想用黄西的一句幽默“我在过去的十年里生活了十年”来总结我这一年：我在过去的一年里生活了一年。</p>\n<p>这句话没有意义，对的。</p>\n<p>&nbsp;</p>\n<p>按旧习惯，我会按着时间顺序回顾这一年，然后给自己打打鸡血喝喝心灵鸡汤，不是恶狠狠地打击自己就是美滋滋地向往下一年。</p>\n<p>可，这真可笑。</p>\n<p>&nbsp;</p>\n<p>一年里看的书，得到的感悟超过了过去的二十年，这是真的。</p>\n<p>我妄想着要自由，一直在挣扎着。</p>\n<p>“不要去争自由，要争独立。没有独立的自由，你仍是奴隶。”</p>\n<p>这，才是对的。</p>\n<p>&nbsp;</p>\n<p>我总想着对抗，有一副假装，有何用？</p>\n<p>自我欺骗。</p>\n<p>&nbsp;</p>\n<p>我这毛孩子，还需要磨练，需要继续摔跟头，断断续续站起身摇摇晃晃甩去无知无畏，才会有那么一天能真正地看见自己。</p>\n<p>真正地看见自己的故事。</p>\n<p>&nbsp;</p>\n<p>2012，顾自地去了，2013顾自地来了。</p>\n<p>它不会理我，却一直在陪伴。</p>\n<p>因为这就是时间。</p>\n<p>&nbsp;</p>\n<p>要和它做朋友。</p>\n<p>然后，让它来讲述故事。</p>\n<p>&nbsp;</p>\n","source":"_posts/2013，顾自地来了.md","raw":"title: 2013，顾自地来了\nid: 269\ncategories:\n  - 来思碑记\ndate: 2013-01-01 00:38:57\ntags:\n---\n\n我在想，我该怎么总结我的2012。\n\n下午下了地铁回到学校就把柴静的书看完了，看完后就睡了一觉，起来是晚上七点半接着把《看见》新书发布会的视频看完，然后打个电话洗个澡回到被窝里，一直发呆到现在，想着：这是2012的最后一天，我到底该怎么总结我的2012。\n\n我想用黄西的一句幽默“我在过去的十年里生活了十年”来总结我这一年：我在过去的一年里生活了一年。\n\n这句话没有意义，对的。\n\n&nbsp;\n\n按旧习惯，我会按着时间顺序回顾这一年，然后给自己打打鸡血喝喝心灵鸡汤，不是恶狠狠地打击自己就是美滋滋地向往下一年。\n\n可，这真可笑。\n\n&nbsp;\n\n一年里看的书，得到的感悟超过了过去的二十年，这是真的。\n\n我妄想着要自由，一直在挣扎着。\n\n“不要去争自由，要争独立。没有独立的自由，你仍是奴隶。”\n\n这，才是对的。\n\n&nbsp;\n\n我总想着对抗，有一副假装，有何用？\n\n自我欺骗。\n\n&nbsp;\n\n我这毛孩子，还需要磨练，需要继续摔跟头，断断续续站起身摇摇晃晃甩去无知无畏，才会有那么一天能真正地看见自己。\n\n真正地看见自己的故事。\n\n&nbsp;\n\n2012，顾自地去了，2013顾自地来了。\n\n它不会理我，却一直在陪伴。\n\n因为这就是时间。\n\n&nbsp;\n\n要和它做朋友。\n\n然后，让它来讲述故事。\n\n&nbsp;","slug":"2013，顾自地来了","updated":1418908898000,"excerpt":"","_id":"nh1wf32wbfvsbqt4","comments":true,"layout":"post","photos":[],"link":""},{"title":"2014-07-好文阅读","categories":["nljx37d4umfi1cg8"],"date":1406191910000,"tags":["suq57axt0wea01f5"],"content":"<blockquote>\n<p>要吸取别人的经验，要产出自己的总结。— 菲利克斯·小赖</p>\n</blockquote>\n<p>工作比较忙，但时时要提醒自己，保持对行业资讯的敏感度，业余时间多学习一些对自己成长有益的技能，最好是通过文章产出的方式，和业界交流。</p>\n<p>笨鸟先飞，越飞越高。</p>\n<a id=\"more\"></a>\n\n<ul>\n<li><p><a href=\"http://blog.jobbole.com/75480/\" target=\"_blank\" rel=\"external\">揭秘GitHub CSS技术细节</a></p>\n<p>  使用预处理器 SCSS</p>\n<p>  使用 <a href=\"http://bem.info/\" target=\"_blank\" rel=\"external\">BEM</a> 或 <a href=\"https://github.com/stubbornella/oocss/wiki\" target=\"_blank\" rel=\"external\">OOCSS</a></p>\n<p>  使用 <a href=\"https://github.com/causes/scss-lint\" target=\"_blank\" rel=\"external\">SCSS-lint</a> 检测</p>\n</li>\n</ul>\n","source":"_posts/2014-07-好文阅读.md","raw":"title: 2014-07-好文阅读\ncategories:\n  - 好文阅读\ndate: 2014-07-24 16:51:50\ntags:\n  - 好文阅读\n  \n---\n\n> 要吸取别人的经验，要产出自己的总结。-- 菲利克斯·小赖\n\n工作比较忙，但时时要提醒自己，保持对行业资讯的敏感度，业余时间多学习一些对自己成长有益的技能，最好是通过文章产出的方式，和业界交流。\n\n笨鸟先飞，越飞越高。\n\n<!-- more -->\n\n- [揭秘GitHub CSS技术细节](http://blog.jobbole.com/75480/)\n\n\t使用预处理器 SCSS\n\n\t使用 [BEM](http://bem.info/) 或 [OOCSS](https://github.com/stubbornella/oocss/wiki)\n\n\t使用 [SCSS-lint](https://github.com/causes/scss-lint) 检测\n","slug":"2014-07-好文阅读","updated":1418908898000,"excerpt":"<blockquote>\n<p>要吸取别人的经验，要产出自己的总结。— 菲利克斯·小赖</p>\n</blockquote>\n<p>工作比较忙，但时时要提醒自己，保持对行业资讯的敏感度，业余时间多学习一些对自己成长有益的技能，最好是通过文章产出的方式，和业界交流。</p>\n<p>笨鸟先飞，越飞越高。</p>\n","_id":"8ightfglq4refdhe","comments":true,"layout":"post","photos":[],"link":""},{"title":"Base 64 编码","categories":["be592wtznj5wcvwn"],"tags":["kb7yc6e4l40ss7sh"],"date":1406492606000,"content":"<p>在浏览器中，使用 window.btoa() 将字符串或二进制值转化为 Base64 编码，使用 window.atob() 还原。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.btoa(<span class=\"string\">'laispace'</span>); <span class=\"regexp\">//</span><span class=\"function\">=&gt;</span> <span class=\"string\">\"bGFpc3BhY2U=\"</span></div><div class=\"line\"><span class=\"built_in\">window</span>.atob(<span class=\"string\">\"bGFpc3BhY2U=\"</span>); <span class=\"regexp\">//</span><span class=\"function\">=&gt;</span><span class=\"string\">\"laispace\"</span></div></pre></td></tr></table></figure>\n\n<p>注意，要将非 ASCII 编码字符转化为 Base64 编码的话，需要先进行转码，否则会报错</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.btoa(encodeURI(<span class=\"string\">'赖小赖'</span>)); <span class=\"regexp\">//</span>=&gt; <span class=\"string\">\"JUU4JUI1JTk2JUU1JUIwJThGJUU4JUI1JTk2\"</span></div><div class=\"line\">window.atob(<span class=\"string\">'JUU4JUI1JTk2JUU1JUIwJThGJUU4JUI1JTk2'</span>); <span class=\"regexp\">//</span>=&gt; <span class=\"string\">\"<span class=\"variable\">%E8</span><span class=\"variable\">%B5</span><span class=\"variable\">%96</span><span class=\"variable\">%E5</span><span class=\"variable\">%B0</span><span class=\"variable\">%8F</span><span class=\"variable\">%E8</span><span class=\"variable\">%B5</span><span class=\"variable\">%96</span>\"</span></div><div class=\"line\">decodeURI(<span class=\"string\">\"<span class=\"variable\">%E8</span><span class=\"variable\">%B5</span><span class=\"variable\">%96</span><span class=\"variable\">%E5</span><span class=\"variable\">%B0</span><span class=\"variable\">%8F</span><span class=\"variable\">%E8</span><span class=\"variable\">%B5</span><span class=\"variable\">%96</span>\"</span>); <span class=\"regexp\">//</span>=&gt; <span class=\"string\">\"赖小赖\"</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/Base-64-编码.md","raw":"title: Base 64 编码\ncategories:\n  - Javascript\ntags:\n  - base64\ndate: 2014-07-28 04:23:26\n---\n\n在浏览器中，使用 window.btoa() 将字符串或二进制值转化为 Base64 编码，使用 window.atob() 还原。\n\n```\nwindow.btoa('laispace'); //=> \"bGFpc3BhY2U=\"\nwindow.atob(\"bGFpc3BhY2U=\"); //=>\"laispace\"\n```\n\n注意，要将非 ASCII 编码字符转化为 Base64 编码的话，需要先进行转码，否则会报错\n\n```\nwindow.btoa(encodeURI('赖小赖')); //=> \"JUU4JUI1JTk2JUU1JUIwJThGJUU4JUI1JTk2\"\nwindow.atob('JUU4JUI1JTk2JUU1JUIwJThGJUU4JUI1JTk2'); //=> \"%E8%B5%96%E5%B0%8F%E8%B5%96\"\ndecodeURI(\"%E8%B5%96%E5%B0%8F%E8%B5%96\"); //=> \"赖小赖\"\n```","slug":"Base-64-编码","updated":1418908898000,"excerpt":"","_id":"33w1xg93csf647du","comments":true,"layout":"post","photos":[],"link":""},{"title":"CSS属性扫盲笔记","categories":["tavxphreei8q4tj6"],"date":1407922849000,"tags":["h1got1knp1kxsei5"],"content":"<ul>\n<li>:before 和 ::before 的区别</li>\n</ul>\n<p>单冒号表示 CSS3 伪类，双冒号表示 CSS3 伪元素<br>双冒号是 CSS3 新引入的属性, 而要兼容 IE8- 则需要使用单冒号<br>不需要兼容 IE8- 则可以放心的使用双冒号</p>\n<ul>\n<li>-webkit-appearance 设置如何显示元素的外观</li>\n</ul>\n<p><a href=\"http://ued.ctrip.com/webkitcss/demo/appearance.html\" target=\"_blank\" rel=\"external\">http://ued.ctrip.com/webkitcss/demo/appearance.html</a></p>\n<ul>\n<li>-webkit-touch-callout 设置如何显示一个可触摸目标的样式</li>\n</ul>\n<p><a href=\"http://css-infos.net/property/-webkit-touch-callout\" target=\"_blank\" rel=\"external\">http://css-infos.net/property/-webkit-touch-callout</a></p>\n<ul>\n<li>-webkit-user-select 设置是否可以选择元素内容</li>\n</ul>\n<p><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/prop/user-select.html\" target=\"_blank\" rel=\"external\">http://ued.ctrip.com/blog/wp-content/webkitcss/prop/user-select.html</a></p>\n<ul>\n<li>-webkit-user-drag 设置是否可以拖动元素内容</li>\n</ul>\n<p><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/prop/user-drag.html\" target=\"_blank\" rel=\"external\">http://ued.ctrip.com/blog/wp-content/webkitcss/prop/user-drag.html</a></p>\n<ul>\n<li>-webkit-flex 设置伸缩布局</li>\n</ul>\n<p><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/prop/flex.html\" target=\"_blank\" rel=\"external\">http://ued.ctrip.com/blog/wp-content/webkitcss/prop/flex.html</a></p>\n<p>安卓 4.4+ 才支持, 伤不起啊…</p>\n<ul>\n<li>-webkit-tap-highlight-color 设置元素的点击高亮颜色</li>\n</ul>\n<p><a href=\"http://ued.ctrip.com/webkitcss/prop/tap-highlight-color.html\" target=\"_blank\" rel=\"external\">http://ued.ctrip.com/webkitcss/prop/tap-highlight-color.html</a> </p>\n<pre><code><span class=\"comment\">/* 设置为透明, 则禁用该属性 */</span>\n<span class=\"tag\">-webkit-tap-highlight-color</span>: <span class=\"tag\">transparent</span>;\n\n<span class=\"comment\">/* 场景: callout 和 hightlite 配合使用*/</span>\n<span class=\"class\">.nohighlight</span> <span class=\"rules\">{\n  <span class=\"rule\"><span class=\"attribute\">-webkit-touch-callout</span>:<span class=\"value\"> none</span></span>;\n  <span class=\"rule\"><span class=\"attribute\">-webkit-tap-highlight-color</span>:<span class=\"value\"> <span class=\"function\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><ul>\n<li>以下属性与 display: -webkit-box; 配合使用</li>\n</ul>\n<p>-webkit-box-sizing 设置对象的盒模型组成模式</p>\n<pre><code>    <span class=\"class\">.selector</span> {\n        <span class=\"attribute\">width</span><span class=\"value\">: <span class=\"number\">100px</span>;</span>\n        <span class=\"attribute\">margin</span><span class=\"value\">: <span class=\"number\">10px</span>;</span>\n        <span class=\"attribute\">padding</span><span class=\"value\">: <span class=\"number\">10px</span>;</span>\n        <span class=\"attribute\">border</span><span class=\"value\">: <span class=\"number\">1px</span> solid <span class=\"hexcolor\">#eee</span>;</span>\n        <span class=\"comment\">// 设置为 border-box, 则 width 包含了 padding 和 border </span>\n        -webkit-<span class=\"attribute\">box-sizing</span><span class=\"value\">: border-box;</span>\n    }\n</code></pre><p>-webkit-box-flex 设置弹性盒模型对象的子元素如何分配<em>剩余</em>空间</p>\n<pre><code><span class=\"class\">.selector-parent</span> <span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">150px</span></span></span>;\n    <span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\"> -webkit-box</span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"class\">.selector-child-fixed</span> <span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"class\">.selector-child-flex-1</span> <span class=\"rules\">{\n    <span class=\"comment\">/* 占 40px */</span>\n    <span class=\"rule\"><span class=\"attribute\">-webkit-box-flex</span>:<span class=\"value\"> <span class=\"number\">2</span></span></span>;\n<span class=\"rule\">}</span></span>\n<span class=\"class\">.selector-child-flex-2</span> <span class=\"rules\">{\n    <span class=\"comment\">/*占 60px */</span>\n    <span class=\"rule\"><span class=\"attribute\">-webkit-box-flex</span>:<span class=\"value\"> <span class=\"number\">3</span></span></span>;\n<span class=\"rule\">}</span></span>\n</code></pre><ul>\n<li>-webkit-box-orient 设置弹性盒模型对象的子元素的排列方式</li>\n</ul>\n<p><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-orient.html\" target=\"_blank\" rel=\"external\">http://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-orient.html</a></p>\n<ul>\n<li>-webkit-box-pack 设置弹性盒模型对象的子元素的对齐方式</li>\n</ul>\n<p><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-pack.html\" target=\"_blank\" rel=\"external\">http://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-pack.html</a></p>\n<ul>\n<li>-webkit-box-align 设置弹性盒模型对象的子元素的对齐方式</li>\n</ul>\n<p><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-align.html\" target=\"_blank\" rel=\"external\">http://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-align.html</a></p>\n<ul>\n<li>-webkit-line-clamp 设置块元素显示文本的行数</li>\n</ul>\n<p><a href=\"http://www.css88.com/webkit/-webkit-line-clamp/\" target=\"_blank\" rel=\"external\">http://www.css88.com/webkit/-webkit-line-clamp/</a></p>\n<pre><code><span class=\"class\">.text-overflow-ellipsis</span> <span class=\"rules\">{\n    <span class=\"rule\">// 显示一行\n    <span class=\"attribute\">-webkit-line-clamp</span>:<span class=\"value\"> <span class=\"number\">1</span></span></span>;\n    <span class=\"rule\">// 溢出隐藏\n    <span class=\"attribute\">text-overflow</span>:<span class=\"value\"> ellipsis</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">overflow</span>:<span class=\"value\"> hidden</span></span>;\n    <span class=\"rule\">// 和模型的子元素垂直排列\n    <span class=\"attribute\">display</span>:<span class=\"value\"> -webkit-box</span></span>;\n    <span class=\"rule\"><span class=\"attribute\">-webkit-box-orient</span>:<span class=\"value\"> vertical</span></span>;\n\n<span class=\"rule\">}</span></span>\n</code></pre><ul>\n<li><p>::-webkit-input-placeholder 设置占位文字的样式<br><a href=\"http://css-tricks.com/snippets/css/style-placeholder-text/\" target=\"_blank\" rel=\"external\">http://css-tricks.com/snippets/css/style-placeholder-text/</a> </p>\n<p> .selector::-webkit-input-placeholder {</p>\n<pre><code> <span class=\"attribute\">color</span><span class=\"value\">: <span class=\"hexcolor\">#eee</span>;</span>\n</code></pre><p> }</p>\n</li>\n</ul>\n<h3 id=\"参考资料\">参考资料</h3>\n<ul>\n<li><a href=\"http://ued.ctrip.com/blog/wp-content/webkitcss/index.html\" target=\"_blank\" rel=\"external\">携程CSS3-webkit-私有属性列表</a></li>\n</ul>\n","source":"_posts/CSS3属性扫盲笔记.md","raw":"title: CSS属性扫盲笔记\r\ncategories:\r\n  - CSS\r\ndate: 2014-08-13 17:40:49\r\ntags: css3\r\n---\r\n\r\n- :before 和 ::before 的区别\r\n\r\n单冒号表示 CSS3 伪类，双冒号表示 CSS3 伪元素\r\n双冒号是 CSS3 新引入的属性, 而要兼容 IE8- 则需要使用单冒号\r\n不需要兼容 IE8- 则可以放心的使用双冒号\r\n\r\n\r\n\r\n- -webkit-appearance 设置如何显示元素的外观\r\n\r\nhttp://ued.ctrip.com/webkitcss/demo/appearance.html\r\n\r\n\r\n- -webkit-touch-callout 设置如何显示一个可触摸目标的样式\r\n\r\nhttp://css-infos.net/property/-webkit-touch-callout\r\n\r\n- -webkit-user-select 设置是否可以选择元素内容\r\n\r\nhttp://ued.ctrip.com/blog/wp-content/webkitcss/prop/user-select.html\r\n\r\n- -webkit-user-drag 设置是否可以拖动元素内容\r\n\r\nhttp://ued.ctrip.com/blog/wp-content/webkitcss/prop/user-drag.html\r\n\r\n- -webkit-flex 设置伸缩布局\r\n\r\nhttp://ued.ctrip.com/blog/wp-content/webkitcss/prop/flex.html\r\n\r\n安卓 4.4+ 才支持, 伤不起啊...\r\n\r\n- -webkit-tap-highlight-color 设置元素的点击高亮颜色\r\n\r\nhttp://ued.ctrip.com/webkitcss/prop/tap-highlight-color.html \r\n    \r\n    /* 设置为透明, 则禁用该属性 */\r\n    -webkit-tap-highlight-color: transparent;\r\n\r\n    /* 场景: callout 和 hightlite 配合使用*/\r\n    .nohighlight {\r\n      -webkit-touch-callout: none;\r\n      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    }\r\n\r\n\r\n- 以下属性与 display: -webkit-box; 配合使用\r\n\r\n-webkit-box-sizing 设置对象的盒模型组成模式\r\n        \r\n        .selector {\r\n            width: 100px;\r\n            margin: 10px;\r\n            padding: 10px;\r\n            border: 1px solid #eee;\r\n            // 设置为 border-box, 则 width 包含了 padding 和 border \r\n            -webkit-box-sizing: border-box;\r\n        }\r\n\r\n-webkit-box-flex 设置弹性盒模型对象的子元素如何分配*剩余*空间\r\n    \r\n    .selector-parent {\r\n        width: 150px;\r\n        display: -webkit-box;\r\n    }\r\n    .selector-child-fixed {\r\n        width: 50px;\r\n    }\r\n    .selector-child-flex-1 {\r\n        /* 占 40px */\r\n        -webkit-box-flex: 2;\r\n    }\r\n    .selector-child-flex-2 {\r\n        /*占 60px */\r\n        -webkit-box-flex: 3;\r\n    }\r\n\r\n\r\n- -webkit-box-orient 设置弹性盒模型对象的子元素的排列方式\r\n\r\nhttp://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-orient.html\r\n\r\n- -webkit-box-pack 设置弹性盒模型对象的子元素的对齐方式\r\n\r\nhttp://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-pack.html\r\n\r\n- -webkit-box-align 设置弹性盒模型对象的子元素的对齐方式\r\n\r\nhttp://ued.ctrip.com/blog/wp-content/webkitcss/prop/box-align.html\r\n\r\n- -webkit-line-clamp 设置块元素显示文本的行数\r\n\r\nhttp://www.css88.com/webkit/-webkit-line-clamp/\r\n\r\n    .text-overflow-ellipsis {\r\n        // 显示一行\r\n        -webkit-line-clamp: 1;\r\n        // 溢出隐藏\r\n        text-overflow: ellipsis;\r\n        overflow: hidden;\r\n        // 和模型的子元素垂直排列\r\n        display: -webkit-box;\r\n        -webkit-box-orient: vertical;\r\n       \r\n    }\r\n\r\n-  ::-webkit-input-placeholder 设置占位文字的样式  \r\nhttp://css-tricks.com/snippets/css/style-placeholder-text/ \r\n    \r\n    .selector::-webkit-input-placeholder {\r\n        color: #eee;\r\n    }\r\n\r\n\r\n### 参考资料\r\n\r\n- [携程CSS3-webkit-私有属性列表](http://ued.ctrip.com/blog/wp-content/webkitcss/index.html)","slug":"CSS3属性扫盲笔记","updated":1418908898000,"excerpt":"","_id":"v6lcce3sbbh5wp4z","comments":true,"layout":"post","photos":[],"link":""},{"title":"CSS最佳实践","categories":["tavxphreei8q4tj6"],"tags":["xrqknw180yx87gm8"],"date":1376386395000,"content":"<blockquote>\n<p>使用最短最优最语义化的css代码对提升工作效率帮助非常大，小赖对常见的好方法总结在这里。（最后更新于 2014/08/13）</p>\n</blockquote>\n<ul>\n<li><p>使用 <a href=\"http://necolas.github.io/normalize.css/\" target=\"_blank\" rel=\"external\">normalize.css</a> 而不是 <a href=\"http://meyerweb.com/eric/tools/css/reset/\" target=\"_blank\" rel=\"external\">reset.css</a> </p>\n<p>  后者清零了所有浏览器的样式，而前者则是统一设置了所有浏览器的样式，省去不少重写样式的时间。</p>\n</li>\n<li><p>使用clearfix来清除浮动，减少不必要的 html 标签：</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 现代浏览器 */</span></div><div class=\"line\"><span class=\"class\">.clearfix</span><span class=\"pseudo\">:before</span>,</div><div class=\"line\"><span class=\"class\">.clearfix</span><span class=\"pseudo\">:after</span> <span class=\"rules\">{</span></div><div class=\"line\">     <span class=\"rule\"><span class=\"attribute\">content</span>:<span class=\"value\"> <span class=\"string\">''</span></span></span>;</div><div class=\"line\">     <span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\"> table</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"class\">.clearfix</span><span class=\"pseudo\">:after</span> <span class=\"rules\">{</span></div><div class=\"line\">     <span class=\"rule\"><span class=\"attribute\">clear</span>:<span class=\"value\"> both</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"comment\">/* IE6/7 触发hasLayout */</span></div><div class=\"line\"><span class=\"class\">.clearfix</span> <span class=\"rules\">{</span></div><div class=\"line\">     <span class=\"rule\"><span class=\"attribute\">zoom</span>:<span class=\"value\"> <span class=\"number\">1</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>如果不想使用 clearfix 来清除浮动，可用 overflow 来清除：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">.container</span> <span class=\"rules\">{</span></div><div class=\"line\">     <span class=\"rule\"><span class=\"attribute\">overflow</span>:<span class=\"value\"> auto</span></span>; <span class=\"comment\">/* 清除浮动 */</span></div><div class=\"line\">     <span class=\"rule\"><span class=\"attribute\">zoom</span>:<span class=\"value\"> <span class=\"number\">1</span></span></span>;      <span class=\"comment\">/* IE触发hasLayout */</span></div><div class=\"line\">     <span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\"> block</span></span>;      <span class=\"comment\">/* 保证容器是块元素 */</span></div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 hr 元素加上样式来做分隔线，更加语义化：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;hr <span class=\"keyword\">class</span>=<span class=\"string\">\"divider\"</span>&gt;</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">.divider</span> <span class=\"rules\">{</span></div><div class=\"line\">     <span class=\"rule\"><span class=\"attribute\">border-top</span>:<span class=\"value\"> <span class=\"number\">1px</span> solid <span class=\"hexcolor\">#eee</span></span></span>;</div><div class=\"line\">     <span class=\"rule\"><span class=\"attribute\">clear</span>:<span class=\"value\"> both</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>text-indent 隐藏文字不要设定为类似 999999em 这么大，以提高移动设备上的性能：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">.hide-text</span> <span class=\"rules\">{</span></div><div class=\"line\">     <span class=\"rule\"><span class=\"attribute\">text-indent</span>:<span class=\"value\"> <span class=\"number\">100%</span></span></span>;</div><div class=\"line\">     <span class=\"rule\"><span class=\"attribute\">white-space</span>:<span class=\"value\"> nowrap</span></span>;</div><div class=\"line\">     <span class=\"rule\"><span class=\"attribute\">overflow</span>:<span class=\"value\"> hidden</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 box-sizing 属性解决盒模型问题</li>\n</ul>\n<p>既然 IE8+ 支持<a href=\"http://caniuse.com/#search=box-sizing\" target=\"_blank\" rel=\"external\">这个属性</a>，那我们就大胆的用吧，设置后元素就不会因为被设定的内边距或者边框而挤爆容器了。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">* <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">-webkit-box-sizing</span>:<span class=\"value\"> border-box</span></span>;</div><div class=\"line\">       <span class=\"rule\"><span class=\"attribute\">-moz-box-sizing</span>:<span class=\"value\"> border-box</span></span>;</div><div class=\"line\">          <span class=\"rule\"><span class=\"attribute\">-ms-box-sizing</span>:<span class=\"value\"> border-box</span></span>;</div><div class=\"line\">             <span class=\"rule\"><span class=\"attribute\">-o-box-sizing</span>:<span class=\"value\"> border-box</span></span>;</div><div class=\"line\">                  <span class=\"rule\"><span class=\"attribute\">box-sizing</span>:<span class=\"value\"> border-box</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/CSS最佳实践.md","raw":"title: CSS最佳实践\ncategories:\n  - CSS\ntags:\n  - 最佳实践\ndate: 2013-08-13 17:33:15\n---\n\n> 使用最短最优最语义化的css代码对提升工作效率帮助非常大，小赖对常见的好方法总结在这里。（最后更新于 2014/08/13）\n\n- 使用 [normalize.css](http://necolas.github.io/normalize.css/) 而不是 [reset.css](http://meyerweb.com/eric/tools/css/reset/) \n\n    后者清零了所有浏览器的样式，而前者则是统一设置了所有浏览器的样式，省去不少重写样式的时间。\n\n- 使用clearfix来清除浮动，减少不必要的 html 标签：\n```\n/* 现代浏览器 */\n.clearfix:before,\n.clearfix:after {\n     content: '';\n     display: table;\n}\n.clearfix:after {\n     clear: both;\n}\n/* IE6/7 触发hasLayout */\n.clearfix {\n     zoom: 1;\n}     \n```\n\n- 如果不想使用 clearfix 来清除浮动，可用 overflow 来清除：\n```\n.container {\n     overflow: auto; /* 清除浮动 */\n     zoom: 1;      /* IE触发hasLayout */\n     display: block;      /* 保证容器是块元素 */\n}\n```\n\n- 使用 hr 元素加上样式来做分隔线，更加语义化：\n```\n    <hr class=\"divider\">\n```\n```\n.divider {\n     border-top: 1px solid #eee;\n     clear: both;\n}\n```\n\n- text-indent 隐藏文字不要设定为类似 999999em 这么大，以提高移动设备上的性能：\n```\n.hide-text {\n     text-indent: 100%;\n     white-space: nowrap;\n     overflow: hidden;\n}\n```\n\n- 使用 box-sizing 属性解决盒模型问题\n\n既然 IE8+ 支持[这个属性](http://caniuse.com/#search=box-sizing)，那我们就大胆的用吧，设置后元素就不会因为被设定的内边距或者边框而挤爆容器了。\n\n```\n* {\n    -webkit-box-sizing: border-box;\n       -moz-box-sizing: border-box;\n          -ms-box-sizing: border-box;\n             -o-box-sizing: border-box;\n                  box-sizing: border-box;\n}\n```\n\n\n","slug":"CSS最佳实践","updated":1418908898000,"excerpt":"","_id":"rkn4yq8vsp2pzq7n","comments":true,"layout":"post","photos":[],"link":""},{"title":"CSS碎片积累","categories":["tavxphreei8q4tj6"],"tags":["icgldl43cc8gt0in"],"date":1362230321000,"content":"<ul>\n<li>/<em> em的理解 </em>/<br>em是相对于父元素来计算大小的，浏览器默认为16px，设置body为0.75em(16<em>0.75=12px)后，若设置再body里的div为1em，则div里的文字大小实则为12px。<br>PS：若设置ol为font-size:0.6em;则嵌套的ol为60%</em>60%=36%的大小，列表嵌套会出问题。原则上用em定义字体时，嵌套不超过两层。</li>\n<li>/<em> 文字底部对齐 </em>/<br>设置文本在div里底部对齐用vertical-align：bottom;是不够的，还需设置display:table-cell;才会有效果。</li>\n<li>/<em> 内容居中文字不居中 </em>/<br>设置div绝对定位在网页中间position：absolute;后设置margin:0 auto;即可。设置内容居中但文字不跟着居中，另加text-align:left;即可。</li>\n<li>/<em> 行高建议用相对单位 </em>/<br>设置行高时建议使用百分比%或者em为单位。</li>\n<li>/<em> 浏览器默认行高 </em>/<br>浏览器默认行高为1.2em，建议设置为1.6~1.8em。<br>-/<em> 上下边距的合并 </em>/<br>在CSS中，上下的margin都设置时，取大的margin值合并，而不是简单的叠加。<br>-<br>不能简单地用line-height来替代margin的值，因为不同浏览器的解析不一样。</li>\n<li>/<em> 图片替代文字 </em>/<br>图片代替文字时设置text-indent：-999px;要加overflow:hidden;<br>最佳实践是Kellum法：<br>[css]<br>.hide-text {<br>   text-indent: 100%;<br>   white-space: nowrap;<br>   overflow: hidden;<br>}<br>[/css]</li>\n<li><p>/<em> 隐藏元素的方法 </em>/<br>visibility:hidden;元素不可见，但占据原来位置；display:none;元素不可见，不占据原来位置。<br>-<br>图像作为链接时默认会有蓝色边框，与 a 的默认样式一致</p>\n</li>\n<li><p>/<em> 元素居中的方法 </em>/<br>方法一：设置width和margin；<br>方法二：子元素inline-block父元素text-align设置为center；<br>方法三：<br>div设置为float:left;position:relative;<br>div下的ul设置为float:right;position:relative;left: 50%;/<em>整个分页向右边移动宽度的50%</em>/<br>ul下的li设置为float:left;position:relative;right:50%;<br><a href=\"http://www.w3cplus.com/css/elements-horizontally-center-with-css.html\" target=\"_blank\" rel=\"external\">原理分析</a><br>方法四：绝对定位，原理类似方法三<br>div设置为relative；<br>ul设置为absolute，left：50%；<br>li设置为relative，float，right:50%;<br>方法五：CSS3的flex实现水平居中方法<br>方法六CSS3的fit-content实现水平居中方法</p>\n</li>\n<li><p>/<em> 图片宽度自适应容器的宽度 </em>/<br>1. 从固定宽度改为流式宽度，面临的一个主要问题是图片的显示尺寸。而这个问题在css中有个简单的解决方法，就是只需要设置图片的宽度是100%。<br>2. 制作自适应大小的图片，即背景图片总是占满容器：给div设置固定的高度并设置背景图片为居中：<br>[css]<br>div.auto_image{<br>height: 200px;<br>margin: 0 auto;<br>background: url(auto_image.jpg) no-repeat center;<br>}<br>[/css]</p>\n</li>\n<li><p>/<em> 高亮用id定位的元素 </em>/<br>用#id定位页面内的元素时，稍稍高亮背景颜色提升体验：<br>[css]<br>div:target{<br>background:#333;<br>}<br>[/css]</p>\n</li>\n<li><p>/<em> outline替代border做测试 </em>/<br>之前尝试在鼠标hover一个图像时突出当前图像使用的是border，但总是会影响到周边元素，应该使用outline：不占据空间！outline的属性跟border一样：outline:1px solid #eee;</p>\n</li>\n<li>/<em> 消除relative图片偏移后的空白</em>/<br>经常将一个图片使用relative定位，有了一定的位移后原位置空白，可设置负边距让文字填充进来。</li>\n<li>/<em> 关系选择器 + 的妙用 </em>/</li>\n</ul>\n<p>使用相邻选择符时常用h3 + p 来h3后的第一个p，别忘了h3 + p + p选择第二个p，以此类推</p>\n<ul>\n<li>/<em> inline-block </em>/<br>inline-block会激发IE的haslayout，且注意inline-block元素间若有空格，会有影响</li>\n<li>/<em>  z-index的理解 </em>/<br>z-index只对定位元素起作用。如果你尝试对非定位元素设定一个z-index值，那么肯定不起作用。</li>\n<li>/<em> CSS3动画 </em>/<br>CSS3 是个独立于 JS 的线程，这个特点目前已经在 Desktop Safari / IOS Safari / Android Chrome 中被支持，所以说，移动 webapp 中的动画应用，尽可能使用 CSS3 吧</li>\n<li>/<em> 负边距的妙用 </em>/<br>当static元素的margin-top/margin-left被赋予负值时，元素将被拉进指定的方向。例如：<br>/<em> 元素向上移10px</em>/<h1 id=\"mydiv1_{margin-top:-10px;}\">mydiv1 {margin-top:-10px;}</h1>\n但如果你设置margin-bottom/right为负数，元素并不会如你所想的那样向下/右移动，而是将后续的元素拖拉进来，覆盖本来的元素。<br>[css]<h1 id=\"mydiv1_{\">mydiv1 {</h1>\nmargin-bottom:-10px;      /<em> #mydiv1后续元素向上移10px, #mydiv1 本身不移动 </em>/<br>}[/css]</li>\n<li>/<em> box-sizing的使用 </em>/<br>处理盒模型时，让width包括padding和border的宽度：<br>[css]</li>\n</ul>\n<ul>\n<li>{/<em>所有元素</em>/<br>box-sizing: border-box;/<em>别忘了加浏览器前缀</em>/<br>}[/css]</li>\n</ul>\n<ul>\n<li>/<em> 简易浮动 </em>/<br>[css]</li>\n</ul>\n<p>.clearfix{<br> overflow: auto;<br> zoom: 1;/<em>兼容IE6</em>/<br>}</p>\n<p>[/css]</p>\n<p>//lxl:最佳实践</p>\n<p>[css]<br>/<em> 现代浏览器 </em>/<br>.cf:before,<br>.cf:after {<br>     content: &quot;&quot;;<br>     display: table;<br>}</p>\n<p>.cf:after {<br>     clear: both;<br>}</p>\n<p>/<em> IE6/7 触发hasLayout </em>/<br>.cf {<br>     *zoom: 1;<br>}<br>[/css]</p>\n<ul>\n<li>/<em> 媒介查询 </em>/</li>\n</ul>\n<p>[css]</p>\n<p>@media screen and (min-width:600px) {<br>nav { float: left; width: 25%;}<br>}<br>@media screen and (max-width:599px) {<br>nav li { display: inline;}<br>}</p>\n<p>…<br>[/css]</p>\n<ul>\n<li>/<em> 视窗宽度的理解 </em>/<br>指定视窗宽就仿佛告诉了浏览器你的网页在这个宽度下显示是最合适的。要是做了一个专门在iPhone上浏览的网页，那么你就设置视窗宽为320px.<br>但是这不易于 响应式设计，因为在平板上浏览它的时候，它会被缩小到320px的区域中。在响应式设计中最好指定视窗宽和设备的屏宽一致。<br>[html]<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=320&quot;&gt;<br>[/html]</li>\n</ul>\n<p>/<em> 视窗缩放 </em>/<br>在移动端，屏幕上开合手指可以控制缩放，但当你设定视窗宽和设备宽度一致时，就没必要去放大浏览整个网页了。为了确保网页的初始显示不是放大过的，可以用initial-scale属性来设置初值。若用户在浏览过程中不需要缩放，你可以设置它为1。<br>[html]<br>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;<br>[/html]</p>\n<p>甚至是如果你连用户的滚屏操作都想禁止，你可以设置maximum-scale为1，这样就完全不能放大了。<br>[html]<br>&lt;meta name=&quot;viewport&quot; content=&quot;maximum-scale=1&quot;&gt;<br>[/html]</p>\n<p>-/<em> HTML4与HTML5文档头的理解 </em>/<br> HTML 4.01 中的 doctype 需要引用一个 DTD，这是因为 HTML 4.01 基于 SGML。HTML 5 不基于 SGML，也不需要引用 DTD，但是需要声明文档类型让浏览器按照它们应该的方式来运行。<br>-/<em> 表单值设为disabled将不会被发送 </em>/<br>如果一个元素被设置成 disabled, 那么它的值就不会被发送的server端。 正确的做法应该是使用 readonly。<br>禁用（disabled）：value 不会在 Form 提交时发送出去。这个对于按钮来说用处比较大，一般的 type=”text” 最好是隐藏，而不是禁用，因为它不需要发送数据。<br>只读（readonly）：value 会在 Form 提交时被发送出去。所以需要在外观上显示跟一般 input/textarea 一样，但不允许用户修改数据，可以用这个属性。<br>隐藏（hidden）：这个比较好理解，value 会被发送，并且用户看不到。</p>\n<ul>\n<li>/<em> :after和:before的妙用 </em>/<br>配合 :after 或者 :before 在CSS中可以用attr()显示HTML属性值<br>[css]<br>@media print {<br>a:after {<br>content: &quot; (link to &quot; attr(href) &quot;) &quot;;<br>}<br>[/css]<br>[html]<br>&lt;a href=&quot;<a href=\"http://example.com&quot;&gt;Visit\" target=\"_blank\" rel=\"external\">http://example.com&quot;&gt;Visit</a> our home page&lt;/a&gt;<br>[/html]</li>\n</ul>\n<p>-/<em> css的函数方法 </em>/<br>使用counter()在列表中自动添加序号<br>[css]<br>body {<br> counter-reset: heading;<br> }<br>h4:before {<br> counter-increment: heading;<br> content: &quot;Heading #&quot; counter(heading) &quot;.&quot;;<br> }<br>[/css]</p>\n<p>/<em> 使用calc()做算术 </em>/<br>[css]<br>.parent {<br> width: 100%;<br> border: solid black 1px;<br> position: relative;<br> }<br>.child {<br> position: absolute;<br> left: 100px;<br> width: calc(90% - 100px);<br> background-color: #ff8;<br> text-align: center;<br> }<br>[/css]</p>\n<ul>\n<li>/<em> 关闭自动补全 </em>/<br>关闭浏览器自动补全不是autocomplete=”false” 而是autocomplete=”off”，可防止自动补全插件与其的冲突<br>-<br>对em和ex的正确理解：em 是当前字体下 M 的宽度，而 ex 是当前自提下 x 的高度</li>\n<li>/<em>边距值单位的妙用</em>/<br>外边距单位的采用，margin-left和margin-right采用px而margin-top和margin-bottom采用em,能保证缩放时边距的自适应：<br>[css]<br>p {font-size: 1em; margin: .75em 30px;} /<em> 缩放时边距自适应 </em>/</li>\n</ul>\n<p>[/css]</p>\n<ul>\n<li>/<em> 盒子模型的理解 </em>/<br>盒子模型结论1：没有设定元素的宽度即width:auto;时，content、padding、margin、border的总宽度占满父元素宽度；<br>盒子模型结论2：有设定元素的宽度即width:400px;时，padding、margin、border的总宽度在原设定的宽度上增加；<br>即：盒子的width设定的只是盒子content区的宽度，而非盒子要占据的水平宽度<br>盒子模型结论对于布局的用法：<br>假定是三列等宽布局，nav、article、adise都是浮动且宽度设定后，若为其中任何一个添加padding、margin,则会让总宽度超出，解决方法是：<br>为每一个浮动的元素增加一个内部div.inner,给内部的div.inner设定padding、margin，这么以来，内部div的总宽度总是等于父元素最初设定的宽度了。<br>缺点是，这么一来，得跟极度赞成标签语义化的同行们有一番争吵了。<br>除此之外，可使用CSS3的box-sizing属性，设置width的计算方式：box-sizing ： content-box || border-box || inherit<br>content-box:Element Width/Height = border+padding+content width/height<br>border-box:Element Width/Height = 0 + 0 +content width/height<br>注：IE6/IE7不支持box-sizing,可使用一个polyfill（腻子脚本）borderBoxModel.js来兼容<br>建议使用：* {box-sizing: border-box} // 权衡利弊?</li>\n<li>/<em> 防止元素长度撑破容器 </em>/<br>防止未来出现过大的元素（特别是在动态网站中，一些过长的url都可能撑破容器）的一种思路：<br>给子元素 img {max-width: 100%};<br>或父元素：<br>overflow: hidden; /<em> 截断超出的元素（而非缩放）</em>/<br>word-wrap: break-word; /<em> 让一些长的字符串如url换行显示 </em>/<br>-/<em> 三栏布局的方法 </em>/<br>三栏布局-中栏流动布局的思路：中栏改变大小时右栏使用负外边距<br>[html]</li>\n</ul>\n<p>&lt;div id=&quot;threecolwrap&quot; style=&quot;width:100%; float:left;&quot;&gt;<br>&lt;div id=&quot;twocolwrap&quot; style=&quot;margin-right:-210px;float:left;width:100%;&quot;&gt;<br>&lt;nav style=&quot;float:left;width:150px;&quot;&gt;固定宽度&lt;/nav&gt;<br>&lt;article tyle=&quot;margin-right:210px;width:auto;&quot;&gt;给自身margi-right:210px;并给父元素margin-right:-210px&lt;/article&gt;<br>&lt;/div&gt;<br>&lt;aside id=&quot;onecolwrap&quot; width:210px;float:left;&gt;固定宽度为外边距210px&lt;/aside&gt;<br>&lt;/div&gt;</p>\n<p>[/html[/html]</p>\n<p>-<br>/<em> 一个更简单巧妙的办法实现三栏布局(推荐)</em>/<br>给三个栏都设定display:table-cell让他们具有表格的属性就行了：（缺点是IE7以下的不兼容,且没有polyfill脚本，觉悟吧！）<br>[html]<br>&lt;nav style=&quot;display:table-cell;width:150px;&quot;&gt;固定宽度&lt;/nav&gt;<br>&lt;article style=&quot;display:table-cell;width:auto;&quot;&gt;宽度自适应&lt;/article&gt;<br>&lt;aside style=&quot;display:table-cell;width:210px;&quot;&gt;固定宽度&lt;/aside&gt;<br>[/html]</p>\n<p>-<br>清除浮动的几种方法<br>方法一：父元素overflow:hidden; //不能在下拉菜单中使用<br>方法二：父元素也浮动，父元素下的元素clear:both; // 不能对靠外边距居中的元素使用<br>方法三：父元素内最后放一个清楚浮动的元素div.clearFloat<br>方法四：父元素.clearfix添加伪类模拟方法三（推荐使用,见上文）</p>\n<ul>\n<li>/<em> 背景图片定位不同单位下的理解 </em>/<br>使用关键字和百分比的情况下，理解background-position：33% 33%;时，是背景图片的33%处与元素的33%处重叠！<br>使用像素的绝对数值的情况下，理解background-position：33px 33px;时，图片左上角被放在(33px,33px)的地方！</li>\n<li>/<em> 添加水印的方法 </em>/<br>background-attachment: fixed;常用给body中间添加水印（默认值是scroll）</li>\n<li>/<em> font-family常见字体系列 </em>/<br>font-family字体栈中最后一个通常是字体类的名字，能保证最坏情况下文档能以正确的字体显示。常用的字体类有：<br>font-family: serif; // 衬线字体<br>font-family: sans-serif; // 无衬线字体<br>font-family: monospace; // 等宽字体<br>font-family: cursive; // 草书体或手写体<br>font-family: fanstasy; // 一般是奇怪的字体</li>\n<li>/<em> font-xxx属性的理解 </em>/<br>font-weight中只有bold和normal才得到了浏览器的广泛支持，建议只使用这两个属性<br>font-varient中只有normal和small-caps（小型大写字母）<br>font的简写注意顺序和格式：<br>font: italic small-caps bold 12px/1.5em arial,verdana;<br>即顺序为：<br>font : font-style || font-variant || font-weight || font-size || line-height || font-family<br>默认值为：normal normal normal medium normal “Times New Roman” 。<br>font-size和font-family是必写项，font-size和line-height只能通过斜杠/组成一个值，不能分开写，且应该在font-family前。</li>\n<li>/<em> text-indet缩进是继承的 </em>/<br>text-indent原来是有继承的，且是计算得出的结果父元素400px * 5% = 20px，则子元素默认缩进20px !<br>-<br>保持id和class最少却又能准确定位元素：正确的方法是设定一个id，以该id为hook（路标），选择它的子元素进行定位，同时提高HTML和CSS代码的易读性！// lxl:缺点是牺牲了权重</li>\n<li>/<em> 非首位子选择符 </em>/<br>ul li + li {border-top:1px solid #eee;}解决导航菜单不用给最后一个li添加类然后去掉最后一个li的下边框的问题</li>\n<li>/<em> 代码分离提高重用性 </em>/<br>在写一个功能性的代码，如下拉菜单时，建议将功能代码和视觉代码分开写，可提高重用性</li>\n<li>/overflow:hidden对定位元素的影响/<br>overflow:hidden 会修剪相对定位（position:relative）的元素，但并不总是会隐藏绝对定位元素。</li>\n<li>/<em> zoom触发IE的hasLayout属性 </em>/<br>zoom为ie私有css属性，一般用来触发ie的hasLayout属性，解决ie下的浮动，margin重叠等一些问题。</li>\n<li>/<em> 图片优化 </em>/<br>减少颜色数可减小PNG图片的大小</li>\n<li>/<em>禁止修改文本框大小</em>/<br>[css]<br>textarea { resize: none; } /<em> 禁用textarea的大小改变 </em>/<br>[/css]</li>\n<li>/<em> 自定义光标样式 </em>/<br>cursor: url(cursor.png), default; /<em> 添加default才能在chrome激活cursor rule,否则不能显示</em>/</li>\n<li><p>/<em> 网页点击启动QQ </em>/<br>[html]<br>&lt;a href=&quot;tencent://message/?uin=545183877&amp;Site=JooIT.com&amp;Menu=yes&quot;&gt;点击启动QQ和lxl聊天！&lt;/a&gt;<br>[/html]</p>\n</li>\n<li><p>/<em> 顶部栏和底部栏留空 </em>/<br>对footer或者header设定了position：fixed；要记得给他们腾出个地方来。对于footer就可在body中设定一个margin-bottom的值给它。<br>-<br>使用CSS的attr和content属性，改变title的样式：<br>[html]<br>&lt;p class=&quot;tooltip&quot; data-title=&quot;I’am data-title&quot;&gt;Hover me！&lt;/p&gt;<br>&lt;p class=&quot;tooltip&quot; data-title=&quot;I’am data-title&quot; title=&quot;I’am title&quot;&gt;注意，使用了自定义的data-title而没有写原属性title，可防止冲突产生&lt;/p&gt;<br>[/html]</p>\n</li>\n</ul>\n<p>[css]<br>.tooltip:hover:after {<br>     content: attr(data-title);<br>     background: #eee;<br>     border: 1px solid red;<br>     position: relative;<br>     top: -26px;<br>     left: -40px;<br>}<br>[/css]</p>\n<ul>\n<li>/<em> 快速检查a标签href属性 </em>/<br>[html]<br>&lt;a id=&quot;show-href&quot; href=&quot;<a href=\"http://laispace.com&quot;&gt;来思碑&lt;/a&amp;gt\" target=\"_blank\" rel=\"external\">http://laispace.com&quot;&gt;来思碑&lt;/a&amp;gt</a>;<br>[/html]</li>\n</ul>\n<p>[css]</p>\n<h1 id=\"show-href:hover:after_{\">show-href:hover:after {</h1>\n<pre><code> <span class=\"attribute\">content</span><span class=\"value\">: <span class=\"function\">attr</span>(href);</span>\n <span class=\"attribute\">background</span><span class=\"value\">: <span class=\"hexcolor\">#eee</span>;</span>\n <span class=\"attribute\">border</span><span class=\"value\">: <span class=\"number\">1px</span> solid red;</span>\n</code></pre><p> }<br>[/css]</p>\n<ul>\n<li>/<em> IE6 margin加倍的问题 </em>/<br>当box为float时，IE6中box左右的margin会加倍</li>\n</ul>\n","source":"_posts/CSS碎片积累.md","raw":"title: CSS碎片积累\ncategories:\n  - CSS\ntags:\n  - 碎片\ndate: 2013-03-02 21:18:41\n---\n\n- /* em的理解 */\nem是相对于父元素来计算大小的，浏览器默认为16px，设置body为0.75em(16*0.75=12px)后，若设置再body里的div为1em，则div里的文字大小实则为12px。\nPS：若设置ol为font-size:0.6em;则嵌套的ol为60%*60%=36%的大小，列表嵌套会出问题。原则上用em定义字体时，嵌套不超过两层。\n- /* 文字底部对齐 */\n设置文本在div里底部对齐用vertical-align：bottom;是不够的，还需设置display:table-cell;才会有效果。\n- /* 内容居中文字不居中 */\n设置div绝对定位在网页中间position：absolute;后设置margin:0 auto;即可。设置内容居中但文字不跟着居中，另加text-align:left;即可。\n- /* 行高建议用相对单位 */\n设置行高时建议使用百分比%或者em为单位。\n- /* 浏览器默认行高 */\n浏览器默认行高为1.2em，建议设置为1.6~1.8em。\n-/* 上下边距的合并 */\n在CSS中，上下的margin都设置时，取大的margin值合并，而不是简单的叠加。\n-\n不能简单地用line-height来替代margin的值，因为不同浏览器的解析不一样。\n- /* 图片替代文字 */\n图片代替文字时设置text-indent：-999px;要加overflow:hidden;\n最佳实践是Kellum法：\n[css]\n.hide-text {\n     text-indent: 100%;\n     white-space: nowrap;\n     overflow: hidden;\n}\n[/css]\n- /* 隐藏元素的方法 */\nvisibility:hidden;元素不可见，但占据原来位置；display:none;元素不可见，不占据原来位置。\n-\n图像作为链接时默认会有蓝色边框，与 a 的默认样式一致\n\n- /* 元素居中的方法 */\n方法一：设置width和margin；\n方法二：子元素inline-block父元素text-align设置为center；\n方法三：\ndiv设置为float:left;position:relative;\ndiv下的ul设置为float:right;position:relative;left: 50%;/*整个分页向右边移动宽度的50%*/\nul下的li设置为float:left;position:relative;right:50%;\n[原理分析](http://www.w3cplus.com/css/elements-horizontally-center-with-css.html)\n方法四：绝对定位，原理类似方法三\ndiv设置为relative；\nul设置为absolute，left：50%；\nli设置为relative，float，right:50%;\n方法五：CSS3的flex实现水平居中方法\n方法六CSS3的fit-content实现水平居中方法\n- /* 图片宽度自适应容器的宽度 */\n1\\. 从固定宽度改为流式宽度，面临的一个主要问题是图片的显示尺寸。而这个问题在css中有个简单的解决方法，就是只需要设置图片的宽度是100%。\n2\\. 制作自适应大小的图片，即背景图片总是占满容器：给div设置固定的高度并设置背景图片为居中：\n[css]\ndiv.auto_image{\nheight: 200px;\nmargin: 0 auto;\nbackground: url(auto_image.jpg) no-repeat center;\n}\n[/css]\n\n- /* 高亮用id定位的元素 */\n用#id定位页面内的元素时，稍稍高亮背景颜色提升体验：\n[css]\ndiv:target{\nbackground:#333;\n}\n[/css]\n\n- /* outline替代border做测试 */\n之前尝试在鼠标hover一个图像时突出当前图像使用的是border，但总是会影响到周边元素，应该使用outline：不占据空间！outline的属性跟border一样：outline:1px solid #eee;\n- /* 消除relative图片偏移后的空白*/\n经常将一个图片使用relative定位，有了一定的位移后原位置空白，可设置负边距让文字填充进来。\n- /* 关系选择器 + 的妙用 */\n\n使用相邻选择符时常用h3 + p 来h3后的第一个p，别忘了h3 + p + p选择第二个p，以此类推\n- /* inline-block */\ninline-block会激发IE的haslayout，且注意inline-block元素间若有空格，会有影响\n- /*  z-index的理解 */\nz-index只对定位元素起作用。如果你尝试对非定位元素设定一个z-index值，那么肯定不起作用。\n- /* CSS3动画 */\nCSS3 是个独立于 JS 的线程，这个特点目前已经在 Desktop Safari / IOS Safari / Android Chrome 中被支持，所以说，移动 webapp 中的动画应用，尽可能使用 CSS3 吧\n- /* 负边距的妙用 */\n当static元素的margin-top/margin-left被赋予负值时，元素将被拉进指定的方向。例如：\n/* 元素向上移10px*/\n#mydiv1 {margin-top:-10px;}\n但如果你设置margin-bottom/right为负数，元素并不会如你所想的那样向下/右移动，而是将后续的元素拖拉进来，覆盖本来的元素。\n[css]\n#mydiv1 {\nmargin-bottom:-10px;      /* #mydiv1后续元素向上移10px, #mydiv1 本身不移动 */\n}[/css]\n- /* box-sizing的使用 */\n处理盒模型时，让width包括padding和border的宽度：\n[css]\n* {/*所有元素*/\n box-sizing: border-box;/*别忘了加浏览器前缀*/\n}[/css]\n\n- /* 简易浮动 */\n[css]\n\n.clearfix{\n overflow: auto;\n zoom: 1;/*兼容IE6*/\n}\n\n[/css]\n\n//lxl:最佳实践\n\n[css]\n/* 现代浏览器 */\n.cf:before,\n.cf:after {\n     content: &quot;&quot;;\n     display: table;\n}\n\n.cf:after {\n     clear: both;\n}\n\n/* IE6/7 触发hasLayout */\n.cf {\n     *zoom: 1;\n}     \n[/css]\n- /* 媒介查询 */\n\n[css]\n\n@media screen and (min-width:600px) {\nnav { float: left; width: 25%;}\n}\n@media screen and (max-width:599px) {\nnav li { display: inline;}\n}\n\n...\n[/css]\n\n- /* 视窗宽度的理解 */\n指定视窗宽就仿佛告诉了浏览器你的网页在这个宽度下显示是最合适的。要是做了一个专门在iPhone上浏览的网页，那么你就设置视窗宽为320px.\n但是这不易于 响应式设计，因为在平板上浏览它的时候，它会被缩小到320px的区域中。在响应式设计中最好指定视窗宽和设备的屏宽一致。\n[html]\n&lt;meta name=&quot;viewport&quot; content=&quot;width=320&quot;&gt;\n[/html]\n\n/* 视窗缩放 */\n在移动端，屏幕上开合手指可以控制缩放，但当你设定视窗宽和设备宽度一致时，就没必要去放大浏览整个网页了。为了确保网页的初始显示不是放大过的，可以用initial-scale属性来设置初值。若用户在浏览过程中不需要缩放，你可以设置它为1。\n[html]\n&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;\n[/html]\n\n甚至是如果你连用户的滚屏操作都想禁止，你可以设置maximum-scale为1，这样就完全不能放大了。\n[html]\n&lt;meta name=&quot;viewport&quot; content=&quot;maximum-scale=1&quot;&gt;\n[/html]\n\n-/* HTML4与HTML5文档头的理解 */\n HTML 4.01 中的 doctype 需要引用一个 DTD，这是因为 HTML 4.01 基于 SGML。HTML 5 不基于 SGML，也不需要引用 DTD，但是需要声明文档类型让浏览器按照它们应该的方式来运行。\n-/* 表单值设为disabled将不会被发送 */\n如果一个元素被设置成 disabled, 那么它的值就不会被发送的server端。 正确的做法应该是使用 readonly。\n禁用（disabled）：value 不会在 Form 提交时发送出去。这个对于按钮来说用处比较大，一般的 type=\"text\" 最好是隐藏，而不是禁用，因为它不需要发送数据。\n只读（readonly）：value 会在 Form 提交时被发送出去。所以需要在外观上显示跟一般 input/textarea 一样，但不允许用户修改数据，可以用这个属性。\n隐藏（hidden）：这个比较好理解，value 会被发送，并且用户看不到。\n- /* :after和:before的妙用 */\n配合 :after 或者 :before 在CSS中可以用attr()显示HTML属性值\n[css]\n@media print {\n a:after {\n content: &quot; (link to &quot; attr(href) &quot;) &quot;;\n }\n[/css]\n[html]\n&lt;a href=&quot;http://example.com&quot;&gt;Visit our home page&lt;/a&gt;\n[/html]\n\n-/* css的函数方法 */\n使用counter()在列表中自动添加序号\n[css]\nbody {\n counter-reset: heading;\n }\nh4:before {\n counter-increment: heading;\n content: &quot;Heading #&quot; counter(heading) &quot;.&quot;;\n }\n[/css]\n\n/* 使用calc()做算术 */\n[css]\n.parent {\n width: 100%;\n border: solid black 1px;\n position: relative;\n }\n.child {\n position: absolute;\n left: 100px;\n width: calc(90% - 100px);\n background-color: #ff8;\n text-align: center;\n }\n[/css]\n\n- /* 关闭自动补全 */\n关闭浏览器自动补全不是autocomplete=\"false\" 而是autocomplete=\"off\"，可防止自动补全插件与其的冲突\n-\n对em和ex的正确理解：em 是当前字体下 M 的宽度，而 ex 是当前自提下 x 的高度\n- /*边距值单位的妙用*/\n外边距单位的采用，margin-left和margin-right采用px而margin-top和margin-bottom采用em,能保证缩放时边距的自适应：\n[css]\n p {font-size: 1em; margin: .75em 30px;} /* 缩放时边距自适应 */\n\n[/css]\n\n- /* 盒子模型的理解 */\n盒子模型结论1：没有设定元素的宽度即width:auto;时，content、padding、margin、border的总宽度占满父元素宽度；\n盒子模型结论2：有设定元素的宽度即width:400px;时，padding、margin、border的总宽度在原设定的宽度上增加；\n即：盒子的width设定的只是盒子content区的宽度，而非盒子要占据的水平宽度\n盒子模型结论对于布局的用法：\n假定是三列等宽布局，nav、article、adise都是浮动且宽度设定后，若为其中任何一个添加padding、margin,则会让总宽度超出，解决方法是：\n为每一个浮动的元素增加一个内部div.inner,给内部的div.inner设定padding、margin，这么以来，内部div的总宽度总是等于父元素最初设定的宽度了。\n缺点是，这么一来，得跟极度赞成标签语义化的同行们有一番争吵了。\n除此之外，可使用CSS3的box-sizing属性，设置width的计算方式：box-sizing ： content-box || border-box || inherit\ncontent-box:Element Width/Height = border+padding+content width/height\nborder-box:Element Width/Height = 0 + 0 +content width/height\n注：IE6/IE7不支持box-sizing,可使用一个polyfill（腻子脚本）borderBoxModel.js来兼容\n建议使用：* {box-sizing: border-box} // 权衡利弊?\n- /* 防止元素长度撑破容器 */\n防止未来出现过大的元素（特别是在动态网站中，一些过长的url都可能撑破容器）的一种思路：\n给子元素 img {max-width: 100%};\n或父元素：\noverflow: hidden; /* 截断超出的元素（而非缩放）*/\nword-wrap: break-word; /* 让一些长的字符串如url换行显示 */\n-/* 三栏布局的方法 */\n三栏布局-中栏流动布局的思路：中栏改变大小时右栏使用负外边距\n[html]\n\n&lt;div id=&quot;threecolwrap&quot; style=&quot;width:100%; float:left;&quot;&gt;\n&lt;div id=&quot;twocolwrap&quot; style=&quot;margin-right:-210px;float:left;width:100%;&quot;&gt;\n&lt;nav style=&quot;float:left;width:150px;&quot;&gt;固定宽度&lt;/nav&gt;\n&lt;article tyle=&quot;margin-right:210px;width:auto;&quot;&gt;给自身margi-right:210px;并给父元素margin-right:-210px&lt;/article&gt;\n&lt;/div&gt;\n&lt;aside id=&quot;onecolwrap&quot; width:210px;float:left;&gt;固定宽度为外边距210px&lt;/aside&gt;\n&lt;/div&gt;\n\n[/html[/html]\n\n-\n/* 一个更简单巧妙的办法实现三栏布局(推荐)*/\n给三个栏都设定display:table-cell让他们具有表格的属性就行了：（缺点是IE7以下的不兼容,且没有polyfill脚本，觉悟吧！）\n[html]\n&lt;nav style=&quot;display:table-cell;width:150px;&quot;&gt;固定宽度&lt;/nav&gt;\n&lt;article style=&quot;display:table-cell;width:auto;&quot;&gt;宽度自适应&lt;/article&gt;\n&lt;aside style=&quot;display:table-cell;width:210px;&quot;&gt;固定宽度&lt;/aside&gt;\n[/html]\n\n-\n清除浮动的几种方法\n方法一：父元素overflow:hidden; //不能在下拉菜单中使用\n方法二：父元素也浮动，父元素下的元素clear:both; // 不能对靠外边距居中的元素使用\n方法三：父元素内最后放一个清楚浮动的元素div.clearFloat\n方法四：父元素.clearfix添加伪类模拟方法三（推荐使用,见上文）\n- /* 背景图片定位不同单位下的理解 */\n使用关键字和百分比的情况下，理解background-position：33% 33%;时，是背景图片的33%处与元素的33%处重叠！\n使用像素的绝对数值的情况下，理解background-position：33px 33px;时，图片左上角被放在(33px,33px)的地方！\n- /* 添加水印的方法 */\nbackground-attachment: fixed;常用给body中间添加水印（默认值是scroll）\n- /* font-family常见字体系列 */\nfont-family字体栈中最后一个通常是字体类的名字，能保证最坏情况下文档能以正确的字体显示。常用的字体类有：\nfont-family: serif; // 衬线字体\nfont-family: sans-serif; // 无衬线字体\nfont-family: monospace; // 等宽字体\nfont-family: cursive; // 草书体或手写体\nfont-family: fanstasy; // 一般是奇怪的字体\n- /* font-xxx属性的理解 */\nfont-weight中只有bold和normal才得到了浏览器的广泛支持，建议只使用这两个属性\nfont-varient中只有normal和small-caps（小型大写字母）\nfont的简写注意顺序和格式：\nfont: italic small-caps bold 12px/1.5em arial,verdana;\n即顺序为：\nfont : font-style || font-variant || font-weight || font-size || line-height || font-family\n默认值为：normal normal normal medium normal \"Times New Roman\" 。\nfont-size和font-family是必写项，font-size和line-height只能通过斜杠/组成一个值，不能分开写，且应该在font-family前。\n- /* text-indet缩进是继承的 */\ntext-indent原来是有继承的，且是计算得出的结果父元素400px * 5% = 20px，则子元素默认缩进20px !\n-\n保持id和class最少却又能准确定位元素：正确的方法是设定一个id，以该id为hook（路标），选择它的子元素进行定位，同时提高HTML和CSS代码的易读性！// lxl:缺点是牺牲了权重\n- /* 非首位子选择符 */\n ul li + li {border-top:1px solid #eee;}解决导航菜单不用给最后一个li添加类然后去掉最后一个li的下边框的问题\n- /* 代码分离提高重用性 */ \n在写一个功能性的代码，如下拉菜单时，建议将功能代码和视觉代码分开写，可提高重用性\n- /overflow:hidden对定位元素的影响/\noverflow:hidden 会修剪相对定位（position:relative）的元素，但并不总是会隐藏绝对定位元素。\n- /* zoom触发IE的hasLayout属性 */\nzoom为ie私有css属性，一般用来触发ie的hasLayout属性，解决ie下的浮动，margin重叠等一些问题。\n- /* 图片优化 */\n减少颜色数可减小PNG图片的大小\n- /*禁止修改文本框大小*/\n[css]\ntextarea { resize: none; } /* 禁用textarea的大小改变 */\n[/css]\n- /* 自定义光标样式 */\ncursor: url(cursor.png), default; /* 添加default才能在chrome激活cursor rule,否则不能显示*/\n- /* 网页点击启动QQ */\n[html]\n&lt;a href=&quot;tencent://message/?uin=545183877&amp;Site=JooIT.com&amp;Menu=yes&quot;&gt;点击启动QQ和lxl聊天！&lt;/a&gt;\n[/html]\n\n- /* 顶部栏和底部栏留空 */\n对footer或者header设定了position：fixed；要记得给他们腾出个地方来。对于footer就可在body中设定一个margin-bottom的值给它。\n-\n使用CSS的attr和content属性，改变title的样式：\n[html]\n&lt;p class=&quot;tooltip&quot; data-title=&quot;I'am data-title&quot;&gt;Hover me！&lt;/p&gt;\n&lt;p class=&quot;tooltip&quot; data-title=&quot;I'am data-title&quot; title=&quot;I'am title&quot;&gt;注意，使用了自定义的data-title而没有写原属性title，可防止冲突产生&lt;/p&gt;\n[/html]\n\n[css]\n.tooltip:hover:after {\n     content: attr(data-title);\n     background: #eee;\n     border: 1px solid red;\n     position: relative;\n     top: -26px;\n     left: -40px;\n}\n[/css]\n\n- /* 快速检查a标签href属性 */\n[html]\n&lt;a id=&quot;show-href&quot; href=&quot;http://laispace.com&quot;&gt;来思碑&lt;/a&gt;\n[/html]\n\n[css]\n#show-href:hover:after {\n     content: attr(href);\n     background: #eee;\n     border: 1px solid red;\n }\n[/css]\n\n- /* IE6 margin加倍的问题 */\n当box为float时，IE6中box左右的margin会加倍","slug":"CSS碎片积累","updated":1418908898000,"excerpt":"","_id":"yn87bgs8j1qwbm72","comments":true,"layout":"post","photos":[],"link":""},{"title":"Cookies学习笔记","tags":["mgccz0i0yfo0tx1g"],"id":513,"categories":["be592wtznj5wcvwn"],"date":1381031117000,"content":"<p>Cookie 的格式是：</p>\n<p>[javascript]<br>name=&lt;value&gt;[; expires=&lt;date&gt;][; domain=&lt;domain&gt;][; path=&lt;path&gt;][; secure]<br>//名称=&lt;值&gt;[; expires=&lt;日期&gt;][; domain=&lt;域&gt;][; path=&lt;路径&gt;][; 安全]<br>[/javascript]</p>\n<p>// 设置cookie</p>\n<p>[javascript]<br>document.cookie=&quot;key=escape(value)&quot;;<br>[/javascript]</p>\n<p>//escape()函数进行编码，它能将一些特殊符号使用十六进制表示，例如空格将会编码为“20%”，从而可以存储于cookie值中，而且使用此 种方案还可以避免中文乱码的出现。在取值的时候需要unescape(value)对value再进行转码即可。</p>\n<p>// 设置多个cookie<br>设置多个cookie需要多次使用这样的方法。正确的设置方法是：</p>\n<p>[javascript]<br>document.cookie=&quot;key=escape(value)&quot;;<br>document.cookie=&quot;key1=escape(value1)&quot;<br>// 而不是<br>document.cookie=&quot;key=escape(value);key1=escape(value1)&quot;;<br>[/javascript]<br>// 获取cookie，注意第二个开始key值前面有空格：</p>\n<p>[javascript]<br>function getCookie(key){<br>     var aCookie = document.cookie.split(&quot;;&quot;);<br>     for (var i=0; i &lt; aCookie.length; i++){<br>         var aCrumb = aCookie[i].split(&quot;=&quot;);<br>         if (key === aCrumb[0].replace(/^\\s<em>|\\s</em>$/,&quot;&quot;)){<br>            return unescape(aCrumb[1]);<br>         }<br>     }<br>}<br>[/javascript]<br>// 设置cookie的存活时间：</p>\n<p>[javascript]<br>var liveDate = new Date();<br>liveDate.setTime(liveDate.getTime() + 3<em>24</em>60<em>60</em>1000); //设置cookie的name的存活时间为3天。<br>document.cookie=&quot;name=test;expires=&quot; + liveDate.toGMTString();<br>[/javascript]<br>// 删除cookie,设置expires一个过期的时间即可</p>\n<p>[javascript]<br>var liveDate = new Date();<br>liveDate.setTime(liveDate.getTime() - 10000);<br>document.cookie = &quot;name=test;expires=&quot; + date.toGMTString();<br>[/javascript]<br>// 拓展cookie的作用域到根目录：</p>\n<p>[javascript]<br>document.cookie=&quot;key=escape(value);path=/&quot;;<br>[/javascript]<br>// 设置cookie的访问域</p>\n<p>[javascript]<br>document.cookie=&quot;name=value;domain=cookieDomain&quot;;<br>//以Laispace为例，要实现跨主机访问，可以写为：<br>document.cookie=&quot;name=value;domain=.laispace.com&quot;; //所有Laispace.com下的主机都可以访问该cookie<br>[/javascript]<br>// 设置cookie的访问权限<br>设置了该属性，只有使用https协议才能够访问到<br>注意点：<br>如果设置cookie时带path属性，那么在删除的时候一定要加上path属性，否则删除的是当前目录下设置的cookie值。</p>\n","source":"_posts/Cookies学习笔记.md","raw":"title: Cookies学习笔记\ntags:\n  - cookies\nid: 513\ncategories:\n  - Javascript\ndate: 2013-10-06 11:45:17\n---\n\nCookie 的格式是：\n\n[javascript]\nname=&lt;value&gt;[; expires=&lt;date&gt;][; domain=&lt;domain&gt;][; path=&lt;path&gt;][; secure]\n//名称=&lt;值&gt;[; expires=&lt;日期&gt;][; domain=&lt;域&gt;][; path=&lt;路径&gt;][; 安全]\n[/javascript]\n\n// 设置cookie\n\n[javascript]\ndocument.cookie=&quot;key=escape(value)&quot;;\n[/javascript]\n\n//escape()函数进行编码，它能将一些特殊符号使用十六进制表示，例如空格将会编码为“20%”，从而可以存储于cookie值中，而且使用此 种方案还可以避免中文乱码的出现。在取值的时候需要unescape(value)对value再进行转码即可。\n\n// 设置多个cookie\n设置多个cookie需要多次使用这样的方法。正确的设置方法是：\n\n[javascript]\ndocument.cookie=&quot;key=escape(value)&quot;;\ndocument.cookie=&quot;key1=escape(value1)&quot;\n// 而不是\ndocument.cookie=&quot;key=escape(value);key1=escape(value1)&quot;;\n[/javascript]\n// 获取cookie，注意第二个开始key值前面有空格：\n\n[javascript]\nfunction getCookie(key){\n     var aCookie = document.cookie.split(&quot;;&quot;);\n     for (var i=0; i &lt; aCookie.length; i++){\n         var aCrumb = aCookie[i].split(&quot;=&quot;);\n         if (key === aCrumb[0].replace(/^\\s*|\\s*$/,&quot;&quot;)){\n            return unescape(aCrumb[1]);\n         }\n     }\n}\n[/javascript]\n// 设置cookie的存活时间：\n\n[javascript]\nvar liveDate = new Date();\nliveDate.setTime(liveDate.getTime() + 3*24*60*60*1000); //设置cookie的name的存活时间为3天。\ndocument.cookie=&quot;name=test;expires=&quot; + liveDate.toGMTString();\n[/javascript]\n// 删除cookie,设置expires一个过期的时间即可\n\n[javascript]\nvar liveDate = new Date();\nliveDate.setTime(liveDate.getTime() - 10000);\ndocument.cookie = &quot;name=test;expires=&quot; + date.toGMTString();\n[/javascript]\n// 拓展cookie的作用域到根目录：\n\n[javascript]\ndocument.cookie=&quot;key=escape(value);path=/&quot;;\n[/javascript]\n// 设置cookie的访问域\n\n[javascript]\ndocument.cookie=&quot;name=value;domain=cookieDomain&quot;;\n//以Laispace为例，要实现跨主机访问，可以写为：\ndocument.cookie=&quot;name=value;domain=.laispace.com&quot;; //所有Laispace.com下的主机都可以访问该cookie\n[/javascript]\n// 设置cookie的访问权限\n设置了该属性，只有使用https协议才能够访问到\n注意点：\n如果设置cookie时带path属性，那么在删除的时候一定要加上path属性，否则删除的是当前目录下设置的cookie值。","slug":"Cookies学习笔记","updated":1418908898000,"excerpt":"","_id":"k2eq7hpquqfmsxqn","comments":true,"layout":"post","photos":[],"link":""},{"title":"Git fork 别人的项目后更新代码的方法","categories":["s1fvmf8yl7edxxwd"],"date":1406978380000,"tags":["ga9nt5ajygn70ngs"],"content":"<ol>\n<li><p>举个例子，需要 fork 这个项目 <a href=\"https://github.com/tarobjtu/WebFundamentals.git\" target=\"_blank\" rel=\"external\">https://github.com/tarobjtu/WebFundamentals.git</a></p>\n</li>\n<li><p>点击 fork, 就会复制一份代码到自己的 repo <a href=\"https://github.com/laispace/WebFundamentals.git\" target=\"_blank\" rel=\"external\">https://github.com/laispace/WebFundamentals.git</a></p>\n</li>\n<li><p>本地 clone 自己 repo 中的这个项目</p>\n<p> $ git clone <a href=\"https://github.com/laispace/WebFundamentals.git\" target=\"_blank\" rel=\"external\">https://github.com/laispace/WebFundamentals.git</a></p>\n</li>\n<li><p>添加自己的远程仓库</p>\n<p> $ cd WebFundamentals<br> $ git remote add laispace <a href=\"https://github.com/laispace/WebFundamentals.git\" target=\"_blank\" rel=\"external\">https://github.com/laispace/WebFundamentals.git</a></p>\n</li>\n<li><p>修改代码后进行 push</p>\n<p> $ git add —all<br> $ git commit -m ‘edit some files’<br> $ git push</p>\n</li>\n</ol>\n<p>这时候，如果源仓库 tarobjtu 的项目代码进行了更新，而我们自己 fork 下来的代码想要合并这些更新怎么做呢？</p>\n<ol>\n<li><p>添加源项目的远程仓库</p>\n<p> $ git remote add tarobjtu <a href=\"https://github.com/tarobjtu/WebFundamentals.git\" target=\"_blank\" rel=\"external\">https://github.com/tarobjtu/WebFundamentals.git</a><br> // 这时候可以看到有两个源了<br> $ git remote<br> // laispace<br> // tarobjtu</p>\n</li>\n<li><p>拉取源仓库的代码到本地</p>\n<p> $ git fetch tarobjtu</p>\n</li>\n<li><p>合并源仓库的 master 分支代码到本地</p>\n<p> $ git merge tarobjtu/master</p>\n</li>\n<li><p>提交代码到我们自己的仓库</p>\n<p> $ git add —all<br> $ git commit -m ‘合并源仓库代码’<br> $ git push</p>\n</li>\n</ol>\n","source":"_posts/Git-fork-别人的项目后更新代码的方法.md","raw":"title: Git fork 别人的项目后更新代码的方法\ncategories:\n  - Tools\ndate: 2014-08-02 19:19:40\ntags:\n  - git\t\t\t\n---\n\n1. 举个例子，需要 fork 这个项目 https://github.com/tarobjtu/WebFundamentals.git\n\n2. 点击 fork, 就会复制一份代码到自己的 repo https://github.com/laispace/WebFundamentals.git\n\n3. 本地 clone 自己 repo 中的这个项目\n\n    $ git clone https://github.com/laispace/WebFundamentals.git\n\n4. 添加自己的远程仓库\n    \n    $ cd WebFundamentals\n    $ git remote add laispace https://github.com/laispace/WebFundamentals.git\n\n5. 修改代码后进行 push\n\n    $ git add --all\n    $ git commit -m 'edit some files'\n    $ git push\n\n这时候，如果源仓库 tarobjtu 的项目代码进行了更新，而我们自己 fork 下来的代码想要合并这些更新怎么做呢？\n\n6. 添加源项目的远程仓库\n\n    $ git remote add tarobjtu https://github.com/tarobjtu/WebFundamentals.git\n    // 这时候可以看到有两个源了\n    $ git remote  \n    // laispace\n    // tarobjtu\n\n7. 拉取源仓库的代码到本地\n    \n    $ git fetch tarobjtu\n\n8. 合并源仓库的 master 分支代码到本地\n\n    $ git merge tarobjtu/master\n\n9. 提交代码到我们自己的仓库\n\n    $ git add --all\n    $ git commit -m '合并源仓库代码'\n    $ git push\n\n","slug":"Git-fork-别人的项目后更新代码的方法","updated":1418908898000,"excerpt":"","_id":"vyvtuadkaahc9iky","comments":true,"layout":"post","photos":[],"link":""},{"title":"Goagent使用心得","tags":["pla62rrl9yhoir3w"],"id":401,"categories":["s1fvmf8yl7edxxwd"],"date":1370059378000,"content":"<p>Goagent实在是太棒了，可畅游被Qiang了的网站。初次安装可详见 <a href=\"https://code.google.com/p/goagent/wiki/InstallGuide\" target=\"_blank\" rel=\"external\">https://code.google.com/p/goagent/wiki/InstallGuide</a></p>\n<div></div><br><div>小赖使用总结：</div><br><div>     1.goagent突然上不去了？</div><br><div>        可能是国内cn的代理IP被封了，这时候可打开 local/proxy.ini <strong>修改profile = google_cn 为 profile = google_hk</strong></div><br><div></div><br><div>     2.翻Qiang点击切换按钮麻烦？</div><br><div><strong>        打开 SwitchySharp -&gt;选项-&gt;切换规则，点击【新建规则】</strong>，编写如下：注意 <em>://</em>.twitter.com/<em> 里的</em>是通配符，指可匹配任意字符</div><br><div></div><br><div><br><div>     3.手动切换代理很麻烦？</div><br><div>        按2的设置后，点击 <strong>SwitchySharp-&gt;自动切换模式</strong>，那么每次浏览时，goagent就会按建立好的切换规则来选择是否使用代理来翻Qiang了</div><br><div></div><br></div><br><div>     4.打开goagent.exe麻烦？</div><br><div>        找到<strong>goage.exe右键创建快捷方式，把它放到 开始菜单-所有程序-启动 的文件夹里</strong>（win7下即C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup）</div><br><div></div><br><div>     5.还想开机自启动？</div><br><div>        按3和4设置后，每次只要一开机，goagent就启动了，每次只要一翻Qiang,goagent就自动代理了。</div><br><div>        打开local/proxy.ini 找到<strong>visible = 1改为visible = 0可将goagent隐藏在任务栏</strong>哦</div><br><div></div><br><div>     6.看完一部片（别邪恶啊）就上不去了？</div><br><div>         Goagent一个APPID有1G/天的流量使用，刷刷twitter玩玩facebook就够了，可要是在youtube上看视频耗掉了流量，1G耗完就会显示 “<a href=\"https://www.google.com/search?q=goagent++%E5%A4%B1%E8%B4%A5&amp;oq=goagent++%E5%A4%B1%E8%B4%A5&amp;aqs=chrome.0.57j62.6423j0&amp;sourceid=chrome&amp;ie=UTF-8#newwindow=1&amp;safe=strict&amp;sclient=psy-ab&amp;q=goagent++%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%AA%E5%8F%91%E9%80%81%E4%BB%BB%E4%BD%95%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%AF%A5%E7%BD%91%E9%A1%B5&amp;oq=goagent++%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%AA%E5%8F%91%E9%80%81%E4%BB%BB%E4%BD%95%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%AF%A5%E7%BD%91%E9%A1%B5&amp;gs_l=serp.3...2718.2718.1.3071.1.1.0.0.0.0.114.114.0j1.1.0...0.0.0..1c.1.15.psy-ab.EcsF0oX25Z8&amp;pbx=1&amp;bav=on.2,or.r_cp.r_qf.&amp;bvm=bv.47244034,d.dGI&amp;fp=3d441b6fcb5f99ae&amp;biw=1366&amp;bih=677\" title=\"goagent 服务器未发送任何数据，因此无法加载该网页 - Google Search\" target=\"_blank\" rel=\"external\">goagent 服务器未发送任何数据，因此无法加载该网页</a>“，这并不是像1所说的代理IP被封了或者goagent自己抽风了，而是当前APPID的1G流量已经用完。打开<a href=\"https://appengine.google.com/dashboard?&amp;app_id=s~**yourAppid**\" target=\"_blank\" rel=\"external\">https://appengine.google.com/dashboard?&amp;app_id=s~**yourAppid**</a> 就可以看到Outgoing Bandwidth为100%啦！</div><br><div></div><br><div><span style=\"font-family: Arial, sans-serif;\">     7.出现了6所说的情况流量不够用？</span></div><br><div><span style=\"font-family: Arial, sans-serif;\">       可回到</span><a href=\"https://appengine.google.com/\" target=\"_blank\" rel=\"external\">https://appengine.google.com/</a>，点击【Create Application】，输入Application Identifier 如myappid-2（要check Availability），输入Application Title（可任填），然后再次点击【Create Application】。然后<strong>打开 local/proxy.ini 编辑 appid = myappid-1 | myappid-2 （添加myappid-2，<strong>用 | 隔开</strong>）</strong>，再<strong>打开servr/uploader.bat 输入 myappid-2</strong>，就可以将这个新的配置上传了，打开<a href=\"https://appengine.google.com会发现myappid-2在Running,代表新增的myappid-2已经激活，重启goagent.exe，打开浏览器，又可以继续翻Qiang啦！\" target=\"_blank\" rel=\"external\">https://appengine.google.com会发现myappid-2在Running,代表新增的myappid-2已经激活，重启goagent.exe，打开浏览器，又可以继续翻Qiang啦！</a></div><br><div></div><br><div>     以此类推，可最多申请十个APPID，共10G的流量。</div><br><div></div>","source":"_posts/Goagent使用心得.md","raw":"title: Goagent使用心得\ntags:\n  - goagent\nid: 401\ncategories:\n  - Tools\ndate: 2013-06-01 12:02:58\n---\n\nGoagent实在是太棒了，可畅游被Qiang了的网站。初次安装可详见 [https://code.google.com/p/goagent/wiki/InstallGuide](https://code.google.com/p/goagent/wiki/InstallGuide)\n<div></div>\n<div>小赖使用总结：</div>\n<div>     1.goagent突然上不去了？</div>\n<div>        可能是国内cn的代理IP被封了，这时候可打开 local/proxy.ini **修改profile = google_cn 为 profile = google_hk**</div>\n<div></div>\n<div>     2.翻Qiang点击切换按钮麻烦？</div>\n<div>**        打开 SwitchySharp -&gt;选项-&gt;切换规则，点击【新建规则】**，编写如下：注意 *://*.twitter.com/* 里的*是通配符，指可匹配任意字符</div>\n<div></div>\n<div>\n<div>     3.手动切换代理很麻烦？</div>\n<div>        按2的设置后，点击 **SwitchySharp-&gt;自动切换模式**，那么每次浏览时，goagent就会按建立好的切换规则来选择是否使用代理来翻Qiang了</div>\n<div></div>\n</div>\n<div>     4.打开goagent.exe麻烦？</div>\n<div>        找到**goage.exe右键创建快捷方式，把它放到 开始菜单-所有程序-启动 的文件夹里**（win7下即C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup）</div>\n<div></div>\n<div>     5.还想开机自启动？</div>\n<div>        按3和4设置后，每次只要一开机，goagent就启动了，每次只要一翻Qiang,goagent就自动代理了。</div>\n<div>        打开local/proxy.ini 找到**visible = 1改为visible = 0可将goagent隐藏在任务栏**哦</div>\n<div></div>\n<div>     6.看完一部片（别邪恶啊）就上不去了？</div>\n<div>         Goagent一个APPID有1G/天的流量使用，刷刷twitter玩玩facebook就够了，可要是在youtube上看视频耗掉了流量，1G耗完就会显示 “[goagent 服务器未发送任何数据，因此无法加载该网页](https://www.google.com/search?q=goagent++%E5%A4%B1%E8%B4%A5&amp;oq=goagent++%E5%A4%B1%E8%B4%A5&amp;aqs=chrome.0.57j62.6423j0&amp;sourceid=chrome&amp;ie=UTF-8#newwindow=1&amp;safe=strict&amp;sclient=psy-ab&amp;q=goagent++%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%AA%E5%8F%91%E9%80%81%E4%BB%BB%E4%BD%95%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%AF%A5%E7%BD%91%E9%A1%B5&amp;oq=goagent++%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%AA%E5%8F%91%E9%80%81%E4%BB%BB%E4%BD%95%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%AF%A5%E7%BD%91%E9%A1%B5&amp;gs_l=serp.3...2718.2718.1.3071.1.1.0.0.0.0.114.114.0j1.1.0...0.0.0..1c.1.15.psy-ab.EcsF0oX25Z8&amp;pbx=1&amp;bav=on.2,or.r_cp.r_qf.&amp;bvm=bv.47244034,d.dGI&amp;fp=3d441b6fcb5f99ae&amp;biw=1366&amp;bih=677 \"goagent 服务器未发送任何数据，因此无法加载该网页 - Google Search\")“，这并不是像1所说的代理IP被封了或者goagent自己抽风了，而是当前APPID的1G流量已经用完。打开https://appengine.google.com/dashboard?&amp;app_id=s~**yourAppid** 就可以看到Outgoing Bandwidth为100%啦！</div>\n<div></div>\n<div><span style=\"font-family: Arial, sans-serif;\">     7.出现了6所说的情况流量不够用？</span></div>\n<div><span style=\"font-family: Arial, sans-serif;\">       可回到</span>[https://appengine.google.com/](https://appengine.google.com/)，点击【Create Application】，输入Application Identifier 如myappid-2（要check Availability），输入Application Title（可任填），然后再次点击【Create Application】。然后**打开 local/proxy.ini 编辑 appid = myappid-1 | myappid-2 （添加myappid-2，<strong>用 | 隔开**）</strong>，再**打开servr/uploader.bat 输入 myappid-2**，就可以将这个新的配置上传了，打开https://appengine.google.com会发现myappid-2在Running,代表新增的myappid-2已经激活，重启goagent.exe，打开浏览器，又可以继续翻Qiang啦！</div>\n<div></div>\n<div>     以此类推，可最多申请十个APPID，共10G的流量。</div>\n<div></div>","slug":"Goagent使用心得","updated":1418908898000,"excerpt":"","_id":"ri6vh6igmjo3livv","comments":true,"layout":"post","photos":[],"link":""},{"title":"HTML5-WebSocket API 学习","tags":["6yokvvsaq2p5y620","3iowu4fj304fdl5d","5c7tzotym2of4isa"],"id":532,"categories":["bzketmbod14nx67f"],"date":1385376267000,"content":"<p>使用nodejs的socket.io和现代浏览器的WebSocket来建立一个聊天室。</p>\n<h1 id=\"服务器端_编写serverfile-js文件，建立http服务器和socket连接：\">服务器端 编写serverfile.js文件，建立http服务器和socket连接：</h1>\n<p>[javascript]<br> var http = require(‘http’);<br> var io = require(‘socket.io’);</p>\n<p> // 创建一个服务器<br> var server = http.createServer(function(request, response){<br>     response.writeHead(200, {‘Content-type’: ‘text/html’});<br>     response.end(‘小赖的WebSocket服务器启动啦！’);<br> });<br> // 监听端口<br> server.listen(9999);</p>\n<p> // 创建一个WebSocket<br> var socket = io.listen(server).set(‘log’, 1);</p>\n<p> // 监听连接<br> server.on(‘connection’, function(client) {<br>     // 监听信息<br>     client.on(‘message’, function(data){<br>         console.log(‘收到客户端发来信息：’, data);<br>         var curTime = new Date().getTime();<br>         client.emit(‘服务器返回信息：’, data + ‘-&gt;’ + curTime);</p>\n<pre><code>     client.<span class=\"keyword\">on</span>(<span class=\"string\">'disconnect'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span>{</span>\n         console.<span class=\"built_in\">log</span>(<span class=\"string\">'连接已断开'</span>);\n     });\n });\n</code></pre><p> });<br> [/javascript]</p>\n<p>创建http服务器，运行http服务器成功：</p>\n<h1 id=\"浏览器端_编写_webSocket-html_，建立与服务器的连接：\">浏览器端 编写 webSocket.html ，建立与服务器的连接：</h1>\n<p>[html]<br> &lt;!DOCTYPE html&gt;<br> &lt;html&gt;<br> &lt;head&gt;<br>     &lt;title&gt;WebSocket API&lt;/title&gt;<br>     &lt;meta charset=&quot;utf-8&quot;&gt;<br>     &lt;script src=&quot;&lt;span style=&quot;text-decoration: underline;&quot;&gt;<a href=\"http://localhost:9999/socket.io/socket.io.js&lt;/span&gt;&quot;&gt;&lt;/script&amp;gt\" target=\"_blank\" rel=\"external\">http://localhost:9999/socket.io/socket.io.js&lt;/span&gt;&quot;&gt;&lt;/script&amp;gt</a>;<br> &lt;/head&gt;<br> &lt;body&gt;<br>     &lt;div id=&quot;log&quot;&gt;显示log信息…&lt;/div&gt;<br>     &lt;input id=&quot;msg&quot; type=&quot;text&quot; placeholder=&quot;请输入信息&quot; /&gt;<br>     &lt;button id=&quot;send-btn&quot;&gt;发送！&lt;/button&gt;</p>\n<p> &lt;script&gt;<br>     var myWebSocket = {};<br>     myWebSocket.socketio = {<br>         mysocket: null,<br>         initialize: function(){<br>             // 建立连接<br>             myWebSocket.socketio.mysocket = io.connect(‘&lt;span style=&quot;text-decoration: underline;&quot;&gt;<a href=\"http://localhost:9999&lt;/span&amp;gt\" target=\"_blank\" rel=\"external\">http://localhost:9999&lt;/span&amp;gt</a>;’);<br>             // 监听连接<br>             myWebSocket.socketio.mysocket.on(‘connect’, function(){<br>                 myWebSocket.socketio.log(‘成功连接到服务器\\n’);<br>             });<br>             // 监听信息<br>             myWebSocket.socketio.mysocket.on(‘message’, function(data){<br>                 myWebSocket.socketio.log(‘服务器返回数据：’ + data + ‘\\n’);<br>             });<br>             // 监听断开连接<br>             myWebSocket.socketio.mysocket.on(‘disconnect’, function(){<br>                 myWebSocket.socketio.log(‘已断开连接\\n’);<br>             })</p>\n<pre><code>         <span class=\"comment\">// 点击发送按钮</span>\n         <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#send-btn'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n             <span class=\"comment\">// 发送信息到服务器</span>\n             <span class=\"keyword\">var</span> msg = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#msg'</span>).value;\n             myWebSocket.socketio.sendMessageToServer(msg);\n             <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#msg'</span>).value = <span class=\"string\">''</span>;\n         };\n     },\n     sendMessageToServer: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data)</span></span>{\n         myWebSocket.socketio.mysocket.secd(data);\n         myWebSocket.socketio.log(<span class=\"string\">'已发送信息到服务器：'</span> + data +<span class=\"string\">'\\n'</span>);\n     },\n     log: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(msg)</span> </span>{\n         <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#log'</span>).innerHTML += msg;\n     }\n }\n\n myWebSocket.socketio.initialize();\n &amp;lt;<span class=\"regexp\">/script&amp;gt;</span>\n</code></pre><p> &lt;/body&gt;<br> &lt;/html&gt;<br> [/html]</p>\n<p>然后在浏览器打开这个网页，终端显示：</p>\n<p><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-1.png\" alt=\"\"></p>\n<p>这样客户端和服务器就可以通信啦！</p>\n<p>输入信息后，点击发送，终端显示：</p>\n<p><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-2.png\" alt=\"\"></p>\n<p>浏览器则显示：</p>\n<p><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-3.png\" alt=\"\"></p>\n<p>然后关闭服务器的话，则显示「已断开连接」：</p>\n<p><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-4.png\" alt=\"\"></p>\n<p>实现广播功能，即一个客户端发送消息，所以和服务器建立了连接的其他客户端都能看到这个消息：<br>修改serverfile.js文件，注意有『修改』字眼的部分：</p>\n<p>[javascript]<br> var http = require(‘http’);<br> var io = require(‘&lt;span style=&quot;text-decoration: underline;&quot;&gt;socket.io&lt;/span&gt;’);</p>\n<p> // 创建一个服务器<br> var server = http.createServer(function(request, response){<br>     response.writeHead(200, {‘Content-type’: ‘text/html’});<br>     response.end(‘小赖的WebSocket服务器启动啦！’);<br> });<br> // 监听端口<br> server.listen(9999);</p>\n<p> // 创建一个WebSocket</p>\n<p> var socket = io.listen(server).set(‘log’, 1);</p>\n<p> // 监听连接<br> socket.on(‘connection’, function(client) {<br>     // 修改：监听信息<br>     client.on(‘customMessage’, function(data){<br>         console.log(‘收到客户端发来信息：’, data);<br>         var curTime = new Date().getTime();</p>\n<pre><code>     <span class=\"comment\">// 修改：使用广播方法</span>\n     client.broadcast.emit(<span class=\"string\">'服务器返回customMessage信息：'</span>, data + <span class=\"string\">'广播-&amp;gt;'</span> + curTime);\n\n     client.on(<span class=\"string\">'disconnect'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n         <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接已断开'</span>);\n     });\n });\n</code></pre><p> });<br> [/javascript]</p>\n<p>修改webSocket.html文件，注意有『修改』字眼的部分：</p>\n<p>[html]<br> &lt;!DOCTYPE html&gt;<br> &lt;html&gt;<br> &lt;head&gt;<br>     &lt;title&gt;WebSocket API&lt;/title&gt;<br>     &lt;meta charset=&quot;utf-8&quot;&gt;<br>     &lt;script src=&quot;&lt;span style=&quot;text-decoration: underline;&quot;&gt;<a href=\"http://localhost:9999/socket.io/socket.io.js&lt;/span&gt;&quot;&gt;&lt;/script&amp;gt\" target=\"_blank\" rel=\"external\">http://localhost:9999/socket.io/socket.io.js&lt;/span&gt;&quot;&gt;&lt;/script&amp;gt</a>;<br> &lt;/head&gt;<br> &lt;body&gt;<br>     &lt;div id=&quot;log&quot;&gt;显示log信息…&lt;/div&gt;<br>     &lt;input id=&quot;msg&quot; type=&quot;text&quot; placeholder=&quot;请输入信息&quot; /&gt;<br>     &lt;button id=&quot;send-btn&quot;&gt;发送！&lt;/button&gt;</p>\n<p> &lt;script&gt;<br>     var myWebSocket = {};<br>     myWebSocket.socketio = {<br>         mysocket: null,<br>         initialize: function(){<br>             // 建立连接<br>             myWebSocket.socketio.mysocket = io.connect(‘&lt;span style=&quot;text-decoration: underline;&quot;&gt;<a href=\"http://localhost:9999&lt;/span&amp;gt\" target=\"_blank\" rel=\"external\">http://localhost:9999&lt;/span&amp;gt</a>;’);<br>             // 监听连接<br>             myWebSocket.socketio.mysocket.on(‘connect’, function(){<br>                 myWebSocket.socketio.log(‘成功连接到服务器&lt;br /&gt;’);<br>             });<br>             //修改： 监听customMessage信息<br>             myWebSocket.socketio.mysocket.on(‘broadcastMessage’, function(data){<br>                 myWebSocket.socketio.log(‘收到广播信息：’ + data + ‘&lt;br /&gt;’);<br>             });<br>             // 监听断开连接<br>             myWebSocket.socketio.mysocket.on(‘disconnect’, function(){<br>                 myWebSocket.socketio.log(‘已断开连接\\n’);<br>             })</p>\n<pre><code>         <span class=\"comment\">// 点击发送按钮</span>\n         <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#send-btn'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n             <span class=\"comment\">// 发送信息到服务器</span>\n             <span class=\"keyword\">var</span> msg = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#msg'</span>).value;\n             myWebSocket.socketio.sendMessageToServer(msg);\n             <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#msg'</span>).value = <span class=\"string\">''</span>;\n         };\n     },\n     sendMessageToServer: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data)</span></span>{\n         <span class=\"comment\">// 修改</span>\n         myWebSocket.socketio.mysocket.emit(<span class=\"string\">'customMessage'</span>, data);\n         myWebSocket.socketio.log(<span class=\"string\">'已发送信息到服务器：'</span> + data +<span class=\"string\">'&amp;lt;br /&amp;gt;'</span>);\n     },\n     log: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(msg)</span> </span>{\n         <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#log'</span>).innerHTML += msg;\n     }\n }\n\n myWebSocket.socketio.initialize();\n &amp;lt;<span class=\"regexp\">/script&amp;gt;</span>\n</code></pre><p> &lt;/body&gt;<br> &lt;/html&gt;<br> [/html]</p>\n<p>然后用多个页面打开webSocket.html,在第一个页面输入消息：</p>\n<p><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-5.png\" alt=\"\"></p>\n<p>点击发送，其他页面立即收到了消息：<br><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-6.png\" alt=\"\"></p>\n<p>在第二个页面输入信息：<br><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-7.png\" alt=\"\"><br>在其他页面收到广播：</p>\n<p><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-8.png\" alt=\"\"><br>哇！WebSocket够强大，可以实现客户端和服务端的通信，而node的socket.io更是封装了它的一系列方法，实现一个web端通信就轻而易举了，但！是！HTML5的这个新特性，你敢用嘛？！</p>\n<h1 id=\"浏览器对WebSocket的支持性\">浏览器对WebSocket的支持性</h1>\n<p>在caniuse.com查询可知，WebSocket在IE10+和其他现代浏览器才支持，低版本的IE不支持WebSocket  -  -！<br><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-10.png\" alt=\"\"><br>不过好消息是，socket.io对不支持WebSocket的浏览器启用了其他策略，使得socket.io甚至能在IE6下运行！<br><img src=\"http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-11.png\" alt=\"\"></p>\n<p>学好node后再回来拓展这个小小聊天室呗^_^<br><a href=\"span style=&quot;text-decoration: underline;&quot;&gt;http://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/&lt;/span\">参考资料</a><br><a href=\"span style=&quot;text-decoration: underline;&quot;&gt;http://developer.51cto.com/art/201308/407192_all.htm&lt;/span\">参考资料</a><br><a href=\"span style=&quot;text-decoration: underline;&quot;&gt;http://socket.io/&lt;/span\">参考资料</a></p>\n","source":"_posts/HTML5-WebSocket API 学习.md","raw":"title: 'HTML5-WebSocket API 学习'\ntags:\n  - html5\n  - socket\n  - websocket\nid: 532\ncategories:\n  - HTML\ndate: 2013-11-25 18:44:27\n---\n\n使用nodejs的socket.io和现代浏览器的WebSocket来建立一个聊天室。\n\n# 服务器端 编写serverfile.js文件，建立http服务器和socket连接：\n\n[javascript]\n var http = require('http');\n var io = require('socket.io');\n\n // 创建一个服务器\n var server = http.createServer(function(request, response){\n     response.writeHead(200, {'Content-type': 'text/html'});\n     response.end('小赖的WebSocket服务器启动啦！');\n });\n // 监听端口\n server.listen(9999);\n\n // 创建一个WebSocket\n var socket = io.listen(server).set('log', 1);\n\n // 监听连接\n server.on('connection', function(client) {\n     // 监听信息\n     client.on('message', function(data){\n         console.log('收到客户端发来信息：', data);\n         var curTime = new Date().getTime();\n         client.emit('服务器返回信息：', data + '-&gt;' + curTime);\n\n         client.on('disconnect', function(){\n             console.log('连接已断开');\n         });\n     });\n });\n [/javascript]\n\n创建http服务器，运行http服务器成功：\n\n# 浏览器端 编写 webSocket.html ，建立与服务器的连接：\n\n[html]\n &lt;!DOCTYPE html&gt;\n &lt;html&gt;\n &lt;head&gt;\n     &lt;title&gt;WebSocket API&lt;/title&gt;\n     &lt;meta charset=&quot;utf-8&quot;&gt;\n     &lt;script src=&quot;&lt;span style=&quot;text-decoration: underline;&quot;&gt;http://localhost:9999/socket.io/socket.io.js&lt;/span&gt;&quot;&gt;&lt;/script&gt;\n &lt;/head&gt;\n &lt;body&gt;\n     &lt;div id=&quot;log&quot;&gt;显示log信息...&lt;/div&gt;\n     &lt;input id=&quot;msg&quot; type=&quot;text&quot; placeholder=&quot;请输入信息&quot; /&gt;\n     &lt;button id=&quot;send-btn&quot;&gt;发送！&lt;/button&gt;\n\n &lt;script&gt;\n     var myWebSocket = {};\n     myWebSocket.socketio = {\n         mysocket: null,\n         initialize: function(){\n             // 建立连接\n             myWebSocket.socketio.mysocket = io.connect('&lt;span style=&quot;text-decoration: underline;&quot;&gt;http://localhost:9999&lt;/span&gt;');\n             // 监听连接\n             myWebSocket.socketio.mysocket.on('connect', function(){\n                 myWebSocket.socketio.log('成功连接到服务器\\n');\n             });\n             // 监听信息\n             myWebSocket.socketio.mysocket.on('message', function(data){\n                 myWebSocket.socketio.log('服务器返回数据：' + data + '\\n');\n             });\n             // 监听断开连接\n             myWebSocket.socketio.mysocket.on('disconnect', function(){\n                 myWebSocket.socketio.log('已断开连接\\n');\n             })\n\n             // 点击发送按钮\n             document.querySelector('#send-btn').onclick = function(){\n                 // 发送信息到服务器\n                 var msg = document.querySelector('#msg').value;\n                 myWebSocket.socketio.sendMessageToServer(msg);\n                 document.querySelector('#msg').value = '';\n             };\n         },\n         sendMessageToServer: function(data){\n             myWebSocket.socketio.mysocket.secd(data);\n             myWebSocket.socketio.log('已发送信息到服务器：' + data +'\\n');\n         },\n         log: function(msg) {\n             document.querySelector('#log').innerHTML += msg;\n         }\n     }\n\n     myWebSocket.socketio.initialize();\n     &lt;/script&gt;\n\n &lt;/body&gt;\n &lt;/html&gt;\n [/html]\n\n然后在浏览器打开这个网页，终端显示：\n\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-1.png)\n\n这样客户端和服务器就可以通信啦！\n\n输入信息后，点击发送，终端显示：\n\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-2.png)\n\n浏览器则显示：\n\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-3.png)\n\n然后关闭服务器的话，则显示「已断开连接」：\n\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-4.png)\n\n实现广播功能，即一个客户端发送消息，所以和服务器建立了连接的其他客户端都能看到这个消息：\n修改serverfile.js文件，注意有『修改』字眼的部分：\n\n[javascript]\n var http = require('http');\n var io = require('&lt;span style=&quot;text-decoration: underline;&quot;&gt;socket.io&lt;/span&gt;');\n\n // 创建一个服务器\n var server = http.createServer(function(request, response){\n     response.writeHead(200, {'Content-type': 'text/html'});\n     response.end('小赖的WebSocket服务器启动啦！');\n });\n // 监听端口\n server.listen(9999);\n\n // 创建一个WebSocket\n\n var socket = io.listen(server).set('log', 1);\n\n // 监听连接\n socket.on('connection', function(client) {\n     // 修改：监听信息\n     client.on('customMessage', function(data){\n         console.log('收到客户端发来信息：', data);\n         var curTime = new Date().getTime();\n\n         // 修改：使用广播方法\n         client.broadcast.emit('服务器返回customMessage信息：', data + '广播-&gt;' + curTime);\n\n         client.on('disconnect', function(){\n             console.log('连接已断开');\n         });\n     });\n });\n [/javascript]\n\n修改webSocket.html文件，注意有『修改』字眼的部分：\n\n[html]\n &lt;!DOCTYPE html&gt;\n &lt;html&gt;\n &lt;head&gt;\n     &lt;title&gt;WebSocket API&lt;/title&gt;\n     &lt;meta charset=&quot;utf-8&quot;&gt;\n     &lt;script src=&quot;&lt;span style=&quot;text-decoration: underline;&quot;&gt;http://localhost:9999/socket.io/socket.io.js&lt;/span&gt;&quot;&gt;&lt;/script&gt;\n &lt;/head&gt;\n &lt;body&gt;\n     &lt;div id=&quot;log&quot;&gt;显示log信息...&lt;/div&gt;\n     &lt;input id=&quot;msg&quot; type=&quot;text&quot; placeholder=&quot;请输入信息&quot; /&gt;\n     &lt;button id=&quot;send-btn&quot;&gt;发送！&lt;/button&gt;\n\n &lt;script&gt;\n     var myWebSocket = {};\n     myWebSocket.socketio = {\n         mysocket: null,\n         initialize: function(){\n             // 建立连接\n             myWebSocket.socketio.mysocket = io.connect('&lt;span style=&quot;text-decoration: underline;&quot;&gt;http://localhost:9999&lt;/span&gt;');\n             // 监听连接\n             myWebSocket.socketio.mysocket.on('connect', function(){\n                 myWebSocket.socketio.log('成功连接到服务器&lt;br /&gt;');\n             });\n             //修改： 监听customMessage信息\n             myWebSocket.socketio.mysocket.on('broadcastMessage', function(data){\n                 myWebSocket.socketio.log('收到广播信息：' + data + '&lt;br /&gt;');\n             });\n             // 监听断开连接\n             myWebSocket.socketio.mysocket.on('disconnect', function(){\n                 myWebSocket.socketio.log('已断开连接\\n');\n             })\n\n             // 点击发送按钮\n             document.querySelector('#send-btn').onclick = function(){\n                 // 发送信息到服务器\n                 var msg = document.querySelector('#msg').value;\n                 myWebSocket.socketio.sendMessageToServer(msg);\n                 document.querySelector('#msg').value = '';\n             };\n         },\n         sendMessageToServer: function(data){\n             // 修改\n             myWebSocket.socketio.mysocket.emit('customMessage', data);\n             myWebSocket.socketio.log('已发送信息到服务器：' + data +'&lt;br /&gt;');\n         },\n         log: function(msg) {\n             document.querySelector('#log').innerHTML += msg;\n         }\n     }\n\n     myWebSocket.socketio.initialize();\n     &lt;/script&gt;\n\n &lt;/body&gt;\n &lt;/html&gt;\n [/html]\n\n然后用多个页面打开webSocket.html,在第一个页面输入消息：\n\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-5.png)\n\n点击发送，其他页面立即收到了消息：\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-6.png)\n\n在第二个页面输入信息：\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-7.png)\n在其他页面收到广播：\n\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-8.png)\n哇！WebSocket够强大，可以实现客户端和服务端的通信，而node的socket.io更是封装了它的一系列方法，实现一个web端通信就轻而易举了，但！是！HTML5的这个新特性，你敢用嘛？！\n\n# 浏览器对WebSocket的支持性\n在caniuse.com查询可知，WebSocket在IE10+和其他现代浏览器才支持，低版本的IE不支持WebSocket  -  -！\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-10.png)\n不过好消息是，socket.io对不支持WebSocket的浏览器启用了其他策略，使得socket.io甚至能在IE6下运行！\n![](http://laispace.u.qiniudn.com/HTML5-WebSocket%20API%20%E5%AD%A6%E4%B9%A0-11.png)\n\n学好node后再回来拓展这个小小聊天室呗^_^\n[参考资料](<span style=\"text-decoration: underline;\">http://www.ibm.com/developerworks/cn/web/1112_huangxa_websocket/</span> )\n[参考资料](<span style=\"text-decoration: underline;\">http://developer.51cto.com/art/201308/407192_all.htm</span> )\n[参考资料](<span style=\"text-decoration: underline;\">http://socket.io/</span> )","slug":"HTML5-WebSocket API 学习","updated":1418908898000,"excerpt":"","_id":"w7jqfpv0kcln8v70","comments":true,"layout":"post","photos":[],"link":""},{"title":"HTML5与CSS3-新特性尝试","tags":["d4yhogir9w034jce"],"id":621,"categories":["bzketmbod14nx67f"],"date":1394201397000,"content":"<p>HTML5一些特性不断在变化，一年前的语法跟现在的已经大有不同，像用来布局的 flex 属性也有新旧版本的语法了。</p>\n<p>处理兼容性真是个蛋疼的事情 。</p>\n<p>这里放一些闲时做的DEMO吧（含CSS3），测试在chrome下，主要目的是了解基本用法让自己一目了然，在项目需要的时候再加上兼容方案吧：）</p>\n<ul>\n<li>Flex 多栏响应式布局</li>\n</ul>\n<p>1.设置父容器为 display 属性为 ‘flex’</p>\n<p>2.设置子容器的 width、flex 和 order 属性</p>\n<iframe src=\"http://jsfiddle.net/laiqs2011/SYVxL/2/embedded/result,js,html,css/\" frameborder=\"0\" width=\"100%\" height=\"300\"></iframe>\n\n<p>&nbsp;</p>\n<ul>\n<li>CSS3 文字从上到下</li>\n</ul>\n<p>直接使用 css3 中的属性 transform：</p>\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/p6hkE/1/embedded/result,js,html,css/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<ul>\n<li>XDM 跨文档消息传递（即跨域通信）<h2 id=\"发送消息\">发送消息</h2>\n</li>\n</ul>\n<p>[javascript]</p>\n<p>// 获取内嵌框架<br>var iframeWindow = document.getElementById(‘myFrame’).contentWindow;<br>// 向内嵌框架发送消息<br>iframeWindow.postMessage(‘你好 赖小赖’, ‘<a href=\"http://laispace.com\" target=\"_blank\" rel=\"external\">http://laispace.com</a>‘);</p>\n<p>[/javascript]</p>\n<h2 id=\"接受消息\">接受消息</h2>\n<p>[javascript]<br> // message 事件是异步的<br> window.onmessage = function (event) {<br> // 确保消息源是已知域 event.origin<br> if (event.origin == ‘<a href=\"http://laispace.com\" target=\"_blank\" rel=\"external\">http://laispace.com</a>‘) {<br> // 处理接收到的消息 event.data<br> console.log(event.data);<br> // 向消息源发送回执(event.source是消息源的window对象的代理)<br> event.source.postMessage(‘消息已收到’, ‘<a href=\"http://www.消息源.com\" target=\"_blank\" rel=\"external\">http://www.消息源.com</a>‘);</p>\n<p>}<br> };</p>\n<p>[/javascript]</p>\n<p><a href=\"http://html5demos.com/postmessage2\" target=\"_blank\" rel=\"external\">DEMO</a> or <a href=\"http://dev.w3.org/html5/postmsg/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n","source":"_posts/HTML5与CSS3-新特性尝试.md","raw":"title: HTML5与CSS3-新特性尝试\ntags:\n  - flex\nid: 621\ncategories:\n  - HTML\ndate: 2014-03-07 22:09:57\n---\n\nHTML5一些特性不断在变化，一年前的语法跟现在的已经大有不同，像用来布局的 flex 属性也有新旧版本的语法了。\n\n处理兼容性真是个蛋疼的事情 。\n\n这里放一些闲时做的DEMO吧（含CSS3），测试在chrome下，主要目的是了解基本用法让自己一目了然，在项目需要的时候再加上兼容方案吧：）\n\n- Flex 多栏响应式布局\n\n1.设置父容器为 display 属性为 'flex'\n\n2.设置子容器的 width、flex 和 order 属性\n<iframe src=\"http://jsfiddle.net/laiqs2011/SYVxL/2/embedded/result,js,html,css/\" frameborder=\"0\" width=\"100%\" height=\"300\"></iframe>\n\n&nbsp;\n\n- CSS3 文字从上到下\n\n直接使用 css3 中的属性 transform：\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/p6hkE/1/embedded/result,js,html,css/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n- XDM 跨文档消息传递（即跨域通信）\n## 发送消息\n\n[javascript]\n\n// 获取内嵌框架\nvar iframeWindow = document.getElementById(‘myFrame’).contentWindow;\n// 向内嵌框架发送消息\niframeWindow.postMessage(‘你好 赖小赖’, ‘http://laispace.com');\n\n[/javascript]\n\n## 接受消息\n\n[javascript]\n // message 事件是异步的\n window.onmessage = function (event) {\n // 确保消息源是已知域 event.origin\n if (event.origin == ‘http://laispace.com') {\n // 处理接收到的消息 event.data\n console.log(event.data);\n // 向消息源发送回执(event.source是消息源的window对象的代理)\n event.source.postMessage('消息已收到’, ‘http://www.消息源.com');\n\n}\n };\n\n[/javascript]\n\n[DEMO](http://html5demos.com/postmessage2) or [官方文档](http://dev.w3.org/html5/postmsg/)","slug":"HTML5与CSS3-新特性尝试","updated":1418908898000,"excerpt":"","_id":"9yxti6vofyzpv9lv","comments":true,"layout":"post","photos":[],"link":""},{"title":"HTML5移动开发方案探索","tags":["6yokvvsaq2p5y620"],"id":551,"categories":["4zflw43es4sy619n"],"date":1389280328000,"content":"<p>2013是移动互联爆发的一年，2014也肯定也是移动互联网的天下！</p>\n<p>笨鸟先飞，小赖打算进入移动开发，先从HTML5移动应用开始，再连带学学IOS，希望2014会有更大的收获。</p>\n<p>查阅资料后就开始！不过要做好被移动开发各种坑坑死的打算先 - -</p>\n<div><br><div><br><br><strong>三种开发方式的简单比较：</strong><br><br><strong> Native（原生）：</strong><br><br><em>   丰富的用户体验\n</em>   平台指向性<br><em>   久经考验的移动应用开发途径<br><strong>Hybrid（混合）：</strong>\n\n</em>   与应用类似的使用体验<br><em>   利用设备自身功能\n</em>   多平台支持能力<br><strong>HTML 5：</strong><br><br><em>   更快的开发周期\n</em>   跨平台运行<br>*   实时更新<br><div><span style=\"color: #333333; font-family: 宋体;\"><br></span></div><br></div><br><div><span style=\"color: #333333; font-family: 宋体;\">Native开发方法在性能和设备访问方面很出色，但成本和更新方面有缺点。Web方法更新起来简单得多，成本较低，也更容易，但是目前功能有限，也无法获得使用Native API调用所能获得的那种出色的用户体验。Hybrid开发方法提供了折中方案：在许多情况下，它集两者之所长，如果开发者面向多种操作系统更是如此。</span></div><br><div><span style=\"color: #333333; font-family: 宋体;\">Hybrid是同时利用HTML 5与CSS3创建移动UI，同时又通过JavaScript代码实现与移动SDK之间的通信。</span></div><br><div><span style=\"color: #333333; font-family: 宋体;\"><br></span></div><br><div><span style=\"color: #333333; font-family: 宋体;\">目前比较知名的hybrid框架有Phonegap：</span></div><br><div><span style=\"color: #333333; font-family: 宋体;\">     PhoneGap为移动应用开发人员提供一套名为phonegap-3.0.0.js的JavaScript API。该JavaScript API会调用PhoneGap的特殊平台引擎/桥接机制，后者则反过来调用原生平台SDK以实现对设备的操作，例如访问联系人名单或者拨打电话等。</span></div><br><div><img src=\"file:///C:/Users/%E5%B0%8F%E8%B5%96/AppData/Local/Temp/enhtmlclip/Image.png\" alt=\"\"></div><br><div>PhoneGap还提供一套与HTML 5、JavaScript以及CSS3在非Chrome浏览器（例如不提供用户界面的浏览器）中相绑定的创建系统。</div><br><div><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image1.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image1.png\" alt=\"\" title=\"Image1\"></a></div><br><div><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image2.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image2.png\" alt=\"\" title=\"Image2\"></a></div><br><div><img src=\"file:///C:/Users/%E5%B0%8F%E8%B5%96/AppData/Local/Temp/enhtmlclip/Image(1\" alt=\"\">.png)</div><br><div></div><br><div>phonegap提供了接口，使我们通过编写JS代码，调用原生的API。为了快速开发，一般还会搭配一个移动开发框架，常见的有jquery mobile、KendoUI Mobile、Sencha Touch等。</div><br><div>     Jquery mobile 优点是比较容易上手，而且为了设计jQuery Mobile页面，提供了一套便捷的代码设计工具——也就是Codiqa。</div><br><div>缺点是应用的列表条目一旦达到五十到六十个，性能就会出现疲软（甚至直接导致移动浏览器崩溃）。在另一方面，Sencha Touch能够载入超过两百个条目，且不会引发任何性能问题。</div><br><div>     KendoUI Mobile是一款基于MVVM的移动应用框架，附带图表及多款非常实用的移动工具，整体方案售价为699美元。即便它有非常好的表现，但比较昂贵，就暂且不考虑了。</div><br><div>     Sencha Touch用极高的使用复杂性外加相当夸张的学习曲线换得无与伦比的性能表现。Sencha Touch属于MVC且完全采用JavaScript机制，但由于Sencha Touch最初只针对iOS平台，而后才添加了对Android、黑莓以及Windows Phone的支持能力，因此大家应该做好心理准备——其在各平台上的性能表现并不完全一致。</div><br><div></div><br><div>查阅资料后，小赖得出的方案是：使用Phonegap+jquery mobile 开发这个HTML5 Hybrid应用。</div><br><div>phonegap好在提供了跨平台的方案，坏在当应用复杂起来，性能是个问题；</div><br><div>jquery mobile 好在提供了一些UI，轻量且快速，坏在一旦DOM操作繁多，会造成性能问题。</div><br><div></div><br><div>Hybrid的优点在于用跨平台Web技术，开发应用程序的大部分代码，又可以在需要时直接访问Native API。</div><br><div>我的想法是，先按Hybrid的方案做出产品原型，然后再评估是否需要针对特定功能用NativeAPI来加强改善。</div><br><div></div><br><div>以上都是Ctrl C+V加自己的理解得出的初步方案，接着就需要去具体实践，得出自己真正的开发心得和新方案来了！</div><br><div></div><br><div>寒假继续加油！</div><br><div></div><br><div>参考链接：</div><br><div><a href=\"[http://www.360doc.com/content/13/1128/18/21412_332891741.shtml](http://www.360doc.com/content/13/1128/18/21412_332891741.shtml\">【白皮书】HTML5、Native或Hybrid App开发全接触</a>)</div><br><div><a href=\"[http://www.360doc.com/content/13/1115/09/9200790_329335555.shtml](http://www.360doc.com/content/13/1115/09/9200790_329335555.shtml\">专题：跨平台移动web中间件PhoneGap开发入门</a>)</div><br><div><a href=\"[http://sunny-liang.iteye.com/blog/1452495](http://sunny-liang.iteye.com/blog/1452495\">phoneGap可行性分析</a>) 这个写得非常棒</div><br><div><a href=\"[http://www.360doc.com/content/13/1115/08/9200790_329325455.shtml](http://www.360doc.com/content/13/1115/08/9200790_329325455.shtml\">开发者眼中的PhoneGap体验</a>)</div><br><div><a href=\"[http://cio.zdnet.com.cn/cio/2013/0427/2157148.shtml](http://cio.zdnet.com.cn/cio/2013/0427/2157148.shtml\">四大Hybrid App移动开发平台对比</a>)</div><br><div><a href=\"[http://www.cocoachina.com/applenews/devnews/2013/0724/6665.html](http://www.cocoachina.com/applenews/devnews/2013/0724/6665.html\">Phonegap3.0特性</a>)</div><br><div><a href=\"[http://lanhy2000.blog.163.com/blog/static/4367860820131874524745/](http://lanhy2000.blog.163.com/blog/static/4367860820131874524745/\">手机应用开发平台选择资料汇总</a>)</div><br><div><a href=\"[http://cio.zdnet.com.cn/cio/2013/0628/2165993.shtml](http://cio.zdnet.com.cn/cio/2013/0628/2165993.shtml\">如何选择AppCan与PhoneGap跨平台开发框架</a>)</div><br><div><a href=\"[http://www.cnblogs.com/comsokey/archive/2012/08/30/PhonegapVSAppCan.html](http://www.cnblogs.com/comsokey/archive/2012/08/30/PhonegapVSAppCan.html\">Phonegap VS AppCan</a>)</div><br><div></div><br><div></div><br><div>参考实例：</div><br><div><a href=\"[http://phonegap.com/app/feature/](http://phonegap.com/app/feature/\">Phonegap官方实例</a>)</div><br><div><a href=\"[http://www.open-open.com/lib/view/open1323767996984.html](http://www.open-open.com/lib/view/open1323767996984.html\">如何使用 jQuery Mobile 与 PhoneGap 来开发移动应用</a>)</div><br><div><a href=\"[http://uedc.163.com/9494.html](http://uedc.163.com/9494.html\">HTML5开发实战之网易微博</a>)</div><br><div><a href=\"[http://bbs.9tech.cn/index.php/topic/show/363616#top](http://bbs.9tech.cn/index.php/topic/show/363616#top\">手机搜狐-移动Web单页应用开发实践</a>)</div><br><div><a href=\"[http://www.infoq.com/cn/news/2013/01/tencent-ad-department-phonegap](http://www.infoq.com/cn/news/2013/01/tencent-ad-department-phonegap\">腾讯广告平台产品团队谈PhoneGap使用</a>)</div><br><div><span style=\"color: #333333; font-family: 宋体;\"><br></span></div><br><div><span style=\"color: #333333; font-family: 宋体;\"><br></span></div><br><div><span style=\"color: #333333; font-family: 宋体;\"><br></span></div><br></div>","source":"_posts/HTML5移动开发方案探索.md","raw":"title: HTML5移动开发方案探索\ntags:\n  - html5\nid: 551\ncategories:\n  - Hybrid\ndate: 2014-01-09 23:12:08\n---\n\n2013是移动互联爆发的一年，2014也肯定也是移动互联网的天下！\n\n笨鸟先飞，小赖打算进入移动开发，先从HTML5移动应用开始，再连带学学IOS，希望2014会有更大的收获。\n\n查阅资料后就开始！不过要做好被移动开发各种坑坑死的打算先 - -\n<div>\n<div>\n\n**三种开发方式的简单比较：**\n\n** Native（原生）：**\n\n*   丰富的用户体验\n*   平台指向性\n*   久经考验的移动应用开发途径\n**Hybrid（混合）：**\n\n*   与应用类似的使用体验\n*   利用设备自身功能\n*   多平台支持能力\n**HTML 5：**\n\n*   更快的开发周期\n*   跨平台运行\n*   实时更新\n<div><span style=\"color: #333333; font-family: 宋体;\">\n</span></div>\n</div>\n<div><span style=\"color: #333333; font-family: 宋体;\">Native开发方法在性能和设备访问方面很出色，但成本和更新方面有缺点。Web方法更新起来简单得多，成本较低，也更容易，但是目前功能有限，也无法获得使用Native API调用所能获得的那种出色的用户体验。Hybrid开发方法提供了折中方案：在许多情况下，它集两者之所长，如果开发者面向多种操作系统更是如此。</span></div>\n<div><span style=\"color: #333333; font-family: 宋体;\">Hybrid是同时利用HTML 5与CSS3创建移动UI，同时又通过JavaScript代码实现与移动SDK之间的通信。</span></div>\n<div><span style=\"color: #333333; font-family: 宋体;\">\n</span></div>\n<div><span style=\"color: #333333; font-family: 宋体;\">目前比较知名的hybrid框架有Phonegap：</span></div>\n<div><span style=\"color: #333333; font-family: 宋体;\">     PhoneGap为移动应用开发人员提供一套名为phonegap-3.0.0.js的JavaScript API。该JavaScript API会调用PhoneGap的特殊平台引擎/桥接机制，后者则反过来调用原生平台SDK以实现对设备的操作，例如访问联系人名单或者拨打电话等。</span></div>\n<div>![](file:///C:/Users/%E5%B0%8F%E8%B5%96/AppData/Local/Temp/enhtmlclip/Image.png)</div>\n<div>PhoneGap还提供一套与HTML 5、JavaScript以及CSS3在非Chrome浏览器（例如不提供用户界面的浏览器）中相绑定的创建系统。</div>\n<div>[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image1.png \"Image1\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image1.png)</div>\n<div>[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image2.png \"Image2\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/01/Image2.png)</div>\n<div>![](file:///C:/Users/%E5%B0%8F%E8%B5%96/AppData/Local/Temp/enhtmlclip/Image(1).png)</div>\n<div></div>\n<div>phonegap提供了接口，使我们通过编写JS代码，调用原生的API。为了快速开发，一般还会搭配一个移动开发框架，常见的有jquery mobile、KendoUI Mobile、Sencha Touch等。</div>\n<div>     Jquery mobile 优点是比较容易上手，而且为了设计jQuery Mobile页面，提供了一套便捷的代码设计工具——也就是Codiqa。</div>\n<div>缺点是应用的列表条目一旦达到五十到六十个，性能就会出现疲软（甚至直接导致移动浏览器崩溃）。在另一方面，Sencha Touch能够载入超过两百个条目，且不会引发任何性能问题。</div>\n<div>     KendoUI Mobile是一款基于MVVM的移动应用框架，附带图表及多款非常实用的移动工具，整体方案售价为699美元。即便它有非常好的表现，但比较昂贵，就暂且不考虑了。</div>\n<div>     Sencha Touch用极高的使用复杂性外加相当夸张的学习曲线换得无与伦比的性能表现。Sencha Touch属于MVC且完全采用JavaScript机制，但由于Sencha Touch最初只针对iOS平台，而后才添加了对Android、黑莓以及Windows Phone的支持能力，因此大家应该做好心理准备——其在各平台上的性能表现并不完全一致。</div>\n<div></div>\n<div>查阅资料后，小赖得出的方案是：使用Phonegap+jquery mobile 开发这个HTML5 Hybrid应用。</div>\n<div>phonegap好在提供了跨平台的方案，坏在当应用复杂起来，性能是个问题；</div>\n<div>jquery mobile 好在提供了一些UI，轻量且快速，坏在一旦DOM操作繁多，会造成性能问题。</div>\n<div></div>\n<div>Hybrid的优点在于用跨平台Web技术，开发应用程序的大部分代码，又可以在需要时直接访问Native API。</div>\n<div>我的想法是，先按Hybrid的方案做出产品原型，然后再评估是否需要针对特定功能用NativeAPI来加强改善。</div>\n<div></div>\n<div>以上都是Ctrl C+V加自己的理解得出的初步方案，接着就需要去具体实践，得出自己真正的开发心得和新方案来了！</div>\n<div></div>\n<div>寒假继续加油！</div>\n<div></div>\n<div>参考链接：</div>\n<div>[【白皮书】HTML5、Native或Hybrid App开发全接触]([http://www.360doc.com/content/13/1128/18/21412_332891741.shtml](http://www.360doc.com/content/13/1128/18/21412_332891741.shtml))</div>\n<div>[专题：跨平台移动web中间件PhoneGap开发入门]([http://www.360doc.com/content/13/1115/09/9200790_329335555.shtml](http://www.360doc.com/content/13/1115/09/9200790_329335555.shtml))</div>\n<div>[phoneGap可行性分析]([http://sunny-liang.iteye.com/blog/1452495](http://sunny-liang.iteye.com/blog/1452495)) 这个写得非常棒</div>\n<div>[开发者眼中的PhoneGap体验]([http://www.360doc.com/content/13/1115/08/9200790_329325455.shtml](http://www.360doc.com/content/13/1115/08/9200790_329325455.shtml))</div>\n<div>[四大Hybrid App移动开发平台对比]([http://cio.zdnet.com.cn/cio/2013/0427/2157148.shtml](http://cio.zdnet.com.cn/cio/2013/0427/2157148.shtml))</div>\n<div>[Phonegap3.0特性]([http://www.cocoachina.com/applenews/devnews/2013/0724/6665.html](http://www.cocoachina.com/applenews/devnews/2013/0724/6665.html))</div>\n<div>[手机应用开发平台选择资料汇总]([http://lanhy2000.blog.163.com/blog/static/4367860820131874524745/](http://lanhy2000.blog.163.com/blog/static/4367860820131874524745/))</div>\n<div>[如何选择AppCan与PhoneGap跨平台开发框架]([http://cio.zdnet.com.cn/cio/2013/0628/2165993.shtml](http://cio.zdnet.com.cn/cio/2013/0628/2165993.shtml))</div>\n<div>[Phonegap VS AppCan]([http://www.cnblogs.com/comsokey/archive/2012/08/30/PhonegapVSAppCan.html](http://www.cnblogs.com/comsokey/archive/2012/08/30/PhonegapVSAppCan.html))</div>\n<div></div>\n<div></div>\n<div>参考实例：</div>\n<div>[Phonegap官方实例]([http://phonegap.com/app/feature/](http://phonegap.com/app/feature/))</div>\n<div>[如何使用 jQuery Mobile 与 PhoneGap 来开发移动应用]([http://www.open-open.com/lib/view/open1323767996984.html](http://www.open-open.com/lib/view/open1323767996984.html))</div>\n<div>[HTML5开发实战之网易微博]([http://uedc.163.com/9494.html](http://uedc.163.com/9494.html))</div>\n<div>[手机搜狐-移动Web单页应用开发实践]([http://bbs.9tech.cn/index.php/topic/show/363616#top](http://bbs.9tech.cn/index.php/topic/show/363616#top))</div>\n<div>[腾讯广告平台产品团队谈PhoneGap使用]([http://www.infoq.com/cn/news/2013/01/tencent-ad-department-phonegap](http://www.infoq.com/cn/news/2013/01/tencent-ad-department-phonegap))</div>\n<div><span style=\"color: #333333; font-family: 宋体;\">\n</span></div>\n<div><span style=\"color: #333333; font-family: 宋体;\">\n</span></div>\n<div><span style=\"color: #333333; font-family: 宋体;\">\n</span></div>\n</div>","slug":"HTML5移动开发方案探索","updated":1418908898000,"excerpt":"","_id":"7wdf7dk76ekdzpd6","comments":true,"layout":"post","photos":[],"link":""},{"title":"JQuery常用方法","tags":["fhulu8nr6f39n0l5"],"id":117,"categories":["knp5ebanrmmmakfi"],"date":1351097797000,"content":"<p>$(‘div’).last();//选择最后一个匹配元素</p>\n<p>$(‘div’).eq(1);//选择第二个匹配元素</p>\n<p>$(‘div’).eq(-1);//选择倒数第一个匹配元素</p>\n<div>$(‘div’).filter(‘.selected’);//选择含有.selected类的匹配元素</div><br><div>$(‘div’).not(‘.selected’);//选择不含有.selected类的匹配元素</div><br><div></div><br><div>$(‘div’).children();//选择div的第一代（孩子）</div><br><div>$(‘div’).find(‘span’);//选择div的span后代</div><br><div></div><br><div>$(‘div’).parent();//选择div的上一代（父亲）</div><br><div>$(‘div’).parents();//选择div的前代（祖宗）</div><br><div></div><br><div>$(‘h2’).closest(‘h1’);//选择离h2最近的h1</div><br><div></div><br><div>$(‘div’).siblings();//选择div的同级兄弟元素</div><br><div></div><br><div>$(‘div’).html();//得到div的值</div><br><div>$(‘div’).html(‘xiao’);//修改div的值</div><br><div></div><br><div>addClass();</div><br><div>removeClass();</div><br><div>toggleClass();</div><br><div>hasClass();</div><br><div></div><br><div>$.isArray(object);//检查object是否为数组，返回布尔值</div><br><div></div><br><div><a href=\"http://www.gbin1.com/technology/jquery/20120620jqueryfunctioncollection/\" target=\"_blank\" rel=\"external\">GBin1学习JQ笔记</a></div><br><div>jQuery处理CSS</div><br><div>     使用.css()方法</div><br><div>     使用.addClass()和.removeClass()方法</div><br><div>     使用.toggleClass()方法</div><br><div></div><br><div>jQuery处理特效和动画</div><br><div>     使用.animate() 方法</div><br><div>      <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘#run’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff;\"><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#demo’</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">‘font-size’</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">‘18’</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">‘width’</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">‘+=300’//注意这行</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#reset’</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#demo’</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">‘font-size’</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">‘14px’</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">‘width’</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">‘-=300’</span><span style=\"color: #489a1b;\">//注意这行</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br><div><span style=\"font-family: Tahoma;\">使用.stop() 方法</span></div><br><div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 230px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#run’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#demo’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><br>        <span style=\"color: #489a1b;\">‘width’</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">‘-=128px’</span><span style=\"color: #444444;\">,</span><br>        <span style=\"color: #489a1b;\">‘height’</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">‘-=128px’</span><span style=\"color: #444444;\">,</span><br>        <span style=\"color: #489a1b;\">‘opacity’</span><span style=\"color: #444444;\">:</span><span style=\"color: #70483d;\">0.2</span><span style=\"color: #444444;\">,</span><br>        <span style=\"color: #489a1b;\">‘padding-top’</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">‘-=10px’</span><br>    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">,</span> <span style=\"color: #70483d;\">5000</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#reset’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#demo’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">stop</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><br>        <span style=\"color: #489a1b;\">‘width’</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">‘128px’</span><span style=\"color: #444444;\">,</span><br>        <span style=\"color: #489a1b;\">‘height’</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">‘128px’</span><span style=\"color: #444444;\">,</span><br>        <span style=\"color: #489a1b;\">‘opacity’</span><span style=\"color: #444444;\">:</span> <span style=\"color: #70483d;\">1</span><br>    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br><div><span style=\"color: #000000; font-family: Tahoma; font-size: medium;\">使用</span><span style=\"font-family: Tahoma;\">setinterval()和clearinterval()方法</span></div><br><div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: #9a6f1b;\">var</span> progressbar<span style=\"color: #444444;\">;</span><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#run’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    progressbar <span style=\"color: #444444;\">=</span> setInterval<span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span> <span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span><br>        $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#demo’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><br>          <span style=\"color: #489a1b;\">‘width’</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">‘+=10’</span><br>        <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">,</span> <span style=\"color: #70483d;\">1000</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">“disabled”</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">true</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#reset’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">“disabled”</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">false</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#reset’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    clearTimeout<span style=\"color: #444444;\">(</span>progressbar<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#run’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">“disabled”</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">false</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">“disabled”</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">true</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"background-color: #ffffff;\"> </span></pre><br></div><br></div><br><div>  <span style=\"color: #000000; font-family: Tahoma; font-size: medium;\">使用</span><span style=\"font-family: Tahoma;\">.delay()方法</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\">$(‘#run’).click(function(){<br>    $(‘#demo’).html(‘2秒后消失’);<br>    $(‘#demo’).show(200).delay(2000).hide(200);//hide()和show()方法要带参数，否则不能正常运行的<a href=\"http://www.gbin1.com/technology/jqueryhowto/20120301hideshowdelay/\" target=\"_blank\" rel=\"external\">[原因]</a>。<br>});</pre><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: #cccccc; font-family: arial; font-size: 14px; line-height: 28px; white-space: normal;\">jQuery DOM操作</span></pre><br><div>  <span style=\"font-family: Tahoma;\">使用</span><span style=\"font-family: Tahoma;\">.html()，.Text()和.empty()</span><span style=\"font-family: Tahoma;\">方法</span></div><br><div>     //.html()设置或者取得特定标签中的内容</div><br><div>       .text()设置或者取得文本而非标签的内容，返回一个字符串。</div><br><div></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 100px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#run’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    <span style=\"color: #9a6f1b;\">var</span> ct <span style=\"color: #444444;\">=</span> $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#container’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>    ct.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘&lt;br/&gt;’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">text</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#reset’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#container’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">empty</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br><div><span style=\"font-family: Tahoma;\"><br></span></div><br><div>  <span style=\"font-family: Tahoma;\">使用</span><span style=\"font-family: Tahoma;\">.append()，prepend()，after()和.before()</span><span style=\"font-family: Tahoma;\">方法</span></div><br><div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#run’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    <span style=\"color: #9a6f1b;\">var</span> ct <span style=\"color: #444444;\">=</span> $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#container’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>    ct.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘append添加的内容’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">prepend</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘prepend添加的内容’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">before</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘before添加的内容’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">after</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘after添加的内容&lt;/br&gt;’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#reset’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#container’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">empty</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘&amp;nbsp;www.gbin1.com&amp;nbsp;’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\"><span style=\"color: #000000; font-size: medium; font-family: Tahoma;\">使用</span><span style=\"color: #000000; white-space: pre; font-size: medium; font-family: Tahoma;\"><span style=\"white-space: normal;\">.clone()方法</span></span></pre><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\"><span style=\"background-color: #ffffff; line-height: normal;\">$</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#run’</span><span style=\"color: #444444;\">)</span><span style=\"background-color: #ffffff; line-height: normal;\">.</span><span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span></pre><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\"><span style=\"color: #9a6f1b;\">var</span><span style=\"background-color: #ffffff; line-height: normal;\"> ct </span><span style=\"color: #444444;\">=</span><span style=\"background-color: #ffffff; line-height: normal;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#container’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br></div><br><div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; line-height: normal; height: 100px;\">    ct.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘&lt;br/&gt;’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">text</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#reset’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#container’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">empty</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br></div><br><div> 使用jQuery的AJAX方法<a href=\"http://www.gbin1.com/technology/jquery/20120307ajaxforjquerypart1/\" target=\"_blank\" rel=\"external\">[使用指南]</a></div><br><div>     使用get方法可以快速使用HTTP的get方法来取得页面内容</div><br><div>     使用.load()方法</div><br><div>     使用.post()方法</div><br><div><br><br>## jQuery处理事件<br><br></div><br><div> 使用bind和unbind方法</div><br><div>     //.click() 其实和bind(‘click’)方法是一样的。 当然，使用unbind方法我们可以将事件触发删除。</div><br><div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘.item’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">bind</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘click’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{//bind</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 150px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">“clicked”</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘.item’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">bind</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘dblclick’</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">“dblclicked”</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘.item’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">clone</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">appendTo</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#container’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;//添加新元素</span></pre><br><div>使用live()，on()，off()方法</div><br><div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘.item’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">live</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘click’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{//live</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 150px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">“clicked”</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘.item’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">live</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘dblclick’</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">“dblclicked”</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘.item’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">clone</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">appendTo</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#container’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br><div>     很多老的方法像.live()，.bind()和.delegate()都可以使用最新的on()方法来实现，所有其它方法最后都是调用on方法，所以这里我们也可以将以上代码如下书写：</div><br><div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘#container’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">on</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘click’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘.item’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{//on</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 150px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">“clicked”</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#container’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">on</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘dblclick’</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">‘.item’</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">“dblclicked”</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘.item’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">clone</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">appendTo</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#container’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br><div>     使用delegate方法</div><br><div>          //老版本的jQuery中，我们应该尽量使用delegate方法而不是live方法，你会发现delegate方法的性能要优于live方法，因为live方法将会从document层次来搜索元素，这会带来性能损失。</div><br><div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘#container’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">delegate</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘.item’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘click’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">“clicked”</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#container’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">delegate</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘.item’</span><span style=\"color: #444444;\">,</span> <span style=\"color: #489a1b;\">‘dblclick’</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">“dblclicked”</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br><div>     使用one()方法</div><br><div>          //需要元素只执行一次事件</div><br><div>          <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘#container’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">one</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘mouseleave’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘.item’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">“mouseleave once”</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\"><span style=\"color: #444444;\">使用preventDefault()方法</span></pre><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\"><span style=\"color: #444444;\">阻止缺省的事件触发，例如，你点击 &lt;a href=”<a href=\"http://www.gbin1.com&quot;&gt;gbin1.com&lt;/a&amp;gt\" target=\"_blank\" rel=\"external\">http://www.gbin1.com&quot;&gt;gbin1.com&lt;/a&amp;gt</a>; 将会转向对应的页面，如果你使用preventDefault()方法，将阻止页面加载：</span></pre><br><div>       <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘#prevent’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">e</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">  e.<span style=\"color: #666666;\">preventDefault</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘阻止访问gbin1.com’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br><div> 使用.stopPropagation()方法</div><br><div>     //和preventDefault()方法类似，这个方法也可以阻止缺省行为，但区别是阻止上层元素的事件。注意不能和live方法联用，因为如果父元素是document会处理一次事件。</div><br><div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘#prevent’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">e</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">  e.<span style=\"color: #666666;\">stopPropagation</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘阻止父元素事件’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#normal’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘不阻止任何父元素事件’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘.wp’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘触发父元素事件’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br><div></div><br><div></div><br><div></div><br><div>使用.stopImmediatePropagation()方法</div><br><div>     //使用这个方法将立刻阻止所有相关绑定事件。</div><br><div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘#prevent’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">e</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">  e.<span style=\"color: #666666;\">stopImmediatePropagation</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘阻止父元素事件’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#normal’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>  e.<span style=\"color: #666666;\">stopPropagation</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘不阻止任何父元素事件’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘button’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘-button触发事件’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br><div></div><br><div><br><br>## jQuery DOM操作，循环和过滤<br><br></div><br><div>使用$.each()和.each() 方法</div><br><div>     //$.each()方法是jQuery的一般性方法用来处理javascript对象或者数组。而.each()方法用来处理jQuery的自有对象。</div><br><div>     //使用$.each()方法：</div><br><div>     <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">var</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">gb_array</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">[</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘jquery’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘javascript’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘java’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘jsp’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘java’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘c#’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘c’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘cpp’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘node.js’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘struts’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘spring’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">]</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\"><br>$.<span style=\"color: #666666;\">each</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">gb_array</span><span style=\"color: #444444;\">,</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">i</span><span style=\"color: #444444;\">,</span><span style=\"color: #333333;\"> v</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#langlist’</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘&lt;li id=”‘</span><span style=\"color: #444444;\">+</span><span style=\"color: #333333;\"> i </span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">‘“&gt;’</span><span style=\"color: #444444;\">+</span><span style=\"color: #333333;\"> v </span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">‘&lt;/li&gt;’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span></pre><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; overflow: auto; word-wrap: break-word; background-color: #ffffff; height: 100px; white-space: pre-wrap; font-size: 11px; font-family: Monaco, Courier, monospace;\"></pre><br><div><span style=\"font-family: Tahoma; font-size: medium;\">//使用.each()方法：</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#langlist’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">each</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>i<span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span></pre><br><div>$<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">css</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span>color<span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">‘red’</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span></div><br><div>使用$.data()，.data()，$.hasData()和 $.removeData()方法</div><br><div>     <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">var</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$p</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">“p”</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">p</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$p</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">[</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #70483d;\">0</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">]</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">$.<span style=\"color: #666666;\">data</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">“site”</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">“gbin1.com”</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $p.</span><span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">$.</span><span style=\"color: #666666;\">hasData</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">“ “</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $.</span><span style=\"color: #666666;\">removeData</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $p.</span><span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">$.</span><span style=\"color: #666666;\">hasData</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">“ “</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br><div>使用slice()方法</div><br><div>     //选择一系列元素中的特定区域，注意你可以输入负值，这样会从后面计算：</div><br><div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘div’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">slice</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">-</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #70483d;\">4</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">-</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #70483d;\">1</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">css</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘background-color’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘red’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div><br><div><span style=\"color: #444444; font-family: Monaco, Courier, monospace;\"><span style=\"font-size: 11px; white-space: pre-wrap;\">使用.filter()方法</span></span></div><br><div>  <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘div’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">filter</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘:even’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">css</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘background-color’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘red’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div><br><div><span style=\"color: #444444; font-family: Monaco, Courier, monospace;\"><span style=\"font-size: 11px; white-space: pre-wrap;\">使用.prev()和.next()方法</span></span></div><br><div>     在同一类的元素中选取前一个或者后一个元素：</div><br><div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘div:first’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">addClass</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘selected’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">var</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$cur</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">‘div.selected’</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div><br><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 300px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#prev’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">live</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘click’</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    <span style=\"color: #1b609a;\">if</span> <span style=\"color: #444444;\">(</span>$cur.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘div’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span><br>        $cur.<span style=\"color: #666666;\">removeClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘selected’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘div’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">addClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘selected’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>        $cur <span style=\"color: #444444;\">=</span> $cur.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘div’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#next’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">live</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘click’</span><span style=\"color: #444444;\">,</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><br>    console.<span style=\"color: #666666;\">log</span><span style=\"color: #444444;\">(</span>$cur.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘div’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>    <span style=\"color: #1b609a;\">if</span> <span style=\"color: #444444;\">(</span>$cur.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘div’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span><br>        $cur.<span style=\"color: #666666;\">removeClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘selected’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘div’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">addClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘selected’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>        $cur <span style=\"color: #444444;\">=</span> $cur.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘div’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre><br><div></div><br><div>使用.find()，.children()，.parent()，.parents()，closest()方法</div><br><div>     //查询DOM中的元素</div><br><div><br><pre style=\"line-height: normal; text-align: -webkit-auto; margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 200px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#level1’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">find</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#level3’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">css</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">‘border’</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">‘1px solid #ccc’</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘- 使用find找到元素’</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><br>$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘#level1’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">children</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘div’</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">css</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">‘border’</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">‘1px solid red’</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">‘- 使用children找到子元素’</span><span style=\"color: #444444;\">); </span></pre><br></div>","source":"_posts/JQuery常用方法.md","raw":"title: JQuery常用方法\ntags:\n  - jquery\nid: 117\ncategories:\n  - 碎片积累\ndate: 2012-10-25 00:56:37\n---\n\n$('div').last();//选择最后一个匹配元素\n\n$('div').eq(1);//选择第二个匹配元素\n\n$('div').eq(-1);//选择倒数第一个匹配元素\n<div>$('div').filter('.selected');//选择含有.selected类的匹配元素</div>\n<div>$('div').not('.selected');//选择不含有.selected类的匹配元素</div>\n<div></div>\n<div>$('div').children();//选择div的第一代（孩子）</div>\n<div>$('div').find('span');//选择div的span后代</div>\n<div></div>\n<div>$('div').parent();//选择div的上一代（父亲）</div>\n<div>$('div').parents();//选择div的前代（祖宗）</div>\n<div></div>\n<div>$('h2').closest('h1');//选择离h2最近的h1</div>\n<div></div>\n<div>$('div').siblings();//选择div的同级兄弟元素</div>\n<div></div>\n<div>$('div').html();//得到div的值</div>\n<div>$('div').html('xiao');//修改div的值</div>\n<div></div>\n<div>addClass();</div>\n<div>removeClass();</div>\n<div>toggleClass();</div>\n<div>hasClass();</div>\n<div></div>\n<div>$.isArray(object);//检查object是否为数组，返回布尔值</div>\n<div></div>\n<div>[GBin1学习JQ笔记](http://www.gbin1.com/technology/jquery/20120620jqueryfunctioncollection/)</div>\n<div>jQuery处理CSS</div>\n<div>     使用.css()方法</div>\n<div>     使用.addClass()和.removeClass()方法</div>\n<div>     使用.toggleClass()方法</div>\n<div></div>\n<div>jQuery处理特效和动画</div>\n<div>     使用.animate() 方法</div>\n<div>      <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#run'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff;\"><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">'font-size'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'18'</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'+=300'//注意这行</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">'font-size'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'14px'</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'-=300'</span><span style=\"color: #489a1b;\">//注意这行</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div><span style=\"font-family: Tahoma;\">使用.stop() 方法</span></div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 230px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span>\n        <span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'-=128px'</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'height'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'-=128px'</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'opacity'</span><span style=\"color: #444444;\">:</span><span style=\"color: #70483d;\">0.2</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'padding-top'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'-=10px'</span>\n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">,</span> <span style=\"color: #70483d;\">5000</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">stop</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span>\n        <span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'128px'</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'height'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'128px'</span><span style=\"color: #444444;\">,</span>\n        <span style=\"color: #489a1b;\">'opacity'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #70483d;\">1</span>        \n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div><span style=\"color: #000000; font-family: Tahoma; font-size: medium;\">使用</span><span style=\"font-family: Tahoma;\">setinterval()和clearinterval()方法</span></div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: #9a6f1b;\">var</span> progressbar<span style=\"color: #444444;\">;</span>\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    progressbar <span style=\"color: #444444;\">=</span> setInterval<span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span> <span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span>\n        $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#demo'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">animate</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span>\n          <span style=\"color: #489a1b;\">'width'</span><span style=\"color: #444444;\">:</span> <span style=\"color: #489a1b;\">'+=10'</span>\n        <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">,</span> <span style=\"color: #70483d;\">1000</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"disabled\"</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">true</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"disabled\"</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">false</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    clearTimeout<span style=\"color: #444444;\">(</span>progressbar<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"disabled\"</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">false</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">attr</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"disabled\"</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">true</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"background-color: #ffffff;\"> </span></pre>\n</div>\n</div>\n<div>  <span style=\"color: #000000; font-family: Tahoma; font-size: medium;\">使用</span><span style=\"font-family: Tahoma;\">.delay()方法</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\">$('#run').click(function(){\n    $('#demo').html('2秒后消失');\n    $('#demo').show(200).delay(2000).hide(200);//hide()和show()方法要带参数，否则不能正常运行的[[原因]](http://www.gbin1.com/technology/jqueryhowto/20120301hideshowdelay/)。\n});</pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\"><span style=\"color: #cccccc; font-family: arial; font-size: 14px; line-height: 28px; white-space: normal;\">jQuery DOM操作</span></pre>\n<div>  <span style=\"font-family: Tahoma;\">使用</span><span style=\"font-family: Tahoma;\">.html()，.Text()和.empty()</span><span style=\"font-family: Tahoma;\">方法</span></div>\n<div>     //.html()设置或者取得特定标签中的内容</div>\n<div>       .text()设置或者取得文本而非标签的内容，返回一个字符串。</div>\n<div></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 100px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    <span style=\"color: #9a6f1b;\">var</span> ct <span style=\"color: #444444;\">=</span> $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    ct.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'&lt;br/&gt;'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">text</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">empty</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">''</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div><span style=\"font-family: Tahoma;\">\n</span></div>\n<div>  <span style=\"font-family: Tahoma;\">使用</span><span style=\"font-family: Tahoma;\">.append()，prepend()，after()和.before()</span><span style=\"font-family: Tahoma;\">方法</span></div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    <span style=\"color: #9a6f1b;\">var</span> ct <span style=\"color: #444444;\">=</span> $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    ct.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'append添加的内容'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">prepend</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'prepend添加的内容'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">before</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'before添加的内容'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">after</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'after添加的内容&lt;/br&gt;'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">empty</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'&amp;nbsp;www.gbin1.com&amp;nbsp;'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\"><span style=\"color: #000000; font-size: medium; font-family: Tahoma;\">使用</span><span style=\"color: #000000; white-space: pre; font-size: medium; font-family: Tahoma;\"><span style=\"white-space: normal;\">.clone()方法</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\"><span style=\"background-color: #ffffff; line-height: normal;\">$</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#run'</span><span style=\"color: #444444;\">)</span><span style=\"background-color: #ffffff; line-height: normal;\">.</span><span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; height: 200px;\"><span style=\"color: #9a6f1b;\">var</span><span style=\"background-color: #ffffff; line-height: normal;\"> ct </span><span style=\"color: #444444;\">=</span><span style=\"background-color: #ffffff; line-height: normal;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; line-height: normal; height: 100px;\">    ct.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'&lt;br/&gt;'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span>ct.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">text</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#reset'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">empty</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">''</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n</div>\n<div> 使用jQuery的AJAX方法[[使用指南]](http://www.gbin1.com/technology/jquery/20120307ajaxforjquerypart1/)</div>\n<div>     使用get方法可以快速使用HTTP的get方法来取得页面内容</div>\n<div>     使用.load()方法</div>\n<div>     使用.post()方法</div>\n<div>\n\n## jQuery处理事件\n\n</div>\n<div> 使用bind和unbind方法</div>\n<div>     //.click() 其实和bind('click')方法是一样的。 当然，使用unbind方法我们可以将事件触发删除。</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">bind</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'click'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{//bind</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 150px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"clicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">bind</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'dblclick'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"dblclicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">clone</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">appendTo</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;//添加新元素</span></pre>\n<div>使用live()，on()，off()方法</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">live</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'click'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{//live</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 150px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"clicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">live</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'dblclick'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"dblclicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">clone</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">appendTo</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div>     很多老的方法像.live()，.bind()和.delegate()都可以使用最新的on()方法来实现，所有其它方法最后都是调用on方法，所以这里我们也可以将以上代码如下书写：</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#container'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">on</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'click'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{//on</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 150px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"clicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">on</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'dblclick'</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"dblclicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">clone</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">appendTo</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div>     使用delegate方法</div>\n<div>          //老版本的jQuery中，我们应该尽量使用delegate方法而不是live方法，你会发现delegate方法的性能要优于live方法，因为live方法将会从document层次来搜索元素，这会带来性能损失。</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#container'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">delegate</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'click'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"clicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#container'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">delegate</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.item'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #489a1b;\">'dblclick'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"dblclicked\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div>     使用one()方法</div>\n<div>          //需要元素只执行一次事件</div>\n<div>          <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#container'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">one</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'mouseleave'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'.item'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">    $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">\"mouseleave once\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\"><span style=\"color: #444444;\">使用preventDefault()方法</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\"><span style=\"color: #444444;\">阻止缺省的事件触发，例如，你点击 &lt;a href=\"http://www.gbin1.com\"&gt;gbin1.com&lt;/a&gt; 将会转向对应的页面，如果你使用preventDefault()方法，将阻止页面加载：</span></pre>\n<div>       <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#prevent'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">e</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">  e.<span style=\"color: #666666;\">preventDefault</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'阻止访问gbin1.com'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div> 使用.stopPropagation()方法</div>\n<div>     //和preventDefault()方法类似，这个方法也可以阻止缺省行为，但区别是阻止上层元素的事件。注意不能和live方法联用，因为如果父元素是document会处理一次事件。</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#prevent'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">e</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">  e.<span style=\"color: #666666;\">stopPropagation</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'阻止父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#normal'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'不阻止任何父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'.wp'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'触发父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div></div>\n<div></div>\n<div></div>\n<div>使用.stopImmediatePropagation()方法</div>\n<div>     //使用这个方法将立刻阻止所有相关绑定事件。</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'#prevent'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">click</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">function</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">e</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">{</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">  e.<span style=\"color: #666666;\">stopImmediatePropagation</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'阻止父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#normal'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n  e.<span style=\"color: #666666;\">stopPropagation</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'不阻止任何父元素事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'button'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">click</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>e<span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n  $<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'-button触发事件'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>        \n<span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div></div>\n<div>\n\n## jQuery DOM操作，循环和过滤\n\n</div>\n<div>使用$.each()和.each() 方法</div>\n<div>     //$.each()方法是jQuery的一般性方法用来处理javascript对象或者数组。而.each()方法用来处理jQuery的自有对象。</div>\n<div>     //使用$.each()方法：</div>\n<div>     <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">var</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">gb_array</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">[</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'jquery'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'javascript'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'java'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'jsp'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'java'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'c#'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'c'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'cpp'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'node.js'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'struts'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'spring'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">]</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">    \n$.<span style=\"color: #666666;\">each</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">gb_array</span><span style=\"color: #444444;\">,</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">i</span><span style=\"color: #444444;\">,</span><span style=\"color: #333333;\"> v</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span><span style=\"color: #333333;\"> $</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#langlist'</span><span style=\"color: #444444;\">)</span><span style=\"color: #333333;\">.</span><span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'&lt;li id=\"'</span><span style=\"color: #444444;\">+</span><span style=\"color: #333333;\"> i </span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">'\"&gt;'</span><span style=\"color: #444444;\">+</span><span style=\"color: #333333;\"> v </span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">'&lt;/li&gt;'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; overflow: auto; word-wrap: break-word; background-color: #ffffff; height: 100px; white-space: pre-wrap; font-size: 11px; font-family: Monaco, Courier, monospace;\"></pre>\n<div><span style=\"font-family: Tahoma; font-size: medium;\">//使用.each()方法：</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; overflow: auto; white-space: pre-wrap; word-wrap: break-word;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#langlist'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">each</span><span style=\"color: #444444;\">(</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span>i<span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span></pre>\n<div>$<span style=\"color: #444444;\">(</span><span style=\"color: #1b609a;\">this</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">css</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span>color<span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'red'</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span></div>\n<div>使用$.data()，.data()，$.hasData()和 $.removeData()方法</div>\n<div>     <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">var</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$p</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">\"p\"</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">p</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$p</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">[</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #70483d;\">0</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">]</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 100px;\">$.<span style=\"color: #666666;\">data</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">\"site\"</span><span style=\"color: #444444;\">,</span><span style=\"color: #489a1b;\">\"gbin1.com\"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $p.</span><span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">$.</span><span style=\"color: #666666;\">hasData</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">\" \"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $.</span><span style=\"color: #666666;\">removeData</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span><span style=\"color: #333333;\"> $p.</span><span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">$.</span><span style=\"color: #666666;\">hasData</span><span style=\"color: #444444;\">(</span><span style=\"color: #333333;\">p</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">+</span><span style=\"color: #489a1b;\">\" \"</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div>使用slice()方法</div>\n<div>     //选择一系列元素中的特定区域，注意你可以输入负值，这样会从后面计算：</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'div'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">slice</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">-</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #70483d;\">4</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">-</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #70483d;\">1</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">css</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'background-color'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'red'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>\n<div><span style=\"color: #444444; font-family: Monaco, Courier, monospace;\"><span style=\"font-size: 11px; white-space: pre-wrap;\">使用.filter()方法</span></span></div>\n<div>  <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'div'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">filter</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">':even'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">css</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'background-color'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">,</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'red'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>\n<div><span style=\"color: #444444; font-family: Monaco, Courier, monospace;\"><span style=\"font-size: 11px; white-space: pre-wrap;\">使用.prev()和.next()方法</span></span></div>\n<div>     在同一类的元素中选取前一个或者后一个元素：</div>\n<div>     <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'div:first'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">.</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #666666;\">addClass</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'selected'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #9a6f1b;\">var</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$cur</span> <span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">=</span> <span style=\"background-color: #ffffff; font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap;\">$</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">(</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #489a1b;\">'div.selected'</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">)</span><span style=\"font-family: Monaco, Courier, monospace; font-size: 11px; white-space: pre-wrap; color: #444444;\">;</span></div>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 300px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#prev'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">live</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'click'</span><span style=\"color: #444444;\">,</span> <span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    <span style=\"color: #1b609a;\">if</span> <span style=\"color: #444444;\">(</span>$cur.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span>\n        $cur.<span style=\"color: #666666;\">removeClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'selected'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">addClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'selected'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n        $cur <span style=\"color: #444444;\">=</span> $cur.<span style=\"color: #666666;\">prev</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#next'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">live</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'click'</span><span style=\"color: #444444;\">,</span><span style=\"color: #9a6f1b;\">function</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">{</span>\n    console.<span style=\"color: #666666;\">log</span><span style=\"color: #444444;\">(</span>$cur.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    <span style=\"color: #1b609a;\">if</span> <span style=\"color: #444444;\">(</span>$cur.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">html</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">)</span> <span style=\"color: #444444;\">{</span>\n        $cur.<span style=\"color: #666666;\">removeClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'selected'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">addClass</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'selected'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n        $cur <span style=\"color: #444444;\">=</span> $cur.<span style=\"color: #666666;\">next</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n    <span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span></pre>\n<div></div>\n<div>使用.find()，.children()，.parent()，.parents()，closest()方法</div>\n<div>     //查询DOM中的元素</div>\n<div>\n<pre style=\"line-height: normal; text-align: -webkit-auto; margin-top: 0px; margin-bottom: 0px; padding: 5px 5px 5px 15px; list-style: none; font-family: Monaco, Courier, monospace; font-size: 11px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; background-color: #ffffff; height: 200px;\">$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#level1'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">find</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#level3'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">css</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">'border'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'1px solid #ccc'</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'- 使用find找到元素'</span><span style=\"color: #444444;\">)</span><span style=\"color: #444444;\">;</span>\n$<span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'#level1'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">children</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'div'</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">css</span><span style=\"color: #444444;\">(</span><span style=\"color: #444444;\">{</span><span style=\"color: #489a1b;\">'border'</span><span style=\"color: #444444;\">:</span><span style=\"color: #489a1b;\">'1px solid red'</span><span style=\"color: #444444;\">}</span><span style=\"color: #444444;\">)</span>.<span style=\"color: #666666;\">append</span><span style=\"color: #444444;\">(</span><span style=\"color: #489a1b;\">'- 使用children找到子元素'</span><span style=\"color: #444444;\">); </span></pre>\n</div>","slug":"JQuery常用方法","updated":1418908898000,"excerpt":"","_id":"gcb69q21rvfv19hp","comments":true,"layout":"post","photos":[],"link":""},{"title":"JSON数据类型的学习","id":349,"categories":["be592wtznj5wcvwn"],"date":1364407241000,"tags":["f36qkkcf1fsyzyf8"],"content":"<div>\n\n<p>初学AJAX，今天写一个表单验证，发现$.ajax()的success回调函数总是不会执行，而error毁掉函数则总是执行。</p>\n<p>我是先POST表单账号密码给php文件，该php文件返回数据（我直接返回了常量供自己测试），然后在JS里获得data.login_email。</p>\n<p>发现data.login_email得到的总是undefined，为什么呢？由于对JSON格式不是很熟悉，所以不断调试不断查资料，最后发现：</p>\n<p><strong>原来自1.4版本的jQuery开始,JSON写的不规范可能导致错误!</strong></p>\n<p>“json”: Evaluates the response as JSON and returns a JavaScript object. In jQuery 1.4 the JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. (See<a href=\"http://www.json.org\" target=\"_blank\" rel=\"external\"> json.org</a> for more information on proper JSON formatting.</p>\n<p>查资料学习了JSON格式后，修改后台php代码为：</p>\n<p>[php]</p>\n<p>&lt;?php</p>\n<p>header(‘Content-type: text/json’);</p>\n<p>  $results = array (</p>\n<pre><code>&amp;quot;login_email&amp;quot; =&amp;<span class=\"keyword\">gt</span>; &amp;quot;<span class=\"number\">0</span>&amp;quot;,\n\n&amp;quot;login_password&amp;quot; =&amp;<span class=\"keyword\">gt</span>;&amp;quot; <span class=\"number\">0</span>&amp;quot;\n</code></pre><p>);</p>\n<p>echo json_encode($results);</p>\n<p>?&gt;</p>\n<p>[/php]</p>\n<p><div>再修改前台代码则为：</div></p>\n<p><div>[javascript]</div></p>\n<p>$(‘#login-btn’).click(function(){</p>\n<p>var emailVal = $(‘#login-email’).val();</p>\n<p>  var passwordVal = $(‘#login-password’).val();</p>\n<p>//点击登陆按钮时进行验证</p>\n<p>  $.ajax({</p>\n<p>   type: &quot;POST&quot;,</p>\n<p>   data:{&quot;emailVal&quot;:emailVal,&quot;passwordVal&quot;:passwordVal},</p>\n<p>   dataType: &quot;JSON&quot;,//原来声明了json数据类型就必须严格书写JSON！</p>\n<p>   url: &quot;login_check.php&quot;,</p>\n<p>success: function(data){</p>\n<p>if(data.login_email==0){//邮箱错误</p>\n<p>$(‘#login #login-email’).prev().show();</p>\n<p>$(‘#login #login-email’).parent().parent().addClass(‘warning’);</p>\n<p>}</p>\n<pre><code>            <span class=\"keyword\">if</span>(data.login_password==<span class=\"number\">0</span>){<span class=\"regexp\">//</span>密码错误\n\n                <span class=\"variable\">$(</span><span class=\"string\">'#login #login-password'</span>).prev().show();\n</code></pre><p>$(‘#login #login-password’).parent().parent().addClass(‘error’);</p>\n<p>}</p>\n<p>  },error:function(XMLResponse){</p>\n<pre><code>        <span class=\"function\">alert</span>(&amp;quot;出错！错误信息为&amp;quot;+XMLResponse<span class=\"class\">.responseText</span>)}\n\n        });\n</code></pre><p>return false;//禁止登陆按钮的默认行为</p>\n<p>});//click（）结束</p>\n<p>[/javascript]</p>\n<p></p></div><p></p>\n<p><div></div></p>\n<p><div>总结出一点JSON规范为：</div></p>\n<p><div>　　1）名称：用双引号引起，如[javascript]</div></p>\n<pre><code><span class=\"typedef\"><span class=\"keyword\">data</span>:<span class=\"container\">{&amp;<span class=\"title\">quot</span>;<span class=\"title\">emailVal</span>&amp;<span class=\"title\">quot</span>;:<span class=\"title\">emailVal</span>,&amp;<span class=\"title\">quot</span>;<span class=\"title\">passwordVal</span>&amp;<span class=\"title\">quot</span>;:<span class=\"title\">passwordVal</span>}</span></span>\n</code></pre><p>[/javascript]</p>\n<p></p>\n<p><div>　　2）字符串：用用双引号引起，如下：</div></p>\n<p><div>[php]</div></p>\n<p>&lt;?php</p>\n<p>  header(‘Content-type: text/json’);</p>\n<p>  $results=array(&quot;a&quot; =&gt; &quot;apple&quot;, &quot;b&quot; =&gt; &quot;banana&quot;, &quot;o&quot; =&gt; &quot;orange&quot;);</p>\n<p>  echo json_encode($results);</p>\n<p>?&gt;</p>\n<p>[/php]</p>\n<p></p>\n<p><div>        3）boolean类型不加引号，其他都要加（包括数字）</div></p>\n<p><div>        4）前后台使用的数据类型应该一致，如后台使用json_encode($results);前台使用dataType:JSON;来声明</div><br></p>\n<p><div>        5）若定义了dataType为JSON就必须使用严格语法的JSON，否则success回调函数就不执行！</div></p>\n<p><div></div></p>\n<h1 id=\"—_2013-10-05_更新—-\">— 2013-10-05 更新—-</h1>\n<p>注意JSON字符串与JSON对象的区分：</p>\n<p>[javascript]<br>// 这是JSON字符串<br>var foo = ‘{ &quot;prop&quot;: &quot;val&quot; }’;<br>// 这是对象字面量<br>var bar = { &quot;prop&quot;: &quot;val&quot; };<br>[/javascript]</p>\n<p>JSON有非常严格的语法，在string上下文里{ “prop”: “val” } 是个合法的JSON，但{ prop: “val” }和{ ‘prop’: ‘val’ }确实不合法的。所有属性名称和它的值都必须用双引号引住，不能使用单引号。另外，即便你用了转义以后的单引号也是不合法的。<br>参考：<a href=\"http://www.cnblogs.com/TomXu/archive/2012/01/11/2311956.html\" target=\"_blank\" rel=\"external\">根本没有”JSON”对象这回事</a></p>\n","source":"_posts/JSON数据类型的学习.md","raw":"title: JSON数据类型的学习\nid: 349\ncategories:\n  - Javascript\ndate: 2013-03-28 02:00:41\ntags:\n  - json\n---\n\n<div>\n\n初学AJAX，今天写一个表单验证，发现$.ajax()的success回调函数总是不会执行，而error毁掉函数则总是执行。\n\n我是先POST表单账号密码给php文件，该php文件返回数据（我直接返回了常量供自己测试），然后在JS里获得data.login_email。\n\n发现data.login_email得到的总是undefined，为什么呢？由于对JSON格式不是很熟悉，所以不断调试不断查资料，最后发现：\n\n**原来自1.4版本的jQuery开始,JSON写的不规范可能导致错误!**\n\n\"json\": Evaluates the response as JSON and returns a JavaScript object. In jQuery 1.4 the JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. (See[ json.org](http://www.json.org) for more information on proper JSON formatting.\n\n查资料学习了JSON格式后，修改后台php代码为：\n\n[php]\n\n&lt;?php\n\nheader('Content-type: text/json');\n\n  $results = array (\n\n    &quot;login_email&quot; =&gt; &quot;0&quot;,\n\n    &quot;login_password&quot; =&gt;&quot; 0&quot;\n\n);\n\necho json_encode($results);\n\n?&gt;\n\n[/php]\n<div>再修改前台代码则为：</div>\n<div>[javascript]\n\n$('#login-btn').click(function(){\n\nvar emailVal = $('#login-email').val();\n\n  var passwordVal = $('#login-password').val();\n\n//点击登陆按钮时进行验证\n\n  $.ajax({\n\n   type: &quot;POST&quot;,\n\n   data:{&quot;emailVal&quot;:emailVal,&quot;passwordVal&quot;:passwordVal},\n\n   dataType: &quot;JSON&quot;,//原来声明了json数据类型就必须严格书写JSON！\n\n   url: &quot;login_check.php&quot;,\n\nsuccess: function(data){\n\nif(data.login_email==0){//邮箱错误\n\n$('#login #login-email').prev().show();\n\n$('#login #login-email').parent().parent().addClass('warning');\n\n}\n\n                if(data.login_password==0){//密码错误\n\n                    $('#login #login-password').prev().show();\n\n$('#login #login-password').parent().parent().addClass('error');\n\n}\n\n  },error:function(XMLResponse){\n\n            alert(&quot;出错！错误信息为&quot;+XMLResponse.responseText)}\n\n            });\n\nreturn false;//禁止登陆按钮的默认行为\n\n});//click（）结束\n\n[/javascript]\n\n</div>\n<div></div>\n<div>总结出一点JSON规范为：</div>\n<div>　　1）名称：用双引号引起，如[javascript]\n\n    data:{&quot;emailVal&quot;:emailVal,&quot;passwordVal&quot;:passwordVal}\n\n[/javascript]\n\n</div>\n<div>　　2）字符串：用用双引号引起，如下：</div>\n<div>[php]\n\n&lt;?php\n\n  header('Content-type: text/json');\n\n  $results=array(&quot;a&quot; =&gt; &quot;apple&quot;, &quot;b&quot; =&gt; &quot;banana&quot;, &quot;o&quot; =&gt; &quot;orange&quot;);\n\n  echo json_encode($results);\n\n?&gt;\n\n[/php]\n\n</div>\n<div>        3）boolean类型不加引号，其他都要加（包括数字）</div>\n<div>        4）前后台使用的数据类型应该一致，如后台使用json_encode($results);前台使用dataType:JSON;来声明</div>\n</div>\n<div>        5）若定义了dataType为JSON就必须使用严格语法的JSON，否则success回调函数就不执行！</div>\n<div></div>\n#-- 2013-10-05 更新---\n注意JSON字符串与JSON对象的区分：\n\n[javascript]\n// 这是JSON字符串\nvar foo = '{ &quot;prop&quot;: &quot;val&quot; }';\n// 这是对象字面量\nvar bar = { &quot;prop&quot;: &quot;val&quot; };\n[/javascript]\n\nJSON有非常严格的语法，在string上下文里{ \"prop\": \"val\" } 是个合法的JSON，但{ prop: \"val\" }和{ 'prop': 'val' }确实不合法的。所有属性名称和它的值都必须用双引号引住，不能使用单引号。另外，即便你用了转义以后的单引号也是不合法的。\n参考：[根本没有\"JSON\"对象这回事](http://www.cnblogs.com/TomXu/archive/2012/01/11/2311956.html)","slug":"JSON数据类型的学习","updated":1418908898000,"excerpt":"","_id":"0kd08psdc0jw3ew3","comments":true,"layout":"post","photos":[],"link":""},{"title":"JavaScript 碎片","categories":["be592wtznj5wcvwn"],"tags":["kzhdg37kxm157a04"],"date":1418884162000,"content":"<ul>\n<li><p>Object.defineProperty</p>\n<pre><code>  <span class=\"keyword\">var</span> A = {};\n  <span class=\"built_in\">Object</span>.defineProperty(A, <span class=\"string\">'attrName'</span>, {\n      set: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(val)</span> </span>{ \n          <span class=\"keyword\">this</span>.__attrName__ = val; \n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'A.attrName 被设置为: '</span>, val);\n      },\n      get: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{ \n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'A.attrName 被获取到: '</span>, <span class=\"keyword\">this</span>.__attrName__);\n          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.__attrName__; }\n      });\n  });    \n</code></pre></li>\n</ul>\n","source":"_posts/JavaScript 碎片.md","raw":"title: 'JavaScript 碎片'\r\ncategories: Javascript\r\ntags:\r\n  - javascript\r\ndate: 2014-12-18 14:29:22\r\n---\r\n\r\n- Object.defineProperty\r\n\r\n\t\tvar A = {};\r\n        Object.defineProperty(A, 'attrName', {\r\n            set: function(val) { \r\n                this.__attrName__ = val; \r\n                console.log('A.attrName 被设置为: ', val);\r\n            },\r\n            get: function() { \r\n                console.log('A.attrName 被获取到: ', this.__attrName__);\r\n                return this.__attrName__; }\r\n            });\r\n        });    \r\n","slug":"JavaScript 碎片","updated":1418908898000,"excerpt":"","_id":"mval4mujtyq0h0tk","comments":true,"layout":"post","photos":[],"link":""},{"title":"Javascript 异步加载","tags":["f07x04vd5edp23qx"],"id":498,"categories":["be592wtznj5wcvwn"],"date":1380884732000,"content":"<p>异步编程，即非阻塞地执行代码，其实可以用来加载一些附属功能的代码，比如分享按钮代码、GA分析代码等。<br>建议将script标签放置在就是为了不让JS代码阻塞DOM的渲染，不会在JS执行期间，网页一片空白卡顿的糟糕体验。<br>今天学习到GA的异步加载代码：<br>[javascript]<br>(function() {<br>     var ga = document.createElement(‘script’); ga.type = ‘text/javascript’; ga.async = true;<br>     ga.src = (‘https:’ == document.location.protocol ? ‘<a href=\"https://ssl\" target=\"_blank\" rel=\"external\">https://ssl</a>‘ : ‘<a href=\"http://www\" target=\"_blank\" rel=\"external\">http://www</a>‘) + ‘.google-analytics.com/ga.js’;<br>     var s = document.getElementsByTagName(‘script’)[0]; s.parentNode.insertBefore(ga, s);<br> })();<br>[/javascript]<br>动态生成script标签并利用HTML5才新增的async属性设置为异步(可不写，但最好加上)，加上用匿名函数封装，避免了内部变量泄露到外部污染全局。<br>这份代码可以兼容不支持HTML5中async属性的浏览器，而如果只考虑现代浏览器的话，其实可以偷懒，直接给要异步加载的script一个async属性即可实现上述异步加载的效果了：</p>\n<script src=\"asyncFile.js\" async></script> ","source":"_posts/Javascript 异步加载.md","raw":"title: 'Javascript 异步加载'\ntags:\n  - async\nid: 498\ncategories:\n  - Javascript\ndate: 2013-10-04 19:05:32\n---\n\n异步编程，即非阻塞地执行代码，其实可以用来加载一些附属功能的代码，比如分享按钮代码、GA分析代码等。\n建议将script标签放置在</body>就是为了不让JS代码阻塞DOM的渲染，不会在JS执行期间，网页一片空白卡顿的糟糕体验。\n今天学习到GA的异步加载代码：\n[javascript]\n(function() {\n     var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n     ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n })();\n[/javascript]\n动态生成script标签并利用HTML5才新增的async属性设置为异步(可不写，但最好加上)，加上用匿名函数封装，避免了内部变量泄露到外部污染全局。\n这份代码可以兼容不支持HTML5中async属性的浏览器，而如果只考虑现代浏览器的话，其实可以偷懒，直接给要异步加载的script一个async属性即可实现上述异步加载的效果了：\n<script src=\"asyncFile.js\" async></script> ","slug":"Javascript 异步加载","updated":1418908898000,"excerpt":"","_id":"vtojnzasx4b5kcsn","comments":true,"layout":"post","photos":[],"link":""},{"title":"Javascript 闭包的学习","tags":["cyi3e3xucfdnw3n1"],"id":511,"categories":["be592wtznj5wcvwn"],"date":1380987373000,"content":"<p>名词定义：包裹一些局部变量的一个函数叫做一个闭包。闭包是个函数，而它「记住了周围发生了什么」。表现为由「一个函数」体中定义了「另个函数」<br>实现原理：嵌套函数可以访问外部作用域中声明的变量。<br>组成结构：函数以及构建这个函数的环境。<br>使用价值：将函数与其所操作的某些数据（环境）关连起来<br>使用缺点：闭包会影响性能！闭包会使得函数中的变量都被保存在内存中，内存消耗很大。</p>\n<ul>\n<li><p>用途1，将数据与多个函数相关联：<br>[javascript]<br>function makeSizer(size) {<br> return function() {<br>   document.body.style.fontSize = size + ‘px’;<br> };<br>}</p>\n<p>var size12 = makeSizer(12);<br>var size14 = makeSizer(14);<br>var size16 = makeSizer(16);</p>\n<p>//size12();  // 将字号调整到12px<br>//size14();  // 将字号调整到14px<br>//size16();  // 将字号调整到16px<br>[/javascript]</p>\n</li>\n<li><p>用途2，模拟私有方法：<br>私有方法不仅仅有利于限制对代码的访问：还提供了管理全局命名空间的强大能力，避免非核心的方法弄乱了代码的公共接口部分。<br>[javascript]<br>// 创建一个环境为三个函数共享，减少了污染<br>var Counter = (function() {<br> var privateCounter = 0;<br> function changeBy(val) {<br>   privateCounter += val;<br> }<br> return {<br>   increment: function() {</p>\n<pre><code> <span class=\"function\">changeBy</span>(1);\n</code></pre><p>   },<br>   decrement: function() {</p>\n<pre><code> <span class=\"function\">changeBy</span>(-1);\n</code></pre><p>   },<br>   value: function() {</p>\n<pre><code> <span class=\"keyword\">return</span> privateCounter;\n</code></pre><p>   }<br> }<br>})();</p>\n<p>alert(Counter.value()); /<em> 提示 0 </em>/<br>Counter.increment();<br>Counter.increment();<br>alert(Counter.value()); /<em> 提示 2 </em>/<br>Counter.decrement();<br>alert(Counter.value()); /<em> 提示 1 </em>/<br>[/javascript]</p>\n</li>\n</ul>\n<p>这种方法跟创建一个对象，并分别定义对象的三个方法相似吧？<br>实验结果显示，这两种方式是相同的，不过小赖觉得，以下这种更为直观一点吧：<br>[javascript]<br> // 创建一个环境为三个函数共享，减少了污染<br> var Counter = {<br>   privateCounter : 0,</p>\n<p>   increment: function() {<br>       this.privateCounter +=1;<br>     },</p>\n<pre><code> decrement: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n   <span class=\"keyword\">this</span>.privateCounter -=<span class=\"number\">1</span>;\n },\n\n value: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.privateCounter;\n }\n</code></pre><p> }</p>\n<p> alert(Counter.value()); /<em> 提示 0 </em>/<br> Counter.increment();<br> Counter.increment();<br> alert(Counter.value()); /<em> 提示 2 </em>/<br> Counter.decrement();<br> alert(Counter.value()); /<em> 提示 1 </em>/<br> [/javascript]</p>\n<p>使用闭包的话，三个方法共享一个环境，而使用对象来创建明明空间，实则是通过this指向这个对象，来保证共享一个环境，也是避免了污染，有异曲同工之妙吧。</p>\n<p>参考：<br>1. <a href=\"span style=&quot;text-decoration: underline;&quot;&gt;https://developer.mozilla.org/zh-CN/docs/JavaScript/Guide/Closures&lt;/span\">闭包</a><br>2. <a href=\"span style=&quot;text-decoration: underline;&quot;&gt;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&lt;/span\">闭包</a><br>3. <a href=\"span style=&quot;text-decoration: underline;&quot;&gt;https://app.box.com/shared/elkumrpfng&lt;/span\">secrets_of_javascript_closures</a></p>\n","source":"_posts/Javascript 闭包的学习.md","raw":"title: 'Javascript 闭包的学习'\ntags:\n  - 闭包\nid: 511\ncategories:\n  - Javascript\ndate: 2013-10-05 23:36:13\n---\n\n名词定义：包裹一些局部变量的一个函数叫做一个闭包。闭包是个函数，而它「记住了周围发生了什么」。表现为由「一个函数」体中定义了「另个函数」\n实现原理：嵌套函数可以访问外部作用域中声明的变量。\n组成结构：函数以及构建这个函数的环境。\n使用价值：将函数与其所操作的某些数据（环境）关连起来\n使用缺点：闭包会影响性能！闭包会使得函数中的变量都被保存在内存中，内存消耗很大。\n- 用途1，将数据与多个函数相关联：\n[javascript]\n function makeSizer(size) {\n   return function() {\n     document.body.style.fontSize = size + 'px';\n   };\n }\n\n var size12 = makeSizer(12);\n var size14 = makeSizer(14);\n var size16 = makeSizer(16);\n\n //size12();  // 将字号调整到12px\n //size14();  // 将字号调整到14px\n //size16();  // 将字号调整到16px\n [/javascript]\n\n- 用途2，模拟私有方法：\n私有方法不仅仅有利于限制对代码的访问：还提供了管理全局命名空间的强大能力，避免非核心的方法弄乱了代码的公共接口部分。\n[javascript]\n // 创建一个环境为三个函数共享，减少了污染\n var Counter = (function() {\n   var privateCounter = 0;\n   function changeBy(val) {\n     privateCounter += val;\n   }\n   return {\n     increment: function() {\n       changeBy(1);\n     },\n     decrement: function() {\n       changeBy(-1);\n     },\n     value: function() {\n       return privateCounter;\n     }\n   }\n })();\n\n alert(Counter.value()); /* 提示 0 */\n Counter.increment();\n Counter.increment();\n alert(Counter.value()); /* 提示 2 */\n Counter.decrement();\n alert(Counter.value()); /* 提示 1 */\n [/javascript]\n\n这种方法跟创建一个对象，并分别定义对象的三个方法相似吧？\n实验结果显示，这两种方式是相同的，不过小赖觉得，以下这种更为直观一点吧：\n[javascript]\n // 创建一个环境为三个函数共享，减少了污染\n var Counter = {\n   privateCounter : 0,\n\n   increment: function() {\n       this.privateCounter +=1;\n     },\n\n     decrement: function() {\n       this.privateCounter -=1;\n     },\n\n     value: function() {\n       return this.privateCounter;\n     }\n }\n\n alert(Counter.value()); /* 提示 0 */\n Counter.increment();\n Counter.increment();\n alert(Counter.value()); /* 提示 2 */\n Counter.decrement();\n alert(Counter.value()); /* 提示 1 */\n [/javascript]\n\n使用闭包的话，三个方法共享一个环境，而使用对象来创建明明空间，实则是通过this指向这个对象，来保证共享一个环境，也是避免了污染，有异曲同工之妙吧。\n\n参考：\n1\\. [闭包](<span style=\"text-decoration: underline;\">https://developer.mozilla.org/zh-CN/docs/JavaScript/Guide/Closures</span> )\n2\\. [闭包](<span style=\"text-decoration: underline;\">http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html</span> )\n3\\. [secrets_of_javascript_closures](<span style=\"text-decoration: underline;\">https://app.box.com/shared/elkumrpfng</span> )","slug":"Javascript 闭包的学习","updated":1418908898000,"excerpt":"","_id":"g12207mg0li84e5b","comments":true,"layout":"post","photos":[],"link":""},{"title":"Javascript碎片积累","tags":["icgldl43cc8gt0in"],"id":406,"categories":["be592wtznj5wcvwn"],"date":1370077068000,"content":"<p>-<br>JS中的Image对象：</p>\n<p>[javascript]<br>function getImageSize(imageEl) {<br> var i = new Image();<br> i.src = imageEl.src;<br> return new Array(i.width, i.height);<br>}<br>[/javascript]</p>\n<p>image对象现在一般常用来预加载一些图片，先将其装入 DOM，等到需要的时候，直接调用，省掉等待的时间，直接显示出来。<br>需要注意的是：src 属性一定要写到 onload 的后面，否则程序在 IE 中会出错。<br>-<br>for 和 class 是 JavaScript 中的关键字，所以在 JavaScript 中这两个属性名称分别用 htmlFor 和 className 代替。</p>\n<p>[javascript]<br>function getAttr(el, attrName){<br> var attr = {‘for’:’htmlFor’, ‘class’:’className’}[attrName] || attrName;<br>}<br>[/javascript]</p>\n<p>-<br>交换两个变量值的巧妙方法，利用数组：<br>foo = [bar, bar=foo][0]; // 多巧妙啊！编程的时候不要忘记思考，否则你就只是一个完成工作的机器。<br>-<br>双感叹号的用法：!! 一般用来将后面的表达式强制转换为布尔类型的数据（boolean），也就是只能是true或者false。<br>-<br>注意一些类型转换：</p>\n<p>[javascript]<br>a=parseInt(“1234″)<br>a=”1234″-0 //转换为数字<br>b=1234+”&quot; //转换为字符串<br>c=someObject.toString() //将对象转换为字符串<br>[/javascript]</p>\n<p>其中第1种、第4种为显式转换，2、3为隐式转换<br>布尔型的转换，javascript约定规则为<br>false、undefinded、null、0、”” 为 false<br>true、1、”somestring”、[Object] 为 true<br>-<br>在标准的事件绑定中绑定事件的方法函数为 addEventListener,而IE使用的是attachEvent<br>-<br>jQuery.trim()去除字符串前后的空格<br>-<br>jQuery.inArray()判断元素是否在数组中</p>\n<p>[javascript]<br>var arr = [&quot;html&quot;, &quot;css&quot;, &quot;js&quot;, &quot;jquery&quot;];<br>$.inArray(‘js’,arr);<br>[/javascript]</p>\n<p>-<br>编写一个简单的 jQuery 插件（模板）</p>\n<p>[javascript]<br>//You need an anonymous function to wrap around your function to avoid conflict<br>(function($){<br> //Attach this new method to jQuery<br> $.fn.extend({<br> //This is where you write your plugin’s name<br> pluginname: function() {<br> //options<br> var defaults = {<br> option1: &quot;default_value&quot;<br> }<br> var options = $.extend(defaults, options);<br> //a public method<br> this.methodName: function () {<br> //call this method via $.pluginname().methodName();<br> }<br> //Iterate over the current set of matched elements<br> return this.each(function() {<br> var o = options;<br> //code to be inserted here<br> });<br> }<br> });<br>//pass jQuery to the function,<br>//So that we will able to use any valid Javascript variable name<br>//to replace &quot;$&quot; SIGN. But, we’ll stick to $ (I like dollar sign: ) )<br>})(jQuery);<br>[/javascript]</p>\n<p>-<br>小技巧：在浏览器地址栏中输入一行代码：data:text/html, &lt;html contenteditable&gt; ，回车即可把浏览器变临时编辑器（需要浏览器支持 HTML5 属性 contenteditable） 原文<br>-<br>所有JS对象共享的方法是toString()，返回该对象序列化格式后的字符串<br>-<br>元素的client属性(只读)指元素的内容部分再加上padding的大小，不包括border和滚动条占用的空间，故document元素的clientHeight和clientWidth属性，就代表了网页的相对大小。</p>\n<p>[javascript]<br> // 获得网页的相对大小<br> function getViewport(){ // 页面加载完成后才能运行<br> 　　　　if (document.compatMode == &quot;BackCompat&quot;){<br> 　　　　　　return {<br> // IE6 quirks模式<br> 　　　　　　　　width: document.body.clientWidth,<br> 　　　　　　　　height: document.body.clientHeight<br> 　　　　　　}<br> 　　　　} else {<br> 　　　　　　return {<br> 　　　　　　　　width: document.documentElement.clientWidth,<br> 　　　　　　　　height: document.documentElement.clientHeight<br> 　　　　　　}<br> 　　　　}<br> 　　}<br>[/javascript]</p>\n<p>&nbsp;</p>\n<p>[javascript]<br> // 获取网页的绝对大小<br> // 如果网页内容能够在浏览器窗口中全部显示,不同浏览器有不同的处理，这两个值未必相等,要取它们之中较大的那个值<br> function getPagearea(){<br> if (document.compatMode == &quot;BackCompat&quot;){<br> return {<br> width: Math.max(document.body.scrollWidth,<br> document.body.clientWidth),<br> height: Math.max(document.body.scrollHeight,<br> document.body.clientHeight)<br> }<br> } else {<br> return {<br> width: Math.max(document.documentElement.scrollWidth,<br> document.documentElement.clientWidth),</p>\n<p>height: Math.max(document.documentElement.scrollHeight,<br> document.documentElement.clientHeight)<br> }<br> }<br> }<br> [/javascript]</p>\n<p>-<br>每个元素都有offsetTop和offsetLeft属性，表示该元素的左上角与父容器（offsetParent对象）左上角的距离。所以，只需要将这两个值进行累加，就可以得到该元素的绝对坐标。</p>\n<p>// 获取绝对位置的横坐标和纵坐标<br>// 由于在表格和iframe中，offsetParent对象未必等于父容器，所以以下函数对于表格和iframe中的元素不适用。</p>\n<p>[javascript]<br>function getElementLeft(element){<br> 　　　　var actualLeft = element.offsetLeft;<br> 　　　　var current = element.offsetParent;<br> 　　　　while (current !== null){<br> 　　　　　　actualLeft += current.offsetLeft;<br> 　　　　　　current = current.offsetParent;<br> 　　　　}<br> 　　　　return actualLeft;<br> 　　}<br> 　　function getElementTop(element){<br> 　　　　var actualTop = element.offsetTop;<br> 　　　　var current = element.offsetParent;<br> 　　　　while (current !== null){<br> 　　　　　　actualTop += current.offsetTop;<br> 　　　　　　current = current.offsetParent;<br> 　　　　}<br> 　　　　return actualTop;<br> 　　}<br>[/javascript]</p>\n<p>// 获取网页元素的相对位置:绝对坐标减去滚动条滚动的距离</p>\n<p>[javascript]<br>function getElementViewLeft(element){<br> 　　　　var actualLeft = element.offsetLeft;<br> 　　　　var current = element.offsetParent;<br> 　　　　while (current !== null){<br> 　　　　　　actualLeft += current.offsetLeft;<br> 　　　　　　current = current.offsetParent;<br> 　　　　}<br> 　　　　if (document.compatMode == &quot;BackCompat&quot;){<br> 　　　　　　var elementScrollLeft=document.body.scrollLeft;<br> 　　　　} else {<br> 　　　　　　var elementScrollLeft=document.documentElement.scrollLeft;<br> 　　　　}<br> 　　　　return actualLeft-elementScrollLeft;<br> 　　}<br> 　　function getElementViewTop(element){<br> 　　　　var actualTop = element.offsetTop;<br> 　　　　var current = element.offsetParent;<br> 　　　　while (current !== null){<br> 　　　　　　actualTop += current. offsetTop;<br> 　　　　　　current = current.offsetParent;<br> 　　　　}<br> 　　　　 if (document.compatMode == &quot;BackCompat&quot;){<br> 　　　　　　var elementScrollTop=document.body.scrollTop;<br> 　　　　} else {<br> 　　　　　　var elementScrollTop=document.documentElement.scrollTop;<br> 　　　　}<br> 　　　　return actualTop-elementScrollTop;<br> 　　}<br>// scrollTop和scrollLeft属性是可以赋值的<br>[/javascript]</p>\n<p>-<br>-<br>object.prop和object[‘prop’]是等价的，当属性是带空格的string时就只能用方括号了：person[‘first name’];<br>-<br>for…in 循环输出的属性名顺序不可预测,使用之前先检测对象是否为null 或者 undefined<br>-<br>hasOwnProperty是js中唯一一个处理属性但是不查找原型链的函数</p>\n<p>[javascript]<br>Object.prototype.prop = ‘propsss’;<br>var obj = {und:undefined};<br>obj.prop; // propsss<br>‘und’ in obj; // true<br>obj.hasOwnProperty(‘prop’); // false<br>obj.hasOwnProperty(‘und’); // true<br>//只有hasOwnProperty可以给出正确和期望的结果，尤其在遍历一个对象时<br>//除了hasOwnProperty外，没有其他方法可以排除原型链上的属性（不是定义在对象自身上的属性）<br>//如果hasOwnProperty被占用呢？来看：<br>var obj = {<br>    hasOwnProperty: function(){<br>        return false;<br>    },<br>    prop: ‘this is bad…’<br>};<br>obj.hasOwnProperty(‘prop’); // 总是返回false<br>//这样解决：<br>{}.hasOwnProperty.call(obj,’prop’); // 返回true<br>[/javascript]</p>\n<p>-<br>Object的每个实例都具有下列属性方法：<br>1.Constructor：保存着用于创建当前对象的函数 上面例子 构造函数就是 Object()<br>2.hasOwnProperty(prop):检查给定的属性是否在当前对象实例中（而不是在实例的原型中）。作为参数的属性必须以string形式指定<br>3.isPrototypeOf(object):用于检查传入的对象是否是另一个对象的原型。<br>4.propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for in语句<br>5.toLocaleString():返回对象的字符串表示，与环境的地区对应<br>6.toString():同上<br>7.valueOf(): 返回对象的字符串、number、Boolean表示。通常与toString()相同<br>-<br>javascript中的乘法问题：<br>可用 10000 作为基数确保精度，如 31.12 <em> 10000 </em> 9.7 / 10000<br>-<br>function语句在解析时会被提升，对代码求值时js引擎在第一遍会声明函数并将它们放到源代码树的顶部。</p>\n<p>[javascript]<br>     alert(sum(10,10))<br>      function sum(n1,n2){<br>          return n1+n2;<br>     }<br>     //单独使用下面代码时，函数表达式会出错：<br>      alert(sum(10,10));<br>      var sum = function (n1,n2){<br>          return n1+n2;<br>     }<br>[/javascript]</p>\n<p>命名函数表达式即被认为是函数声明也被认为是函数表达式</p>\n<p>[javascript]<br>typeof g; // &quot;function&quot;<br>var f = function g(){};<br>//上面这个例子论证了 jScript 是如何把一个命名函数表达式处理成一个函数声明的<br>//在函数声明发生之前就把 g 给解析了   【在IE中检测】<br>[/javascript]</p>\n<p>-<br>this是在函数调用时才被确定的而不是定义的时候</p>\n<p>[javascript]<br>     var Dog = {<br>          toString: function() { return ‘dog’;},<br>          fn: function() { alert(this);},<br>     };<br>      var Cat = {<br>          toString: function() { return ‘cat’;}<br>     };<br>      Dog.fn(); // dog<br>      Dog<a href=\"\">‘fn’</a> // dog<br>      Cat.fn = Dog.fn;<br>      Cat.fn(); // cat<br>      var func = Dog.fn;<br>      func(); // window<br>[/javascript]</p>\n<p>-</p>\n<p>apply和call的区别，在于apply用数组传递参数，而call用多参数逗号传递参数：</p>\n<p>[javascript]</p>\n<p>function myFunc(arg1,arg2,arg3){</p>\n<p>// code …</p>\n<p>}</p>\n<p>myFunc.apply(null,[arg1,arg2,aeg3]);</p>\n<p>myFunc.call(null,arg1,arg2,arg3);</p>\n<p>// 第一个参数指定调用函数myFunc的对象</p>\n<p>[/javascript]</p>\n<p>-</p>\n<p>构造函数的理解：当new修饰符修饰函数时，this就会指向新对象，该对象会自动返回，称之为构造函数：</p>\n<p>[javascript]<br>function Person(name){<br>    this.name = name;<br>    this.sayName = function(){<br>        alert(&quot;我的大名是：&quot; + this.name);<br>}<br>}</p>\n<p>var person1 = new Person(&quot;xiaolai&quot;); // 构造函数返回一个对象，赋值给变量 xiaolai<br>person1.sayName(); // 『我的大名是：xiaolai』<br>[/javascript]</p>\n<p>-<br>March 6, 2014—添加—</p>\n<ul>\n<li>获取元素的classList:</li>\n</ul>\n<p>[javascript]<br> selector.classList 获取所有的class<br> selector.clasList.add(value); // 添加类<br> selector.clasList.remove(value); // 删除类<br> selector.clasList.toggle(value); // 切换类<br> selector.clasList.contains(value); // 判断是否包含类<br> [/javascript]</p>\n<ul>\n<li>获取DOM中获得了焦点的元素</li>\n</ul>\n<p>[javascript]<br> document.activeElement<br> [/javascript]</p>\n<ul>\n<li>判断DOM是否加载完成</li>\n</ul>\n<p>[javascript]<br> document.readyState // ‘complete’ or ‘loading’<br> [/javascript]</p>\n<ul>\n<li>判断浏览器采用了哪种渲染模式</li>\n</ul>\n<p>[javascript]<br> document.compatMode // ‘CSS1Compat’ 为标准模式，’BackCompat’ 为混杂模式<br> [/javascript]</p>\n<ul>\n<li>判断浏览器采用的字符集</li>\n</ul>\n<p>[javascript]<br> document.defaultCharset   // 默认字符集<br> document.charset // 采用的字符集<br> [/javascript]</p>\n<ul>\n<li>访问所有自定义属性</li>\n</ul>\n<p>[javascript]<br> selector.dataset.myid; // 获取div[data-myid=‘100’]中的100<br> [/javascript]</p>\n<ul>\n<li>将某个元素调入视窗内</li>\n</ul>\n<p>[javascript]<br> selector.scrollIntoView()<br> [/javascript]</p>\n<ul>\n<li>返回元素的子元素节点（不包括其他节点）</li>\n</ul>\n<p>[javascript]<br> selector.children // 是HTMLCollection的一个实例<br> [/javascript]</p>\n<ul>\n<li><p>获取视窗大小<br>[javascript]<br>function getViewport() {<br>// 判断是否混杂模式<br>if (document.compatMode == ‘BackCompat’) {<br>return {<br>width: document.body.clientWidth,<br>height: document.body.clientHeight<br>}<br>} else {<br>return {<br>width: document.documentElement.clientWidth,<br>height: document.documentElement.clientHeight<br>}<br>}<br>}<br>[/javascript]</p>\n</li>\n<li><p>获取元素在视窗内的位置<br>[javascript]<br>selector.getBoundingClientRegt() // 返回对象含属性 left right top bottom<br>[/javascript]</p>\n</li>\n<li><p>获取页面的样式表<br>[javascript]<br>document.styleSheets;<br>document.styleSheets[0].disabled = true; // 禁用第一个样式表<br>[/javascript]</p>\n</li>\n</ul>\n","source":"_posts/Javascript碎片积累.md","raw":"title: Javascript碎片积累\ntags:\n  - 碎片\nid: 406\ncategories:\n  - Javascript\ndate: 2013-06-01 16:57:48\n---\n\n-\nJS中的Image对象：\n\n[javascript]\nfunction getImageSize(imageEl) {\n var i = new Image();\n i.src = imageEl.src;\n return new Array(i.width, i.height);\n}\n[/javascript]\n\nimage对象现在一般常用来预加载一些图片，先将其装入 DOM，等到需要的时候，直接调用，省掉等待的时间，直接显示出来。\n需要注意的是：src 属性一定要写到 onload 的后面，否则程序在 IE 中会出错。\n-\nfor 和 class 是 JavaScript 中的关键字，所以在 JavaScript 中这两个属性名称分别用 htmlFor 和 className 代替。\n\n[javascript]\nfunction getAttr(el, attrName){\n var attr = {'for':'htmlFor', 'class':'className'}[attrName] || attrName;\n}\n[/javascript]\n\n-\n交换两个变量值的巧妙方法，利用数组：\nfoo = [bar, bar=foo][0]; // 多巧妙啊！编程的时候不要忘记思考，否则你就只是一个完成工作的机器。\n-\n双感叹号的用法：!! 一般用来将后面的表达式强制转换为布尔类型的数据（boolean），也就是只能是true或者false。\n-\n注意一些类型转换：\n\n[javascript]\na=parseInt(“1234″)\na=”1234″-0 //转换为数字\nb=1234+”&quot; //转换为字符串\nc=someObject.toString() //将对象转换为字符串\n[/javascript]\n\n其中第1种、第4种为显式转换，2、3为隐式转换\n布尔型的转换，javascript约定规则为\nfalse、undefinded、null、0、”\" 为 false\ntrue、1、”somestring”、[Object] 为 true\n-\n在标准的事件绑定中绑定事件的方法函数为 addEventListener,而IE使用的是attachEvent\n-\njQuery.trim()去除字符串前后的空格\n-\njQuery.inArray()判断元素是否在数组中\n\n[javascript]\nvar arr = [&quot;html&quot;, &quot;css&quot;, &quot;js&quot;, &quot;jquery&quot;];\n$.inArray('js',arr);\n[/javascript]\n\n-\n编写一个简单的 jQuery 插件（模板）\n\n[javascript]\n//You need an anonymous function to wrap around your function to avoid conflict\n(function($){\n //Attach this new method to jQuery\n $.fn.extend({\n //This is where you write your plugin's name\n pluginname: function() {\n //options\n var defaults = {\n option1: &quot;default_value&quot;\n }\n var options = $.extend(defaults, options);\n //a public method\n this.methodName: function () {\n //call this method via $.pluginname().methodName();\n }\n //Iterate over the current set of matched elements\n return this.each(function() {\n var o = options;\n //code to be inserted here\n });\n }\n });\n//pass jQuery to the function,\n//So that we will able to use any valid Javascript variable name\n//to replace &quot;$&quot; SIGN. But, we'll stick to $ (I like dollar sign: ) )\n})(jQuery);\n[/javascript]\n\n-\n小技巧：在浏览器地址栏中输入一行代码：data:text/html, &lt;html contenteditable&gt; ，回车即可把浏览器变临时编辑器（需要浏览器支持 HTML5 属性 contenteditable） 原文\n-\n所有JS对象共享的方法是toString()，返回该对象序列化格式后的字符串\n-\n元素的client属性(只读)指元素的内容部分再加上padding的大小，不包括border和滚动条占用的空间，故document元素的clientHeight和clientWidth属性，就代表了网页的相对大小。\n\n[javascript]\n // 获得网页的相对大小\n function getViewport(){ // 页面加载完成后才能运行\n 　　　　if (document.compatMode == &quot;BackCompat&quot;){\n 　　　　　　return {\n // IE6 quirks模式\n 　　　　　　　　width: document.body.clientWidth,\n 　　　　　　　　height: document.body.clientHeight\n 　　　　　　}\n 　　　　} else {\n 　　　　　　return {\n 　　　　　　　　width: document.documentElement.clientWidth,\n 　　　　　　　　height: document.documentElement.clientHeight\n 　　　　　　}\n 　　　　}\n 　　}\n[/javascript]\n\n&nbsp;\n\n[javascript]\n // 获取网页的绝对大小\n // 如果网页内容能够在浏览器窗口中全部显示,不同浏览器有不同的处理，这两个值未必相等,要取它们之中较大的那个值\n function getPagearea(){\n if (document.compatMode == &quot;BackCompat&quot;){\n return {\n width: Math.max(document.body.scrollWidth,\n document.body.clientWidth),\n height: Math.max(document.body.scrollHeight,\n document.body.clientHeight)\n }\n } else {\n return {\n width: Math.max(document.documentElement.scrollWidth,\n document.documentElement.clientWidth),\n\nheight: Math.max(document.documentElement.scrollHeight,\n document.documentElement.clientHeight)\n }\n }\n }\n [/javascript]\n\n-\n每个元素都有offsetTop和offsetLeft属性，表示该元素的左上角与父容器（offsetParent对象）左上角的距离。所以，只需要将这两个值进行累加，就可以得到该元素的绝对坐标。\n\n// 获取绝对位置的横坐标和纵坐标\n// 由于在表格和iframe中，offsetParent对象未必等于父容器，所以以下函数对于表格和iframe中的元素不适用。\n\n[javascript]\nfunction getElementLeft(element){\n 　　　　var actualLeft = element.offsetLeft;\n 　　　　var current = element.offsetParent;\n 　　　　while (current !== null){\n 　　　　　　actualLeft += current.offsetLeft;\n 　　　　　　current = current.offsetParent;\n 　　　　}\n 　　　　return actualLeft;\n 　　}\n 　　function getElementTop(element){\n 　　　　var actualTop = element.offsetTop;\n 　　　　var current = element.offsetParent;\n 　　　　while (current !== null){\n 　　　　　　actualTop += current.offsetTop;\n 　　　　　　current = current.offsetParent;\n 　　　　}\n 　　　　return actualTop;\n 　　}\n[/javascript]\n\n// 获取网页元素的相对位置:绝对坐标减去滚动条滚动的距离\n\n[javascript]\nfunction getElementViewLeft(element){\n 　　　　var actualLeft = element.offsetLeft;\n 　　　　var current = element.offsetParent;\n 　　　　while (current !== null){\n 　　　　　　actualLeft += current.offsetLeft;\n 　　　　　　current = current.offsetParent;\n 　　　　}\n 　　　　if (document.compatMode == &quot;BackCompat&quot;){\n 　　　　　　var elementScrollLeft=document.body.scrollLeft;\n 　　　　} else {\n 　　　　　　var elementScrollLeft=document.documentElement.scrollLeft;\n 　　　　}\n 　　　　return actualLeft-elementScrollLeft;\n 　　}\n 　　function getElementViewTop(element){\n 　　　　var actualTop = element.offsetTop;\n 　　　　var current = element.offsetParent;\n 　　　　while (current !== null){\n 　　　　　　actualTop += current. offsetTop;\n 　　　　　　current = current.offsetParent;\n 　　　　}\n 　　　　 if (document.compatMode == &quot;BackCompat&quot;){\n 　　　　　　var elementScrollTop=document.body.scrollTop;\n 　　　　} else {\n 　　　　　　var elementScrollTop=document.documentElement.scrollTop;\n 　　　　}\n 　　　　return actualTop-elementScrollTop;\n 　　}\n// scrollTop和scrollLeft属性是可以赋值的\n[/javascript]\n\n-\n-\nobject.prop和object['prop']是等价的，当属性是带空格的string时就只能用方括号了：person['first name'];\n-\nfor…in 循环输出的属性名顺序不可预测,使用之前先检测对象是否为null 或者 undefined\n-\nhasOwnProperty是js中唯一一个处理属性但是不查找原型链的函数\n\n[javascript]\nObject.prototype.prop = 'propsss';\nvar obj = {und:undefined};\nobj.prop; // propsss\n'und' in obj; // true\nobj.hasOwnProperty('prop'); // false\nobj.hasOwnProperty('und'); // true\n//只有hasOwnProperty可以给出正确和期望的结果，尤其在遍历一个对象时\n//除了hasOwnProperty外，没有其他方法可以排除原型链上的属性（不是定义在对象自身上的属性）\n//如果hasOwnProperty被占用呢？来看：\nvar obj = {\n    hasOwnProperty: function(){\n        return false;\n    },\n    prop: 'this is bad...'\n};\nobj.hasOwnProperty('prop'); // 总是返回false\n//这样解决：\n{}.hasOwnProperty.call(obj,'prop'); // 返回true\n[/javascript]\n\n-\nObject的每个实例都具有下列属性方法：\n1.Constructor：保存着用于创建当前对象的函数 上面例子 构造函数就是 Object()\n2.hasOwnProperty(prop):检查给定的属性是否在当前对象实例中（而不是在实例的原型中）。作为参数的属性必须以string形式指定\n3.isPrototypeOf(object):用于检查传入的对象是否是另一个对象的原型。\n4.propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for in语句\n5.toLocaleString():返回对象的字符串表示，与环境的地区对应\n6.toString():同上\n7.valueOf(): 返回对象的字符串、number、Boolean表示。通常与toString()相同\n-\njavascript中的乘法问题：\n可用 10000 作为基数确保精度，如 31.12 * 10000 * 9.7 / 10000\n-\nfunction语句在解析时会被提升，对代码求值时js引擎在第一遍会声明函数并将它们放到源代码树的顶部。\n\n[javascript]\n     alert(sum(10,10))\n      function sum(n1,n2){\n          return n1+n2;\n     }\n     //单独使用下面代码时，函数表达式会出错：\n      alert(sum(10,10));\n      var sum = function (n1,n2){\n          return n1+n2;\n     }\n[/javascript]\n\n命名函数表达式即被认为是函数声明也被认为是函数表达式\n\n[javascript]\ntypeof g; // &quot;function&quot;\nvar f = function g(){};\n//上面这个例子论证了 jScript 是如何把一个命名函数表达式处理成一个函数声明的\n//在函数声明发生之前就把 g 给解析了   【在IE中检测】\n[/javascript]\n\n-\nthis是在函数调用时才被确定的而不是定义的时候\n\n[javascript]\n     var Dog = {\n          toString: function() { return 'dog';},\n          fn: function() { alert(this);},\n     };\n      var Cat = {\n          toString: function() { return 'cat';}\n     };\n      Dog.fn(); // dog\n      Dog['fn']() // dog\n      Cat.fn = Dog.fn;\n      Cat.fn(); // cat\n      var func = Dog.fn;\n      func(); // window\n[/javascript]\n\n-\n\napply和call的区别，在于apply用数组传递参数，而call用多参数逗号传递参数：\n\n[javascript]\n\nfunction myFunc(arg1,arg2,arg3){\n\n// code ...\n\n}\n\nmyFunc.apply(null,[arg1,arg2,aeg3]);\n\nmyFunc.call(null,arg1,arg2,arg3);\n\n// 第一个参数指定调用函数myFunc的对象\n\n[/javascript]\n\n-\n\n构造函数的理解：当new修饰符修饰函数时，this就会指向新对象，该对象会自动返回，称之为构造函数：\n\n[javascript]\nfunction Person(name){\n    this.name = name;\n    this.sayName = function(){\n        alert(&quot;我的大名是：&quot; + this.name);\n}\n}\n\nvar person1 = new Person(&quot;xiaolai&quot;); // 构造函数返回一个对象，赋值给变量 xiaolai\nperson1.sayName(); // 『我的大名是：xiaolai』\n[/javascript]\n\n-\nMarch 6, 2014—添加—\n\n- 获取元素的classList:\n\n[javascript]\n selector.classList 获取所有的class\n selector.clasList.add(value); // 添加类\n selector.clasList.remove(value); // 删除类\n selector.clasList.toggle(value); // 切换类\n selector.clasList.contains(value); // 判断是否包含类\n [/javascript]\n\n- 获取DOM中获得了焦点的元素\n\n[javascript]\n document.activeElement\n [/javascript]\n\n- 判断DOM是否加载完成\n\n[javascript]\n document.readyState // ‘complete’ or ‘loading’\n [/javascript]\n\n- 判断浏览器采用了哪种渲染模式\n\n[javascript]\n document.compatMode // ‘CSS1Compat’ 为标准模式，’BackCompat’ 为混杂模式\n [/javascript]\n\n- 判断浏览器采用的字符集\n\n[javascript]\n document.defaultCharset   // 默认字符集\n document.charset // 采用的字符集\n [/javascript]\n\n- 访问所有自定义属性\n\n[javascript]\n selector.dataset.myid; // 获取div[data-myid=‘100’]中的100\n [/javascript]\n\n- 将某个元素调入视窗内\n\n[javascript]\n selector.scrollIntoView()\n [/javascript]\n\n- 返回元素的子元素节点（不包括其他节点）\n\n[javascript]\n selector.children // 是HTMLCollection的一个实例\n [/javascript]\n\n- 获取视窗大小\n[javascript]\nfunction getViewport() {\n // 判断是否混杂模式\n if (document.compatMode == 'BackCompat') {\n return {\n width: document.body.clientWidth,\n height: document.body.clientHeight\n }\n } else {\n return {\n width: document.documentElement.clientWidth,\n height: document.documentElement.clientHeight\n }\n }\n}\n[/javascript]\n\n- 获取元素在视窗内的位置\n[javascript]\nselector.getBoundingClientRegt() // 返回对象含属性 left right top bottom\n[/javascript]\n\n- 获取页面的样式表\n[javascript]\ndocument.styleSheets;\ndocument.styleSheets[0].disabled = true; // 禁用第一个样式表\n[/javascript]","slug":"Javascript碎片积累","updated":1418908898000,"excerpt":"","_id":"qhc8eq8w87z9vzgu","comments":true,"layout":"post","photos":[],"link":""},{"title":"Karma 和 Jasmine 学习笔记","tags":["l0qie8wsx4xs3o39","8jv02yaflzg61pig"],"date":1405218484000,"content":"<h1 id=\"Jasmine\">Jasmine</h1>\n<p>Jasmine 是一个用于编写 js 测试的框架。    </p>\n<p>下载</p>\n<pre><code><span class=\"char\">$ </span>git clone <span class=\"method\">https:</span>//github.com/pivotal/jasmine.git\n<span class=\"char\">$ </span>mkdir jasmine &amp;&amp; cd jasmine\n<span class=\"char\">$ </span>mv jasmine/dist/jasmine-standalone-<span class=\"number\">2.0</span><span class=\"number\">.0</span>.zip jasmine/jasmine\n<span class=\"char\">$ </span>cd jasmine/jasmine\n// 解压\n<span class=\"char\">$ </span>unzip jasmine-standalone-<span class=\"number\">2.0</span><span class=\"number\">.0</span>.zip\n\n// 除了使用 git 也可以使用 bower 来安装 <span class=\"char\">$ </span>bower install jasmine\n</code></pre><p>创建测试文件</p>\n<pre><code>// test.html\n<span class=\"comment\">&lt;!-- 引入jasmine依赖文件 --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"stylesheet\"</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/css\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"jasmine/lib/jasmine-2.0.0/jasmine.css\"</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"jasmine/lib/jasmine-2.0.0/jasmine.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"jasmine/lib/jasmine-2.0.0/jasmine-html.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"jasmine/lib/jasmine-2.0.0/boot.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n\n<span class=\"comment\">&lt;!-- 编写需要测试的代码 --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span> <span class=\"params\">(name)</span> </span>{\n    <span class=\"keyword\">return</span> <span class=\"string\">'Hello '</span> + name;\n  }\n</span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n\n<span class=\"comment\">&lt;!-- 编写测试脚本 --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">script</span>&gt;</span><span class=\"javascript\">\n  describe(<span class=\"string\">'A suite of basic functions'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n    it(<span class=\"string\">'sayHello'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n      <span class=\"keyword\">var</span> name = <span class=\"string\">'Xiaolai'</span>;\n      <span class=\"keyword\">var</span> exp = <span class=\"string\">'Hello Xiaolai'</span>;\n      expect(exp).toBe(sayHello(name));\n    })\n  })\n</span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>        \n</code></pre><p>浏览器打开 test.html 即可看到测试效果</p>\n<p>更多的 jasmine 语法，查看<a href=\"http://jasmine.github.io/2.0/introduction.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<a id=\"more\"></a>\n\n<h1 id=\"Karma\">Karma</h1>\n<p>Karma 是一个基于 NodeJS 的js测试执行过程管理工具。</p>\n<p>安装</p>\n<pre><code><span class=\"variable\">$ </span>npm install -g karma-cli        \n</code></pre><p>初始化</p>\n<pre><code>$ <span class=\"built_in\">mkdir</span> karma &amp;&amp; <span class=\"keyword\">cd</span> karma\n$ karma init\n// 根据提示完成初始化\n</code></pre><p>安装 jasmine 插件</p>\n<pre><code><span class=\"variable\">$ </span>npm install karma-jasmine -g        \n</code></pre><p>创建源文件</p>\n<pre><code>// <span class=\"keyword\">source</span>.js\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span><span class=\"params\">(name)</span>{</span>\n    <span class=\"keyword\">return</span> name.<span class=\"built_in\">split</span>(<span class=\"string\">\"\"</span>).<span class=\"built_in\">reverse</span>().<span class=\"built_in\">join</span>(<span class=\"string\">\"\"</span>);\n}     \n</code></pre><p>创建测试文件，使用 jasmine 语法编写</p>\n<pre><code><span class=\"comment\">// test.js</span>\ndescribe(<span class=\"string\">\"A suite of basic functions\"</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n       it(<span class=\"string\">\"reverse word\"</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n            expect(<span class=\"string\">\"DCBA\"</span>).toEqual(reverse(<span class=\"string\">\"ABCD\"</span>));\n        expect(<span class=\"string\">\"Xiaolai\"</span>).toEqual(reverse(<span class=\"string\">\"ialoaiX\"</span>));\n    });\n});\n</code></pre><p>修改配置文件</p>\n<pre><code><span class=\"comment\">// karma.conf.js 修改以下部分</span>\nfiles: [<span class=\"string\">'*.js'</span>]\n<span class=\"keyword\">exclude</span>: [<span class=\"string\">'karma.conf.js'</span>]\n</code></pre><p>启动测试</p>\n<pre><code>$ karma start karma.<span class=\"keyword\">conf</span>.js    \n</code></pre><h3 id=\"参考链接\">参考链接</h3>\n<ul>\n<li><a href=\"http://karma-runner.github.io/\" target=\"_blank\" rel=\"external\">karma-runner.github.io</a></li>\n<li><a href=\"http://jasmine.github.io/\" target=\"_blank\" rel=\"external\">jasmine.github.io</a></li>\n<li><a href=\"http://jasmine.github.io/2.0/introduction.html\" target=\"_blank\" rel=\"external\">jasmine.github.io/2.0/</a></li>\n<li><a href=\"http://blog.fens.me/nodejs-karma-jasmine/\" target=\"_blank\" rel=\"external\">Karma和Jasmine自动化单元测试</a></li>\n</ul>\n","source":"_posts/Karma-和-Jasmine-学习笔记.md","raw":"title: 'Karma 和 Jasmine 学习笔记'\n\ntags:\n\n\t- jasmine\n\n\t- karma\n\ndate: 2014-07-13 10:28:04\n---\n\n# Jasmine \n\nJasmine 是一个用于编写 js 测试的框架。\t\n\t\n下载\n\n\t$ git clone https://github.com/pivotal/jasmine.git\n\t$ mkdir jasmine && cd jasmine\n\t$ mv jasmine/dist/jasmine-standalone-2.0.0.zip jasmine/jasmine\n\t$ cd jasmine/jasmine\n\t// 解压\n\t$ unzip jasmine-standalone-2.0.0.zip\n\n\t// 除了使用 git 也可以使用 bower 来安装 $ bower install jasmine\n\n创建测试文件\n\n\t// test.html\n\t<!-- 引入jasmine依赖文件 -->\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"jasmine/lib/jasmine-2.0.0/jasmine.css\">\n\t<script type=\"text/javascript\" src=\"jasmine/lib/jasmine-2.0.0/jasmine.js\"></script>\n \t<script type=\"text/javascript\" src=\"jasmine/lib/jasmine-2.0.0/jasmine-html.js\"></script>\n\t<script type=\"text/javascript\" src=\"jasmine/lib/jasmine-2.0.0/boot.js\"></script>\n  \n\t<!-- 编写需要测试的代码 -->\n\t<script>\n\t  function sayHello (name) {\n    \treturn 'Hello ' + name;\n\t  }\n\t</script>\n\n\t<!-- 编写测试脚本 -->\n\t<script>\n\t  describe('A suite of basic functions', function () {\n\t    it('sayHello', function () {\n    \t  var name = 'Xiaolai';\n      \tvar exp = 'Hello Xiaolai';\n\t      expect(exp).toBe(sayHello(name));\n    \t})\n\t  })\n\t</script>\t\t\n\n浏览器打开 test.html 即可看到测试效果\n\n更多的 jasmine 语法，查看[官方文档](http://jasmine.github.io/2.0/introduction.html)\n\n<!-- more -->\n\n# Karma\n\nKarma 是一个基于 NodeJS 的js测试执行过程管理工具。\n\n安装\n\n\t$ npm install -g karma-cli\t\t\n\n初始化\n\n\t$ mkdir karma && cd karma\n\t$ karma init\n\t// 根据提示完成初始化\n\n安装 jasmine 插件\n\n\t$ npm install karma-jasmine -g\t\t\n\t\n创建源文件\n\t\n\t// source.js\n\tfunction reverse(name){\n    \treturn name.split(\"\").reverse().join(\"\");\n\t} \t\n\t\n创建测试文件，使用 jasmine 语法编写\n\t\n\t// test.js\n\tdescribe(\"A suite of basic functions\", function() {\n   \t\tit(\"reverse word\",function(){\n   \t \t\texpect(\"DCBA\").toEqual(reverse(\"ABCD\"));\n\t        expect(\"Xiaolai\").toEqual(reverse(\"ialoaiX\"));\n\t    });\n\t});\n\n修改配置文件\n\t\n\t// karma.conf.js 修改以下部分\n\tfiles: ['*.js']\n\texclude: ['karma.conf.js']\n\t\n启动测试\n\n\t$ karma start karma.conf.js\t\n\t\n### 参考链接\n\n- [karma-runner.github.io](http://karma-runner.github.io/)\n- [jasmine.github.io](http://jasmine.github.io/)\n- [jasmine.github.io/2.0/](http://jasmine.github.io/2.0/introduction.html)\n- [Karma和Jasmine自动化单元测试](http://blog.fens.me/nodejs-karma-jasmine/)","slug":"Karma-和-Jasmine-学习笔记","updated":1418908898000,"excerpt":"<h1 id=\"Jasmine\">Jasmine</h1>\n<p>Jasmine 是一个用于编写 js 测试的框架。    </p>\n<p>下载</p>\n<pre><code><span class=\"char\">$ </span>git clone <span class=\"method\">https:</span>//github.com/pivotal/jasmine.git\n<span class=\"char\">$ </span>mkdir jasmine &amp;&amp; cd jasmine\n<span class=\"char\">$ </span>mv jasmine/dist/jasmine-standalone-<span class=\"number\">2.0</span><span class=\"number\">.0</span>.zip jasmine/jasmine\n<span class=\"char\">$ </span>cd jasmine/jasmine\n// 解压\n<span class=\"char\">$ </span>unzip jasmine-standalone-<span class=\"number\">2.0</span><span class=\"number\">.0</span>.zip\n\n// 除了使用 git 也可以使用 bower 来安装 <span class=\"char\">$ </span>bower install jasmine\n</code></pre><p>创建测试文件</p>\n<pre><code>// test.html\n<span class=\"comment\">&lt;!-- 引入jasmine依赖文件 --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"stylesheet\"</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/css\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"jasmine/lib/jasmine-2.0.0/jasmine.css\"</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"jasmine/lib/jasmine-2.0.0/jasmine.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"jasmine/lib/jasmine-2.0.0/jasmine-html.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"jasmine/lib/jasmine-2.0.0/boot.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n\n<span class=\"comment\">&lt;!-- 编写需要测试的代码 --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span> <span class=\"params\">(name)</span> </span>{\n    <span class=\"keyword\">return</span> <span class=\"string\">'Hello '</span> + name;\n  }\n</span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n\n<span class=\"comment\">&lt;!-- 编写测试脚本 --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">script</span>&gt;</span><span class=\"javascript\">\n  describe(<span class=\"string\">'A suite of basic functions'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n    it(<span class=\"string\">'sayHello'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n      <span class=\"keyword\">var</span> name = <span class=\"string\">'Xiaolai'</span>;\n      <span class=\"keyword\">var</span> exp = <span class=\"string\">'Hello Xiaolai'</span>;\n      expect(exp).toBe(sayHello(name));\n    })\n  })\n</span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>        \n</code></pre><p>浏览器打开 test.html 即可看到测试效果</p>\n<p>更多的 jasmine 语法，查看<a href=\"http://jasmine.github.io/2.0/introduction.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n","_id":"p1iaowdf9zwohb3j","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"MEANJS 学习笔记","tags":[],"date":1405218500000,"content":"<ul>\n<li><p>server.js 为程序入口文件</p>\n</li>\n<li><p>config/config.js 为配置入口文件</p>\n</li>\n<li><p>config/env/all.js 配置将在所有环境(development、production、test)中生效</p>\n<p>  config.db<br>  config.port<br>  config.app.title<br>  config.app.description<br>  config.app.keywords<br>  // 项目css文件路径，glob 模式匹配<br>  config.assets.css<br>  config.assets.js<br>  // 项目的 Jasmine 测试文件路径<br>  config.assets.tests<br>  // 依赖的第三方 css 文件路径<br>  config.assets.lib.css<br>  config.assets.lib.js</p>\n</li>\n<li><p>指定环境启动应用</p>\n<p>  // 开发环境，将使用 config/env/development.js 配置<br>  $ NODE_ENV=development grunt<br>  // 生产环境，将使用 config/env/production.js 配置<br>  $ NODE_ENV=production grunt<br>  // 测试环境，将使用 config/env/test.js 配置<br>  $ NODE_ENV=test grunt</p>\n</li>\n<li><p>应用启动后会自动加载的文件</p>\n<p>  // 在这些目录下创建的 model、route、strategy 等，在需要的地方可直接引用，无须手动引入<br>  app/models<br>  app/routes<br>  config/strategies<br>  public/modules</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<p><a href=\"http://meanjs.org/docs.html\" target=\"_blank\" rel=\"external\">官方API</a></p>\n","source":"_posts/MEANJS-学习笔记.md","raw":"title: 'MEANJS 学习笔记'\ntags:\ndate: 2014-07-13 10:28:20\n---\n\n- server.js 为程序入口文件\n\n- config/config.js 为配置入口文件\n\n- config/env/all.js 配置将在所有环境(development、production、test)中生效\n\n\tconfig.db\n\tconfig.port\n\tconfig.app.title\n\tconfig.app.description\n\tconfig.app.keywords\n\t// 项目css文件路径，glob 模式匹配\n\tconfig.assets.css \n\tconfig.assets.js\n\t// 项目的 Jasmine 测试文件路径\n\tconfig.assets.tests \n\t// 依赖的第三方 css 文件路径\n\tconfig.assets.lib.css \n\tconfig.assets.lib.js\n\n- 指定环境启动应用\n\t\t\n\t// 开发环境，将使用 config/env/development.js 配置\n\t$ NODE_ENV=development grunt \t\n\t// 生产环境，将使用 config/env/production.js 配置\n\t$ NODE_ENV=production grunt\n\t// 测试环境，将使用 config/env/test.js 配置\n\t$ NODE_ENV=test grunt\n\t\t\n- 应用启动后会自动加载的文件\n\n\t// 在这些目录下创建的 model、route、strategy 等，在需要的地方可直接引用，无须手动引入\n\tapp/models\n\tapp/routes\n\tconfig/strategies\n\tpublic/modules\n\t\n<!-- more -->\n\n[官方API](http://meanjs.org/docs.html)","slug":"MEANJS-学习笔记","updated":1418908898000,"excerpt":"<ul>\n<li><p>server.js 为程序入口文件</p>\n</li>\n<li><p>config/config.js 为配置入口文件</p>\n</li>\n<li><p>config/env/all.js 配置将在所有环境(development、production、test)中生效</p>\n<p>  config.db<br>  config.port<br>  config.app.title<br>  config.app.description<br>  config.app.keywords<br>  // 项目css文件路径，glob 模式匹配<br>  config.assets.css<br>  config.assets.js<br>  // 项目的 Jasmine 测试文件路径<br>  config.assets.tests<br>  // 依赖的第三方 css 文件路径<br>  config.assets.lib.css<br>  config.assets.lib.js</p>\n</li>\n<li><p>指定环境启动应用</p>\n<p>  // 开发环境，将使用 config/env/development.js 配置<br>  $ NODE_ENV=development grunt<br>  // 生产环境，将使用 config/env/production.js 配置<br>  $ NODE_ENV=production grunt<br>  // 测试环境，将使用 config/env/test.js 配置<br>  $ NODE_ENV=test grunt</p>\n</li>\n<li><p>应用启动后会自动加载的文件</p>\n<p>  // 在这些目录下创建的 model、route、strategy 等，在需要的地方可直接引用，无须手动引入<br>  app/models<br>  app/routes<br>  config/strategies<br>  public/modules</p>\n</li>\n</ul>\n","_id":"4xm5e6jnicx3orto","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Mac OS 下MySQL配置与乱码解决","tags":["4g3dew5br4i0eqww","fv6qpbjl890a18tr"],"id":469,"categories":["xj8ghuavw6jblfpw"],"date":1380025790000,"content":"<p>用惯了windows下xampp,打开Apache打开mysql就可以有一个本地服务器做测试了，在mac上发现：</p>\n<p>1.xampp上的MySQL开启后，在终端输入『mysql』无反应，故在MySQL官网重装了个，终端就可以操作MySQL了；</p>\n<p>2.MySQL默认端口是3306，两个MySQL是无法同时打开的，于是修改xampp中mysql的端口为3307（只要不冲突）就可以了：<br><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-1.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-1.png\" alt=\"\" title=\"QQ20130924-1\"></a><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-1.png\" target=\"_blank\" rel=\"external\">\n</a></p>\n<p>3.初学Python，用Python连接数据库，却发现无法连接xampp中mysql的数据库，这就纳闷了，显示错误：</p>\n<p>OperationalError: (2002, “Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’ (2)”)</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-2.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-2.png\" alt=\"\" title=\"QQ20130924-2\"></a><a href=\"http://www.laispace.com/?p=469\" target=\"_blank\" rel=\"external\">\n</a><br>修改了端口还不行么？查了好久了资料都没搞懂，stackoverflow上有类似的问题，真是个神奇的地方啊，修改xampp的配置文件：<a href=\"http://www.laispace.com/?p=469\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-3.png\" alt=\"\" title=\"QQ20130924-3\"></a></p>\n<p>让它能找到正确的socket,重新连接数据库，成功！</p>\n<p>PS:除此之外，还可以在连接数据库时指定一个unix_socket使程序招到正确的sock:</p>\n<p>[python]<br>conn=MySQLdb.connect(host=&quot;localhost&quot;,<br>                     user=&quot;root&quot;,passwd=&quot;&quot;,<br>                     db=&quot;wegroup&quot;,<br>                     unix_socket=&quot;/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock&quot;)</p>\n<pre><code>                 <span class=\"comment\"># unix_socket </span>\n</code></pre><p>[/python]</p>\n<p>&nbsp;</p>\n<p>4.因mac默认编码不是utf-8，用python操纵mysql输出数据库的中文信息显示乱码<a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-2.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-2.png\" alt=\"\" title=\"QQ20130927-2\"></a></p>\n<p>解决办法:<br>在配置文件的［client］后添加default-character-set=utf8；<br>在［mysqld］后添加：<br>default-storage-engine=INNODB<br>character-set-server=utf8<br>collation-server=utf8_general_ci；<br>终端mysql直接查询是不出现问题了，Python文件头也声明了utf-8编码，还是没用，只好直接在MySQLdb.connect 参数中指定编码为utf8：</p>\n<p>[python]<br>conn=MySQLdb.connect(host=&quot;localhost&quot;,<br>                     user=&quot;root&quot;,passwd=&quot;&quot;,<br>                     db=&quot;wegroup&quot;,<br>                     charset = &quot;utf8&quot;,<br>                     unix_socket=&quot;/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock&quot;)</p>\n<pre><code>                 <span class=\"comment\"># unix_socket </span>\n</code></pre><p>[/python]</p>\n<p>如此一来，输出中文乱码的问题就解决啦：<a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-1.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-1.png\" alt=\"\" title=\"QQ20130927-1\"></a></p>\n","source":"_posts/Mac OS 下MySQL配置与乱码解决.md","raw":"title: 'Mac OS 下MySQL配置与乱码解决'\ntags:\n  - mysql\n  - python\nid: 469\ncategories:\n  - 后台编程\ndate: 2013-09-24 20:29:50\n---\n\n用惯了windows下xampp,打开Apache打开mysql就可以有一个本地服务器做测试了，在mac上发现：\n\n1.xampp上的MySQL开启后，在终端输入『mysql』无反应，故在MySQL官网重装了个，终端就可以操作MySQL了；\n\n2.MySQL默认端口是3306，两个MySQL是无法同时打开的，于是修改xampp中mysql的端口为3307（只要不冲突）就可以了：\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-1.png \"QQ20130924-1\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-1.png)[\n](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-1.png)\n\n3.初学Python，用Python连接数据库，却发现无法连接xampp中mysql的数据库，这就纳闷了，显示错误：\n\nOperationalError: (2002, \"Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)\")\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-2.png \"QQ20130924-2\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-2.png)[\n](http://www.laispace.com/?p=469)\n修改了端口还不行么？查了好久了资料都没搞懂，stackoverflow上有类似的问题，真是个神奇的地方啊，修改xampp的配置文件：[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130924-3.png \"QQ20130924-3\")](http://www.laispace.com/?p=469)\n\n让它能找到正确的socket,重新连接数据库，成功！\n\nPS:除此之外，还可以在连接数据库时指定一个unix_socket使程序招到正确的sock:\n\n[python]\nconn=MySQLdb.connect(host=&quot;localhost&quot;,\n                     user=&quot;root&quot;,passwd=&quot;&quot;,\n                     db=&quot;wegroup&quot;,\n                     unix_socket=&quot;/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock&quot;)\n                     # unix_socket \n[/python]\n\n&nbsp;\n\n4.因mac默认编码不是utf-8，用python操纵mysql输出数据库的中文信息显示乱码[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-2.png \"QQ20130927-2\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-2.png)\n\n解决办法:\n在配置文件的［client］后添加default-character-set=utf8；\n在［mysqld］后添加：\ndefault-storage-engine=INNODB\ncharacter-set-server=utf8\ncollation-server=utf8_general_ci；\n终端mysql直接查询是不出现问题了，Python文件头也声明了utf-8编码，还是没用，只好直接在MySQLdb.connect 参数中指定编码为utf8：\n\n[python]\nconn=MySQLdb.connect(host=&quot;localhost&quot;,\n                     user=&quot;root&quot;,passwd=&quot;&quot;,\n                     db=&quot;wegroup&quot;,\n                     charset = &quot;utf8&quot;,\n                     unix_socket=&quot;/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock&quot;)\n                     # unix_socket \n[/python]\n\n如此一来，输出中文乱码的问题就解决啦：[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-1.png \"QQ20130927-1\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/QQ20130927-1.png)","slug":"Mac OS 下MySQL配置与乱码解决","updated":1418908898000,"excerpt":"","_id":"6g3z8atefmni0qus","comments":true,"layout":"post","photos":[],"link":""},{"title":"Meta标签属性学习","id":215,"categories":["bzketmbod14nx67f"],"date":1354545826000,"tags":["e9ch81ifhln56ig5"],"content":"<p>META标签用来描述一个HTML网页文档的属性。</p>\n<p>一般有三个属性：http-equiv,name,scheme.</p>\n<p>1.http-equiv</p>\n<p>1.1 content-type：字符集的设定，决定读取文件的形式和编码,用法：</p>\n<p>&lt;meta http-equiv=”Content-Type” content=”text/html; charset=gb2312” /&gt;</p>\n<p>1.2 expires：期限，设定网页到期时间（网页到期后必须服务器重新上传），用法：</p>\n<p>用法：＜meta http-equiv=”expires” content=”Mon, 03 Dec 2012 18:18:18 GMT”＞</p>\n<p>1.3 refresh：定时重刷新到指定页面，用法：</p>\n<p>＜meta http-equiv=”Refresh” content=”2”；URL=<a href=\"http://www.laispace.com&quot;＞\" target=\"_blank\" rel=\"external\">http://www.laispace.com&quot;＞</a></p>\n<p>1.4 set-cookie：网页过期，那么存盘的cookie将被删除。，用法：</p>\n<p>＜meta http-equiv=”Set-Cookie” content=”cookievalue=xxx; expires=Monday, 03-Jan-2012 18:18:18 GMT； path=/“＞</p>\n<p>1.5 pragma:缓存模式，禁止浏览器使用本地缓存（无法脱机浏览），用法：</p>\n<p>＜meta http-equiv=”Pragma” content=”no-cache”＞</p>\n<p>1.6 window-target：显示窗口设定，用法（独立页面显示，防止别人在框架里调用自己的页面。）：</p>\n<p>＜meta http-equiv=”Window-target” content=”_top”＞</p>\n<p>1.7 page-enter/exit：网页进出动态效果，用法：</p>\n<p>＜meta http-equiv=”Page-Enter” content=”revealTrans(duration=５.０, transition=２０)”＞</p>\n<p>＜meta http-equiv=”Page-Exit” content=”revealTrans(duration=５.０, transition=２０)”＞</p>\n<p>&nbsp;</p>\n<p>2.name</p>\n<p>2.1 revisit-after：</p>\n<p>&lt;meta name=”revisit-after” content=”1 days” &gt;</p>\n<p>2.2 author：作者</p>\n<p>2.3 description：内容描述</p>\n<p>2.4 keywords：关键词，keywords的content用逗号隔开</p>\n<p>2.5 robots:机器人向导，声明需要索引的页面，content值可选all,none,index,noindex,follow,nofollow。默认是all。</p>\n<p>2.5 generator：网页采用的技术版本版本</p>\n<p>2.6 revised：修复</p>\n<p>2.7 others：其他，用法：</p>\n<p>&lt;meta NAME=”copyright” content=”Copyright 2012 -laispace.com” /&gt;</p>\n<p>&nbsp;</p>\n<p>3.scheme</p>\n<p>some_text：定义与 http-equiv 或 name 属性相关的元信息，用法：</p>\n<p>&lt;meta scheme=”ISBN” name=”identifier” content=”0-14-043205-1” /&gt;</p>\n<p>&nbsp;</p>\n<p>head中其他元素的用法：</p>\n<p>1.link:链接，用法：</p>\n<p>&lt;link href=”URL” rel=”relationship”&gt;如&lt;link href=”xiaolai.ico” rel=”shortcut icon”&gt;</p>\n<p>2.base：基链接，将网页内的相对路径改成绝对路径，用法：</p>\n<p>&lt;base href=”<a href=\"http://www.laispace.com\" target=\"_blank\" rel=\"external\">http://www.laispace.com</a>“ target=”_blank”&gt;</p>\n<p>&lt;base href=”<a href=\"http://www.laispace.com\" target=\"_blank\" rel=\"external\">http://www.laispace.com</a>“ target=”_top”&gt;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Meta的使用方法技巧（以下为摘抄<a href=\"http://blog.sina.com.cn/s/blog_6dd5ebcb01013oqw.html\" target=\"_blank\" rel=\"external\">转载</a>内容）：</p>\n<p>Meta标签是用来描述网页属性的一种语言，标准的Meta标签可以便于搜索引擎排序，提高搜索引擎网站权重排名。要想网站做的更符合搜索引擎标准就必须了解meta标签，下面由Seoer惜缘于大家讲讲meta标签含义与使用方法：</p>\n<p>1、META标签的keywords</p>\n<p>写法为：&lt;meta name=”Keywords” content=”信息参数” /&gt;</p>\n<p>meat标签的Keywords的的信息参数，代表说明网站的关键词是什么。</p>\n<p>2、META标签的Description</p>\n<p>&lt;meta name=”Description” content=”信息参数” /&gt;</p>\n<p>meta标签的Description的信息参数，代表说明网站的主要内容，概况是什么。</p>\n<p>3、META标签的http-equiv=Content-Type content=”text/html</p>\n<p>http-equiv=Content-Type代表的是HTTP的头部协议，提示浏览器网页的信息，</p>\n<p>&lt;meta http-equiv=”Content-Type” content=”text/html; charset=信息参数” /&gt;</p>\n<p>meta标签的charset的信息参数如GB2312时，代表说明网站是采用的编码是简体中文；</p>\n<p>meta标签的charset的信息参数如BIG5时，代表说明网站是采用的编码是繁体中文；</p>\n<p>meta标签的charset的信息参数如iso-2022-jp时，代表说明网站是采用的编码是日文；</p>\n<p>meta标签的charset的信息参数如ks_c_5601时，代表说明网站是采用的编码是韩文；</p>\n<p>meta标签的charset的信息参数如ISO-8859-1时，代表说明网站是采用的编码是英文；</p>\n<p>meta标签的charset的信息参数如UTF-8时，代表世界通用的语言编码；</p>\n<p>4、META标签的generator</p>\n<p>&lt;meta name=”generator” content=”信息参数” /&gt;</p>\n<p>meta标签的generator的信息参数，代表说明网站的采用的什么软件制作。</p>\n<p>5、META标签的author</p>\n<p>&lt;meta name=”author” content=”信息参数”&gt;</p>\n<p>meta标签的author的信息参数，代表说明网页版权作者信息。</p>\n<p>6、META标签的http-equiv=”Refresh”</p>\n<p>&lt;Meta http-equiv=”Refresh” Content=”时间; Url=网址参数”&gt;</p>\n<p>meta标签的Refresh代表多少时间网页自动刷新，加上Url中的网址参数就代表，多长时间自动链接其他网址。</p>\n<p>7、META标签的HTTP-EQUIV=”Pragma” CONTENT=”no-cache”</p>\n<p>&lt;META HTTP-EQUIV=”Pragma” CONTENT=”no-cache”&gt;代表禁止浏览器从本地计算机的缓存中访问页面内容,这样设定，访</p>\n<p>问者将无法脱机浏览。</p>\n<p>8、META标签的COPYRIGHT</p>\n<p>&lt;META NAME=”COPYRIGHT” CONTENT=”信息参数”&gt;</p>\n<p>meta标签的COPYRIGHT的信息参数，代表说明网站版权信息。</p>\n<p>9、META标签的http-equiv=”imagetoolbar”</p>\n<p>&lt;meta http-equiv=”imagetoolbar” content=”false” /&gt;</p>\n<p>指定是否显示图片工具栏，当为false代表不显示，当为true代表显示。</p>\n<p>10、META标签的Content-Script-Type</p>\n<p>&lt;Meta http-equiv=”Content-Script-Type” Content=”text/javascript”&gt;</p>\n<p>W3C网页规范，指明页面中脚本的类型。</p>\n<p>11、META标签的revisit-after</p>\n<p>&lt;META name=”revisit-after” CONTENT=”7 days” &gt;</p>\n<p>revisit-after代表网站重访,7 days代表7天，依此类推。</p>\n<p>12、META标签的Robots</p>\n<p>&lt;meta name=”Robots” contect=”信息参数”&gt;</p>\n<p>Robots代表告诉搜索引擎机器人抓取哪些页面</p>\n<p>其中的属性说明如下：</p>\n<p>信息参数为all：文件将被检索，且页面上的链接可以被查询；</p>\n<p>信息参数为none：文件将不被检索，且页面上的链接不可以被查询；</p>\n<p>信息参数为index：文件将被检索；</p>\n<p>信息参数为follow：页面上的链接可以被查询；</p>\n<p>信息参数为noindex：文件将不被检索，但页面上的链接可以被查询；</p>\n<p>信息参数为nofollow：文件将被检索，但页面上的链接不可以被查询；</p>\n<p>2、英文前缀meta-前缀 pref.</p>\n<p>1.表示”变化”,”变换”</p>\n<p>2.表示”继”,”在…之后”</p>\n<p>3.表示”超越”</p>\n<p>4.表示”在…之间”,”介于”</p>\n<p>例词：metaphysics</p>\n<p>n.</p>\n<p>1.形而上学；玄学</p>\n<p>2.深奥莫测的推理；空谈；空头理论</p>\n<p>来自希腊语，最初来源是作为亚里士多德所著《形而上学》一书的书名，意指“第一哲学”，也就是以“作为存在的存在（being as being）”为研究对象的形而上学，其意义为“在具体科学之后”</p>\n<p>3.模板meta语言</p>\n<p>模板meta语言由GDMO提出，采用类似于BNF的语法，因此与ASN.1相似，只要了解了它与ASN.1的不同之处就可以在ASN.1有关知识的基础上正确使用。因此，这里只将有关要点进行如下说明：</p>\n<p>1.分号（；）用于终止结构和中止模板</p>\n<p>2.空格，空行，注释和行尾只起分割符的作用。在需要标志一个元素结束，另一个元素开始时使用。</p>\n<p>3.注释由双连字符（—）引导，在行尾或遇到另外的双连字符终止。可以出现在任何分隔区中，但不能出现在结构名或模板名所包含的空格之间。</p>\n<p>4.方括号（[ ]）用于指出模板定义中的可选元素。</p>\n<p>5.右圆括号中的星号（*）指出模板定义中的可选元素。</p>\n<p>6.选择对象由竖线（|）分割。这个符号旨在支持件的定义中使用。</p>\n<p>7.将由用户确定的字符串扩在尖括号(&lt;&gt;)中。</p>\n<p>8.附件用一个引用标号，后接符号-&gt;&gt;,后接一个由文本字符串和符号构成的语法定义组成。</p>\n<p>9.分隔串出现在模板定义中自然语言文本或形式说明文本之中。他们由任意的字符串组成，字符串可以由以下任意一个分隔符引导和终止。分隔符是“$ % ^ &amp; * ` ‘ ~ ? @ \\”。如果分隔串由某个分隔符开始，则这个分隔串直到再次遇到相同的分隔符才结束。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n","source":"_posts/Meta标签属性学习.md","raw":"title: Meta标签属性学习\nid: 215\ncategories:\n  - HTML\ndate: 2012-12-03 22:43:46\ntags:\n  - meta\n---\n\nMETA标签用来描述一个HTML网页文档的属性。\n\n一般有三个属性：http-equiv,name,scheme.\n\n1.http-equiv\n\n1.1 content-type：字符集的设定，决定读取文件的形式和编码,用法：\n\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /&gt;\n\n1.2 expires：期限，设定网页到期时间（网页到期后必须服务器重新上传），用法：\n\n用法：＜meta http-equiv=\"expires\" content=\"Mon, 03 Dec 2012 18:18:18 GMT\"＞\n\n1.3 refresh：定时重刷新到指定页面，用法：\n\n＜meta http-equiv=\"Refresh\" content=\"2\"；URL=http://www.laispace.com\"＞\n\n1.4 set-cookie：网页过期，那么存盘的cookie将被删除。，用法：\n\n＜meta http-equiv=\"Set-Cookie\" content=\"cookievalue=xxx; expires=Monday, 03-Jan-2012 18:18:18 GMT； path=/\"＞\n\n1.5 pragma:缓存模式，禁止浏览器使用本地缓存（无法脱机浏览），用法：\n\n＜meta http-equiv=\"Pragma\" content=\"no-cache\"＞\n\n1.6 window-target：显示窗口设定，用法（独立页面显示，防止别人在框架里调用自己的页面。）：\n\n＜meta http-equiv=\"Window-target\" content=\"_top\"＞\n\n1.7 page-enter/exit：网页进出动态效果，用法：\n\n＜meta http-equiv=\"Page-Enter\" content=\"revealTrans(duration=５.０, transition=２０)\"＞\n\n＜meta http-equiv=\"Page-Exit\" content=\"revealTrans(duration=５.０, transition=２０)\"＞\n\n&nbsp;\n\n2.name\n\n2.1 revisit-after：\n\n&lt;meta name=\"revisit-after\" content=\"1 days\" &gt;\n\n2.2 author：作者\n\n2.3 description：内容描述\n\n2.4 keywords：关键词，keywords的content用逗号隔开\n\n2.5 robots:机器人向导，声明需要索引的页面，content值可选all,none,index,noindex,follow,nofollow。默认是all。\n\n2.5 generator：网页采用的技术版本版本\n\n2.6 revised：修复\n\n2.7 others：其他，用法：\n\n&lt;meta NAME=\"copyright\" content=\"Copyright 2012 -laispace.com\" /&gt;\n\n&nbsp;\n\n3.scheme\n\nsome_text：定义与 http-equiv 或 name 属性相关的元信息，用法：\n\n&lt;meta scheme=\"ISBN\" name=\"identifier\" content=\"0-14-043205-1\" /&gt;\n\n&nbsp;\n\nhead中其他元素的用法：\n\n1.link:链接，用法：\n\n&lt;link href=\"URL\" rel=\"relationship\"&gt;如&lt;link href=\"xiaolai.ico\" rel=\"shortcut icon\"&gt;\n\n2.base：基链接，将网页内的相对路径改成绝对路径，用法：\n\n&lt;base href=\"http://www.laispace.com\" target=\"_blank\"&gt;\n\n&lt;base href=\"http://www.laispace.com\" target=\"_top\"&gt;\n\n&nbsp;\n\n&nbsp;\n\nMeta的使用方法技巧（以下为摘抄[转载](http://blog.sina.com.cn/s/blog_6dd5ebcb01013oqw.html)内容）：\n\nMeta标签是用来描述网页属性的一种语言，标准的Meta标签可以便于搜索引擎排序，提高搜索引擎网站权重排名。要想网站做的更符合搜索引擎标准就必须了解meta标签，下面由Seoer惜缘于大家讲讲meta标签含义与使用方法：\n\n1、META标签的keywords\n\n写法为：&lt;meta name=\"Keywords\" content=\"信息参数\" /&gt;\n\nmeat标签的Keywords的的信息参数，代表说明网站的关键词是什么。\n\n2、META标签的Description\n\n&lt;meta name=\"Description\" content=\"信息参数\" /&gt;\n\nmeta标签的Description的信息参数，代表说明网站的主要内容，概况是什么。\n\n3、META标签的http-equiv=Content-Type content=\"text/html\n\nhttp-equiv=Content-Type代表的是HTTP的头部协议，提示浏览器网页的信息，\n\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=信息参数\" /&gt;\n\nmeta标签的charset的信息参数如GB2312时，代表说明网站是采用的编码是简体中文；\n\nmeta标签的charset的信息参数如BIG5时，代表说明网站是采用的编码是繁体中文；\n\nmeta标签的charset的信息参数如iso-2022-jp时，代表说明网站是采用的编码是日文；\n\nmeta标签的charset的信息参数如ks_c_5601时，代表说明网站是采用的编码是韩文；\n\nmeta标签的charset的信息参数如ISO-8859-1时，代表说明网站是采用的编码是英文；\n\nmeta标签的charset的信息参数如UTF-8时，代表世界通用的语言编码；\n\n4、META标签的generator\n\n&lt;meta name=\"generator\" content=\"信息参数\" /&gt;\n\nmeta标签的generator的信息参数，代表说明网站的采用的什么软件制作。\n\n5、META标签的author\n\n&lt;meta name=\"author\" content=\"信息参数\"&gt;\n\nmeta标签的author的信息参数，代表说明网页版权作者信息。\n\n6、META标签的http-equiv=\"Refresh\"\n\n&lt;Meta http-equiv=\"Refresh\" Content=\"时间; Url=网址参数\"&gt;\n\nmeta标签的Refresh代表多少时间网页自动刷新，加上Url中的网址参数就代表，多长时间自动链接其他网址。\n\n7、META标签的HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\"\n\n&lt;META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\"&gt;代表禁止浏览器从本地计算机的缓存中访问页面内容,这样设定，访\n\n问者将无法脱机浏览。\n\n8、META标签的COPYRIGHT\n\n&lt;META NAME=\"COPYRIGHT\" CONTENT=\"信息参数\"&gt;\n\nmeta标签的COPYRIGHT的信息参数，代表说明网站版权信息。\n\n9、META标签的http-equiv=\"imagetoolbar\"\n\n&lt;meta http-equiv=\"imagetoolbar\" content=\"false\" /&gt;\n\n指定是否显示图片工具栏，当为false代表不显示，当为true代表显示。\n\n10、META标签的Content-Script-Type\n\n&lt;Meta http-equiv=\"Content-Script-Type\" Content=\"text/javascript\"&gt;\n\nW3C网页规范，指明页面中脚本的类型。\n\n11、META标签的revisit-after\n\n&lt;META name=\"revisit-after\" CONTENT=\"7 days\" &gt;\n\nrevisit-after代表网站重访,7 days代表7天，依此类推。\n\n12、META标签的Robots\n\n&lt;meta name=\"Robots\" contect=\"信息参数\"&gt;\n\nRobots代表告诉搜索引擎机器人抓取哪些页面\n\n其中的属性说明如下：\n\n信息参数为all：文件将被检索，且页面上的链接可以被查询；\n\n信息参数为none：文件将不被检索，且页面上的链接不可以被查询；\n\n信息参数为index：文件将被检索；\n\n信息参数为follow：页面上的链接可以被查询；\n\n信息参数为noindex：文件将不被检索，但页面上的链接可以被查询；\n\n信息参数为nofollow：文件将被检索，但页面上的链接不可以被查询；\n\n2、英文前缀meta-前缀 pref.\n\n1.表示\"变化\",\"变换\"\n\n2.表示\"继\",\"在...之后\"\n\n3.表示\"超越\"\n\n4.表示\"在...之间\",\"介于\"\n\n例词：metaphysics\n\nn.\n\n1.形而上学；玄学\n\n2.深奥莫测的推理；空谈；空头理论\n\n来自希腊语，最初来源是作为亚里士多德所著《形而上学》一书的书名，意指“第一哲学”，也就是以“作为存在的存在（being as being）”为研究对象的形而上学，其意义为“在具体科学之后”\n\n3.模板meta语言\n\n模板meta语言由GDMO提出，采用类似于BNF的语法，因此与ASN.1相似，只要了解了它与ASN.1的不同之处就可以在ASN.1有关知识的基础上正确使用。因此，这里只将有关要点进行如下说明：\n\n1.分号（；）用于终止结构和中止模板\n\n2.空格，空行，注释和行尾只起分割符的作用。在需要标志一个元素结束，另一个元素开始时使用。\n\n3.注释由双连字符（--）引导，在行尾或遇到另外的双连字符终止。可以出现在任何分隔区中，但不能出现在结构名或模板名所包含的空格之间。\n\n4.方括号（[ ]）用于指出模板定义中的可选元素。\n\n5.右圆括号中的星号（*）指出模板定义中的可选元素。\n\n6.选择对象由竖线（|）分割。这个符号旨在支持件的定义中使用。\n\n7.将由用户确定的字符串扩在尖括号(&lt;&gt;)中。\n\n8.附件用一个引用标号，后接符号-&gt;&gt;,后接一个由文本字符串和符号构成的语法定义组成。\n\n9.分隔串出现在模板定义中自然语言文本或形式说明文本之中。他们由任意的字符串组成，字符串可以由以下任意一个分隔符引导和终止。分隔符是“$ % ^ &amp; * ` ' ~ ? @ \\”。如果分隔串由某个分隔符开始，则这个分隔串直到再次遇到相同的分隔符才结束。\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;","slug":"Meta标签属性学习","updated":1418908898000,"excerpt":"","_id":"bh9p8yeyqfw7aetm","comments":true,"layout":"post","photos":[],"link":""},{"title":"MongoDB入门-CRUD简单操作","tags":["6ce4vvmry47srbd4"],"categories":["f1q8dl6bbauvoh8x"],"date":1394346130000,"content":"<p>按着 <a href=\"http://www.mongodb.org/\" target=\"_blank\" rel=\"external\">mongodb官网</a> 教程安装好后，练习一下CRUD（增加、读取、更新、删除）操作。</p>\n<p>// 我把数据库保存在了 ~/nosql/mongodb下</p>\n<h1 id=\"第一步-启动mongodb：\">第一步-启动mongodb：</h1>\n<p>$ cd nosql/mongodb/bin</p>\n<p>$ sudo ./mongod</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.47.04-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.47.04-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 1.47.04 PM\"></a></p>\n<p>这样，mongodb就启动了，接着是创建数据库。进行简单的CRUD。</p>\n<h1 id=\"第二步-启动_mongo_shell\">第二步-启动 mongo shell</h1>\n<p>$ ./mongo</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.51.09-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.51.09-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 1.51.09 PM\"></a></p>\n<h1 id=\"第三步-创建数据库laispace\">第三步-创建数据库laispace</h1>\n<p>// $ help</p>\n<p>// 显示已有的数据库</p>\n<p>$ show dbs</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.55.25-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.55.25-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 1.55.25 PM\"></a></p>\n<p>// 切换数据库，这里用了新的数据库laispace，则自动创建</p>\n<p>$ use laispace</p>\n<p>// 注意这时候没有插入数据，但实际上已经创建了</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.57.12-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.57.12-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 1.57.12 PM\"></a></p>\n<h1 id=\"第四步-向数据库中添加数据\">第四步-向数据库中添加数据</h1>\n<p>// db即表示laispace数据库，先建立users文档并插入一个新用户</p>\n<p>$ var newUser = { “name”: “赖小赖”, “email”: “example@gmail.com”};</p>\n<p>$ db.users.insert(newUser);</p>\n<p>// 继续插入</p>\n<p>$ var anotherNewUser = { “name”: “小清”, “email”: “123456@gmail.com”};</p>\n<p>$ db.users.insert(anotherNewUser);</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.03.43-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.03.43-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.03.43 PM\"></a></p>\n<p><div></div></p>\n<p><div># 第五步-查找数据</div></p>\n<p><div>// 查看laispace是否创建</div></p>\n<p><div>$ show dbs</div></p>\n<p><div>// 切换到laispace</div></p>\n<p><div>$ use laispace</div></p>\n<p><div>// 查看laispace下有哪些文档</div></p>\n<p><div>$ show collections</div></p>\n<p><div>// 查看laispace.users下有哪些数据</div></p>\n<p><div>$ db.users.find(); // 或 $ db.getCollection(‘users’).find();</div></p>\n<p><div><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.07.18-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.07.18-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.07.18 PM\"></a></div></p>\n<p><div>// 查看其中一个</div></p>\n<p><div>$ db.users.findOne({“name”: “小清”});</div><br><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.11.10-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.11.10-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.11.10 PM\"></a></p>\n<h1 id=\"第六步-更新数据\">第六步-更新数据</h1>\n<p>var xiaoqing = {</p>\n<p>“name”: “小清”,<br>“email”: “abcd@laispace.com”,<br>“password”: “myLatestPassword”<br>};</p>\n<p>$ db.users.update({“name”: “小清”}, xiaoqing);</p>\n<p>$ db.users.findOne({“name”: “小清”});</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.15.05-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.15.05-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.15.05 PM\"></a></p>\n<h1 id=\"第七步-删除数据\">第七步-删除数据</h1>\n<p>// 看看已有的数据</p>\n<p>$ db.users.find();</p>\n<p>$ db.users.find({“name”: “小清”});</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.16.37-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.16.37-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.16.37 PM\"></a></p>\n<p>// 删除 小清</p>\n<p>$ db.users.remove({“name”: “小清”});</p>\n<p>$ db.users.findOne({“name”: “小清”});</p>\n<p>$ db.users.find();</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.18.37-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.18.37-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.18.37 PM\"></a></p>\n<p>// 删除全部</p>\n<p>$ db.users.remove();<br>$ db.users.find()</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.20.42-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.20.42-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.20.42 PM\"></a></p>\n<h1 id=\"第八步-继续学习\">第八步-继续学习</h1>\n<p>$ console.log(“待补充！”);<br><a id=\"more\"></a></p>\n<h1 id=\"其他笔记\">其他笔记</h1>\n<ul>\n<li>mongodb 默认占用了系统的27017端口，而打开 <a href=\"http://localhost:28017\" target=\"_blank\" rel=\"external\">http://localhost:28017</a> 则可以进入管理界面：</li>\n</ul>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-3.18.30-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-3.18.30-PM-1024x821.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 3.18.30 PM\"></a></p>\n<h1 id=\"修改器\">修改器</h1>\n<p>[javascript]</p>\n<p>// 原子修改器<br>db.users.update({&quot;name&quot;: &quot;小清&quot;}, {<br>&quot;$inc&quot;: {<br>&quot;age&quot;: 1 // 年龄加一<br>}<br>})<br>&quot;$inc&quot; // 增加<br>&quot;$set&quot; // 修改，无则创建<br>&quot;$unset&quot; // 删除</p>\n<p>// 数组修改器<br>// &quot;$push&quot; // 添加<br>// &quot;$pop&quot;: {key: 1} // 数组末删除一个元素<br>// &quot;$pop&quot;: {key: -1} // 数组头删除一个元素<br>// &quot;$pull&quot;: {&quot;foo&quot;: &quot;bar&quot;} // 删除数组foo中的bar</p>\n<p>// 函数 update(query , obj , upsert , multi) 参数说明：<br>$ db.users.update({&quot;name&quot;: &quot;小清&quot;}, xiaoqing);<br>// 若指定第三个参数upsert为true,即：<br>$ db.users.update({&quot;name&quot;: &quot;小清&quot;}, xiaoqing, true);<br>// 则表示：<br>// - 若找到匹配文档，正常更新；<br>// - 若没有文档符合更新条件，则以这个条件和更新文档为基础建立一个新的文档。<br>// 若指定第四个参数multi为true, 即：<br>$ db.users.update({&quot;name&quot;: &quot;小清&quot;}, xiaoqing, true, true);<br>// 则表示：<br>// 匹配到的所有文档都得到更新（为false则只匹配第一个）。</p>\n<p>[/javascript]</p>\n<p>&nbsp;</p>\n<h1 id=\"查询操作\">查询操作</h1>\n<p>[javascript]</p>\n<p>// 查找全部，缺省参数{} 即 db.users.find({});<br>$ db.users.find();<br>// 指定范围查找<br>$ db.users.find({&quot;name&quot;: &quot;小清&quot;, &quot;email&quot;: &quot;abcd@laispace.com&quot;});<br>// 查找全部，但只返回指定的键，1表示true， 注意 _id 总会被返回<br>$ db.users.find({}, {&quot;name&quot;: 1, &quot;email&quot;: 1});<br>// 查找全部，但不要返回指定的键，0表示false<br>$ db.users.find({}, {&quot;password&quot;: 0});<br>// 大于小于<br>$ db.users.find({&quot;age&quot;: {&quot;$gte&quot;: 18, &quot;$lte&quot;: 30}}) // 大于等于18小于等于30岁<br>db.users.find({&quot;registered&quot;: {&quot;$lt&quot;: new Date(&quot;01/01/2014&quot;)}}); // 在2014/01/01前注册<br>// 不等于<br>$ db.users.find({&quot;name&quot;: {&quot;$ne&quot;: &quot;小清&quot;}}); // 用户名不是『小清』<br>// 包含于<br>db.users.find({&quot;name&quot;: {&quot;$in&quot;: [&quot;小清&quot;, &quot;小赖&quot;]}}); // 用户名是『小清』或『小赖』<br>// 不包含于<br>db.users.find({&quot;name&quot;: {&quot;$nin&quot;: [&quot;小清&quot;, &quot;小赖&quot;]}}); // 用户名不是『小清』和『小赖』<br>// 或<br>db.users.find({&quot;$or&quot;: [{&quot;name&quot;: &quot;小清&quot;}, {&quot;email&quot;: &quot;123@example.com&quot;}]}); // 用户名是『小清』或 邮箱是 &quot;123@example.com&quot;</p>\n<p>[/javascript]</p>\n","source":"_posts/MongoDB入门-CRUD简单操作 .md","raw":"title: MongoDB入门-CRUD简单操作\ntags:\n  - mongodb\ncategories:\n  - Node\ndate: 2014-03-09 14:22:10\n\n---\n\n按着 [mongodb官网](http://www.mongodb.org/) 教程安装好后，练习一下CRUD（增加、读取、更新、删除）操作。\n\n// 我把数据库保存在了 ~/nosql/mongodb下\n\n# 第一步-启动mongodb：\n\n$ cd nosql/mongodb/bin\n\n$ sudo ./mongod\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.47.04-PM.png \"Screen Shot 2014-03-09 at 1.47.04 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.47.04-PM.png)\n\n这样，mongodb就启动了，接着是创建数据库。进行简单的CRUD。\n\n# 第二步-启动 mongo shell\n\n$ ./mongo\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.51.09-PM.png \"Screen Shot 2014-03-09 at 1.51.09 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.51.09-PM.png)\n\n# 第三步-创建数据库laispace\n\n// $ help\n\n// 显示已有的数据库\n\n$ show dbs\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.55.25-PM.png \"Screen Shot 2014-03-09 at 1.55.25 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.55.25-PM.png)\n\n// 切换数据库，这里用了新的数据库laispace，则自动创建\n\n$ use laispace\n\n// 注意这时候没有插入数据，但实际上已经创建了\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.57.12-PM.png \"Screen Shot 2014-03-09 at 1.57.12 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.57.12-PM.png)\n\n# 第四步-向数据库中添加数据\n\n// db即表示laispace数据库，先建立users文档并插入一个新用户\n\n$ var newUser = { \"name\": \"赖小赖\", \"email\": \"example@gmail.com\"};\n\n$ db.users.insert(newUser);\n\n// 继续插入\n\n$ var anotherNewUser = { \"name\": \"小清\", \"email\": \"123456@gmail.com\"};\n\n$ db.users.insert(anotherNewUser);\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.03.43-PM.png \"Screen Shot 2014-03-09 at 2.03.43 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.03.43-PM.png)\n<div></div>\n<div># 第五步-查找数据</div>\n<div>// 查看laispace是否创建</div>\n<div>$ show dbs</div>\n<div>// 切换到laispace</div>\n<div>$ use laispace</div>\n<div>// 查看laispace下有哪些文档</div>\n<div>$ show collections</div>\n<div>// 查看laispace.users下有哪些数据</div>\n<div>$ db.users.find(); // 或 $ db.getCollection('users').find();</div>\n<div>[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.07.18-PM.png \"Screen Shot 2014-03-09 at 2.07.18 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.07.18-PM.png)</div>\n<div>// 查看其中一个</div>\n<div>$ db.users.findOne({\"name\": \"小清\"});</div>\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.11.10-PM.png \"Screen Shot 2014-03-09 at 2.11.10 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.11.10-PM.png)\n\n# 第六步-更新数据\n\nvar xiaoqing = {\n\n\"name\": \"小清\",\n\"email\": \"abcd@laispace.com\",\n\"password\": \"myLatestPassword\"\n};\n\n$ db.users.update({\"name\": \"小清\"}, xiaoqing);\n\n$ db.users.findOne({\"name\": \"小清\"});\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.15.05-PM.png \"Screen Shot 2014-03-09 at 2.15.05 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.15.05-PM.png)\n\n# 第七步-删除数据\n\n// 看看已有的数据\n\n$ db.users.find();\n\n$ db.users.find({\"name\": \"小清\"});\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.16.37-PM.png \"Screen Shot 2014-03-09 at 2.16.37 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.16.37-PM.png)\n\n// 删除 小清\n\n$ db.users.remove({\"name\": \"小清\"});\n\n$ db.users.findOne({\"name\": \"小清\"});\n\n$ db.users.find();\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.18.37-PM.png \"Screen Shot 2014-03-09 at 2.18.37 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.18.37-PM.png)\n\n// 删除全部\n\n$ db.users.remove();\n$ db.users.find()\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.20.42-PM.png \"Screen Shot 2014-03-09 at 2.20.42 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.20.42-PM.png)\n\n# 第八步-继续学习\n\n$ console.log(\"待补充！\");\n<!--more-->\n\n# 其他笔记\n\n- mongodb 默认占用了系统的27017端口，而打开 http://localhost:28017 则可以进入管理界面：\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-3.18.30-PM-1024x821.png \"Screen Shot 2014-03-09 at 3.18.30 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-3.18.30-PM.png)\n\n# 修改器\n\n[javascript]\n\n// 原子修改器\ndb.users.update({&quot;name&quot;: &quot;小清&quot;}, {\n&quot;$inc&quot;: {\n&quot;age&quot;: 1 // 年龄加一\n}\n})\n&quot;$inc&quot; // 增加\n&quot;$set&quot; // 修改，无则创建\n&quot;$unset&quot; // 删除\n\n// 数组修改器\n// &quot;$push&quot; // 添加\n// &quot;$pop&quot;: {key: 1} // 数组末删除一个元素\n// &quot;$pop&quot;: {key: -1} // 数组头删除一个元素\n// &quot;$pull&quot;: {&quot;foo&quot;: &quot;bar&quot;} // 删除数组foo中的bar\n\n// 函数 update(query , obj , upsert , multi) 参数说明：\n$ db.users.update({&quot;name&quot;: &quot;小清&quot;}, xiaoqing);\n// 若指定第三个参数upsert为true,即：\n$ db.users.update({&quot;name&quot;: &quot;小清&quot;}, xiaoqing, true);\n// 则表示：\n// - 若找到匹配文档，正常更新；\n// - 若没有文档符合更新条件，则以这个条件和更新文档为基础建立一个新的文档。\n// 若指定第四个参数multi为true, 即：\n$ db.users.update({&quot;name&quot;: &quot;小清&quot;}, xiaoqing, true, true);\n// 则表示：\n// 匹配到的所有文档都得到更新（为false则只匹配第一个）。\n\n[/javascript]\n\n&nbsp;\n\n# 查询操作\n\n[javascript]\n\n// 查找全部，缺省参数{} 即 db.users.find({});\n$ db.users.find();\n// 指定范围查找\n$ db.users.find({&quot;name&quot;: &quot;小清&quot;, &quot;email&quot;: &quot;abcd@laispace.com&quot;});\n// 查找全部，但只返回指定的键，1表示true， 注意 _id 总会被返回\n$ db.users.find({}, {&quot;name&quot;: 1, &quot;email&quot;: 1});\n// 查找全部，但不要返回指定的键，0表示false\n$ db.users.find({}, {&quot;password&quot;: 0});\n// 大于小于\n$ db.users.find({&quot;age&quot;: {&quot;$gte&quot;: 18, &quot;$lte&quot;: 30}}) // 大于等于18小于等于30岁\ndb.users.find({&quot;registered&quot;: {&quot;$lt&quot;: new Date(&quot;01/01/2014&quot;)}}); // 在2014/01/01前注册\n// 不等于\n$ db.users.find({&quot;name&quot;: {&quot;$ne&quot;: &quot;小清&quot;}}); // 用户名不是『小清』\n// 包含于\ndb.users.find({&quot;name&quot;: {&quot;$in&quot;: [&quot;小清&quot;, &quot;小赖&quot;]}}); // 用户名是『小清』或『小赖』\n// 不包含于\ndb.users.find({&quot;name&quot;: {&quot;$nin&quot;: [&quot;小清&quot;, &quot;小赖&quot;]}}); // 用户名不是『小清』和『小赖』\n// 或\ndb.users.find({&quot;$or&quot;: [{&quot;name&quot;: &quot;小清&quot;}, {&quot;email&quot;: &quot;123@example.com&quot;}]}); // 用户名是『小清』或 邮箱是 &quot;123@example.com&quot;\n\n[/javascript]","slug":"MongoDB入门-CRUD简单操作 ","updated":1418908898000,"excerpt":"<p>按着 <a href=\"http://www.mongodb.org/\" target=\"_blank\" rel=\"external\">mongodb官网</a> 教程安装好后，练习一下CRUD（增加、读取、更新、删除）操作。</p>\n<p>// 我把数据库保存在了 ~/nosql/mongodb下</p>\n<h1 id=\"第一步-启动mongodb：\">第一步-启动mongodb：</h1>\n<p>$ cd nosql/mongodb/bin</p>\n<p>$ sudo ./mongod</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.47.04-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.47.04-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 1.47.04 PM\"></a></p>\n<p>这样，mongodb就启动了，接着是创建数据库。进行简单的CRUD。</p>\n<h1 id=\"第二步-启动_mongo_shell\">第二步-启动 mongo shell</h1>\n<p>$ ./mongo</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.51.09-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.51.09-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 1.51.09 PM\"></a></p>\n<h1 id=\"第三步-创建数据库laispace\">第三步-创建数据库laispace</h1>\n<p>// $ help</p>\n<p>// 显示已有的数据库</p>\n<p>$ show dbs</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.55.25-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.55.25-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 1.55.25 PM\"></a></p>\n<p>// 切换数据库，这里用了新的数据库laispace，则自动创建</p>\n<p>$ use laispace</p>\n<p>// 注意这时候没有插入数据，但实际上已经创建了</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.57.12-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-1.57.12-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 1.57.12 PM\"></a></p>\n<h1 id=\"第四步-向数据库中添加数据\">第四步-向数据库中添加数据</h1>\n<p>// db即表示laispace数据库，先建立users文档并插入一个新用户</p>\n<p>$ var newUser = { “name”: “赖小赖”, “email”: “example@gmail.com”};</p>\n<p>$ db.users.insert(newUser);</p>\n<p>// 继续插入</p>\n<p>$ var anotherNewUser = { “name”: “小清”, “email”: “123456@gmail.com”};</p>\n<p>$ db.users.insert(anotherNewUser);</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.03.43-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.03.43-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.03.43 PM\"></a></p>\n<p><div></div></p>\n<p><div># 第五步-查找数据</div></p>\n<p><div>// 查看laispace是否创建</div></p>\n<p><div>$ show dbs</div></p>\n<p><div>// 切换到laispace</div></p>\n<p><div>$ use laispace</div></p>\n<p><div>// 查看laispace下有哪些文档</div></p>\n<p><div>$ show collections</div></p>\n<p><div>// 查看laispace.users下有哪些数据</div></p>\n<p><div>$ db.users.find(); // 或 $ db.getCollection(‘users’).find();</div></p>\n<p><div><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.07.18-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.07.18-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.07.18 PM\"></a></div></p>\n<p><div>// 查看其中一个</div></p>\n<p><div>$ db.users.findOne({“name”: “小清”});</div><br><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.11.10-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.11.10-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.11.10 PM\"></a></p>\n<h1 id=\"第六步-更新数据\">第六步-更新数据</h1>\n<p>var xiaoqing = {</p>\n<p>“name”: “小清”,<br>“email”: “abcd@laispace.com”,<br>“password”: “myLatestPassword”<br>};</p>\n<p>$ db.users.update({“name”: “小清”}, xiaoqing);</p>\n<p>$ db.users.findOne({“name”: “小清”});</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.15.05-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.15.05-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.15.05 PM\"></a></p>\n<h1 id=\"第七步-删除数据\">第七步-删除数据</h1>\n<p>// 看看已有的数据</p>\n<p>$ db.users.find();</p>\n<p>$ db.users.find({“name”: “小清”});</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.16.37-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.16.37-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.16.37 PM\"></a></p>\n<p>// 删除 小清</p>\n<p>$ db.users.remove({“name”: “小清”});</p>\n<p>$ db.users.findOne({“name”: “小清”});</p>\n<p>$ db.users.find();</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.18.37-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.18.37-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.18.37 PM\"></a></p>\n<p>// 删除全部</p>\n<p>$ db.users.remove();<br>$ db.users.find()</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.20.42-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-09-at-2.20.42-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-09 at 2.20.42 PM\"></a></p>\n<h1 id=\"第八步-继续学习\">第八步-继续学习</h1>\n<p>$ console.log(“待补充！”);<br>","_id":"nt98bq48a1miz4dg","comments":true,"layout":"post","photos":[],"link":""},{"title":"NODE-写一个socket.io聊天室","tags":["3iowu4fj304fdl5d"],"categories":["f1q8dl6bbauvoh8x"],"date":1385983011000,"content":"<p>前几天接触了WebSocket，感觉到了socket通信的强大，见《<a href=\"http://www.laispace.com/?p=532\" target=\"_blank\" rel=\"external\">HTML5-WebSocket API 学习</a>》。</p>\n<p>小赖决定自己动手写一个基于nodejs+express+socket.io的聊天室应用，用来做node入门的小项目吧。</p>\n<p>项目地址戳<a href=\"https://github.com/laispace/laiChat\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<p>今天实现的部分是：</p>\n<ul>\n<li><p>客户端与服务器通信</p>\n</li>\n<li><p>多个客户端同时通信</p>\n</li>\n<li><p>保存聊天记录和在线用户</p>\n</li>\n</ul>\n<p>安装方法：</p>\n<ol>\n<li>下载到本地，安装需要的模块：$ npm install</li>\n<li>打开服务器：$ node app.js</li>\n<li>打开多个浏览器页面，分别输入昵称</li>\n<li>可以开始聊天啦！<br>这算是我试水学习node的第一个项目，代码托管到github上，慢慢捣鼓出一些东西来！</li>\n</ol>\n","source":"_posts/NODE-写一个socket.io聊天室.md","raw":"title: NODE-写一个socket.io聊天室\ntags:\n  - socket\ncategories:\n  - Node\ndate: 2013-12-02 19:16:51\n---\n\n前几天接触了WebSocket，感觉到了socket通信的强大，见《[HTML5-WebSocket API 学习](http://www.laispace.com/?p=532)》。\n\n小赖决定自己动手写一个基于nodejs+express+socket.io的聊天室应用，用来做node入门的小项目吧。\n\n项目地址戳[这里](https://github.com/laispace/laiChat)。\n\n今天实现的部分是：\n\n- 客户端与服务器通信\n\n- 多个客户端同时通信\n\n- 保存聊天记录和在线用户\n\n安装方法：\n\n1.  下载到本地，安装需要的模块：$ npm install\n2.  打开服务器：$ node app.js\n3.  打开多个浏览器页面，分别输入昵称\n4.  可以开始聊天啦！\n这算是我试水学习node的第一个项目，代码托管到github上，慢慢捣鼓出一些东西来！","slug":"NODE-写一个socket.io聊天室","updated":1418908898000,"excerpt":"","_id":"p7w7fni30tg1iv5k","comments":true,"layout":"post","photos":[],"link":""},{"title":"NODE-调试方法","tags":["yyqv81fhaequnn8n"],"id":539,"categories":["f1q8dl6bbauvoh8x"],"date":1385792954000,"content":"<p>NODE核心自带的STDIO模块，就是类似浏览器端的console.*()系列方法，可像浏览器端调试代码一样，简单对代码进行调试：</p>\n<h1 id=\"输出普通信息：\">输出普通信息：</h1>\n<p>console.log() 在控制台输出信息，可用来记录一个函数是否执行、函数执行时某些变量的值</p>\n<h1 id=\"输出错误信息：\">输出错误信息：</h1>\n<p>console.error() 输出错误信息，常配合try catch语句使用</p>\n<h1 id=\"判断代码块的性能：\">判断代码块的性能：</h1>\n<p>console.time(‘mytime’)和console.timeEnd(‘mytime’)会输出代码块执行的时间</p>\n<h1 id=\"设置断点：\">设置断点：</h1>\n<p>debugger; 遇到这句断点时，代码都会中止执行，按play可继续代码执行</p>\n<h1 id=\"安装node-inspector调试器\">安装node-inspector调试器</h1>\n<p>$ npm install -g node-inspector<br>使用node-inspector 对nodejs代码进行调试,需要环境：webkit内核浏览器</p>\n<p>&nbsp;</p>\n<p>[javascript]<br> // file t6.js<br> var foo = function(){<br>     var a = 3, b = 5;<br>     var bar = function(){<br>         var b = 7, c = 11;<br>         a += b + c;<br>     }<br>     bar();<br> }<br> foo();</p>\n<p>[/javascript]</p>\n<a id=\"more\"></a>\n\n\n<p>写好以上代码后，开始调试<br>$ node —debug-brk t6.js</p>\n<p>控制台显示对5858端口进行了监听：</p>\n<p><img src=\"http://laispace.u.qiniudn.com/NODE-%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%951.png\" alt=\"\"><br>然后启动node inspector<br>$ node-inspector</p>\n<p>启动后会提示访问<a href=\"http://127.0.0.1:8080/debug?port=5858进行调试\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8080/debug?port=5858进行调试</a><br>开后通过单击行号来设置/移除断点，可依次按play按钮并观察Scope Variables下的变量值的变化来理解代码的执行过程</p>\n<p>总结：使用inspector 可用来按部查询代码引用的文件和模块，让代码具备交互性</p>\n","source":"_posts/NODE-调试方法.md","raw":"title: NODE-调试方法\ntags:\n  - debug\nid: 539\ncategories:\n  - Node\ndate: 2013-11-30 14:29:14\n---\n\nNODE核心自带的STDIO模块，就是类似浏览器端的console.*()系列方法，可像浏览器端调试代码一样，简单对代码进行调试：\n\n# 输出普通信息：\nconsole.log() 在控制台输出信息，可用来记录一个函数是否执行、函数执行时某些变量的值\n\n# 输出错误信息：\nconsole.error() 输出错误信息，常配合try catch语句使用\n\n# 判断代码块的性能：\nconsole.time(‘mytime')和console.timeEnd(‘mytime’)会输出代码块执行的时间\n\n# 设置断点：\ndebugger; 遇到这句断点时，代码都会中止执行，按play可继续代码执行\n\n# 安装node-inspector调试器\n$ npm install -g node-inspector\n使用node-inspector 对nodejs代码进行调试,需要环境：webkit内核浏览器\n\n&nbsp;\n\n[javascript]\n // file t6.js\n var foo = function(){\n     var a = 3, b = 5;\n     var bar = function(){\n         var b = 7, c = 11;\n         a += b + c;\n     }\n     bar();\n }\n foo();\n\n[/javascript]\n\n<!-- more -->\n\n\n写好以上代码后，开始调试\n$ node --debug-brk t6.js\n\n控制台显示对5858端口进行了监听：\n\n![](http://laispace.u.qiniudn.com/NODE-%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%951.png)\n然后启动node inspector\n$ node-inspector\n\n启动后会提示访问http://127.0.0.1:8080/debug?port=5858进行调试\n开后通过单击行号来设置/移除断点，可依次按play按钮并观察Scope Variables下的变量值的变化来理解代码的执行过程\n\n总结：使用inspector 可用来按部查询代码引用的文件和模块，让代码具备交互性","slug":"NODE-调试方法","updated":1418908898000,"excerpt":"<p>NODE核心自带的STDIO模块，就是类似浏览器端的console.*()系列方法，可像浏览器端调试代码一样，简单对代码进行调试：</p>\n<h1 id=\"输出普通信息：\">输出普通信息：</h1>\n<p>console.log() 在控制台输出信息，可用来记录一个函数是否执行、函数执行时某些变量的值</p>\n<h1 id=\"输出错误信息：\">输出错误信息：</h1>\n<p>console.error() 输出错误信息，常配合try catch语句使用</p>\n<h1 id=\"判断代码块的性能：\">判断代码块的性能：</h1>\n<p>console.time(‘mytime’)和console.timeEnd(‘mytime’)会输出代码块执行的时间</p>\n<h1 id=\"设置断点：\">设置断点：</h1>\n<p>debugger; 遇到这句断点时，代码都会中止执行，按play可继续代码执行</p>\n<h1 id=\"安装node-inspector调试器\">安装node-inspector调试器</h1>\n<p>$ npm install -g node-inspector<br>使用node-inspector 对nodejs代码进行调试,需要环境：webkit内核浏览器</p>\n<p>&nbsp;</p>\n<p>[javascript]<br> // file t6.js<br> var foo = function(){<br>     var a = 3, b = 5;<br>     var bar = function(){<br>         var b = 7, c = 11;<br>         a += b + c;<br>     }<br>     bar();<br> }<br> foo();</p>\n<p>[/javascript]</p>\n","_id":"hxoum11bd2ie3td8","comments":true,"layout":"post","photos":[],"link":""},{"title":"NODE入门-一些常用的DNS模块","id":633,"categories":["f1q8dl6bbauvoh8x"],"date":1394284199000,"tags":["2tfwjybvjy6xhqzj"],"content":"<p>记录一些Modules的简单用法，方便快速查阅。</p>\n<ul>\n<li>DNS 解析模块</li>\n</ul>\n<p>[javascript]<br>// 解析DNS<br>var dns = require(‘dns’);<br>var href = ‘www.laispace.com’;<br>var type = ‘A’;<br>// href 待解析的域名字符串, type 表示记录类型的字符串(A-地址解析/CNAME-别名解析/MX-邮件域名解析/SRV-服务记录等);<br>dns.resolve(href, type, function (err, result) {<br> if (err) {<br> throw err;<br> }<br> console.log(‘DNS解析结果是：’, result);<br>})<br>[/javascript]</p>\n<p>解析结果：</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.04.05-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.04.05-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-08 at 9.04.05 PM\"></a></p>\n<p>除resolve()方法外，还有lookup()、resolve4()、resolve6()。resolveMx() 等其他方法见：<a href=\"http://nodejs.org/api/dns.html#dns_dns_resolve_domain_rrtype_callback\" target=\"_blank\" rel=\"external\">DNS模块官方文档</a></p>\n<a id=\"more\"></a>\n\n<ul>\n<li>Crypto 加密模块</li>\n</ul>\n<p>[javascript]</p>\n<p>// 安装Node时保证添加了 OpenSSL 支持</p>\n<p>var crypto = require(‘crypto’);</p>\n<p>// 创建 hash 对象实例, 传入 md5/sha1/sha256/sha512/ripemd160<br>var md5 = crypto.createHash(‘md5’);</p>\n<p>var password = ‘helloXiaoLai’;</p>\n<p>console.log(‘输入的明文是：’, password);</p>\n<p>// 生成hash<br>md5.update(‘myPassword’);<br>// 添加数据更新hash<br>md5.update(‘laispace.com’);<br>// 生成密钥, 16进制显示<br>password = md5.digest(‘hex’);<br>console.log(‘输出的密文是：’, password);</p>\n<p>[/javascript]</p>\n<p>加密结果：</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.23.22-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.23.22-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-08 at 9.23.22 PM\"></a></p>\n<p>除hashing加密外，还有HMAC加密、公钥加密等其他方法见：<a href=\"http://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm\" target=\"_blank\" rel=\"external\">Crypto模块官方文档</a></p>\n<ul>\n<li>Process 全局变量</li>\n</ul>\n<p>[javascript]<br>&lt;span style=&quot;font-family: Georgia, ‘Times New Roman’, ‘Bitstream Charter’, Times, serif; font-size: 13px; line-height: 19px;&quot;&gt;console.log(‘版本号是：’, process.version);&lt;/span&gt;&lt;/pre&gt;<br>console.log(‘运行平台是：’, process.platform);</p>\n<p>console.log(‘当前进程已运行的时间：’, process.uptime());</p>\n<p>// 捕获进程信号量<br>// 输入<br>console.log(‘输入你的姓名:’);<br>// 激活进程输入<br>process.stdin.resume();<br>// 设置编码<br>process.stdin.setEncoding(‘utf8’);<br>var body = ‘’;<br>// 监听<br>process.stdin.on(‘data’, function (chunk) {<br> body += chunk;<br> // process.stdout.write(‘数据传输中…’ + chunk);<br>});<br>process.stdin.on(‘end’, function () {<br> process.stdout.write(‘你好，’ + body);<br>});</p>\n<p>// 监听<br>process.on(‘SIGINT’, function () {<br> console.log(‘捕获到SIGINT事件，按 ctrl+D 退出’);<br>})</p>\n<p>// 监听进程退出<br>process.on(‘exit’, function () {<br> console.log(‘监听到进程退出’);<br>})<br>&lt;pre&gt;[/javascript]</p>\n<p>监听结果：<br><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.58.58-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.58.58-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-08 at 9.58.58 PM\"></a></p>\n<p>更多方法见：<a href=\"http://nodejs.org/api/process.html#process_process\" target=\"_blank\" rel=\"external\">Process 进程</a></p>\n","source":"_posts/NODE入门-一些常用的DNS模块.md","raw":"title: NODE入门-一些常用的DNS模块\nid: 633\ncategories:\n  - Node\ndate: 2014-03-08 21:09:59\ntags:\n  - dns\n---\n\n记录一些Modules的简单用法，方便快速查阅。\n\n- DNS 解析模块\n\n[javascript]\n// 解析DNS\nvar dns = require('dns');\nvar href = 'www.laispace.com';\nvar type = 'A';\n// href 待解析的域名字符串, type 表示记录类型的字符串(A-地址解析/CNAME-别名解析/MX-邮件域名解析/SRV-服务记录等);\ndns.resolve(href, type, function (err, result) {\n if (err) {\n throw err;\n }\n console.log('DNS解析结果是：', result);\n})\n[/javascript]\n\n解析结果：\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.04.05-PM.png \"Screen Shot 2014-03-08 at 9.04.05 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.04.05-PM.png)\n\n除resolve()方法外，还有lookup()、resolve4()、resolve6()。resolveMx() 等其他方法见：[DNS模块官方文档](http://nodejs.org/api/dns.html#dns_dns_resolve_domain_rrtype_callback)\n\n<!-- more -->\n\n- Crypto 加密模块\n\n[javascript]\n\n// 安装Node时保证添加了 OpenSSL 支持\n\nvar crypto = require('crypto');\n\n// 创建 hash 对象实例, 传入 md5/sha1/sha256/sha512/ripemd160\nvar md5 = crypto.createHash('md5');\n\nvar password = 'helloXiaoLai';\n\nconsole.log('输入的明文是：', password);\n\n// 生成hash\nmd5.update('myPassword');\n// 添加数据更新hash\nmd5.update('laispace.com');\n// 生成密钥, 16进制显示\npassword = md5.digest('hex');\nconsole.log('输出的密文是：', password);\n\n[/javascript]\n\n加密结果：\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.23.22-PM.png \"Screen Shot 2014-03-08 at 9.23.22 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.23.22-PM.png)\n\n除hashing加密外，还有HMAC加密、公钥加密等其他方法见：[Crypto模块官方文档](http://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm)\n\n- Process 全局变量\n\n[javascript]\n&lt;span style=&quot;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;&quot;&gt;console.log('版本号是：', process.version);&lt;/span&gt;&lt;/pre&gt;\nconsole.log('运行平台是：', process.platform);\n\nconsole.log('当前进程已运行的时间：', process.uptime());\n\n// 捕获进程信号量\n// 输入\nconsole.log('输入你的姓名:');\n// 激活进程输入\nprocess.stdin.resume();\n// 设置编码\nprocess.stdin.setEncoding('utf8');\nvar body = '';\n// 监听\nprocess.stdin.on('data', function (chunk) {\n body += chunk;\n // process.stdout.write('数据传输中...' + chunk);\n});\nprocess.stdin.on('end', function () {\n process.stdout.write('你好，' + body);\n});\n\n// 监听\nprocess.on('SIGINT', function () {\n console.log('捕获到SIGINT事件，按 ctrl+D 退出');\n})\n\n// 监听进程退出\nprocess.on('exit', function () {\n console.log('监听到进程退出');\n})\n&lt;pre&gt;[/javascript]\n\n监听结果：\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.58.58-PM.png \"Screen Shot 2014-03-08 at 9.58.58 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.58.58-PM.png)\n\n更多方法见：[Process 进程](http://nodejs.org/api/process.html#process_process)","slug":"NODE入门-一些常用的DNS模块","updated":1418908898000,"excerpt":"<p>记录一些Modules的简单用法，方便快速查阅。</p>\n<ul>\n<li>DNS 解析模块</li>\n</ul>\n<p>[javascript]<br>// 解析DNS<br>var dns = require(‘dns’);<br>var href = ‘www.laispace.com’;<br>var type = ‘A’;<br>// href 待解析的域名字符串, type 表示记录类型的字符串(A-地址解析/CNAME-别名解析/MX-邮件域名解析/SRV-服务记录等);<br>dns.resolve(href, type, function (err, result) {<br> if (err) {<br> throw err;<br> }<br> console.log(‘DNS解析结果是：’, result);<br>})<br>[/javascript]</p>\n<p>解析结果：</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.04.05-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/Screen-Shot-2014-03-08-at-9.04.05-PM.png\" alt=\"\" title=\"Screen Shot 2014-03-08 at 9.04.05 PM\"></a></p>\n<p>除resolve()方法外，还有lookup()、resolve4()、resolve6()。resolveMx() 等其他方法见：<a href=\"http://nodejs.org/api/dns.html#dns_dns_resolve_domain_rrtype_callback\" target=\"_blank\" rel=\"external\">DNS模块官方文档</a></p>\n","_id":"hegvjbgtkj48n205","comments":true,"layout":"post","photos":[],"link":""},{"title":"NODE入门-简单爬虫","tags":["fa3yyjtyo5l2bxax"],"categories":["f1q8dl6bbauvoh8x"],"date":1393395973000,"content":"<p>nodejs真是太酷了！</p>\n<p>使用 http.get() 抓取页面，然后使用 jsdom 来解析页面（简单配置+jquery语法），简单代码如下：</p>\n<pre><code><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);\n<span class=\"comment\">// 使用 jsdom 来解析html https://www.npmjs.org/package/jsdom</span>\n<span class=\"keyword\">var</span> jsdom = <span class=\"built_in\">require</span>(<span class=\"string\">'jsdom'</span>);\n<span class=\"comment\">// 抓取 V2EX 最新话题</span>\n<span class=\"keyword\">var</span> url = <span class=\"string\">'http://www.v2ex.com'</span>;\n\n<span class=\"comment\">// 获取一个页面</span>\nhttp.get(url, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(res)</span> </span>{\n    <span class=\"keyword\">var</span> body = <span class=\"string\">''</span>;\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'状态码：'</span>, res.statusCode);\n    res.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(chunk)</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据传输中...'</span>);\n        body += chunk;\n    });\n    res.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据传输完成:'</span>);\n        <span class=\"comment\">// 使用 jsdom 解析抓取到的html</span>\n        jsdom.env(\n            body,\n            <span class=\"string\">'http://code.jquery.com/jquery.js'</span>,\n            <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(errors, window)</span> </span>{\n                <span class=\"keyword\">var</span> $ = <span class=\"built_in\">window</span>.$;\n                <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据传输完成'</span>);\n                <span class=\"keyword\">var</span> len = $(<span class=\"string\">'.cell.item'</span>).length;\n                <span class=\"built_in\">console</span>.log(<span class=\"string\">'找到最新主题'</span>, len);\n                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &amp; lt; len; i++) {\n                    <span class=\"keyword\">var</span> title = $(<span class=\"string\">'.cell.item'</span>).eq(i).find(<span class=\"string\">'.item_title a'</span>).html();\n                    <span class=\"keyword\">var</span> link = url + $(<span class=\"string\">'.cell.item'</span>).eq(i).find(<span class=\"string\">'.item_title a'</span>).attr(<span class=\"string\">'href'</span>);\n                    <span class=\"built_in\">console</span>.log(title + <span class=\"string\">'('</span> + link + <span class=\"string\">')'</span>);\n                }\n            }\n        );\n    });\n}).on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span> </span>{\n    <span class=\"built_in\">console</span>.log( &amp; quot; 发生错误: &amp; quot; + e.message);\n});\n</code></pre><p><a href=\"简单小爬虫\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/02/Screen-Shot-2014-02-27-at-10.29.44-AM.png\" alt=\"\"></a></p>\n<a id=\"more\"></a>\n\n<p>另一个例子，抓取知乎的一个问答：</p>\n<pre><code><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);\n<span class=\"comment\">// 使用 jsdom 来解析html https://www.npmjs.org/package/jsdom</span>\n<span class=\"keyword\">var</span> jsdom = <span class=\"built_in\">require</span>(<span class=\"string\">'jsdom'</span>);\n<span class=\"comment\">// 抓取 知乎话题『你认为自己最好的照片是哪张？』里的图片</span>\n<span class=\"keyword\">var</span> url = <span class=\"string\">'http://www.zhihu.com/question/20937691'</span>;\n<span class=\"comment\">// 获取一个页面</span>\nhttp.get(url, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(res)</span> </span>{\n        <span class=\"keyword\">var</span> body = <span class=\"string\">''</span>;\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'状态码：'</span>, res.statusCode);\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据传输中...'</span>);\n        res.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(chunk)</span> </span>{\n            body += chunk;\n        });\n        res.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n                <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据传输完成:'</span>);\n                <span class=\"comment\">// 使用 jsdom 解析抓取到的html</span>\n                jsdom.env(\n                    body, [ &amp; quot;http: <span class=\"comment\">//code.jquery.com/jquery.js&amp;quot;],</span>\n                        <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(errors, window)</span> </span>{\n                            <span class=\"keyword\">var</span> $ = <span class=\"built_in\">window</span>.$;\n                            <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据传输完成'</span>);\n                            <span class=\"comment\">// 知乎问题</span>\n                            <span class=\"keyword\">var</span> question = $(<span class=\"string\">'title'</span>).text();\n                            <span class=\"built_in\">console</span>.log(question);\n                            <span class=\"comment\">// 知乎回答</span>\n                            <span class=\"keyword\">var</span> len = $(<span class=\"string\">'#zh-question-answer-wrap'</span>).find(<span class=\"string\">'.zm-item-answer '</span>).length;\n                            <span class=\"built_in\">console</span>.log(<span class=\"string\">'共有'</span>, len, <span class=\"string\">'个回答'</span>);\n                            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &amp; lt; len; i++) {\n                                <span class=\"keyword\">var</span> author = $(<span class=\"string\">'.zm-item-answer'</span>).eq(i).find(<span class=\"string\">'.zm-item-answer-author-wrap a:nth-child(2)'</span>).text();\n                                <span class=\"keyword\">var</span> author_link = <span class=\"string\">'http://www.zhihu.com'</span> + $(<span class=\"string\">'.zm-item-answer'</span>).eq(i).find(<span class=\"string\">'.zm-item-answer-author-wrap a:nth-child(2)'</span>).attr(<span class=\"string\">'href'</span>);\n                                <span class=\"keyword\">var</span> avatar = $(<span class=\"string\">'.zm-item-answer'</span>).eq(i).find(<span class=\"string\">'.zm-list-avatar'</span>).attr(<span class=\"string\">'src'</span>);\n                                <span class=\"keyword\">var</span> vote_count = $(<span class=\"string\">'.zm-item-answer'</span>).eq(i).find(<span class=\"string\">'.zm-item-vote-count'</span>).text();\n                                author = author ? author : <span class=\"string\">'匿名用户'</span>;\n                                <span class=\"comment\">// 输出每个答案下的 作者 票数等信息</span>\n                                <span class=\"built_in\">console</span>.log(<span class=\"string\">'第'</span> + i + <span class=\"string\">'位'</span>, vote_count + <span class=\"string\">'票'</span>, <span class=\"string\">'作者:'</span> + author);\n                                <span class=\"built_in\">console</span>.log(<span class=\"string\">'(主页:'</span> + author_link + <span class=\"string\">'头像:'</span> + avatar + <span class=\"string\">')'</span>)\n                                <span class=\"keyword\">var</span> imgs = $(<span class=\"string\">'.zm-item-answer'</span>).eq(i).find(<span class=\"string\">'.zm-item-rich-text img'</span>);\n                                <span class=\"keyword\">var</span> imgLen = imgs.length;\n                                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &amp; lt; imgLen; j++) {\n                                    <span class=\"keyword\">var</span> imgSrc = imgs.eq(j).attr(<span class=\"string\">'src'</span>);\n                                    <span class=\"keyword\">if</span> (imgSrc) {\n                                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'图片'</span> + j + <span class=\"string\">': '</span> + imgSrc);\n                                    }\n                                }\n                                <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n'</span>)\n                            }\n                        }\n                    );\n                });\n        }).on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span> </span>{\n        <span class=\"built_in\">console</span>.log( &amp; quot; 发生错误: &amp; quot; + e.message);\n    });\n</code></pre><p><a href=\"简单爬虫\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/02/Screen-Shot-2014-02-27-at-1.48.00-PM.png &quot;\" alt=\"\"></a></p>\n<p>此外，可以试试用简化的 request 模块代替 http.get()：</p>\n<pre><code><span class=\"comment\">// $ npm install request (https://www.npmjs.org/package/request)</span>\n<span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);\nrequest(<span class=\"string\">'http://laispace.github.io'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(error, response, body)</span> </span>{\n     <span class=\"keyword\">if</span> (!error &amp;&amp; response.statusCode == <span class=\"number\">200</span>) {\n         <span class=\"built_in\">console</span>.log(body)\n    }\n});\n</code></pre><p>接下来就只要把解析出的数据存入自己的数据库，就可以拿来用了。</p>\n","source":"_posts/NODE入门-简单爬虫.md","raw":"title: NODE入门-简单爬虫\ntags:\n  - spider\ncategories:\n  - Node\ndate: 2014-02-26 14:26:13\n\n---\n\nnodejs真是太酷了！\n\n使用 http.get() 抓取页面，然后使用 jsdom 来解析页面（简单配置+jquery语法），简单代码如下：\n\n    var http = require('http');\n    // 使用 jsdom 来解析html https://www.npmjs.org/package/jsdom\n    var jsdom = require('jsdom');\n    // 抓取 V2EX 最新话题\n    var url = 'http://www.v2ex.com';\n\n    // 获取一个页面\n    http.get(url, function(res) {\n        var body = '';\n        console.log('状态码：', res.statusCode);\n        res.on('data', function(chunk) {\n            console.log('数据传输中...');\n            body += chunk;\n        });\n        res.on('end', function() {\n            console.log('数据传输完成:');\n            // 使用 jsdom 解析抓取到的html\n            jsdom.env(\n                body,\n                'http://code.jquery.com/jquery.js',\n                function(errors, window) {\n                    var $ = window.$;\n                    console.log('数据传输完成');\n                    var len = $('.cell.item').length;\n                    console.log('找到最新主题', len);\n                    for (var i = 0; i & lt; len; i++) {\n                        var title = $('.cell.item').eq(i).find('.item_title a').html();\n                        var link = url + $('.cell.item').eq(i).find('.item_title a').attr('href');\n                        console.log(title + '(' + link + ')');\n                    }\n                }\n            );\n        });\n    }).on('error', function(e) {\n        console.log( & quot; 发生错误: & quot; + e.message);\n    });\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/02/Screen-Shot-2014-02-27-at-10.29.44-AM.png)](简单小爬虫)\n\n<!-- more -->\n\n另一个例子，抓取知乎的一个问答：\n\n    var http = require('http');\n    // 使用 jsdom 来解析html https://www.npmjs.org/package/jsdom\n    var jsdom = require('jsdom');\n    // 抓取 知乎话题『你认为自己最好的照片是哪张？』里的图片\n    var url = 'http://www.zhihu.com/question/20937691';\n    // 获取一个页面\n    http.get(url, function(res) {\n            var body = '';\n            console.log('状态码：', res.statusCode);\n            console.log('数据传输中...');\n            res.on('data', function(chunk) {\n                body += chunk;\n            });\n            res.on('end', function() {\n                    console.log('数据传输完成:');\n                    // 使用 jsdom 解析抓取到的html\n                    jsdom.env(\n                        body, [ & quot;http: //code.jquery.com/jquery.js&quot;],\n                            function(errors, window) {\n                                var $ = window.$;\n                                console.log('数据传输完成');\n                                // 知乎问题\n                                var question = $('title').text();\n                                console.log(question);\n                                // 知乎回答\n                                var len = $('#zh-question-answer-wrap').find('.zm-item-answer ').length;\n                                console.log('共有', len, '个回答');\n                                for (var i = 0; i & lt; len; i++) {\n                                    var author = $('.zm-item-answer').eq(i).find('.zm-item-answer-author-wrap a:nth-child(2)').text();\n                                    var author_link = 'http://www.zhihu.com' + $('.zm-item-answer').eq(i).find('.zm-item-answer-author-wrap a:nth-child(2)').attr('href');\n                                    var avatar = $('.zm-item-answer').eq(i).find('.zm-list-avatar').attr('src');\n                                    var vote_count = $('.zm-item-answer').eq(i).find('.zm-item-vote-count').text();\n                                    author = author ? author : '匿名用户';\n                                    // 输出每个答案下的 作者 票数等信息\n                                    console.log('第' + i + '位', vote_count + '票', '作者:' + author);\n                                    console.log('(主页:' + author_link + '头像:' + avatar + ')')\n                                    var imgs = $('.zm-item-answer').eq(i).find('.zm-item-rich-text img');\n                                    var imgLen = imgs.length;\n                                    for (var j = 0; j & lt; imgLen; j++) {\n                                        var imgSrc = imgs.eq(j).attr('src');\n                                        if (imgSrc) {\n                                            console.log('图片' + j + ': ' + imgSrc);\n                                        }\n                                    }\n                                    console.log('\\n')\n                                }\n                            }\n                        );\n                    });\n            }).on('error', function(e) {\n            console.log( & quot; 发生错误: & quot; + e.message);\n        });\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/02/Screen-Shot-2014-02-27-at-1.48.00-PM.png \")](简单爬虫)\n\n此外，可以试试用简化的 request 模块代替 http.get()：\n\n    // $ npm install request (https://www.npmjs.org/package/request)\n    var request = require('request');\n    request('http://laispace.github.io', function (error, response, body) {\n         if (!error && response.statusCode == 200) {\n             console.log(body)\n        }\n    });\n\n接下来就只要把解析出的数据存入自己的数据库，就可以拿来用了。\n\n","slug":"NODE入门-简单爬虫","updated":1418908898000,"excerpt":"<p>nodejs真是太酷了！</p>\n<p>使用 http.get() 抓取页面，然后使用 jsdom 来解析页面（简单配置+jquery语法），简单代码如下：</p>\n<pre><code><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);\n<span class=\"comment\">// 使用 jsdom 来解析html https://www.npmjs.org/package/jsdom</span>\n<span class=\"keyword\">var</span> jsdom = <span class=\"built_in\">require</span>(<span class=\"string\">'jsdom'</span>);\n<span class=\"comment\">// 抓取 V2EX 最新话题</span>\n<span class=\"keyword\">var</span> url = <span class=\"string\">'http://www.v2ex.com'</span>;\n\n<span class=\"comment\">// 获取一个页面</span>\nhttp.get(url, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(res)</span> </span>{\n    <span class=\"keyword\">var</span> body = <span class=\"string\">''</span>;\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'状态码：'</span>, res.statusCode);\n    res.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(chunk)</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据传输中...'</span>);\n        body += chunk;\n    });\n    res.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据传输完成:'</span>);\n        <span class=\"comment\">// 使用 jsdom 解析抓取到的html</span>\n        jsdom.env(\n            body,\n            <span class=\"string\">'http://code.jquery.com/jquery.js'</span>,\n            <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(errors, window)</span> </span>{\n                <span class=\"keyword\">var</span> $ = <span class=\"built_in\">window</span>.$;\n                <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据传输完成'</span>);\n                <span class=\"keyword\">var</span> len = $(<span class=\"string\">'.cell.item'</span>).length;\n                <span class=\"built_in\">console</span>.log(<span class=\"string\">'找到最新主题'</span>, len);\n                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &amp; lt; len; i++) {\n                    <span class=\"keyword\">var</span> title = $(<span class=\"string\">'.cell.item'</span>).eq(i).find(<span class=\"string\">'.item_title a'</span>).html();\n                    <span class=\"keyword\">var</span> link = url + $(<span class=\"string\">'.cell.item'</span>).eq(i).find(<span class=\"string\">'.item_title a'</span>).attr(<span class=\"string\">'href'</span>);\n                    <span class=\"built_in\">console</span>.log(title + <span class=\"string\">'('</span> + link + <span class=\"string\">')'</span>);\n                }\n            }\n        );\n    });\n}).on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span> </span>{\n    <span class=\"built_in\">console</span>.log( &amp; quot; 发生错误: &amp; quot; + e.message);\n});\n</code></pre><p><a href=\"简单小爬虫\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/02/Screen-Shot-2014-02-27-at-10.29.44-AM.png\" alt=\"\"></a></p>\n","_id":"3jycg9g11svu07aj","comments":true,"layout":"post","photos":[],"link":""},{"title":"NODE入门-简单的文件管理器","tags":["1r19h0mfxhgs7nzc","co9oz5jdtnentgvy"],"categories":["f1q8dl6bbauvoh8x"],"date":1389970549000,"content":"<p>今天学习了一个简单的CLI文件管理器的编写：</p>\n<h2 id=\"安装方法：\">安装方法：</h2>\n<ul>\n<li>运行 $ node index.js后会列出当前文件夹下的文件或文件夹</li>\n<li>选择文件，则显示这个文件内容</li>\n<li>选择文件夹，则列出这个文件夹下的文件</li>\n</ul>\n<blockquote>\n<p>Hello, 这是小赖的第一个nodejs命令行程序！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<pre><code><span class=\"comment\">// index.js</span>\n<span class=\"comment\">// fs 模块是唯一一个同时提供异步和同步API的模块</span>\n<span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);\n<span class=\"comment\">// !!! 定义快捷变量</span>\n<span class=\"keyword\">var</span> stdin = process.stdin,\n    stdout = process.stdout;\n<span class=\"comment\">// #1 获取文件列表</span>\nfs.readdir(__dirname, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err, files)</span> </span>{\n    <span class=\"comment\">// __dirname 即当前文件夹的路径</span>\n    <span class=\"comment\">// console.log('    当前文件夹路径：', __dirname);</span>\n    <span class=\"comment\">// 当前文件夹下的文件</span>\n    <span class=\"comment\">// console.log('    文件夹下的文件：', files);</span>\n})\n<span class=\"comment\">// #2 列出当前目录下的文件，然后等待用户输入</span>\n<span class=\"comment\">// process.cwd()返回当前的工作目录，http://nodejs.org/api/process.html#process_process_cwd</span>\nfs.readdir(process.cwd(), <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err, files)</span> </span>{\n    <span class=\"comment\">// 将下面出现的Stat对象存储起来</span>\n    <span class=\"keyword\">var</span> stats = [];\n    <span class=\"comment\">// 为了界面友好，输出一个空行</span>\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">''</span>);\n    <span class=\"keyword\">if</span> (!files.length) {\n        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'    目录下没有文件存在！ \\n'</span>);\n    }\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'   当前目录下的文件或目录列表：\\n'</span>);\n    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">file</span><span class=\"params\">(i)</span> </span>{\n        <span class=\"keyword\">var</span> filename = files[i];\n        <span class=\"comment\">// fs.stat(path, callback)输出文件的状态信息，http://nodejs.org/api/fs.html#fs_fs_stat_path_callback</span>\n        fs.stat(__dirname + <span class=\"string\">'/'</span> + filename, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err, stat)</span> </span>{\n            <span class=\"comment\">// 将当前Stat对象存到数组中供以后使用</span>\n            stats[i] = stat;\n            <span class=\"comment\">// 判断是否为文件夹</span>\n            <span class=\"keyword\">if</span> (stat.isDirectory()) {\n                <span class=\"built_in\">console</span>.log(<span class=\"string\">'   '</span> + i + <span class=\"string\">' '</span> + filename + <span class=\"string\">'/'</span>);\n            } <span class=\"keyword\">else</span> {\n                <span class=\"built_in\">console</span>.log(<span class=\"string\">'   '</span> + i + <span class=\"string\">' '</span> + filename + <span class=\"string\">' '</span>);\n            }\n            <span class=\"comment\">// 继续遍历文件</span>\n            <span class=\"keyword\">if</span> (++i == files.length) {\n                <span class=\"comment\">// !!!</span>\n                read();\n            } <span class=\"keyword\">else</span> {\n                file(i);\n            }\n        });\n        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>{\n            <span class=\"built_in\">console</span>.log(<span class=\"string\">''</span>);\n            <span class=\"comment\">// process.stdout.write()与console.log()不同在于无需换行就可直接输入，http://nodejs.org/api/process.html#process_process_stdout</span>\n            stdout.write(<span class=\"string\">'  请选择：'</span>);\n            <span class=\"comment\">// process.stdin.resume() 等待用户输入</span>\n            stdin.resume();\n            <span class=\"comment\">// 设置编码为utf8才支持特殊字符</span>\n            stdin.setEncoding(<span class=\"string\">'utf8'</span>);\n            <span class=\"comment\">// 监听用户输入</span>\n            stdin.on(<span class=\"string\">'data'</span>, option);\n        }\n        <span class=\"comment\">// 监听用户输入后调用的函数</span>\n        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">option</span><span class=\"params\">(data)</span> </span>{\n            <span class=\"comment\">// 用户输入的不是数字,不匹配files数组的下标</span>\n            <span class=\"keyword\">var</span> filename = files[<span class=\"built_in\">Number</span>(data)];\n            <span class=\"keyword\">if</span> (!filename) {\n                stdout.write(<span class=\"string\">'  请选择：'</span>);\n            } <span class=\"keyword\">else</span> {\n                <span class=\"comment\">// 用户输入通过，pause()确保再次将流暂停（回到默认状态）</span>\n                stdin.pause();\n                <span class=\"comment\">// 读取这个文件，以utf8编码，http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback | http://www.cnblogs.com/yangdejin/archive/2012/03/01/2375123.html</span>\n                <span class=\"comment\">// 读取的是目录</span>\n                <span class=\"keyword\">if</span> (stats[<span class=\"built_in\">Number</span>(data)].isDirectory()) {\n                    fs.readdir(__dirname + <span class=\"string\">'/'</span> + filename, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err, files)</span> </span>{\n                        <span class=\"built_in\">console</span>.log(<span class=\"string\">''</span>);\n                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'   文件夹'</span> + filename + <span class=\"string\">'下有'</span> + files.length + <span class=\"string\">'个文件：'</span>);\n                        files.forEach(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(file)</span> </span>{\n                            <span class=\"built_in\">console</span>.log(<span class=\"string\">'   - '</span> + file);\n                        });\n                        <span class=\"built_in\">console</span>.log(<span class=\"string\">''</span>);\n                    });\n                } <span class=\"keyword\">else</span> {\n                    <span class=\"comment\">// 读取的是文件</span>\n                    fs.readFile(__dirname + <span class=\"string\">'/'</span> + filename, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err, data)</span> </span>{\n                        <span class=\"built_in\">console</span>.log(<span class=\"string\">''</span>);\n                        <span class=\"comment\">// 使用正则，添加辅助性的缩进来输出，正则入门http://deerchao.net/tutorials/regex/regex.htm</span>\n                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'   文件'</span> + filename + <span class=\"string\">'的内容是：\\n'</span>, data.replace(<span class=\"regexp\">/(.*)/g</span>, <span class=\"string\">'      $1'</span>))\n                    })\n                }\n            }\n        }\n    }\n    <span class=\"comment\">// 初始遍历第一个文件或文件夹</span>\n    file(<span class=\"number\">0</span>);\n});\n</code></pre><ul>\n<li><p>执行参数 process.argv 包含node程序运行时的参数值：node argv.js</p>\n<ul>\n<li><p>第一个参数是 ‘node’</p>\n</li>\n<li><p>第二个参数是 argv.js的路径</p>\n</li>\n<li><p>第三个参数是 传给argv.js 的参数</p>\n</li>\n<li><p>要获取真正传给argv.js的参数，使用 process.argv.slice(2) 即可</p>\n</li>\n</ul>\n</li>\n<li><p>文件路径 __dirname 和 process.cwd 的区别</p>\n<ul>\n<li><p>__dirname 获取的是文件在文件系统中的目录</p>\n</li>\n<li><p>process.cwd 获取的是当前工作目录</p>\n</li>\n<li><p>使用 process.chdir 方法可以改变灵活地工作目录 </p>\n</li>\n</ul>\n</li>\n<li><p>环境变量 process.env 可以访问 shell 环境下的变量</p>\n</li>\n<li><p>退出程序 process.exit()  </p>\n</li>\n</ul>\n<p>$ node 进入node环境后，输入 process.exit(1) 就可以退出，不用老是 CTRL C 来退出啦</p>\n<ul>\n<li><p>fs.readFile(‘myFile.txt’， callback) 和 fs.creatrReadStream(‘myFile.txt’) 的区别</p>\n<ul>\n<li>fs.readFile(‘myFile.txt’, funtion(err, data)) 是当 myFile.txt 完全读取完后才执行回调函数</li>\n<li>当 myFile.txt 这个文件非常大，甚至读取的视频的时候呢？延迟就会非常厉害了</li>\n<li><p>fs.createReadStream() 创建可读的 Stream 对象，分块处理：</p>\n<p>var stream = fs.createReadStream(‘myFile.txt’);<br>stream.on(‘data’, function(chunk){<br>  // chunk 是传输的内容块<br>});<br>stream.on(‘end’, function(chunk){<br>  // 文件全传输完毕<br>});</p>\n</li>\n</ul>\n</li>\n</ul>\n","source":"_posts/NODE入门-简单的文件管理器.md","raw":"title: NODE入门-简单的文件管理器\ntags:\n  - node\n  - fs\ncategories:\n  - Node\ndate: 2014-01-17 22:55:49\n---\n\n今天学习了一个简单的CLI文件管理器的编写：\n\n## 安装方法：\n\n- 运行 $ node index.js后会列出当前文件夹下的文件或文件夹\n- 选择文件，则显示这个文件内容\n- 选择文件夹，则列出这个文件夹下的文件\n\n> Hello, 这是小赖的第一个nodejs命令行程序！\n\n<!-- more -->\n\n    // index.js\n    // fs 模块是唯一一个同时提供异步和同步API的模块\n    var fs = require('fs');\n    // !!! 定义快捷变量\n    var stdin = process.stdin,\n        stdout = process.stdout;\n    // #1 获取文件列表\n    fs.readdir(__dirname, function(err, files) {\n        // __dirname 即当前文件夹的路径\n        // console.log('    当前文件夹路径：', __dirname);\n        // 当前文件夹下的文件\n        // console.log('    文件夹下的文件：', files);\n    })\n    // #2 列出当前目录下的文件，然后等待用户输入\n    // process.cwd()返回当前的工作目录，http://nodejs.org/api/process.html#process_process_cwd\n    fs.readdir(process.cwd(), function(err, files) {\n        // 将下面出现的Stat对象存储起来\n        var stats = [];\n        // 为了界面友好，输出一个空行\n        console.log('');\n        if (!files.length) {\n            return console.log('    目录下没有文件存在！ \\n');\n        }\n        console.log('   当前目录下的文件或目录列表：\\n');\n        function file(i) {\n            var filename = files[i];\n            // fs.stat(path, callback)输出文件的状态信息，http://nodejs.org/api/fs.html#fs_fs_stat_path_callback\n            fs.stat(__dirname + '/' + filename, function(err, stat) {\n                // 将当前Stat对象存到数组中供以后使用\n                stats[i] = stat;\n                // 判断是否为文件夹\n                if (stat.isDirectory()) {\n                    console.log('   ' + i + ' ' + filename + '/');\n                } else {\n                    console.log('   ' + i + ' ' + filename + ' ');\n                }\n                // 继续遍历文件\n                if (++i == files.length) {\n                    // !!!\n                    read();\n                } else {\n                    file(i);\n                }\n            });\n            function read() {\n                console.log('');\n                // process.stdout.write()与console.log()不同在于无需换行就可直接输入，http://nodejs.org/api/process.html#process_process_stdout\n                stdout.write('  请选择：');\n                // process.stdin.resume() 等待用户输入\n                stdin.resume();\n                // 设置编码为utf8才支持特殊字符\n                stdin.setEncoding('utf8');\n                // 监听用户输入\n                stdin.on('data', option);\n            }\n            // 监听用户输入后调用的函数\n            function option(data) {\n                // 用户输入的不是数字,不匹配files数组的下标\n                var filename = files[Number(data)];\n                if (!filename) {\n                    stdout.write('  请选择：');\n                } else {\n                    // 用户输入通过，pause()确保再次将流暂停（回到默认状态）\n                    stdin.pause();\n                    // 读取这个文件，以utf8编码，http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback | http://www.cnblogs.com/yangdejin/archive/2012/03/01/2375123.html\n                    // 读取的是目录\n                    if (stats[Number(data)].isDirectory()) {\n                        fs.readdir(__dirname + '/' + filename, function(err, files) {\n                            console.log('');\n                            console.log('   文件夹' + filename + '下有' + files.length + '个文件：');\n                            files.forEach(function(file) {\n                                console.log('   - ' + file);\n                            });\n                            console.log('');\n                        });\n                    } else {\n                        // 读取的是文件\n                        fs.readFile(__dirname + '/' + filename, 'utf8', function(err, data) {\n                            console.log('');\n                            // 使用正则，添加辅助性的缩进来输出，正则入门http://deerchao.net/tutorials/regex/regex.htm\n                            console.log('   文件' + filename + '的内容是：\\n', data.replace(/(.*)/g, '      $1'))\n                        })\n                    }\n                }\n            }\n        }\n        // 初始遍历第一个文件或文件夹\n        file(0);\n    });\n\n\n- 执行参数 process.argv 包含node程序运行时的参数值：node argv.js\n\n  - 第一个参数是 'node'\n  \n  - 第二个参数是 argv.js的路径\n  \n  - 第三个参数是 传给argv.js 的参数\n  \n  - 要获取真正传给argv.js的参数，使用 process.argv.slice(2) 即可\n  \n- 文件路径 __dirname 和 process.cwd 的区别\n\n  - __dirname 获取的是文件在文件系统中的目录\n  \n  - process.cwd 获取的是当前工作目录\n  \n  - 使用 process.chdir 方法可以改变灵活地工作目录 \n\n- 环境变量 process.env 可以访问 shell 环境下的变量\n\n- 退出程序 process.exit()  \n\n$ node 进入node环境后，输入 process.exit(1) 就可以退出，不用老是 CTRL C 来退出啦\n\n- fs.readFile('myFile.txt'， callback) 和 fs.creatrReadStream('myFile.txt') 的区别\n \n  - fs.readFile('myFile.txt', funtion(err, data)) 是当 myFile.txt 完全读取完后才执行回调函数\n  - 当 myFile.txt 这个文件非常大，甚至读取的视频的时候呢？延迟就会非常厉害了\n  - fs.createReadStream() 创建可读的 Stream 对象，分块处理：\n    \n    var stream = fs.createReadStream('myFile.txt');     \n    stream.on('data', function(chunk){\n      // chunk 是传输的内容块        \n    });\n    stream.on('end', function(chunk){\n      // 文件全传输完毕\n    });","slug":"NODE入门-简单的文件管理器","updated":1418908898000,"excerpt":"<p>今天学习了一个简单的CLI文件管理器的编写：</p>\n<h2 id=\"安装方法：\">安装方法：</h2>\n<ul>\n<li>运行 $ node index.js后会列出当前文件夹下的文件或文件夹</li>\n<li>选择文件，则显示这个文件内容</li>\n<li>选择文件夹，则列出这个文件夹下的文件</li>\n</ul>\n<blockquote>\n<p>Hello, 这是小赖的第一个nodejs命令行程序！</p>\n</blockquote>\n","_id":"odzhwro8tfhh8wl1","comments":true,"layout":"post","photos":[],"link":""},{"title":"NPM SSL错误的解决","id":685,"categories":["f1q8dl6bbauvoh8x"],"date":1397271791000,"tags":["gu3hmq4vzpxrop85"],"content":"<p>执行 $ npm update 更新模块的时候，报错：</p>\n<pre>Error: UNABLE_TO_VERIFY_LEAF_SIGNATURE\n\n查资料发现是防火墙的问题，要解决的话，关闭ssl的严格模式，执行：\n$ npm config set strict-ssl false \n\n然后重新执行 $npm update 即可解决\n\n但别忘了这样会降低npm的安全性，所以可以设置回来：\n$ npm config set strict-ssl true</pre>","source":"_posts/NPM SSL错误的解决.md","raw":"title: 'NPM SSL错误的解决'\nid: 685\ncategories:\n  - Node\ndate: 2014-04-12 11:03:11\ntags:\n - NPM   \n---\n\n执行 $ npm update 更新模块的时候，报错：\n<pre>Error: UNABLE_TO_VERIFY_LEAF_SIGNATURE\n\n查资料发现是防火墙的问题，要解决的话，关闭ssl的严格模式，执行：\n$ npm config set strict-ssl false \n\n然后重新执行 $npm update 即可解决\n\n但别忘了这样会降低npm的安全性，所以可以设置回来：\n$ npm config set strict-ssl true</pre>","slug":"NPM SSL错误的解决","updated":1418908898000,"excerpt":"","_id":"kduv0n4k6ityygde","comments":true,"layout":"post","photos":[],"link":""},{"title":"NPM update -g 错误的解决","categories":["f1q8dl6bbauvoh8x"],"date":1405526714000,"tags":["9dl7su9k3pri3l6q"],"content":"<p>使用 $ sudo npm update -g 报错，清除 npm 缓存 或者在 nodejs.org 的官网下载最新版重装后，还是报错。</p>\n<p>解决办法是，执行：</p>\n<pre><code>    // 使当前用户拥有 /usr/<span class=\"keyword\">local</span>/lib/node_modules 目录的权限\n    $ sudo <span class=\"keyword\">chown</span> -R <span class=\"variable\">$USER</span> /usr/<span class=\"keyword\">local</span>/lib/node_modules\n</code></pre><p>然后再执行更新就不会报错了：</p>\n<pre><code>    $ npm <span class=\"keyword\">update</span> -<span class=\"keyword\">g</span>    \n</code></pre><p>让普通用户拥有 npm 的全局权限，即可以不用在 install 或 update 时加上 sudo：</p>\n<pre><code>    // 使当前用户拥有 /usr/local 目录的权限\n    <span class=\"char\">$ </span>sudo chown -<span class=\"class\">R</span> <span class=\"char\">$U</span>SER /usr/local\n    // 然后就可以直接全局安装/更新一些包了\n    <span class=\"char\">$ </span>npm install -g xxx\n    <span class=\"char\">$ </span>npm update -g\n</code></pre>","source":"_posts/NPM-update--g-错误的解决.md","raw":"title: \"NPM update -g 错误的解决\"\ncategories:\n  - Node\ndate: 2014-07-17 00:05:14\ntags:\n  - npm\n\t\n---\n\n使用 $ sudo npm update -g 报错，清除 npm 缓存 或者在 nodejs.org 的官网下载最新版重装后，还是报错。\n\n解决办法是，执行：\n\t\t\n\t\t// 使当前用户拥有 /usr/local/lib/node_modules 目录的权限\n\t\t$ sudo chown -R $USER /usr/local/lib/node_modules\n\n然后再执行更新就不会报错了：\n\n\t\t$ npm update -g\t\n\t\t\n\t\t\t\n让普通用户拥有 npm 的全局权限，即可以不用在 install 或 update 时加上 sudo：\n\n\t\t// 使当前用户拥有 /usr/local 目录的权限\n\t\t$ sudo chown -R $USER /usr/local\n\t\t// 然后就可以直接全局安装/更新一些包了\n\t\t$ npm install -g xxx\n\t\t$ npm update -g","slug":"NPM-update--g-错误的解决","updated":1418908898000,"excerpt":"","_id":"abqj3wp6s3qzksek","comments":true,"layout":"post","photos":[],"link":""},{"title":"Nodejs 的 stream 使用指南","categories":["f1q8dl6bbauvoh8x"],"date":1409191102000,"tags":["y61i4qrqqlf4l62x","wm1t3br1q0iydlun","z9v761uchs5r2lc6","a9p97ysmkdwzmarl","u9vj4ei07jdie7je"],"content":"<h1 id=\"使用_Stream\">使用 Stream</h1>\n<p>当我们读取一个文件内容时，可能会这么写：</p>\n<pre><code><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);\n<span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);\n<span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n    fs.readFile(__dirname + <span class=\"string\">'/data.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, data)</span> </span>{\n        res.end(data);\n    });\n});\nserver.listen(<span class=\"number\">8000</span>);\n</code></pre><p>当这个文件 data.txt 非常大时，不仅会占满内存，而且对于网络不好的用户而言体验将非常差。</p>\n<p>好在 req 和 res 都是 Stream 对象，我们可以使用 Stream 的方式来写代码：</p>\n<pre><code><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);\n<span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);\n<span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n    <span class=\"keyword\">var</span> stream = fs.createReadStream(__dirname + <span class=\"string\">'/data.txt'</span>);\n    stream.pipe(res);\n});\nserver.listen(<span class=\"number\">8000</span>);\n</code></pre><p>我们使用 fs.createReadStream 创建了一个 Stream 对象，.pipe() 方法会监听对应的 <code>data</code> 和 <code>end</code> 事件。</p>\n<p>使用 Stream 的好处在于，我们将 data.txt 分段（chunk）传输到客户端，减轻了网络带宽的压力。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"使用_oppressor_压缩数据\">使用 oppressor 压缩数据</h1>\n<p>如果客户端支持 gzip 或 deflate 压缩的话，我们就可以使用 oppressor 这个模块来对数据进行压缩后传输：</p>\n<pre><code><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);\n<span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);\n<span class=\"keyword\">var</span> oppressor = <span class=\"built_in\">require</span>(<span class=\"string\">'operessor'</span>);\n<span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n    <span class=\"keyword\">var</span> stream = fs.createReadStream(__dirname + <span class=\"string\">'/data.txt'</span>);\n    stream.pipe(oppressor(req)).pipe(res);\n});\nserver.listen(<span class=\"number\">8000</span>);\n</code></pre><h1 id=\"理解_Stream_的基础知识\">理解 Stream 的基础知识</h1>\n<h2 id=\"pipe_管道\">pipe 管道</h2>\n<p>我们可以这么理解 pipe:</p>\n<pre><code>src.<span class=\"keyword\">pipe</span>(A).<span class=\"keyword\">pipe</span>(B).<span class=\"keyword\">pipe</span>(dst);            \n</code></pre><p>等价于：</p>\n<pre><code>src.<span class=\"keyword\">pipe</span>(A);\nA.<span class=\"keyword\">pipe</span>(B);\nB.<span class=\"keyword\">pipe</span>(dst);\n</code></pre><p>即把 src 这个输入交给 A 进行处理后，输出到 B处理，然后把结果输出到 dst。</p>\n<h1 id=\"readable_streams_可读流\">readable streams 可读流</h1>\n<p>在上述代码中，src 就是一个 readable stream 即可读流。</p>\n<p>让我们来创建一个可读流：</p>\n<pre><code><span class=\"keyword\">var</span> Readable = <span class=\"built_in\">require</span>(<span class=\"string\">'stream'</span>).Readable;\n<span class=\"keyword\">var</span> rs = <span class=\"keyword\">new</span> Readable;\nrs.push(<span class=\"string\">'hello '</span>);\nrs.push(<span class=\"string\">'world \\n'</span>);\nrs.push(<span class=\"literal\">null</span>);\nrs.pipe(process.stdout);\n</code></pre><p>将这段代码保存到 read0.js 中，然后执行它：</p>\n<pre><code>$ node <span class=\"built_in\">read</span>0.js\n</code></pre><p>将得到输出：</p>\n<pre><code><span class=\"title\">hello</span> world\n</code></pre><p>注意 <code>rs.push(null)</code> 用于指明我们对这个可读流写入数据完毕。</p>\n<p>在发出 <code>rs.push(null)</code> 指明写入数据完毕之前，我们可以使用 <code>rs.push()</code> 往可读流中继续输入数据。</p>\n<p>而有时候我们希望根据特定条件完成可读流的输入，这时候就可以改写 Readable._read() 方法。</p>\n<pre><code><span class=\"keyword\">var</span> Readable = <span class=\"built_in\">require</span>(<span class=\"string\">'stream'</span>).Readable;\n<span class=\"keyword\">var</span> rs = <span class=\"keyword\">new</span> Readable;\n<span class=\"keyword\">var</span> c = <span class=\"number\">97</span>;\nrs._read = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n    rs.push(<span class=\"built_in\">String</span>.fromCharCode(c++));\n    <span class=\"keyword\">if</span> (c &gt; <span class=\"string\">'z'</span>.charCodeAt(<span class=\"number\">0</span>)) {\n        rs.push(<span class=\"literal\">null</span>);\n    }\n};\nrs.pipe(process.stdout);\n</code></pre><p>rs._read() 将从 <code>a</code> 读到 <code>z</code>，然后才停止对可读流的写入。</p>\n<p>将这段代码保存到 read1.js 中，然后执行它：</p>\n<pre><code>$ node <span class=\"built_in\">read</span>1.js\n</code></pre><p>将得到输出：</p>\n<pre><code>abcdefghijklmnopqrstuvwxyz\n</code></pre><p>注意我们改写了 rs._read() 方法而并没有调用它，因为当条件 <code>c &gt; &#39;z&#39;.charCodeAt(0)</code> 成立时，我们使用 <code>rs.push(null)</code> 指明可读流写入数据完毕。</p>\n<p>为了证明输出 <code>a-z</code> 的过程中调用了 <code>rs._read()</code> 多次，我们编写：</p>\n<pre><code><span class=\"keyword\">var</span> Readable = <span class=\"built_in\">require</span>(<span class=\"string\">'stream'</span>).Readable;\n<span class=\"keyword\">var</span> rs = <span class=\"keyword\">new</span> Readable;\n<span class=\"keyword\">var</span> c = <span class=\"number\">97</span> - <span class=\"number\">1</span>;\nrs._read = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">if</span> (c &gt;= <span class=\"string\">'z'</span>.charCodeAt(<span class=\"number\">0</span>)) {\n        <span class=\"keyword\">return</span> rs.push(<span class=\"literal\">null</span>);\n    }\n    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n        rs.push(<span class=\"built_in\">String</span>.fromCharCode(++c));\n    }, <span class=\"number\">100</span>);\n};\nrs.pipe(process.stdout);\nprocess.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n    <span class=\"built_in\">console</span>.error(<span class=\"string\">'\\n_read() called '</span> + (c - <span class=\"number\">97</span>) + <span class=\"string\">' times'</span>);\n});\nprocess.stdout.on(<span class=\"string\">'error'</span>, process.exit);\n</code></pre><p>将这段代码保存到 read2.js 中，然后执行它：</p>\n<pre><code>$ node <span class=\"built_in\">read</span>2.js\n</code></pre><p>将得到输出：</p>\n<pre><code>abcdefghijklmnopqrstuvwxyz\n_<span class=\"built_in\">read</span>() called <span class=\"number\">25</span> times\n</code></pre><p>而如果我们执行：</p>\n<pre><code>$ node <span class=\"built_in\">read</span>2.js | head -c5\n</code></pre><p>这里的 <code>| head -c5</code> 为 *nix 命令，表示只输出 5 个字节的数据，这时候将得到输出：</p>\n<pre><code>abcde\n_<span class=\"built_in\">read</span>() called <span class=\"number\">5</span> times\n</code></pre><p>有了 <code>| head -c5</code> 这个参数，当输出了 5 个字节的数据后，操作系统发出 SIFPIPE 信号，中断进程，process.stdout 产生错误 EPIPE。</p>\n<p>接着 <code>process.stdout</code> 捕获到错误，触发 <code>exit</code> 事件，所以这时候记录下 <code>rs._read()</code> 的执行次数为 5。</p>\n<h2 id=\"使用_readable_stream_可读流\">使用 readable stream 可读流</h2>\n<p>直接使用可读流非常简单：</p>\n<pre><code>process.stdin.on(<span class=\"string\">'readable'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">var</span> buf = process.stdin.read();\n    <span class=\"built_in\">console</span>.dir(buf);\n});\n</code></pre><p>将这段代码保存到 consume0.js 中，然后执行它：</p>\n<pre><code>$ (<span class=\"keyword\">echo</span> <span class=\"keyword\">abc</span>; <span class=\"keyword\">sleep</span> <span class=\"number\">1</span>; <span class=\"keyword\">echo</span> def; <span class=\"keyword\">sleep</span> <span class=\"number\">1</span>; <span class=\"keyword\">echo</span> ghi) | node consume0.js \n</code></pre><p>我们在命令行中输出一些数据当做 consume0.js 的输入，将得到输出：</p>\n<pre><code>&lt;Buffer <span class=\"number\">61</span> <span class=\"number\">62</span> <span class=\"number\">63</span> <span class=\"number\">0</span><span class=\"operator\">a</span>&gt;\n&lt;Buffer <span class=\"number\">64</span> <span class=\"number\">65</span> <span class=\"number\">66</span> <span class=\"number\">0</span><span class=\"operator\">a</span>&gt;\n&lt;Buffer <span class=\"number\">67</span> <span class=\"number\">68</span> <span class=\"number\">69</span> <span class=\"number\">0</span><span class=\"operator\">a</span>&gt;\n<span class=\"constant\">null</span>\n</code></pre><p>当 <code>process.stdin</code> 监听到有数据传入时，我们就可以使用 <code>process.stdin.read()</code> 读取到这些数据。</p>\n<p>我们看到了输出中有 <code>null</code> 是因为当数据读取完毕时，<code>process.stdin.read()</code> 将返回 <code>null</code>。</p>\n<p>而如果我们给 <code>process.std.read(n)</code> 传入了参数 <code>n</code> 时，将得到 n 字节的数据输出：</p>\n<pre><code>process.stdin.on(<span class=\"string\">'readable'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">var</span> buf = process.stdin.read(<span class=\"number\">3</span>);\n    <span class=\"built_in\">console</span>.dir(buf);\n});\n</code></pre><p>将这段代码保存到 consume1.js 中，然后执行它：</p>\n<pre><code>$ (<span class=\"keyword\">echo</span> <span class=\"keyword\">abc</span>; <span class=\"keyword\">sleep</span> <span class=\"number\">1</span>; <span class=\"keyword\">echo</span> def; <span class=\"keyword\">sleep</span> <span class=\"number\">1</span>; <span class=\"keyword\">echo</span> ghi) | node consume1.js \n</code></pre><p>我们在命令行中输出一些数据当做 consume1.js 的输入，但给 <code>process.stdin.read(3)</code> 传入了参数数字 3，将得到输出：</p>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">Buffer</span> <span class=\"attribute\">61</span> <span class=\"attribute\">62</span> <span class=\"attribute\">63</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">Buffer</span> <span class=\"attribute\">0a</span> <span class=\"attribute\">64</span> <span class=\"attribute\">65</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">Buffer</span> <span class=\"attribute\">66</span> <span class=\"attribute\">0a</span> <span class=\"attribute\">67</span>&gt;</span>\n</code></pre><p>注意我们并没有得到 <code>abc</code> <code>def</code> <code>ghi</code> 对应的完整输出，因为我们限制了读取的字节数为 3，所以剩下的数据保存在了内存中。</p>\n<p>我们能需要读出剩余的数据，改写代码为：</p>\n<pre><code>process.stdin.<span class=\"keyword\">on</span>(<span class=\"string\">'readable'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n    var buf = process.stdin.<span class=\"keyword\">read</span>(<span class=\"number\">3</span>);\n    console.dir(buf);\n    process.stdin.<span class=\"keyword\">read</span>(<span class=\"number\">0</span>);\n});\n</code></pre><p>将这段代码保存到 consume2.js 中，然后执行它：</p>\n<pre><code>$ (<span class=\"keyword\">echo</span> <span class=\"keyword\">abc</span>; <span class=\"keyword\">sleep</span> <span class=\"number\">1</span>; <span class=\"keyword\">echo</span> def; <span class=\"keyword\">sleep</span> <span class=\"number\">1</span>; <span class=\"keyword\">echo</span> ghi) | node consume2.js \n</code></pre><p>我们在命令行中输出一些数据当做 consume2.js 的输入，读完 3 个字节数据后，继续读取。将得到输出：</p>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">Buffer</span> <span class=\"attribute\">61</span> <span class=\"attribute\">62</span> <span class=\"attribute\">63</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">Buffer</span> <span class=\"attribute\">0a</span> <span class=\"attribute\">64</span> <span class=\"attribute\">65</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">Buffer</span> <span class=\"attribute\">66</span> <span class=\"attribute\">0a</span> <span class=\"attribute\">67</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">Buffer</span> <span class=\"attribute\">68</span> <span class=\"attribute\">69</span> <span class=\"attribute\">0a</span>&gt;</span>\n</code></pre><h2 id=\"writable_streams_可写流\">writable streams 可写流</h2>\n<p>只需要使用 Writable._write() 即可创建 writable strearm 可写流：</p>\n<pre><code><span class=\"keyword\">var</span> Writable = <span class=\"built_in\">require</span>(<span class=\"string\">'stream'</span>).Writable;\n<span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> Writable();\nws._write = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(chunk, enc, callback)</span> </span>{\n    <span class=\"built_in\">console</span>.dir(chunk);\n    callback();\n};\nprocess.stdin.pipe(ws);\n</code></pre><p>将这段代码保存到 write0.js 中，然后执行它：</p>\n<pre><code>$ (<span class=\"keyword\">echo</span> hello; <span class=\"keyword\">sleep</span> <span class=\"number\">1</span>; <span class=\"keyword\">echo</span> world) | node write0.js \n</code></pre><p>将得到输出：</p>\n<pre><code>&lt;<span class=\"constant\">Buffer</span> <span class=\"number\">68</span> <span class=\"number\">65</span> <span class=\"number\">6</span>c <span class=\"number\">6</span>c <span class=\"number\">6</span>f 0a&gt;\n<span class=\"input\"><span class=\"prompt\">&lt;Buffer 77 6f 72 6c 64 0a&gt;</span> hello world    </span>\n</code></pre><p>第一个参数 <code>chunk</code> 表示将要写入的数据。</p>\n<p>第二个参数 <code>enc</code> 表示编码，如果 chunk 为字符串，编码类型则为字符串。</p>\n<p>除非我们在创建可写流时指定了 <code>Writable({ decodeStrings: false })</code>，否则数据将会被转化为 Buffer 类型。</p>\n<p>第三个参数 <code>callback</code> 表示回调函数。</p>\n<h2 id=\"使用_writable_stream_可写流\">使用 writable stream 可写流</h2>\n<p>直接使用 <code>.write()</code> 方法就即可使用可写流：</p>\n<pre><code>process.stdout.<span class=\"keyword\">write</span>(<span class=\"string\">'hello world \\n'</span>);\n</code></pre><p>我们可以将文件内容创建为可写流：</p>\n<pre><code>var fs = require(<span class=\"string\">'fs'</span>);\nvar <span class=\"keyword\">ws</span> = fs.createWriteStream(<span class=\"string\">'message.txt'</span>);\n<span class=\"keyword\">ws</span>.<span class=\"keyword\">write</span>(<span class=\"string\">'hello '</span>);\nsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n    <span class=\"keyword\">ws</span>.end(<span class=\"string\">'world \\n'</span>);\n}, <span class=\"number\">1000</span>);\n</code></pre><p>将这段代码保存到 writing1.js 中，然后执行它：</p>\n<pre><code><span class=\"variable\">$ </span>node writing1.js \n</code></pre><p>注意这里用 <code>ws.end()</code> 指明我们写入数据完毕，数据将被写入到 <code>message.txt</code> 中：</p>\n<pre><code>$ cat <span class=\"class\"><span class=\"keyword\">message</span>.<span class=\"title\">txt</span>\nhello world</span>\n</code></pre><h2 id=\"transform_转换\">transform 转换</h2>\n<p>Transform streams 即转换流，是用于转换输入为输出的可读/写的双工流。</p>\n<h2 id=\"duplex_双工\">duplex 双工</h2>\n<p>Duplex streams 即双工流，流的两端都可进行读或写：</p>\n<pre><code>A.<span class=\"keyword\">pipe</span>(B).<span class=\"keyword\">pipe</span>(A);\n</code></pre><h2 id=\"classic_streams_经典流\">classic streams 经典流</h2>\n<p>Classic streams 即经典流，最早出现在 node v0.4 中。</p>\n<p>当一个流注册了 <code>data</code> 监听函数时，就会转换到静电流模式，这时候可以使用旧的 API 对流进行操作。</p>\n<h3 id=\"classic_readable_streams_经典可读流\">classic readable streams 经典可读流</h3>\n<p>经典可读流只有 <code>data</code> 和 <code>end</code> 事件触发器，分别用来接收数据和停止接收数据。</p>\n<p><code>.pipe()</code> 通过判断 <code>stream.readable</code> 的值来检查一个经典流是否可读：</p>\n<pre><code><span class=\"keyword\">var</span> Stream = <span class=\"built_in\">require</span>(<span class=\"string\">'stream'</span>);\n<span class=\"keyword\">var</span> stream = <span class=\"keyword\">new</span> Stream;\nstream.readable = <span class=\"literal\">true</span>;\n<span class=\"keyword\">var</span> c = <span class=\"number\">64</span>;\n<span class=\"keyword\">var</span> iv = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">if</span> (++c &gt;= <span class=\"number\">75</span>) {\n        clearInterval(iv);\n        stream.emit(<span class=\"string\">'end'</span>);\n    }\n    <span class=\"keyword\">else</span> stream.emit(<span class=\"string\">'data'</span>, <span class=\"built_in\">String</span>.fromCharCode(c));\n}, <span class=\"number\">100</span>);\nstream.pipe(process.stdout);\n</code></pre><p>将这段代码保存到 classic0.js 中，然后执行它：</p>\n<pre><code><span class=\"variable\">$ </span>node classic<span class=\"number\">0</span>.js \n</code></pre><p>将得到输出：</p>\n<pre><code>ABCDEFGHIJ\n</code></pre><p>上面这段代码中的 <code>.emit</code> 用于触发 <code>data</code> 和 <code>end</code> 事件。</p>\n<p>为了从命令行中得到输入，我们使用 <code>on</code> 对这两个事件进行监听：</p>\n<pre><code>process.stdin.<span class=\"keyword\">on</span>(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(buf)</span> {</span>\n    console.<span class=\"built_in\">log</span>(buf);\n});\nprocess.stdin.<span class=\"keyword\">on</span>(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n    console.<span class=\"built_in\">log</span>(<span class=\"string\">'__END__'</span>);\n});\n</code></pre><p>将这段代码保存到 classic1.js 中，然后执行它：</p>\n<pre><code><span class=\"variable\">$ </span>node classic1.js \n</code></pre><p>我们接着输入 <code>hello world</code> 和 <code>hello xiaolai</code>将分别得到输出：</p>\n<pre><code>hello world\n&lt;Buffer <span class=\"number\">68</span> <span class=\"number\">65</span> <span class=\"number\">6</span>c <span class=\"number\">6</span>c <span class=\"number\">6f</span> <span class=\"number\">20</span> <span class=\"number\">77</span> <span class=\"number\">6f</span> <span class=\"number\">72</span> <span class=\"number\">6</span>c <span class=\"number\">64</span> <span class=\"number\">0</span>a&gt;\nhello xiaolai\n&lt;Buffer <span class=\"number\">68</span> <span class=\"number\">65</span> <span class=\"number\">6</span>c <span class=\"number\">6</span>c <span class=\"number\">6f</span> <span class=\"number\">20</span> <span class=\"number\">78</span> <span class=\"number\">69</span> <span class=\"number\">61</span> <span class=\"number\">6f</span> <span class=\"number\">6</span>c <span class=\"number\">61</span> <span class=\"number\">69</span> <span class=\"number\">0</span>a&gt;\n</code></pre><p>或者在运行 classic1.js 时就传入数据：</p>\n<pre><code>$ (<span class=\"keyword\">echo</span> hello; <span class=\"keyword\">sleep</span> <span class=\"number\">1</span>; <span class=\"keyword\">echo</span> world) | node classic1.js \n</code></pre><p>将得到输出：</p>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">Buffer</span> <span class=\"attribute\">68</span> <span class=\"attribute\">65</span> <span class=\"attribute\">6c</span> <span class=\"attribute\">6c</span> <span class=\"attribute\">6f</span> <span class=\"attribute\">0a</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">Buffer</span> <span class=\"attribute\">77</span> <span class=\"attribute\">6f</span> <span class=\"attribute\">72</span> <span class=\"attribute\">6c</span> <span class=\"attribute\">64</span> <span class=\"attribute\">0a</span>&gt;</span>\n__END__\n</code></pre><p>注意 <code>data</code> 和 <code>end</code> 事件我们可以不再使用了，毕竟这是老旧的 API 了。</p>\n<p>我们可以使用一些模块比如 <a href=\"https://www.npmjs.org/package/through\" target=\"_blank\" rel=\"external\">through</a> 来处理流：</p>\n<pre><code><span class=\"keyword\">var</span> through = <span class=\"built_in\">require</span>(<span class=\"string\">'through'</span>);\nprocess.stdin.pipe(through(write, end));\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span> <span class=\"params\">(buf)</span> </span>{\n    <span class=\"built_in\">console</span>.log(buf);\n}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">end</span> <span class=\"params\">()</span> </span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'__END__'</span>);\n}\n</code></pre><p>将这段代码保存到 through.js 中，然后执行它：</p>\n<pre><code>$ (<span class=\"keyword\">echo</span> hello; <span class=\"keyword\">sleep</span> <span class=\"number\">1</span>; <span class=\"keyword\">echo</span> world) | node through.js\n</code></pre><p>将得到输出：</p>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">Buffer</span> <span class=\"attribute\">68</span> <span class=\"attribute\">65</span> <span class=\"attribute\">6c</span> <span class=\"attribute\">6c</span> <span class=\"attribute\">6f</span> <span class=\"attribute\">0a</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">Buffer</span> <span class=\"attribute\">77</span> <span class=\"attribute\">6f</span> <span class=\"attribute\">72</span> <span class=\"attribute\">6c</span> <span class=\"attribute\">64</span> <span class=\"attribute\">0a</span>&gt;</span>\n__END__\n</code></pre><p>也可以使用 <a href=\"https://www.npmjs.org/package/concat-stream\" target=\"_blank\" rel=\"external\">concat-stream</a> 模块来进行操作：</p>\n<pre><code><span class=\"keyword\">var</span> concat = <span class=\"built_in\">require</span>(<span class=\"string\">'concat-stream'</span>);\nprocess.stdin.pipe(concat(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(body)</span> </span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(body));\n}));\n</code></pre><p>将这段代码保存到 concat-stream.js 中，然后执行它：</p>\n<pre><code>$ echo '{<span class=\"string\">\"hello\"</span>:<span class=\"string\">\"world\"</span>}' <span class=\"string\">| node concat-stream.js </span>\n</code></pre><p>将得到输出：</p>\n<pre><code><span class=\"rules\">{ <span class=\"rule\"><span class=\"attribute\">hello</span>:<span class=\"value\"> <span class=\"string\">'world'</span> </span></span></span>}\n</code></pre><p>经典的可读流具有 <code>.pause()</code> 和 <code>.resume()</code> 逻辑对暂停、恢复读取数据进行支持。</p>\n<p>如果我们要使用这些操作的话，最好通过 <a href=\"https://www.npmjs.org/package/through\" target=\"_blank\" rel=\"external\">through</a> 模块来完成。</p>\n<h3 id=\"classic_writable_streams_经典可写流\">classic writable streams 经典可写流</h3>\n<p>经典可写流很简单，只需要定义 <code>.write(buf)</code> <code>.end(buf)</code> <code>.destroy()</code> 即可。</p>\n<p>注意 <code>.end(buf)</code> 可能不包含参数，即 相当于 <code>stream.write(buf); stream.end()</code> 指明写入流完毕。</p>\n<h2 id=\"阅读更多\">阅读更多</h2>\n<ul>\n<li><a href=\"http://nodejs.org/docs/latest/api/stream.html#stream_stream\" target=\"_blank\" rel=\"external\">流的官方文档</a></li>\n<li>使用 <a href=\"https://npmjs.org/package/readable-stream\" target=\"_blank\" rel=\"external\">readable-stream</a> 模块兼容 v0.8 及以下版本的 node，只需要用 <code>require(&#39;readable-stream&#39;)</code> 取代 <code>require(&#39;stream&#39;)</code> 来操作即可。</li>\n</ul>\n<h2 id=\"built-in_streams_内置的流\">built-in streams 内置的流</h2>\n<p>这些流是 node 中内置的流。</p>\n<p>！！！未完待续 <a href=\"https://github.com/substack/stream-handbook#built-in-streams\" target=\"_blank\" rel=\"external\">https://github.com/substack/stream-handbook#built-in-streams</a></p>\n<h3 id=\"参考链接\">参考链接</h3>\n<ul>\n<li><p><a href=\"http://nodejs.org/api/stream.html#stream_readable_read_size_1\" target=\"_blank\" rel=\"external\">Implement readable._read(size), but do NOT call it directly</a></p>\n</li>\n<li><p><a href=\"http://nodejs.org/api/stream.html#stream_readable_push_chunk_encoding\" target=\"_blank\" rel=\"external\">readable.push(chunk, [encoding]) should be called by Readable implementors, NOT by consumers of Readable streams.</a></p>\n</li>\n</ul>\n","source":"_posts/Nodejs-的-stream-使用指南.md","raw":"title: Nodejs 的 stream 使用指南\ncategories:\n  - Node\ndate: 2014-08-28 09:58:22\ntags:\n  - stream\n  - through\n  - concat-stream\n  - readable\n  - writeable\n\n---\n\n# 使用 Stream \n\n当我们读取一个文件内容时，可能会这么写：\n    \n    var http = require('http');\n    var fs = require('fs');\n    var server = http.createServer(function (req, res) {\n        fs.readFile(__dirname + '/data.txt', function (err, data) {\n            res.end(data);\n        });\n    });\n    server.listen(8000);\n\n当这个文件 data.txt 非常大时，不仅会占满内存，而且对于网络不好的用户而言体验将非常差。\n\n\n好在 req 和 res 都是 Stream 对象，我们可以使用 Stream 的方式来写代码：\n\n    var http = require('http');\n    var fs = require('fs');\n    var server = http.createServer(function (req, res) {\n        var stream = fs.createReadStream(__dirname + '/data.txt');\n        stream.pipe(res);\n    });\n    server.listen(8000);\n\n我们使用 fs.createReadStream 创建了一个 Stream 对象，.pipe() 方法会监听对应的 `data` 和 `end` 事件。\n\n使用 Stream 的好处在于，我们将 data.txt 分段（chunk）传输到客户端，减轻了网络带宽的压力。\n\n\n<!--more-->\n\n# 使用 oppressor 压缩数据\n\n如果客户端支持 gzip 或 deflate 压缩的话，我们就可以使用 oppressor 这个模块来对数据进行压缩后传输：\n\n    var http = require('http');\n    var fs = require('fs');\n    var oppressor = require('operessor');\n    var server = http.createServer(function (req, res) {\n        var stream = fs.createReadStream(__dirname + '/data.txt');\n        stream.pipe(oppressor(req)).pipe(res);\n    });\n    server.listen(8000);\n\n# 理解 Stream 的基础知识\n\n## pipe 管道\n\n我们可以这么理解 pipe:\n    \n    src.pipe(A).pipe(B).pipe(dst);            \n\n等价于：\n\n    src.pipe(A);\n    A.pipe(B);\n    B.pipe(dst);\n\n即把 src 这个输入交给 A 进行处理后，输出到 B处理，然后把结果输出到 dst。\n\n# readable streams 可读流\n\n在上述代码中，src 就是一个 readable stream 即可读流。\n\n让我们来创建一个可读流：\n\n    var Readable = require('stream').Readable;\n    var rs = new Readable;\n    rs.push('hello ');\n    rs.push('world \\n');\n    rs.push(null);\n    rs.pipe(process.stdout);\n\n将这段代码保存到 read0.js 中，然后执行它：\n\n    $ node read0.js\n\n将得到输出：\n\n    hello world\n\n注意 `rs.push(null)` 用于指明我们对这个可读流写入数据完毕。\n\n\n在发出 `rs.push(null)` 指明写入数据完毕之前，我们可以使用 `rs.push()` 往可读流中继续输入数据。\n\n而有时候我们希望根据特定条件完成可读流的输入，这时候就可以改写 Readable._read() 方法。\n\n    var Readable = require('stream').Readable;\n    var rs = new Readable;\n    var c = 97;\n    rs._read = function () {\n        rs.push(String.fromCharCode(c++));\n        if (c > 'z'.charCodeAt(0)) {\n            rs.push(null);\n        }\n    };\n    rs.pipe(process.stdout);\n\nrs._read() 将从 `a` 读到 `z`，然后才停止对可读流的写入。\n\n将这段代码保存到 read1.js 中，然后执行它：\n\n    $ node read1.js\n\n将得到输出：\n\n    abcdefghijklmnopqrstuvwxyz\n\n注意我们改写了 rs._read() 方法而并没有调用它，因为当条件 `c > 'z'.charCodeAt(0)` 成立时，我们使用 `rs.push(null)` 指明可读流写入数据完毕。\n\n为了证明输出 `a-z` 的过程中调用了 `rs._read()` 多次，我们编写：\n\n    var Readable = require('stream').Readable;\n    var rs = new Readable;\n    var c = 97 - 1;\n    rs._read = function () {\n        if (c >= 'z'.charCodeAt(0)) {\n            return rs.push(null);\n        }\n        setTimeout(function () {\n            rs.push(String.fromCharCode(++c));\n        }, 100);\n    };\n    rs.pipe(process.stdout);\n    process.on('exit', function () {\n        console.error('\\n_read() called ' + (c - 97) + ' times');\n    });\n    process.stdout.on('error', process.exit);\n\n将这段代码保存到 read2.js 中，然后执行它：\n\n    $ node read2.js\n\n将得到输出：\n\n    abcdefghijklmnopqrstuvwxyz\n    _read() called 25 times\n\n而如果我们执行：\n\n    $ node read2.js | head -c5\n\n这里的 `| head -c5` 为 *nix 命令，表示只输出 5 个字节的数据，这时候将得到输出：\n\n    abcde\n    _read() called 5 times\n\n有了 `| head -c5` 这个参数，当输出了 5 个字节的数据后，操作系统发出 SIFPIPE 信号，中断进程，process.stdout 产生错误 EPIPE。\n\n接着 `process.stdout` 捕获到错误，触发 `exit` 事件，所以这时候记录下 `rs._read()` 的执行次数为 5。\n\n\n## 使用 readable stream 可读流\n\n直接使用可读流非常简单：\n\n    process.stdin.on('readable', function () {\n        var buf = process.stdin.read();\n        console.dir(buf);\n    });\n\n将这段代码保存到 consume0.js 中，然后执行它：\n\n    $ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume0.js \n\n我们在命令行中输出一些数据当做 consume0.js 的输入，将得到输出：\n\n    <Buffer 61 62 63 0a>\n    <Buffer 64 65 66 0a>\n    <Buffer 67 68 69 0a>\n    null\n\n当 `process.stdin` 监听到有数据传入时，我们就可以使用 `process.stdin.read()` 读取到这些数据。\n\n我们看到了输出中有 `null` 是因为当数据读取完毕时，`process.stdin.read()` 将返回 `null`。\n\n而如果我们给 `process.std.read(n)` 传入了参数 `n` 时，将得到 n 字节的数据输出：\n\n    process.stdin.on('readable', function () {\n        var buf = process.stdin.read(3);\n        console.dir(buf);\n    });\n\n将这段代码保存到 consume1.js 中，然后执行它：\n\n    $ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume1.js \n   \n我们在命令行中输出一些数据当做 consume1.js 的输入，但给 `process.stdin.read(3)` 传入了参数数字 3，将得到输出：\n\n    <Buffer 61 62 63>\n    <Buffer 0a 64 65>\n    <Buffer 66 0a 67>\n\n注意我们并没有得到 `abc` `def` `ghi` 对应的完整输出，因为我们限制了读取的字节数为 3，所以剩下的数据保存在了内存中。\n\n我们能需要读出剩余的数据，改写代码为：\n\n    process.stdin.on('readable', function () {\n        var buf = process.stdin.read(3);\n        console.dir(buf);\n        process.stdin.read(0);\n    });\n\n将这段代码保存到 consume2.js 中，然后执行它：\n\n    $ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume2.js \n   \n我们在命令行中输出一些数据当做 consume2.js 的输入，读完 3 个字节数据后，继续读取。将得到输出：\n\n    <Buffer 61 62 63>\n    <Buffer 0a 64 65>\n    <Buffer 66 0a 67>\n    <Buffer 68 69 0a>\n\n## writable streams 可写流\n\n只需要使用 Writable._write() 即可创建 writable strearm 可写流：\n\n    var Writable = require('stream').Writable;\n    var ws = new Writable();\n    ws._write = function (chunk, enc, callback) {\n        console.dir(chunk);\n        callback();\n    };\n    process.stdin.pipe(ws);\n\n将这段代码保存到 write0.js 中，然后执行它：\n\n    $ (echo hello; sleep 1; echo world) | node write0.js \n\n将得到输出：\n    \n    <Buffer 68 65 6c 6c 6f 0a>\n    <Buffer 77 6f 72 6c 64 0a> hello world    \n\n第一个参数 `chunk` 表示将要写入的数据。\n\n第二个参数 `enc` 表示编码，如果 chunk 为字符串，编码类型则为字符串。\n\n除非我们在创建可写流时指定了 `Writable({ decodeStrings: false })`，否则数据将会被转化为 Buffer 类型。\n\n第三个参数 `callback` 表示回调函数。\n\n## 使用 writable stream 可写流\n\n直接使用 `.write()` 方法就即可使用可写流：\n\n    process.stdout.write('hello world \\n');\n\n我们可以将文件内容创建为可写流：\n\n    var fs = require('fs');\n    var ws = fs.createWriteStream('message.txt');\n    ws.write('hello ');\n    setTimeout(function () {\n        ws.end('world \\n');\n    }, 1000);\n\n将这段代码保存到 writing1.js 中，然后执行它：\n\n    $ node writing1.js \n\n注意这里用 `ws.end()` 指明我们写入数据完毕，数据将被写入到 `message.txt` 中：\n    \n    $ cat message.txt\n    hello world\n\n## transform 转换\n\nTransform streams 即转换流，是用于转换输入为输出的可读/写的双工流。\n\n## duplex 双工\n\nDuplex streams 即双工流，流的两端都可进行读或写：\n\n    A.pipe(B).pipe(A);\n\n## classic streams 经典流\n\nClassic streams 即经典流，最早出现在 node v0.4 中。\n\n当一个流注册了 `data` 监听函数时，就会转换到静电流模式，这时候可以使用旧的 API 对流进行操作。\n\n### classic readable streams 经典可读流\n\n经典可读流只有 `data` 和 `end` 事件触发器，分别用来接收数据和停止接收数据。\n\n`.pipe()` 通过判断 `stream.readable` 的值来检查一个经典流是否可读：\n\n    var Stream = require('stream');\n    var stream = new Stream;\n    stream.readable = true;\n    var c = 64;\n    var iv = setInterval(function () {\n        if (++c >= 75) {\n            clearInterval(iv);\n            stream.emit('end');\n        }\n        else stream.emit('data', String.fromCharCode(c));\n    }, 100);\n    stream.pipe(process.stdout);\n\n将这段代码保存到 classic0.js 中，然后执行它：\n\n    $ node classic0.js \n   \n将得到输出：\n\n    ABCDEFGHIJ\n\n上面这段代码中的 `.emit` 用于触发 `data` 和 `end` 事件。\n\n为了从命令行中得到输入，我们使用 `on` 对这两个事件进行监听：\n\n    process.stdin.on('data', function (buf) {\n        console.log(buf);\n    });\n    process.stdin.on('end', function () {\n        console.log('__END__');\n    });\n\n将这段代码保存到 classic1.js 中，然后执行它：\n\n    $ node classic1.js \n   \n我们接着输入 `hello world` 和 `hello xiaolai`将分别得到输出：\n\n    hello world\n    <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64 0a>\n    hello xiaolai\n    <Buffer 68 65 6c 6c 6f 20 78 69 61 6f 6c 61 69 0a>\n\n或者在运行 classic1.js 时就传入数据：\n\n    $ (echo hello; sleep 1; echo world) | node classic1.js \n\n将得到输出：\n\n    <Buffer 68 65 6c 6c 6f 0a>\n    <Buffer 77 6f 72 6c 64 0a>\n    __END__\n\n\n注意 `data` 和 `end` 事件我们可以不再使用了，毕竟这是老旧的 API 了。\n\n我们可以使用一些模块比如 [through](https://www.npmjs.org/package/through) 来处理流：\n\n    var through = require('through');\n    process.stdin.pipe(through(write, end));\n    function write (buf) {\n        console.log(buf);\n    }\n    function end () {\n        console.log('__END__');\n    }\n\n将这段代码保存到 through.js 中，然后执行它：\n\n    $ (echo hello; sleep 1; echo world) | node through.js\n   \n将得到输出：\n    \n    <Buffer 68 65 6c 6c 6f 0a>\n    <Buffer 77 6f 72 6c 64 0a>\n    __END__\n\n也可以使用 [concat-stream](https://www.npmjs.org/package/concat-stream) 模块来进行操作：\n\n    var concat = require('concat-stream');\n    process.stdin.pipe(concat(function (body) {\n        console.log(JSON.parse(body));\n    }));\n\n将这段代码保存到 concat-stream.js 中，然后执行它：\n\n    $ echo '{\"hello\":\"world\"}' | node concat-stream.js \n\n将得到输出：\n\n    { hello: 'world' }\n\n经典的可读流具有 `.pause()` 和 `.resume()` 逻辑对暂停、恢复读取数据进行支持。\n\n如果我们要使用这些操作的话，最好通过 [through](https://www.npmjs.org/package/through) 模块来完成。\n\n### classic writable streams 经典可写流\n\n经典可写流很简单，只需要定义 `.write(buf)` `.end(buf)` `.destroy()` 即可。\n\n注意 `.end(buf)` 可能不包含参数，即 相当于 `stream.write(buf); stream.end()` 指明写入流完毕。\n\n## 阅读更多\n\n- [流的官方文档](http://nodejs.org/docs/latest/api/stream.html#stream_stream)\n- 使用 [readable-stream](https://npmjs.org/package/readable-stream) 模块兼容 v0.8 及以下版本的 node，只需要用 `require('readable-stream')` 取代 `require('stream')` 来操作即可。\n\n## built-in streams 内置的流\n\n这些流是 node 中内置的流。\n\n！！！未完待续 https://github.com/substack/stream-handbook#built-in-streams\n\n\n\n\n\n\n\n\n\n\n### 参考链接\n\n- [Implement readable._read(size), but do NOT call it directly](http://nodejs.org/api/stream.html#stream_readable_read_size_1)\n\n- [readable.push(chunk, [encoding]) should be called by Readable implementors, NOT by consumers of Readable streams.](http://nodejs.org/api/stream.html#stream_readable_push_chunk_encoding)\n\n\n\n   \n\n\n","slug":"Nodejs-的-stream-使用指南","updated":1418908898000,"excerpt":"<h1 id=\"使用_Stream\">使用 Stream</h1>\n<p>当我们读取一个文件内容时，可能会这么写：</p>\n<pre><code><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);\n<span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);\n<span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n    fs.readFile(__dirname + <span class=\"string\">'/data.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, data)</span> </span>{\n        res.end(data);\n    });\n});\nserver.listen(<span class=\"number\">8000</span>);\n</code></pre><p>当这个文件 data.txt 非常大时，不仅会占满内存，而且对于网络不好的用户而言体验将非常差。</p>\n<p>好在 req 和 res 都是 Stream 对象，我们可以使用 Stream 的方式来写代码：</p>\n<pre><code><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);\n<span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);\n<span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n    <span class=\"keyword\">var</span> stream = fs.createReadStream(__dirname + <span class=\"string\">'/data.txt'</span>);\n    stream.pipe(res);\n});\nserver.listen(<span class=\"number\">8000</span>);\n</code></pre><p>我们使用 fs.createReadStream 创建了一个 Stream 对象，.pipe() 方法会监听对应的 <code>data</code> 和 <code>end</code> 事件。</p>\n<p>使用 Stream 的好处在于，我们将 data.txt 分段（chunk）传输到客户端，减轻了网络带宽的压力。</p>\n","_id":"oyi1ibz91pxa1nk0","comments":true,"layout":"post","photos":[],"link":""},{"title":"PhoneGap入门-用Ionic+Angular创建Hybrid应用","tags":["jh2bs60oxtltv09u"],"id":593,"categories":["4zflw43es4sy619n"],"date":1393607049000,"content":"<p>使用HTML5制作移动应用，寒假前确定了方案《<a href=\"http://www.laispace.com/?p=551\" target=\"_blank\" rel=\"external\">HTML5移动开发方案探索</a>》，是时候开始实施了！</p>\n<p>这是第一次做HTML5移动应用的开发，Google了不少发现坑不少，中文文档也不多，只得自己好好摸索多查官方文档了。</p>\n<p>处女PhoneGap应用的笔记先贴在这里，项目完工再好好做个总结吧：）</p>\n<a id=\"more\"></a>\n\n\n<p>选择方案：</p>\n<p>PhoneGap + Ionic + AngularJS</p>\n<p>开发环境：</p>\n<p>操作系统：mac OS10.9</p>\n<p>$ node -v</p>\n<p>v0.10.26</p>\n<p>$ npm -v</p>\n<p>1.4.3</p>\n<p>$ phonegap -v    # 安装后才查看</p>\n<p>3.3.0-0.19.6</p>\n<p>$ cordova -v</p>\n<p>3.4.0-0.1.0</p>\n<p>第一步：安装 command_line_tools</p>\n<p>第二步：安装 phonegap和cordova</p>\n<h1 id=\"第一次安装失败，将nodejs更新到最新版后才成功\">第一次安装失败，将nodejs更新到最新版后才成功</h1>\n<p>$ sudo npm install -g phonegap<br>$ sudo npm install -g cordova</p>\n<p>第三步：使用cordova创建项目<br>$ cordova create hello com.example.hello “HelloWorld”<br>$ cd hello</p>\n<h1 id=\"添加ios开发平台\">添加ios开发平台</h1>\n<p>$ cordova platform add iOS</p>\n<h1 id=\"初始化\">初始化</h1>\n<p>$ cordova prepare              # 或 “cordova build”</p>\n<p>第四步：测试模拟器</p>\n<p>Xcode打开文件 hello/platforms/ios/hello.xcodeproj</p>\n<p>文件夹  hello/www/即是存放html/css/js的地方。</p>\n<p>修改文件 hello/www/index.html，添加 &lt;h1&gt;Hello 赖小赖&lt;/h1&gt;</p>\n<p>点击Xcode左上角的run，即打开了模拟器，就能看到 『Hello 赖小赖』啦！</p>\n<p>第五步：编写www目录下的代码</p>\n<p>【未完待续…】</p>\n<p>———- 我是风骚的分隔符 ———-</p>\n<p>都说了phoneGap开发的坑太多，所以我得谨慎查多点资料后确立一个终极方案。</p>\n<p>找了好久，发现Ionic这个很酷的框架（项目做出来再对它做个介绍）。</p>\n<p>Ionic的UI配合AngularJS的MVC功能，应该能省不少事，所以我就想做个尝试。</p>\n<p>开始吧！</p>\n<p>第一步：保证已安装cordova</p>\n<p>$ npm install -g cordova</p>\n<p>第二步：安装ionic</p>\n<p>$ sudo npm install -g ionic</p>\n<p>第三步：使用ionic创建种子项目</p>\n<p>$ ionic start ionicApp</p>\n<p>第四步：保证已安装 ios-sim 和 ios-deploy</p>\n<p>$ sudo npm install -g ios-sim</p>\n<p>$ sudo npm install -g ios-deploy</p>\n<p>第五步：添加ios开发平台</p>\n<p>$ cd ionicApp</p>\n<p>$ ionic platform ios</p>\n<p>第六步：启动模拟器</p>\n<p>$ ionic emulate ios</p>\n<p>$ ionic run ios</p>\n<p>酷！一个IOS7.0.3版本的种子界面就生成了：</p>\n<p><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/iOS-Simulator-Screen-shot-Mar-1-2014-11.29.27-AM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/iOS-Simulator-Screen-shot-Mar-1-2014-11.29.27-AM.png\" alt=\"\" title=\"iOS Simulator Screen shot Mar 1, 2014, 11.29.27 AM\"></a></p>\n<p>第七步：使用模拟器调试代码</p>\n<p>每次更新完代码，想看到实时代码变化的话，可以重启模拟器：</p>\n<p>$  ionic emulate ios</p>\n<p>但是这样非常繁琐耗时，一点都不酷！</p>\n<p>调试：使用浏览器调试代码</p>\n<p>打开python自带的服务器（提前装好python）：</p>\n<pre><code>$ <span class=\"keyword\">python</span> -m SimpleHTTPServer <span class=\"number\">8000</span><span class=\"string\">`\n`</span>然后访问 http:<span class=\"comment\">//localhost:8000 就能直接用浏览器来调试啦。`</span>\n或者：使用chrome或safari的mobile调试功能：\nhttp:<span class=\"comment\">//moduscreate.com/enable-remote-web-inspector-in-ios-6/</span>\nhttps:<span class=\"comment\">//developers.google.com/chrome-developer-tools/docs/remote-debugging</span>\n或者：使用weinre进行远程调试：\nhttps:<span class=\"comment\">//developer.mozilla.org/en-US/Firefox_OS/Platform/Gaia/Weinre_As_Remote_Debugger&lt;/pre&gt;</span>\n【未完待续...】\n\n第X步：真机测试之android\n\n# mac下安装android SDK\n\nhttp:<span class=\"comment\">//developer.android.com/sdk/index.html，解压缩adt-bundle-mac-x86_64-20131030.zip到/Applications文件夹下</span>\n\n装好后，USB连接android，执行命令：\n&lt;pre&gt;<span class=\"string\">`$ cordova run android`</span>\n<span class=\"string\">`即可在android真机上测试</span>\n</code></pre><p>第X步：发布应用之android</p>\n<p>发布前先关闭开发模式：</p>\n<p><pre><code># 关闭ios开发模式</code><br><code>$ cordova plugin rm org.apache.cordova.console</code><br><code># 关闭android开发模式</code><br><code>修改 ``platforms/android目录下的</code>AndroidManifest.xml文件，<br>将其中的android:debuggable=”true”改为”false”<br><code># 生成应用</code><br><code>$ cordova build --release android</code><br><code>提示ant未安装，则使用HomeBrew安装ant:</code><br><code>$ brew install ant</code><br><code>提示android SDK未加入环境，则加入:</code><br></pre></p>\n<h1 id=\"增加SDK到环境\">增加SDK到环境</h1>\n<p>export PATH=${PATH}:/Applications/adt-bundle-mac-x86_64-20131030/sdk/platform-tools:/Applications/adt-bundle-mac-x86_64-20131030/sdk/tools</p>\n<p>重新生成：</p>\n<p>$ cordova build —release android</p>\n<p>成功后会在 platform/android/ant-build/ 文件夹下找到StarterApp-release-unsigned.apk</p>\n<h1 id=\"生成密钥\">生成密钥</h1>\n<p><pre><code>$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000</code><br><span style=\"font-family: monospace;\">成功后在当前目录下能找到文件 my-release-key.keystore</span><br><span style=\"font-family: monospace;\"># 使用密钥对应用进行签名</span></pre></p>\n<p><code>$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore StarterApp-release-unsigned.apk alias_name</code><br><code># 优化应用</code></p>\n<p><code>$ zipalign -v 4 ``StarterApp-release-unsigned.apk</code>StarterApp.apk<br><code>成功后在当前目录下找到文件</code>StarterApp.apk 就可以直接安装到手机上了。<br>附上小赖的第一个HTML5 Hybrid应用android版截图：<br><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/1.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/1-614x1024.jpg\" alt=\"\" title=\"1\"></a><br><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/2.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/2-614x1024.jpg\" alt=\"\" title=\"2\"></a><br><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/3.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/3-614x1024.jpg\" alt=\"\" title=\"3\"></a><br>安装到手机上体验一番后感觉流畅，但这还只是静态页面。<br>袋继续完善它后，再做评估吧。</p>\n<h1 id=\"IOS的真机测试【待补充】\">IOS的真机测试【待补充】</h1>\n<h1 id=\"发布到App_store_【待补充】\">发布到App store 【待补充】</h1>\n<p><div></div><br>参考链接：</p>\n<p>(Angular.js + jQuery Mobile + PhoneGap)[<a href=\"http://www.adobe.com/cn/devnet/html5/articles/angular-jquery-phonegap.html\" target=\"_blank\" rel=\"external\">http://www.adobe.com/cn/devnet/html5/articles/angular-jquery-phonegap.html</a>]</p>\n<p>(Ionic 官网)[<a href=\"http://ionicframework.com/\" target=\"_blank\" rel=\"external\">http://ionicframework.com/</a>]</p>\n","source":"_posts/PhoneGap入门-用Ionic+Angular创建Hybrid应用.md","raw":"title: PhoneGap入门-用Ionic+Angular创建Hybrid应用\ntags:\n  - Phonegap\nid: 593\ncategories:\n  - Hybrid\ndate: 2014-03-01 01:04:09\n\n---\n\n使用HTML5制作移动应用，寒假前确定了方案《[HTML5移动开发方案探索](http://www.laispace.com/?p=551)》，是时候开始实施了！\n\n这是第一次做HTML5移动应用的开发，Google了不少发现坑不少，中文文档也不多，只得自己好好摸索多查官方文档了。\n\n处女PhoneGap应用的笔记先贴在这里，项目完工再好好做个总结吧：）\n\n<!-- more -->\n\n\n选择方案：\n\nPhoneGap + Ionic + AngularJS\n\n开发环境：\n\n操作系统：mac OS10.9\n\n$ node -v\n\nv0.10.26\n\n$ npm -v\n\n1.4.3\n\n$ phonegap -v    # 安装后才查看\n\n3.3.0-0.19.6\n\n$ cordova -v\n\n3.4.0-0.1.0\n\n第一步：安装 command_line_tools\n\n第二步：安装 phonegap和cordova\n# 第一次安装失败，将nodejs更新到最新版后才成功\n$ sudo npm install -g phonegap\n$ sudo npm install -g cordova\n\n第三步：使用cordova创建项目\n$ cordova create hello com.example.hello \"HelloWorld\"\n$ cd hello\n# 添加ios开发平台\n$ cordova platform add iOS\n# 初始化\n$ cordova prepare              # 或 \"cordova build”\n\n第四步：测试模拟器\n\nXcode打开文件 hello/platforms/ios/hello.xcodeproj\n\n文件夹  hello/www/即是存放html/css/js的地方。\n\n修改文件 hello/www/index.html，添加 &lt;h1&gt;Hello 赖小赖&lt;/h1&gt;\n\n点击Xcode左上角的run，即打开了模拟器，就能看到 『Hello 赖小赖』啦！\n\n第五步：编写www目录下的代码\n\n【未完待续...】\n\n------- 我是风骚的分隔符 -------\n\n都说了phoneGap开发的坑太多，所以我得谨慎查多点资料后确立一个终极方案。\n\n找了好久，发现Ionic这个很酷的框架（项目做出来再对它做个介绍）。\n\nIonic的UI配合AngularJS的MVC功能，应该能省不少事，所以我就想做个尝试。\n\n开始吧！\n\n第一步：保证已安装cordova\n\n$ npm install -g cordova\n\n第二步：安装ionic\n\n$ sudo npm install -g ionic\n\n第三步：使用ionic创建种子项目\n\n$ ionic start ionicApp\n\n第四步：保证已安装 ios-sim 和 ios-deploy\n\n$ sudo npm install -g ios-sim\n\n$ sudo npm install -g ios-deploy\n\n第五步：添加ios开发平台\n\n$ cd ionicApp\n\n$ ionic platform ios\n\n第六步：启动模拟器\n\n$ ionic emulate ios\n\n$ ionic run ios\n\n酷！一个IOS7.0.3版本的种子界面就生成了：\n\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/iOS-Simulator-Screen-shot-Mar-1-2014-11.29.27-AM.png \"iOS Simulator Screen shot Mar 1, 2014, 11.29.27 AM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/iOS-Simulator-Screen-shot-Mar-1-2014-11.29.27-AM.png)\n\n第七步：使用模拟器调试代码\n\n每次更新完代码，想看到实时代码变化的话，可以重启模拟器：\n\n$  ionic emulate ios\n\n但是这样非常繁琐耗时，一点都不酷！\n\n调试：使用浏览器调试代码\n\n打开python自带的服务器（提前装好python）：\n\n    $ python -m SimpleHTTPServer 8000`\n    `然后访问 http://localhost:8000 就能直接用浏览器来调试啦。`\n    或者：使用chrome或safari的mobile调试功能：\n    http://moduscreate.com/enable-remote-web-inspector-in-ios-6/\n    https://developers.google.com/chrome-developer-tools/docs/remote-debugging\n    或者：使用weinre进行远程调试：\n    https://developer.mozilla.org/en-US/Firefox_OS/Platform/Gaia/Weinre_As_Remote_Debugger</pre>\n    【未完待续...】\n\n    第X步：真机测试之android\n\n    # mac下安装android SDK\n\n    http://developer.android.com/sdk/index.html，解压缩adt-bundle-mac-x86_64-20131030.zip到/Applications文件夹下\n\n    装好后，USB连接android，执行命令：\n    <pre>`$ cordova run android`\n    `即可在android真机上测试\n\n第X步：发布应用之android\n\n发布前先关闭开发模式：\n<pre>`# 关闭ios开发模式`\n`$ cordova plugin rm org.apache.cordova.console `\n`# 关闭android开发模式`\n`修改 ``platforms/android目录下的`AndroidManifest.xml文件，\n将其中的android:debuggable=\"true\"改为\"false\"\n`# 生成应用`\n`$ cordova build --release android`\n`提示ant未安装，则使用HomeBrew安装ant:`\n`$ brew install ant`\n`提示android SDK未加入环境，则加入:`\n</pre>\n# 增加SDK到环境\nexport PATH=${PATH}:/Applications/adt-bundle-mac-x86_64-20131030/sdk/platform-tools:/Applications/adt-bundle-mac-x86_64-20131030/sdk/tools\n\n重新生成：\n\n$ cordova build --release android\n\n成功后会在 platform/android/ant-build/ 文件夹下找到StarterApp-release-unsigned.apk\n\n# 生成密钥\n<pre>`$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000`\n<span style=\"font-family: monospace;\">成功后在当前目录下能找到文件 my-release-key.keystore</span>\n<span style=\"font-family: monospace;\"># 使用密钥对应用进行签名</span>\n\n`$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore StarterApp-release-unsigned.apk alias_name`\n`# 优化应用`\n\n`$ zipalign -v 4 ``StarterApp-release-unsigned.apk `StarterApp.apk\n`成功后在当前目录下找到文件 `StarterApp.apk 就可以直接安装到手机上了。\n附上小赖的第一个HTML5 Hybrid应用android版截图：\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/1-614x1024.jpg \"1\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/1.jpg)\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/2-614x1024.jpg \"2\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/2.jpg)\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/3-614x1024.jpg \"3\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2014/03/3.jpg)\n安装到手机上体验一番后感觉流畅，但这还只是静态页面。\n袋继续完善它后，再做评估吧。\n\n# IOS的真机测试【待补充】\n\n# 发布到App store 【待补充】</pre>\n<div></div>\n参考链接：\n\n(Angular.js + jQuery Mobile + PhoneGap)[http://www.adobe.com/cn/devnet/html5/articles/angular-jquery-phonegap.html]\n\n(Ionic 官网)[http://ionicframework.com/]","slug":"PhoneGap入门-用Ionic+Angular创建Hybrid应用","updated":1418908898000,"excerpt":"<p>使用HTML5制作移动应用，寒假前确定了方案《<a href=\"http://www.laispace.com/?p=551\" target=\"_blank\" rel=\"external\">HTML5移动开发方案探索</a>》，是时候开始实施了！</p>\n<p>这是第一次做HTML5移动应用的开发，Google了不少发现坑不少，中文文档也不多，只得自己好好摸索多查官方文档了。</p>\n<p>处女PhoneGap应用的笔记先贴在这里，项目完工再好好做个总结吧：）</p>\n","_id":"203h2lih97h8ztiz","comments":true,"layout":"post","photos":[],"link":""},{"title":"Sass 学习笔记","categories":["f1q8dl6bbauvoh8x"],"date":1407922849000,"tags":[],"content":"<h1 id=\"安装_Sass\">安装 Sass</h1>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"char\">$ </span>gem install sass</div><div class=\"line\">// 或</div><div class=\"line\"><span class=\"char\">$ </span>sudo gem install sass </div><div class=\"line\"></div><div class=\"line\">// 查看 sass 版本</div><div class=\"line\"><span class=\"char\">$ </span>sass -v</div></pre></td></tr></table></figure>\n\n<h1 id=\"快速入门_sass_语法\">快速入门 sass 语法</h1>\n<h2 id=\"Variables_|_变量\">Variables | 变量</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// test.scss</span></div><div class=\"line\"><span class=\"variable\">$lai-font</span><span class=\"value\">: Roboto, sans-serif;</span></div><div class=\"line\"><span class=\"variable\">$lai-color</span><span class=\"value\">: <span class=\"hexcolor\">#eee</span>;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">body</span> {</div><div class=\"line\">  <span class=\"attribute\">color</span><span class=\"value\">: <span class=\"variable\">$lai-color</span>;</span></div><div class=\"line\">  <span class=\"attribute\">font-family</span><span class=\"value\">: <span class=\"variable\">$lai-font</span>;</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"Nesting_|_嵌套\">Nesting | 嵌套</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">nav</span> {</div><div class=\"line\">  <span class=\"tag\">ul</span> {</div><div class=\"line\">    <span class=\"attribute\">margin</span><span class=\"value\">: <span class=\"number\">0</span> auto;</span></div><div class=\"line\">    <span class=\"attribute\">padding</span><span class=\"value\">: <span class=\"number\">0</span>;</span></div><div class=\"line\">    <span class=\"attribute\">list-style</span><span class=\"value\">: <span class=\"number\">0</span>;</span></div><div class=\"line\">  }</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">li</span> {</div><div class=\"line\">    <span class=\"attribute\">display</span><span class=\"value\">: inline-block;</span></div><div class=\"line\">  }</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">a</span> {</div><div class=\"line\">    <span class=\"attribute\">display</span><span class=\"value\">: block;</span></div><div class=\"line\">    <span class=\"attribute\">padding</span><span class=\"value\">: <span class=\"number\">5px</span> <span class=\"number\">10px</span>;</span></div><div class=\"line\">    <span class=\"attribute\">text-decoration</span><span class=\"value\">: none;</span></div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"Partials_|_模板\">Partials | 模板</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// _reset.scss</span></div><div class=\"line\"><span class=\"tag\">html</span>,</div><div class=\"line\"><span class=\"tag\">body</span>,</div><div class=\"line\"><span class=\"tag\">ul</span>,</div><div class=\"line\"><span class=\"tag\">ol</span> {</div><div class=\"line\">  <span class=\"attribute\">margin</span><span class=\"value\">: <span class=\"number\">0</span>;</span></div><div class=\"line\">  <span class=\"attribute\">padding</span><span class=\"value\">: <span class=\"number\">0</span>;</span></div><div class=\"line\"></div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">// 使用 partial</span></div><div class=\"line\"><span class=\"comment\">// base.scss</span></div><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">import</span> <span class=\"string\">'reset'</span><span class=\"preprocessor\"></span></span></div><div class=\"line\">body {</div><div class=\"line\">  backgrount<span class=\"value\">: <span class=\"hexcolor\">#333</span>;</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"Mixins_|_混入\">Mixins | 混入</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">mixin</span><span class=\"preprocessor\"> border-radius</span>(<span class=\"variable\">$radius</span>) {</span></div><div class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span><span class=\"value\">: <span class=\"variable\">$radius</span>;</span></div><div class=\"line\">     -moz-<span class=\"attribute\">border-radius</span><span class=\"value\">: <span class=\"variable\">$radius</span>;</span></div><div class=\"line\">      -ms-<span class=\"attribute\">border-radius</span><span class=\"value\">: <span class=\"variable\">$radius</span>;</span></div><div class=\"line\">          <span class=\"attribute\">border-radius</span><span class=\"value\">: <span class=\"variable\">$radius</span>;</span></div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">// 使用 mixin</span></div><div class=\"line\"><span class=\"class\">.box</span> {</div><div class=\"line\">  <span class=\"at_rule\">@<span class=\"keyword\">include</span><span class=\"preprocessor\"> border-radius</span>(<span class=\"number\">10px</span>);</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"Inheritance_|_继承\">Inheritance | 继承</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">.message</span> {</div><div class=\"line\">  <span class=\"attribute\">border</span><span class=\"value\">: <span class=\"number\">1px</span> solid <span class=\"hexcolor\">#ccc</span>;</span></div><div class=\"line\">  <span class=\"attribute\">padding</span><span class=\"value\">: <span class=\"number\">10px</span>;</span></div><div class=\"line\">  <span class=\"attribute\">color</span><span class=\"value\">: <span class=\"hexcolor\">#333</span>;</span></div><div class=\"line\">}</div><div class=\"line\"><span class=\"class\">.success</span> {</div><div class=\"line\">  <span class=\"at_rule\">@<span class=\"keyword\">extend</span><span class=\"preprocessor\"> .message</span>;</span></div><div class=\"line\">  <span class=\"attribute\">border-color</span><span class=\"value\">: green;</span></div><div class=\"line\">}</div><div class=\"line\"><span class=\"class\">.error</span> {</div><div class=\"line\">  <span class=\"at_rule\">@<span class=\"keyword\">extend</span><span class=\"preprocessor\"> .message</span>;</span></div><div class=\"line\">  <span class=\"attribute\">border-color</span><span class=\"value\">: red;</span></div><div class=\"line\">}</div><div class=\"line\"><span class=\"class\">.warning</span> {</div><div class=\"line\">  <span class=\"at_rule\">@<span class=\"keyword\">extend</span><span class=\"preprocessor\"> .message</span>;</span></div><div class=\"line\">  <span class=\"attribute\">border-color</span><span class=\"value\">: yellow;</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"Operators_|_运算符\">Operators | 运算符</h2>\n<p>.container {<br>  width: 100%;<br>}<br>article[role=”main”] {<br>  float: left;<br>  width: 600px / 960px <em> 100%;<br>}<br>article[role=”sub”] {<br>  float: right;<br>  width: 300px / 960px </em> 100%;<br>}</p>\n<h1 id=\"编译_-scss_为_-css\">编译 .scss 为 .css</h1>\n<p>nested：嵌套缩进的css代码，它是默认值。<br>　   　<br>expanded：没有缩进的、扩展的css代码。<br>　   　<br>compact：简洁格式的css代码。<br>　　<br>compressed：压缩后的css代码。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 编译风格默认为 --style nested</div><div class=\"line\">$ sass <span class=\"keyword\">test</span>.scss <span class=\"keyword\">test</span>.css</div><div class=\"line\">// 编译风格设置为 --style compressed</div><div class=\"line\">$ sass --style compassed <span class=\"keyword\">test</span>.scss <span class=\"keyword\">test</span>.css</div><div class=\"line\"></div><div class=\"line\">// 查看编译后的 <span class=\"keyword\">test</span>.css    </div><div class=\"line\">$ cat <span class=\"keyword\">test</span>.css</div></pre></td></tr></table></figure>\n\n<h1 id=\"监听文件变化\">监听文件变化</h1>\n<p>一旦某个文件/目录发生变化，Sass 就自动编译出新的版本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 监听文件</div><div class=\"line\">$ sass --watch test.<span class=\"keyword\">scs</span><span class=\"variable\">s:test</span>.css</div><div class=\"line\">// 监听目录，一旦 src/scss 下有文件发生变化，就编译到 dist/css 目录</div><div class=\"line\">$ sass --watch src/<span class=\"keyword\">scs</span><span class=\"variable\">s:dist</span>/css</div></pre></td></tr></table></figure>\n\n<h3 id=\"参考链接\">参考链接</h3>\n<ul>\n<li><a href=\"http://sass-lang.com/guide\" target=\"_blank\" rel=\"external\">Sass 官网</a></li>\n<li><a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\" target=\"_blank\" rel=\"external\">Sass 文档</a></li>\n</ul>\n","source":"_posts/Sass-学习笔记.md","raw":"title: Sass 学习笔记\ncategories:\n  - Node\ndate: 2014-08-13 17:40:49\ntags:\n---\n\n# 安装 Sass\n\n```\n$ gem install sass\n// 或\n$ sudo gem install sass \n\n// 查看 sass 版本\n$ sass -v  \n```\n\n# 快速入门 sass 语法\n\n## Variables | 变量\n```\n// test.scss\n$lai-font: Roboto, sans-serif;\n$lai-color: #eee;\n\nbody {\n  color: $lai-color;\n  font-family: $lai-font;\n}\n```\n\n## Nesting | 嵌套\n```\nnav {\n  ul {\n    margin: 0 auto;\n    padding: 0;\n    list-style: 0;\n  }\n\n  li {\n    display: inline-block;\n  }\n\n  a {\n    display: block;\n    padding: 5px 10px;\n    text-decoration: none;\n  }\n}\n```\n\n## Partials | 模板\n```\n// _reset.scss\nhtml,\nbody,\nul,\nol {\n  margin: 0;\n  padding: 0;\n\n}\n// 使用 partial\n// base.scss\n@import 'reset'\nbody {\n  backgrount: #333;\n}\n```\n\n\n## Mixins | 混入\n```\n@mixin border-radius($radius) {\n  -webkit-border-radius: $radius;\n     -moz-border-radius: $radius;\n      -ms-border-radius: $radius;\n          border-radius: $radius;\n}\n// 使用 mixin\n.box {\n  @include border-radius(10px);\n}\n```\n\n## Inheritance | 继承\n```\n.message {\n  border: 1px solid #ccc;\n  padding: 10px;\n  color: #333;\n}\n.success {\n  @extend .message;\n  border-color: green;\n}\n.error {\n  @extend .message;\n  border-color: red;\n}\n.warning {\n  @extend .message;\n  border-color: yellow;\n}\n```\n\n## Operators | 运算符\n.container {\n  width: 100%;\n}\narticle[role=\"main\"] {\n  float: left;\n  width: 600px / 960px * 100%;\n}\narticle[role=\"sub\"] {\n  float: right;\n  width: 300px / 960px * 100%;\n}\n\n# 编译 .scss 为 .css\n  \nnested：嵌套缩进的css代码，它是默认值。\n　   　 \nexpanded：没有缩进的、扩展的css代码。\n　   　 \ncompact：简洁格式的css代码。\n　　    \ncompressed：压缩后的css代码。\n            \n```\n// 编译风格默认为 --style nested\n$ sass test.scss test.css\n// 编译风格设置为 --style compressed\n$ sass --style compassed test.scss test.css\n\n// 查看编译后的 test.css    \n$ cat test.css\n```\n\n# 监听文件变化\n\n一旦某个文件/目录发生变化，Sass 就自动编译出新的版本\n\n```\n// 监听文件\n$ sass --watch test.scss:test.css\n// 监听目录，一旦 src/scss 下有文件发生变化，就编译到 dist/css 目录\n$ sass --watch src/scss:dist/css\n```\n\n\n### 参考链接\n\n- [Sass 官网](http://sass-lang.com/guide)\n- [Sass 文档](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)","slug":"Sass-学习笔记","updated":1418908898000,"excerpt":"","_id":"gd1ah19g06ejnri3","comments":true,"layout":"post","photos":[],"link":""},{"title":"Velocity 学习笔记","categories":["f1q8dl6bbauvoh8x"],"tags":["i3soenzjj13smlgh"],"date":1405607717000,"content":"<p>单行注释</p>\n<pre><code>    <span class=\"comment\">## This is a comment.</span>\n</code></pre><p>多行注释</p>\n<pre><code>    <span class=\"comment\">#*</span>\n        This is <span class=\"operator\">a</span> mutil-<span class=\"built_in\">line</span> comment\n        This is <span class=\"operator\">a</span> mutil-<span class=\"built_in\">line</span> comment\n        This is <span class=\"operator\">a</span> mutil-<span class=\"built_in\">line</span> comment        \n    *<span class=\"comment\">#        </span>\n</code></pre><p>变量</p>\n<pre><code>    &lt;div&gt;\n        <span class=\"symbol\">#set</span> ( <span class=\"char\">$n</span>ame = <span class=\"string\">'xiaolai'</span>)\n        <span class=\"class\">Hello</span> <span class=\"char\">$n</span>ame !\n    &lt;/div&gt;\n</code></pre><p>属性</p>\n<pre><code>    <span class=\"variable\">$person</span>.<span class=\"keyword\">Name</span>\n</code></pre><p>方法</p>\n<pre><code>    <span class=\"char\">$p</span>erson.getName()\n    <span class=\"char\">$p</span>erson.setName(<span class=\"string\">'xiaolai'</span>)\n\n    ## 注意 <span class=\"char\">$p</span>erson.getName() 等同于 <span class=\"char\">$p</span>erson.<span class=\"class\">Name</span>\n</code></pre><a id=\"more\"></a>\n\n<p>单引号双引号</p>\n<pre><code>放在双引号内的变量才会被解析\n\n    <span class=\"symbol\">#set</span> ( <span class=\"char\">$f</span>oo = <span class=\"string\">'xiaolai'</span>)\n    <span class=\"symbol\">#set</span> ( <span class=\"char\">$b</span>ar1 = <span class=\"string\">'$foo'</span> )\n    <span class=\"char\">$s</span>et ( <span class=\"char\">$b</span>ar2 = <span class=\"comment\">\"$foo\"</span>)\n    <span class=\"char\">$b</span>ar1 ##=&gt; <span class=\"string\">'$foo'</span>        \n    <span class=\"char\">$b</span>ar2 ##=&gt; <span class=\"string\">'xiaolai'</span>\n</code></pre><p>条件语句</p>\n<pre><code>    <span class=\"comment\">#set ( $foo = 100 )</span>\n    <span class=\"comment\">#if ( $foo &lt; 10 )</span>\n        &lt;<span class=\"keyword\">div</span>&gt; <span class=\"number\">123</span> &lt;/<span class=\"keyword\">div</span>&gt;\n    <span class=\"comment\">#elseif ( $foo &lt; 50 )</span>\n        &lt;<span class=\"keyword\">div</span>&gt; <span class=\"number\">456</span> &lt;/<span class=\"keyword\">div</span>&gt;\n    <span class=\"comment\">#else</span>\n        &lt;<span class=\"keyword\">div</span>&gt; <span class=\"number\">789</span> &lt;/<span class=\"keyword\">div</span>&gt;\n    <span class=\"comment\">#end            </span>\n</code></pre><p>关系、逻辑运算符</p>\n<pre><code>    <span class=\"comment\">## 全等，使用 == </span>\n    <span class=\"variable\">$foo</span> == <span class=\"variable\">$bar</span>        \n\n    <span class=\"comment\">## AND、OR、NOT，使用 &amp;&amp;、||、!</span>\n    <span class=\"variable\">$foo</span> &amp;&amp; <span class=\"variable\">$bar</span>\n    <span class=\"variable\">$foo</span> || <span class=\"variable\">$bar</span>\n    !<span class=\"variable\">$foo</span>\n</code></pre><p>循环</p>\n<pre><code>    <span class=\"variable\">&lt;ul&gt;</span>\n        <span class=\"comment\">#foreach ( $product in $allProducts)</span>\n            <span class=\"variable\">&lt;li&gt;</span> $product <span class=\"variable\">&lt;li&gt;</span>\n        <span class=\"comment\">#end    </span>\n    <span class=\"variable\">&lt;/ul&gt;</span>    \n</code></pre><p>include 引入文件</p>\n<pre><code>    #<span class=\"array\"># </span>文件必须包含在TEMPLATE_ROOT目录下    \n    <span class=\"array\">#include </span>(<span class=\"string\">'test.txt'</span>)\n    <span class=\"array\">#include </span>(<span class=\"string\">'test1.txt'</span>, <span class=\"string\">'test2.txt'</span>, <span class=\"string\">'test3.txt'</span>)\n</code></pre><p>parse 渲染文件</p>\n<pre><code>    #<span class=\"array\"># </span>文件必须包含在TEMPLATE_ROOT目录下\n    <span class=\"array\">#parse</span>(<span class=\"string\">'test.vm'</span>)                \n</code></pre><p>macro 宏的定义</p>\n<pre><code>    <span class=\"comment\">## 宏可以定义可重用的代码</span>\n    <span class=\"comment\">#macro ( tpl $title $description )</span>\n        <span class=\"variable\">&lt;div&gt;</span>\n            <span class=\"variable\">&lt;h1&gt;</span> $title <span class=\"variable\">&lt;/h1&gt;</span>\n            <span class=\"variable\">&lt;p&gt;</span> $description <span class=\"variable\">&lt;/p&gt;</span>\n        <span class=\"variable\">&lt;div&gt;</span>    \n\n    <span class=\"comment\">## 使用这个宏，将会进行替换</span>\n    <span class=\"comment\">#tpl('title', 'This is a description')    </span>\n</code></pre>","source":"_posts/Velocity-学习笔记.md","raw":"title: Velocity 学习笔记\ncategories:\n  - Node\ntags:\n  - vm\ndate: 2014-07-17 22:35:17\n---\n\n单行注释\n\t\t\n\t\t## This is a comment.\n\n多行注释\n\n\t\t#*\n\t\t\tThis is a mutil-line comment\n\t\t\tThis is a mutil-line comment\n\t\t\tThis is a mutil-line comment\t\t\n\t\t*#\t\t\n\n变量\n\n\t\t<div>\n\t\t\t#set ( $name = 'xiaolai')\n\t\t\tHello $name !\n\t\t</div>\n\t\t\n属性\n\n\t\t$person.Name\n\n方法\n\n\t\t$person.getName()\n\t\t$person.setName('xiaolai')\n\t\t\n\t\t## 注意 $person.getName() 等同于 $person.Name\n\n<!-- more -->\n\n单引号双引号\n\t\n\t放在双引号内的变量才会被解析\n\n\t\t#set ( $foo = 'xiaolai')\n\t\t#set ( $bar1 = '$foo' )\n\t\t$set ( $bar2 = \"$foo\")\n\t\t$bar1 ##=> '$foo'\t\t\n\t\t$bar2 ##=> 'xiaolai'\n\t\t\n\n条件语句\n\n\t\t#set ( $foo = 100 )\n\t\t#if ( $foo < 10 )\n\t\t\t<div> 123 </div>\n\t\t#elseif ( $foo < 50 )\n\t\t\t<div> 456 </div>\n\t\t#else\n\t\t\t<div> 789 </div>\n\t\t#end\t\t\t\n\n关系、逻辑运算符\n\n\t\t## 全等，使用 == \n\t\t$foo == $bar\t\t\n\t\n\t\t## AND、OR、NOT，使用 &&、||、!\n\t\t$foo && $bar\n\t\t$foo || $bar\n\t\t!$foo\n\n循环\n\n\t\t<ul>\n\t\t\t#foreach ( $product in $allProducts)\n\t\t\t\t<li> $product <li>\n\t\t\t#end\t\n\t\t</ul>\t\n\ninclude 引入文件\n\t\n\t\t## 文件必须包含在TEMPLATE_ROOT目录下\t\n\t\t#include ('test.txt')\n\t\t#include ('test1.txt', 'test2.txt', 'test3.txt')\n\nparse 渲染文件\n\t\n\t\t## 文件必须包含在TEMPLATE_ROOT目录下\n\t\t#parse('test.vm')\t\t\t\t\n\nmacro 宏的定义\n\n\t\t## 宏可以定义可重用的代码\n\t\t#macro ( tpl $title $description )\n\t\t\t<div>\n\t\t\t\t<h1> $title </h1>\n\t\t\t\t<p> $description </p>\n\t\t\t<div>\t\n\t\t\n\t\t## 使用这个宏，将会进行替换\n\t\t#tpl('title', 'This is a description')\t\n\t\t\t\t\t\t\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\t\t\t\t\t","slug":"Velocity-学习笔记","updated":1418908898000,"excerpt":"<p>单行注释</p>\n<pre><code>    <span class=\"comment\">## This is a comment.</span>\n</code></pre><p>多行注释</p>\n<pre><code>    <span class=\"comment\">#*</span>\n        This is <span class=\"operator\">a</span> mutil-<span class=\"built_in\">line</span> comment\n        This is <span class=\"operator\">a</span> mutil-<span class=\"built_in\">line</span> comment\n        This is <span class=\"operator\">a</span> mutil-<span class=\"built_in\">line</span> comment        \n    *<span class=\"comment\">#        </span>\n</code></pre><p>变量</p>\n<pre><code>    &lt;div&gt;\n        <span class=\"symbol\">#set</span> ( <span class=\"char\">$n</span>ame = <span class=\"string\">'xiaolai'</span>)\n        <span class=\"class\">Hello</span> <span class=\"char\">$n</span>ame !\n    &lt;/div&gt;\n</code></pre><p>属性</p>\n<pre><code>    <span class=\"variable\">$person</span>.<span class=\"keyword\">Name</span>\n</code></pre><p>方法</p>\n<pre><code>    <span class=\"char\">$p</span>erson.getName()\n    <span class=\"char\">$p</span>erson.setName(<span class=\"string\">'xiaolai'</span>)\n\n    ## 注意 <span class=\"char\">$p</span>erson.getName() 等同于 <span class=\"char\">$p</span>erson.<span class=\"class\">Name</span>\n</code></pre>","_id":"0hqnwivs1p2terki","comments":true,"layout":"post","photos":[],"link":""},{"title":"Web worker 的简单使用","categories":["05nmlpfrdhtw0ggm"],"date":1417241194000,"tags":["oyirff88ysxmtap2"],"content":"<h1 id=\"Main-js\">Main.js</h1>\n<p>   注意在 chrome 下  worker 不能正常加载，需要在服务器环境下</p>\n<pre><code>    <span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'Worker.js'</span>);\n\n    <span class=\"comment\">// 给 worker 发送消息</span>\n    worker.postMessage(<span class=\"string\">'Hi, I am a message from Main'</span>);\n\n    <span class=\"comment\">// 监听来自 worker 的消息</span>\n    worker.onmessage  = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(e)</span> </span>{\n        <span class=\"built_in\">console</span>.log(e);\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Main had receive a message: '</span>, e.data);\n\n        <span class=\"comment\">// 接收 worker 传回的指令</span>\n        <span class=\"keyword\">if</span> (e.data.command) {\n            <span class=\"built_in\">eval</span>(<span class=\"string\">'('</span> + e.data.command + <span class=\"string\">')'</span>)\n        }\n    };\n\n    <span class=\"comment\">// 中止 worker</span>\n    <span class=\"comment\">// 立即杀死 worker</span>\n    <span class=\"comment\">// worker.terminate();</span>\n</code></pre><h1 id=\"Worker-js\">Worker.js</h1>\n<pre><code>    <span class=\"attribute\">console.log('Worker</span>: <span class=\"string\">I am working!');</span>\n\n<span class=\"javascript\">    <span class=\"comment\">// 发送消息给主线程</span>\n    postMessage(<span class=\"string\">'Hi, I am a message from Worker!'</span>);\n\n    <span class=\"comment\">// 监听主线程传来的消息</span>\n    onmessage = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(e)</span> </span>{\n        <span class=\"built_in\">console</span>.log(e);\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Worker had receive a message: '</span>, e.data);\n    };\n\n\n    <span class=\"comment\">// 注意： 通常来说，后台线程 – 包括 worker – 无法操作 DOM。</span>\n    <span class=\"comment\">// 如果后台线程需要修改 DOM，那么它应该将消息发送给它的创建者，让创建者来完成这些操作。</span>\n    <span class=\"comment\">// document.write('I will not be executed :(');  =&gt; 报错：alert is not defined</span>\n\n\n    <span class=\"comment\">//  所以为了操作 DOM, 可以通过传递命令的方式来让主线程来执行</span>\n    postMessage({\n        command: <span class=\"string\">\"document.write('hello I am from Worker')\"</span>\n    });    \n\n    <span class=\"comment\">// 除了在 Main.js 杀死线程，也可以自己杀死自己</span>\n    <span class=\"comment\">// self.close();  </span></span>\n</code></pre>","source":"_posts/Web-worker-的简单使用.md","raw":"title: Web worker 的简单使用\ncategories:\n  - HTML5\ndate: 2014-11-29 14:06:34\ntags: worker\n---\n\n# Main.js\n\n   注意在 chrome 下  worker 不能正常加载，需要在服务器环境下\n   \n        var worker = new Worker('Worker.js');\n\n        // 给 worker 发送消息\n        worker.postMessage('Hi, I am a message from Main');\n\n        // 监听来自 worker 的消息\n        worker.onmessage  = function (e) {\n            console.log(e);\n            console.log('Main had receive a message: ', e.data);\n\n            // 接收 worker 传回的指令\n            if (e.data.command) {\n                eval('(' + e.data.command + ')')\n            }\n        };\n        \n        // 中止 worker\n        // 立即杀死 worker\n        // worker.terminate();\n        \n# Worker.js\n\n\t    console.log('Worker: I am working!');\n\n        // 发送消息给主线程\n        postMessage('Hi, I am a message from Worker!');\n\n        // 监听主线程传来的消息\n        onmessage = function (e) {\n            console.log(e);\n            console.log('Worker had receive a message: ', e.data);\n        };\n\n\n        // 注意： 通常来说，后台线程 – 包括 worker – 无法操作 DOM。\n        // 如果后台线程需要修改 DOM，那么它应该将消息发送给它的创建者，让创建者来完成这些操作。\n        // document.write('I will not be executed :(');  => 报错：alert is not defined\n\n\n        //  所以为了操作 DOM, 可以通过传递命令的方式来让主线程来执行\n        postMessage({\n            command: \"document.write('hello I am from Worker')\"\n        });    \n        \n        // 除了在 Main.js 杀死线程，也可以自己杀死自己\n        // self.close();  ","slug":"Web-worker-的简单使用","updated":1418908898000,"excerpt":"","_id":"7c0mmpwb9wg7yy58","comments":true,"layout":"post","photos":[],"link":""},{"title":"XMLHttpRequest 对象新特性","categories":["be592wtznj5wcvwn"],"date":1405894941000,"tags":["kgid89vd8uhg2ply"],"content":"<h1 id=\"旧版本\">旧版本</h1>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 新建实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 向服务器发出请求</span></div><div class=\"line\">xhr.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'example.php'</span>);</div><div class=\"line\">xhr.send();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 监控xhr对象的状态变化，制定回调函数</span></div><div class=\"line\">xhr.onreadystatechange  = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">     <span class=\"keyword\">if</span>(xhr.readyState ==<span class=\"number\">4</span> && xhr.status ==<span class=\"number\">200</span>){ <span class=\"comment\">// 4表示数据接收完毕，200表示服务器返回一切正常</span></div><div class=\"line\">          alert( xhr.responseText ); </div><div class=\"line\">     } <span class=\"keyword\">else</span> {</div><div class=\"line\">          alert( xhr.statusText );</div><div class=\"line\">     }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<ul>\n<li><p>xhr.readyState：XMLHttpRequest对象的状态，等于4表示数据已经接收完毕。</p>\n</li>\n<li><p>xhr.status：服务器返回的状态码，等于200表示一切正常。</p>\n</li>\n<li><p>xhr.responseText：服务器返回的文本数据</p>\n</li>\n<li><p>xhr.responseXML：服务器返回的XML格式的数据</p>\n</li>\n<li><p>xhr.statusText：服务器返回的状态文本。</p>\n</li>\n</ul>\n<h2 id=\"旧版本的缺点\">旧版本的缺点</h2>\n<ul>\n<li><p>只支持文本数据传送，不能读取和上传二进制文件</p>\n</li>\n<li><p>没有进度提示，只能提示有没有完成</p>\n</li>\n<li><p>有同域限制</p>\n</li>\n</ul>\n<h1 id=\"新版本\">新版本</h1>\n<h2 id=\"新版本的改进\">新版本的改进</h2>\n<ul>\n<li><p>可设置HTTP请求时限</p>\n</li>\n<li><p>可用FormData对象管理表单数据</p>\n</li>\n<li><p>可上传文件、读取服务器端的二进制信息</p>\n</li>\n<li><p>有进度信息</p>\n</li>\n<li><p>可跨域请求</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置请求时限</span></div><div class=\"line\">xhr.timeout = <span class=\"number\">3000</span>; <span class=\"comment\">// 过了 3s 就停止HTTP请求</span></div><div class=\"line\"><span class=\"comment\">//请求超时的毁掉函数</span></div><div class=\"line\">xhr.ontimeout = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(event)</span></span>{</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time out!'</span>);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 新建FormData对象（HTML5）</span></div><div class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormDate();</div><div class=\"line\"><span class=\"comment\">// 可在这个 FormData 对象中添加表单项</span></div><div class=\"line\">formData.append(<span class=\"string\">'name'</span>,<span class=\"string\">'xiaolai'</span>);</div><div class=\"line\">formData.append(<span class=\"string\">'id'</span>,<span class=\"number\">123456</span>);</div><div class=\"line\"><span class=\"comment\">// 发送该表单，与提交网页表单效果一样</span></div><div class=\"line\">xhr.send(formData);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取页面中表单</span></div><div class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myform'</span>);</div><div class=\"line\"><span class=\"comment\">// 生成 FormData 对象表单</span></div><div class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(form); </div><div class=\"line\"><span class=\"comment\">// 可继续添加表单项，如 csrf</span></div><div class=\"line\">formData.append(<span class=\"string\">'csrfToken'</span>,<span class=\"string\">'123456789'</span>); </div><div class=\"line\"><span class=\"comment\">//发送表单</span></div><div class=\"line\">xhr.open(<span class=\"string\">'POST'</span>,form.action);             </div><div class=\"line\">xhr.send(formData);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 新酷特性：可上传文件！</span></div><div class=\"line\"><span class=\"comment\">// 假定 files 是 input[type=\"file\"] 的元素</span></div><div class=\"line\">vat formData = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\"><span class=\"keyword\">var</span> files = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myFiles'</span>);</div><div class=\"line\"><span class=\"comment\">// 注意可能是多文件</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) {</div><div class=\"line\">     formData.append(<span class=\"string\">'files[]'</span>,files[i]);</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">// 发送啦！</span></div><div class=\"line\">xhr.send(formData);</div></pre></td></tr></table></figure>\n\n<h2 id=\"注意几点：\">注意几点：</h2>\n<ul>\n<li><p>跨域请求 Cross-origin resource sharing 前提是浏览器的支持且服务器同意</p>\n<p>  写法与不跨域请求的写法一样</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.<span class=\"keyword\">open</span>(<span class=\"attribute\">'GET</span>',<span class=\"attribute\">'http</span>://other.server/<span class=\"keyword\">and</span>/path/<span class=\"keyword\">to</span>/script');</div></pre></td></tr></table></figure>\n\n<ul>\n<li><p>读取二进制数据</p>\n<ul>\n<li><p>方法1：改写MIMEType属性</p>\n</li>\n<li><p>方法2：改变 responseType属性</p>\n</li>\n</ul>\n</li>\n<li><p>显示进度的 progress 事件</p>\n<ul>\n<li><p>下载的progress事件属于XMLHttpRequest对象</p>\n</li>\n<li><p>上传的progress事件属于XMLHttpRequest.upload对象</p>\n</li>\n</ul>\n</li>\n</ul>\n","source":"_posts/XMLHttpRequest-对象新特性.md","raw":"title: XMLHttpRequest 对象新特性\ncategories:\n  - Javascript\ndate: 2014-07-21 06:22:21\ntags:\n\t- ajax\n\t\n---\n\n# 旧版本\n\n```\n// 新建实例\nvar xhr = new XMLHttpRequest();\n\n// 向服务器发出请求\nxhr.open('GET','example.php');\nxhr.send();\n\n// 监控xhr对象的状态变化，制定回调函数\nxhr.onreadystatechange  = function(){\n     if(xhr.readyState ==4 && xhr.status ==200){ // 4表示数据接收完毕，200表示服务器返回一切正常\n          alert( xhr.responseText ); \n     } else {\n          alert( xhr.statusText );\n     }\n}\n```\n\n<!-- more -->\n\n- xhr.readyState：XMLHttpRequest对象的状态，等于4表示数据已经接收完毕。\n\n- xhr.status：服务器返回的状态码，等于200表示一切正常。\n\n- xhr.responseText：服务器返回的文本数据\n\n- xhr.responseXML：服务器返回的XML格式的数据\n\n- xhr.statusText：服务器返回的状态文本。\n\n\n## 旧版本的缺点\n\n- 只支持文本数据传送，不能读取和上传二进制文件\n\n- 没有进度提示，只能提示有没有完成\n\n- 有同域限制\n\n\n# 新版本\n\n\n## 新版本的改进\n\n- 可设置HTTP请求时限\n\n- 可用FormData对象管理表单数据\n\n- 可上传文件、读取服务器端的二进制信息\n\n- 有进度信息\n\n- 可跨域请求\n\n```\n// 设置请求时限\nxhr.timeout = 3000; // 过了 3s 就停止HTTP请求\n//请求超时的毁掉函数\nxhr.ontimeout = function(event){\n     console.log('Time out!');\n}\n\n// 新建FormData对象（HTML5）\nvar formData = new FormDate();\n// 可在这个 FormData 对象中添加表单项\nformData.append('name','xiaolai');\nformData.append('id',123456);\n// 发送该表单，与提交网页表单效果一样\nxhr.send(formData);\n\n// 获取页面中表单\nvar form = document.getElementById('myform');\n// 生成 FormData 对象表单\nvar formData = new FormData(form); \n// 可继续添加表单项，如 csrf\nformData.append('csrfToken','123456789'); \n//发送表单\nxhr.open('POST',form.action);             \nxhr.send(formData);\n\n// 新酷特性：可上传文件！\n// 假定 files 是 input[type=\"file\"] 的元素\nvat formData = new FormData();\nvar files = document.getElementById('myFiles');\n// 注意可能是多文件\nfor(var i = 0; i < files.length; i++) {\n     formData.append('files[]',files[i]);\n}\n// 发送啦！\nxhr.send(formData);\n```\n\n## 注意几点：\n\n- 跨域请求 Cross-origin resource sharing 前提是浏览器的支持且服务器同意\n\t\n\t写法与不跨域请求的写法一样\n\n\t```\n\txhr.open('GET','http://other.server/and/path/to/script');\n\t```\n\n- 读取二进制数据\n\t\n\t- 方法1：改写MIMEType属性\n\t\n\t- 方法2：改变 responseType属性\n\n- 显示进度的 progress 事件\n\n\t- 下载的progress事件属于XMLHttpRequest对象\n\t\n\t- 上传的progress事件属于XMLHttpRequest.upload对象\n\n\n\n\n\n\n\n\n\n\n","slug":"XMLHttpRequest-对象新特性","updated":1418908898000,"excerpt":"<h1 id=\"旧版本\">旧版本</h1>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 新建实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 向服务器发出请求</span></div><div class=\"line\">xhr.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'example.php'</span>);</div><div class=\"line\">xhr.send();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 监控xhr对象的状态变化，制定回调函数</span></div><div class=\"line\">xhr.onreadystatechange  = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">     <span class=\"keyword\">if</span>(xhr.readyState ==<span class=\"number\">4</span> && xhr.status ==<span class=\"number\">200</span>){ <span class=\"comment\">// 4表示数据接收完毕，200表示服务器返回一切正常</span></div><div class=\"line\">          alert( xhr.responseText ); </div><div class=\"line\">     } <span class=\"keyword\">else</span> {</div><div class=\"line\">          alert( xhr.statusText );</div><div class=\"line\">     }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","_id":"6z9cl40ewtql9s4n","comments":true,"layout":"post","photos":[],"link":""},{"title":"bytewiser 练习","categories":["f1q8dl6bbauvoh8x"],"date":1408773841000,"tags":["paik0gi4y4o9uo9m","7vh6slrie6ute0c3"],"content":"<blockquote>\n<p>bytewiser 是 nodeschool.io 出品的nodejs入门练习项目</p>\n</blockquote>\n<h1 id=\"bytewiser-exercise-1\">bytewiser-exercise-1</h1>\n<p>Write a node program that prints a buffer object containing the string “bytewiser” using console.log.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = <span class=\"string\">'bytewiser'</span>;</div><div class=\"line\">var <span class=\"keyword\">buffer</span> = <span class=\"keyword\">new</span> Buffer(str);</div><div class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"keyword\">buffer</span>);</div></pre></td></tr></table></figure>\n\n<h1 id=\"bytewiser-exercise-2\">bytewiser-exercise-2</h1>\n<p>Given an unknown number of bytes passed via process.argv, create a buffer from them and output a hexadecimal encoded representation of the buffer.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = process.<span class=\"built_in\">argv</span>.slice(<span class=\"number\">2</span>);</div><div class=\"line\">var <span class=\"keyword\">buffer</span> = <span class=\"keyword\">new</span> Buffer(array);</div><div class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"keyword\">buffer</span>.toString(<span class=\"string\">'hex'</span>));</div><div class=\"line\"></div><div class=\"line\">// 官方答案</div><div class=\"line\">// var bytes = process.<span class=\"built_in\">argv</span>.slice(<span class=\"number\">2</span>).<span class=\"built_in\">map</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(arg)</span> { <span class=\"title\">return</span> <span class=\"title\">parseInt</span><span class=\"params\">(arg)</span> })</span></div><div class=\"line\">// console.<span class=\"built_in\">log</span>(<span class=\"keyword\">new</span> Buffer(bytes).toString(<span class=\"string\">'hex'</span>))</div></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h1 id=\"bytewiser-exercise-3\">bytewiser-exercise-3</h1>\n<p>Write a program that takes the first buffer written to <code>process.stdin</code>,<br>updates all instances of . with ! and then logs out the updated buffer object.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 监听用户输入，将 . 替换为 ! 输出</span></div><div class=\"line\">process.stdin.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(buffer)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; buffer.length; i++) {</div><div class=\"line\">    <span class=\"comment\">// 0x2e 对应为 .</span></div><div class=\"line\">    <span class=\"comment\">// 0x2e 对应为 !</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (buffer[i] === <span class=\"number\">0x2e</span>) buffer[i] = <span class=\"number\">0x21</span></div><div class=\"line\">  }</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(buffer);</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<h1 id=\"bytewiser-exercise-4\">bytewiser-exercise-4</h1>\n<p>The argument given to you from <code>process.argv[2]</code> will be a path to a file.<br>Read this file and split it by newline characters (‘\\n’). You should log one Buffer per line.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"keyword\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> file = process.argv[<span class=\"number\">2</span>];</div><div class=\"line\">fs.readFile(file, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, data)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) {</div><div class=\"line\">        <span class=\"keyword\">throw</span> err;</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">array</span> = data.toString().split(<span class=\"string\">'\\n'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> len = <span class=\"keyword\">array</span>.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> buffer;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) {</div><div class=\"line\">        buffer = <span class=\"keyword\">new</span> Buffer(<span class=\"keyword\">array</span>[i]);</div><div class=\"line\">        console.log(buffer);</div><div class=\"line\">    };</div><div class=\"line\">});</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 官方答案</span></div><div class=\"line\"><span class=\"comment\">// var fs = require('fs')</span></div><div class=\"line\"><span class=\"comment\">// var file = fs.readFileSync(process.argv[2])</span></div><div class=\"line\"><span class=\"comment\">// var offset = 0</span></div><div class=\"line\"><span class=\"comment\">// for (var i = 0; i &lt; file.length; i++) {</span></div><div class=\"line\"><span class=\"comment\">//   if (file[i] === 10) {</span></div><div class=\"line\"><span class=\"comment\">//     console.log(file.slice(offset, i))</span></div><div class=\"line\"><span class=\"comment\">//     i++</span></div><div class=\"line\"><span class=\"comment\">//     offset = i</span></div><div class=\"line\"><span class=\"comment\">//   }</span></div><div class=\"line\"><span class=\"comment\">// }</span></div><div class=\"line\"><span class=\"comment\">// console.log(file.slice(offset, i))</span></div></pre></td></tr></table></figure>\n\n<h1 id=\"bytewiser-exercise-5\">bytewiser-exercise-5</h1>\n<p>Write a program that combines all of the buffers from <code>process.stdin</code><br>and then writes the single big buffer out to the console.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buffers = [];</div><div class=\"line\">process.<span class=\"literal\">stdin</span>.on('data', function (chunk) {</div><div class=\"line\">    <span class=\"keyword\">var</span> buffer = new <span class=\"type\">Buffer</span>(chunk);</div><div class=\"line\">    buffers.push(buffer);</div><div class=\"line\">});</div><div class=\"line\">process.<span class=\"literal\">stdin</span>.on('<span class=\"keyword\">end</span>', function () {</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"literal\">result</span> = <span class=\"type\">Buffer</span>.concat(buffers);</div><div class=\"line\">    console.log(<span class=\"literal\">result</span>);</div><div class=\"line\">});</div><div class=\"line\"></div><div class=\"line\">// 官方答案</div><div class=\"line\">// <span class=\"keyword\">var</span> buffers = [];</div><div class=\"line\">// process.<span class=\"literal\">stdin</span>.on('readable', function() {</div><div class=\"line\">//   <span class=\"keyword\">var</span> chunk = process.<span class=\"literal\">stdin</span>.read();</div><div class=\"line\">//   <span class=\"keyword\">if</span> (chunk !== null) {</div><div class=\"line\">//     buffers.push(chunk);</div><div class=\"line\">//   }</div><div class=\"line\">// });</div><div class=\"line\">// process.<span class=\"literal\">stdin</span>.on('<span class=\"keyword\">end</span>', function() {</div><div class=\"line\">//   console.log(<span class=\"type\">Buffer</span>.concat(buffers));</div><div class=\"line\">// });</div></pre></td></tr></table></figure>\n\n<h1 id=\"bytewiser-exercise-6\">bytewiser-exercise-6</h1>\n<p>Read the first buffer from process.stdin, copy all bytes into a<br>Uint8Array and then log out a JSON stringified representation of the typed array.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.<span class=\"literal\">stdin</span>.on('data', function (chunk) {</div><div class=\"line\">    <span class=\"keyword\">var</span> uInt8array = new <span class=\"type\">Uint8Array</span>(chunk);</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"literal\">result</span> = <span class=\"type\">JSON</span>.stringify(uInt8array);</div><div class=\"line\">    console.log(<span class=\"literal\">result</span>);</div><div class=\"line\">});</div><div class=\"line\"></div><div class=\"line\">// 官方答案</div><div class=\"line\">// process.<span class=\"literal\">stdin</span>.once('data', function(buff) {</div><div class=\"line\">//   <span class=\"keyword\">var</span> ui8 = new <span class=\"type\">Uint8Array</span>(buff)</div><div class=\"line\">//   console.log(<span class=\"type\">JSON</span>.stringify(ui8))</div><div class=\"line\">// })</div></pre></td></tr></table></figure>\n\n<h1 id=\"bytewiser-exercise-7\">bytewiser-exercise-7</h1>\n<p>Take the integer from process.argv[2] and write it as the first<br>element in a single element Uint32Array. Then create a Uint16Array from the Array<br>Buffer of the Uint32Array and log out to the console the JSON stringified version<br>of the Uint16Array.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"type\">int</span> = parseInt(process.argv[<span class=\"number\">2</span>]);</div><div class=\"line\"><span class=\"keyword\">var</span> uint32array = new <span class=\"type\">Uint32Array</span>(<span class=\"number\">1</span>);</div><div class=\"line\">uint32array[<span class=\"number\">0</span>] = <span class=\"type\">int</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> uint16array = new <span class=\"type\">Uint16Array</span>(uint32array.buffer);</div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"literal\">result</span> = <span class=\"type\">JSON</span>.stringify(uint16array);</div><div class=\"line\">console.log(<span class=\"literal\">result</span>);</div><div class=\"line\"></div><div class=\"line\">// 官方答案</div><div class=\"line\">// <span class=\"keyword\">var</span> num = +process.argv[<span class=\"number\">2</span>]</div><div class=\"line\">// <span class=\"keyword\">var</span> ui32 = new <span class=\"type\">Uint32Array</span>(<span class=\"number\">1</span>)</div><div class=\"line\">// ui32[<span class=\"number\">0</span>] = num</div><div class=\"line\">// <span class=\"keyword\">var</span> ui16 = new <span class=\"type\">Uint16Array</span>(ui32.buffer)</div><div class=\"line\">// console.log(<span class=\"type\">JSON</span>.stringify(ui16))</div></pre></td></tr></table></figure>\n\n","source":"_posts/bytewiser-练习.md","raw":"title: bytewiser 练习\ncategories:\n  - Node\ndate: 2014-08-23 14:04:01\ntags:\n  - bytewiser\n  - buffer\n  \n---\n\n> bytewiser 是 nodeschool.io 出品的nodejs入门练习项目\n\n# bytewiser-exercise-1\n\nWrite a node program that prints a buffer object containing the string \"bytewiser\" using console.log.\n\n```\nvar str = 'bytewiser';\nvar buffer = new Buffer(str);\nconsole.log(buffer);\n```\n\n# bytewiser-exercise-2\n\nGiven an unknown number of bytes passed via process.argv, create a buffer from them and output a hexadecimal encoded representation of the buffer.\n```\nvar array = process.argv.slice(2);\nvar buffer = new Buffer(array);\nconsole.log(buffer.toString('hex'));\n\n// 官方答案\n// var bytes = process.argv.slice(2).map(function(arg) { return parseInt(arg) })\n// console.log(new Buffer(bytes).toString('hex'))\n```\n\n<!--more-->\n\n# bytewiser-exercise-3\n\nWrite a program that takes the first buffer written to `process.stdin`,\nupdates all instances of . with ! and then logs out the updated buffer object.\n```\n// 监听用户输入，将 . 替换为 ! 输出\nprocess.stdin.on('data', function(buffer) {\n  for (var i = 0; i < buffer.length; i++) {\n    // 0x2e 对应为 .\n    // 0x2e 对应为 !\n    if (buffer[i] === 0x2e) buffer[i] = 0x21\n  }\n  console.log(buffer);\n});\n```\n\n# bytewiser-exercise-4\n\nThe argument given to you from `process.argv[2]` will be a path to a file.\nRead this file and split it by newline characters ('\\n'). You should log one Buffer per line.\n\n```\nvar fs = require('fs');\nvar file = process.argv[2];\nfs.readFile(file, function (err, data) {\n    if (err) {\n        throw err;\n    }\n    var array = data.toString().split('\\n');\n    var len = array.length;\n    var buffer;\n    for (var i = 0; i < len; i++) {\n        buffer = new Buffer(array[i]);\n        console.log(buffer);\n    };\n});\n\n// 官方答案\n// var fs = require('fs')\n// var file = fs.readFileSync(process.argv[2])\n// var offset = 0\n// for (var i = 0; i < file.length; i++) {\n//   if (file[i] === 10) {\n//     console.log(file.slice(offset, i))\n//     i++\n//     offset = i\n//   }\n// }\n// console.log(file.slice(offset, i))\n```\n\n# bytewiser-exercise-5\n\nWrite a program that combines all of the buffers from `process.stdin`\nand then writes the single big buffer out to the console.\n\n```\nvar buffers = [];\nprocess.stdin.on('data', function (chunk) {\n    var buffer = new Buffer(chunk);\n    buffers.push(buffer);\n});\nprocess.stdin.on('end', function () {\n    var result = Buffer.concat(buffers);\n    console.log(result);\n});\n\n// 官方答案\n// var buffers = [];\n// process.stdin.on('readable', function() {\n//   var chunk = process.stdin.read();\n//   if (chunk !== null) {\n//     buffers.push(chunk);\n//   }\n// });\n// process.stdin.on('end', function() {\n//   console.log(Buffer.concat(buffers));\n// });\n```\n\n# bytewiser-exercise-6\n\nRead the first buffer from process.stdin, copy all bytes into a\nUint8Array and then log out a JSON stringified representation of the typed array.\n\n```\nprocess.stdin.on('data', function (chunk) {\n    var uInt8array = new Uint8Array(chunk);\n    var result = JSON.stringify(uInt8array);\n    console.log(result);\n});\n\n// 官方答案\n// process.stdin.once('data', function(buff) {\n//   var ui8 = new Uint8Array(buff)\n//   console.log(JSON.stringify(ui8))\n// })\n```\n\n# bytewiser-exercise-7\n\nTake the integer from process.argv[2] and write it as the first\nelement in a single element Uint32Array. Then create a Uint16Array from the Array\nBuffer of the Uint32Array and log out to the console the JSON stringified version\nof the Uint16Array.\n\n```\nvar int = parseInt(process.argv[2]);\nvar uint32array = new Uint32Array(1);\nuint32array[0] = int;\nvar uint16array = new Uint16Array(uint32array.buffer);\nvar result = JSON.stringify(uint16array);\nconsole.log(result);\n\n// 官方答案\n// var num = +process.argv[2]\n// var ui32 = new Uint32Array(1)\n// ui32[0] = num\n// var ui16 = new Uint16Array(ui32.buffer)\n// console.log(JSON.stringify(ui16))\n```","slug":"bytewiser-练习","updated":1418908898000,"excerpt":"<blockquote>\n<p>bytewiser 是 nodeschool.io 出品的nodejs入门练习项目</p>\n</blockquote>\n<h1 id=\"bytewiser-exercise-1\">bytewiser-exercise-1</h1>\n<p>Write a node program that prints a buffer object containing the string “bytewiser” using console.log.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = <span class=\"string\">'bytewiser'</span>;</div><div class=\"line\">var <span class=\"keyword\">buffer</span> = <span class=\"keyword\">new</span> Buffer(str);</div><div class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"keyword\">buffer</span>);</div></pre></td></tr></table></figure>\n\n<h1 id=\"bytewiser-exercise-2\">bytewiser-exercise-2</h1>\n<p>Given an unknown number of bytes passed via process.argv, create a buffer from them and output a hexadecimal encoded representation of the buffer.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = process.<span class=\"built_in\">argv</span>.slice(<span class=\"number\">2</span>);</div><div class=\"line\">var <span class=\"keyword\">buffer</span> = <span class=\"keyword\">new</span> Buffer(array);</div><div class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"keyword\">buffer</span>.toString(<span class=\"string\">'hex'</span>));</div><div class=\"line\"></div><div class=\"line\">// 官方答案</div><div class=\"line\">// var bytes = process.<span class=\"built_in\">argv</span>.slice(<span class=\"number\">2</span>).<span class=\"built_in\">map</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(arg)</span> { <span class=\"title\">return</span> <span class=\"title\">parseInt</span><span class=\"params\">(arg)</span> })</span></div><div class=\"line\">// console.<span class=\"built_in\">log</span>(<span class=\"keyword\">new</span> Buffer(bytes).toString(<span class=\"string\">'hex'</span>))</div></pre></td></tr></table></figure>\n\n","_id":"1xo2ohxclwjobgap","comments":true,"layout":"post","photos":[],"link":""},{"title":"express提供的中间件","date":1400466414000,"categories":["f1q8dl6bbauvoh8x"],"tags":["wp9ncps8ze53qc1e","ascr8ch9iyvrl11b"],"content":"<h2 id=\"Express_框架中常用的一些中间件的使用方法\">Express 框架中常用的一些中间件的使用方法</h2>\n<ul>\n<li><p>basiAuth 访问控制</p>\n<pre><code>  <span class=\"comment\">// 帐号密码正确时才发回 true，才能继续访问</span>\n  <span class=\"keyword\">var</span> express =  <span class=\"keyword\">require</span>(<span class=\"string\">'express'</span>);\n  <span class=\"keyword\">var</span> app = express();\n  <span class=\"comment\">// 这里的用户名和密码应从数据库读取</span>\n  app.<span class=\"keyword\">use</span>(express.basicAuth(<span class=\"string\">'username'</span>, <span class=\"string\">'password'</span>));\n  app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n      res. send(<span class=\"string\">'成功登录后才会看到这段内容。'</span>);\n  });\n  app.listen(<span class=\"number\">1234</span>, <span class=\"string\">'localhost'</span>);\n</code></pre></li>\n<li><p>bodyParse 处理请求 body 的内容</p>\n<pre><code>  // 内部使用 <span class=\"type\">JSON</span>    编码、url 编码处理和文件的上传处理\n  // 处理一个上传文件\n  &lt;body&gt;\n    &lt;h1&gt;使用 express.bodyParser 中间件上传文件&lt;/h1&gt;\n    &lt;form id=<span class=\"string\">\"myForm\"</span> action=<span class=\"string\">\"upload.html\"</span> <span class=\"keyword\">method</span>=<span class=\"string\">\"post\"</span> enctype=<span class=\"string\">\"multipart/form-data\"</span>&gt;\n      &lt;input <span class=\"keyword\">type</span>=<span class=\"string\">\"file\"</span> id=<span class=\"string\">\"file\"</span> name=<span class=\"string\">\"file\"</span>&gt;\n      &lt;input <span class=\"keyword\">type</span>=<span class=\"string\">\"submit\"</span> onclick=<span class=\"string\">\"uploadFile()\"</span> value=<span class=\"string\">\"上传\"</span>&gt;\n    &lt;/form&gt;\n    &lt;<span class=\"keyword\">div</span> id=<span class=\"string\">\"result\"</span>&gt;\n      选择文件后，点击按钮上传.\n    &lt;/<span class=\"keyword\">div</span>&gt;\n  &lt;/body&gt;\n</code></pre></li>\n</ul>\n<pre><code>    <span class=\"comment\">// 帐号密码正确时才发回 true，才能继续访问</span>\n    <span class=\"keyword\">var</span> express =  <span class=\"keyword\">require</span>(<span class=\"string\">'express'</span>);\n    <span class=\"keyword\">var</span> connect = <span class=\"keyword\">require</span>(<span class=\"string\">'connect'</span>);\n    <span class=\"keyword\">var</span> fs = <span class=\"keyword\">require</span>(<span class=\"string\">'fs'</span>);\n        <span class=\"keyword\">var</span> app = express();\n    <span class=\"comment\">// 使用 bodyParser 处理上传</span>\n    <span class=\"comment\">// app.use(express.bodyParser());</span>\n    app.<span class=\"keyword\">use</span>(connect.urlencoded());\n    app.<span class=\"keyword\">use</span>(connect.json());\n    app.get(<span class=\"string\">'/upload.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n      res.sendFile(__dirname + <span class=\"string\">'/upload.html'</span>);\n    });\n    <span class=\"comment\">// 开始处理</span>\n    app.post(<span class=\"string\">'/upload.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n      <span class=\"keyword\">var</span> file = req.files.myFile;\n      <span class=\"comment\">// 读取文件</span>\n      fs.readFile(file.path, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, data)</span> </span>{\n        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err; <span class=\"comment\">//读取文件失败</span>\n        fs.writeFile(file.name, data, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n          <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err; <span class=\"comment\">// 写入文件失败</span>\n          res.send(<span class=\"string\">'文件上传成功！'</span>);\n        })\n      })\n    })\n    app.listen(<span class=\"number\">1234</span>, <span class=\"string\">'localhost'</span>);\n</code></pre><ul>\n<li><p>compress 压缩响应流数据</p>\n<pre><code>  <span class=\"comment\">// 在其他中间前调用才能保证全部数据流都压缩</span>\n</code></pre></li>\n<li><p>cookieParser 处理 cookie</p>\n<pre><code>  <span class=\"keyword\">var</span> express = require(<span class=\"string\">'express'</span>);\n  <span class=\"keyword\">var</span> app = express();\n  <span class=\"comment\">// 使用 cookieParser 处理 cookie</span>\n  app.<span class=\"keyword\">use</span>(express.cookieParser());\n  <span class=\"comment\">// 提前在 cookie.html 中埋下 cookie</span>\n  app.<span class=\"keyword\">get</span>(<span class=\"string\">'/cookie.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n      res.sendFile(__dirname + <span class=\"string\">'/cookie.html'</span>);\n  });\n  app.post(<span class=\"string\">'/cookie.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n    <span class=\"keyword\">var</span> cookies = req.cookies;\n    <span class=\"comment\">// 开始处理</span>\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> cookies) {\n      res.write(<span class=\"string\">'名：'</span>, key);\n      res.write(<span class=\"string\">'值：'</span>, cookies[key]);\n      res.write(<span class=\"string\">'&lt;/br&gt;'</span>);\n    }\n    res.end();\n  });\n  app.listen(<span class=\"number\">1234</span>, <span class=\"string\">'localhost'</span>);        \n</code></pre></li>\n<li><p>csrf 防止跨站访问</p>\n<pre><code>  <span class=\"comment\">// 与 session 中间件 和 bodyParser 中间件配合使用</span>\n</code></pre></li>\n<li><p>directory 列出某目录下的文件列表</p>\n<pre><code>  <span class=\"comment\">// app.use(express.directory(path, [options]))</span>\n  <span class=\"comment\">// 与 express.static 配合使用</span>\n  app.<span class=\"keyword\">use</span>(express.<span class=\"keyword\">static</span>(<span class=\"number\">__</span>dirname));\n  app.<span class=\"keyword\">use</span>(express.directory(<span class=\"number\">__</span>dirname), {icons: <span class=\"keyword\">true</span>}); <span class=\"comment\">// 显示文件icon</span>\n  <span class=\"comment\">// 此时会列出文件目录，且点击静态文件（如js/css）可直接访问</span>\n</code></pre></li>\n</ul>\n<ul>\n<li><p>errorHandler 捕获错误</p>\n</li>\n<li><p>limit 限制请求提交数据的字节数</p>\n<pre><code>  <span class=\"comment\">// 限制为 1M，超出则报错</span>\n  <span class=\"keyword\">var</span> size = <span class=\"number\">1024</span>*<span class=\"number\">1024</span>; <span class=\"comment\">// 1M</span>\n  app.<span class=\"keyword\">use</span>(express.limit(size))\n</code></pre></li>\n</ul>\n<ul>\n<li><p>logger 输出日志到文件中</p>\n<pre><code>  <span class=\"comment\">// app.use(express.logger([options]))</span>\n  <span class=\"comment\">// options = {</span>\n  <span class=\"comment\">//    immediate: false, // 是否在接收到客户端请求时就输出日志,否则服务器端发送完响应数据才输出</span>\n  <span class=\"comment\">//    format: 'default', // 可选 default/short/tiny/dev，即输出日志的格式        //  stream: process.stdout, // 指定输出数据流的对象</span>\n  <span class=\"comment\">//     buffer: undefined, // 整数毫秒则指定缓存区有效时间啊暖，或为 true 时，使用缓存区且有效时间为 1000ms</span>\n  <span class=\"comment\">// }</span>\n  <span class=\"keyword\">var</span> express = <span class=\"keyword\">require</span>(<span class=\"string\">'express'</span>);\n  <span class=\"keyword\">var</span> app = express();\n  app.<span class=\"keyword\">use</span>(express.logger({\n      format: <span class=\"string\">'default'</span>,\n      stream: process.stdout\n  }))\n</code></pre></li>\n</ul>\n<ul>\n<li><p>methodOverride 为 bodyParser 提供 HTTP 支持</p>\n</li>\n<li><p>reponseTime 在响应头添加 X-Request-Time 字段</p>\n<pre><code>  <span class=\"comment\">// 使用后可在 浏览器控制台查看到响应头多了一个 X-Request-Time </span>\n  app.<span class=\"keyword\">use</span>(express.responseTime());\n</code></pre></li>\n</ul>\n<ul>\n<li><p>router 提供路由功能</p>\n<pre><code>  <span class=\"comment\">// express 3.x 隐式使用了 router </span>\n</code></pre></li>\n<li><p>session 提供session功能</p>\n<pre><code>  <span class=\"comment\">// session 加密过的数据保存在 cookie 中</span>\n  app.<span class=\"keyword\">use</span>(express.session([options]))\n  options = {\n      key: connect.sid, <span class=\"comment\">// 字符串，指定保存这个 session 的 cookie 名</span>\n      store: , <span class=\"comment\">// 保存 session 的第三方存储对象</span>\n      fingerprint: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{}, <span class=\"comment\">// 一个自定义指纹生成函数</span>\n      cookie: {path: <span class=\"string\">'/'</span>, httpOnly: <span class=\"keyword\">true</span>, maxAge: <span class=\"number\">14400000</span>}, <span class=\"comment\">// 指定保存 session 的设置 cookie 的对象</span>\n      secret: <span class=\"string\">'xiaolai'</span>, <span class=\"comment\">// 字符串，用于 session 的数据加密（加盐）</span>\n  }\n\n  <span class=\"comment\">// 使用这个中间件后，就有了 req.session 属性</span>\n  <span class=\"keyword\">var</span> express = <span class=\"keyword\">require</span>(<span class=\"string\">'express'</span>);\n  <span class=\"keyword\">var</span> app = express();\n  app.<span class=\"keyword\">use</span>(express.cookieParser());\n  app.<span class=\"keyword\">use</span>(express.session({secret: <span class=\"string\">'xiaolai'</span>}));\n  app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n      res.sendFile(__dianema + <span class=\"string\">'/index.html'</span>);\n      <span class=\"comment\">// 开始设置</span>\n      req.session.username = <span class=\"string\">'xiaolai'</span>;\n      req.session.password = <span class=\"string\">'password'</span>;\n\n      <span class=\"comment\">// 重新生成</span>\n      <span class=\"comment\">// req.session.regenerate(function (err) {});</span>\n\n      <span class=\"comment\">// 销毁</span>\n      <span class=\"comment\">// req.session.destroy(function (err) {});</span>\n  })\n</code></pre></li>\n<li><p>static 设置访问静态文件的功能</p>\n<pre><code>  <span class=\"comment\">// public 为存放静态文件的目录</span>\n  app.<span class=\"keyword\">use</span>(express.<span class=\"keyword\">static</span>('public'))\n</code></pre></li>\n<li><p>自定义错误处理中间件</p>\n<pre><code>  app.<span class=\"keyword\">use</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, req, res, next)</span> </span>{\n      <span class=\"comment\">// 输出错误到服务端</span>\n      console.log(err.stack);\n      next();\n  })    \n  app.<span class=\"keyword\">use</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, req, res, next)</span> </span>{\n      <span class=\"comment\">// 输出错误到客户端</span>\n      res.send(<span class=\"number\">500</span>, err.message);\n  })    \n</code></pre></li>\n</ul>\n<a id=\"more\"></a>    \n\n<h2 id=\"Express_框架中常用的一些配置的使用方法\">Express 框架中常用的一些配置的使用方法</h2>\n<pre><code>    <span class=\"comment\">// env 指定环境， callback为无参数的回调</span>\n    <span class=\"comment\">// app.configure([env], callback)    </span>\n\n    <span class=\"comment\">// 设置</span>\n    app.<span class=\"keyword\">set</span>(name, <span class=\"keyword\">value</span>);\n    <span class=\"comment\">// 将 布尔类型的内部变量设置为 true</span>\n    app.enable(name);\n    <span class=\"comment\">// 或 false</span>\n\n    app.disable(name);\n    <span class=\"comment\">// 判断是否为 true</span>\n    <span class=\"keyword\">var</span> isTure = app.enabled(name)\n    <span class=\"comment\">// 或 false</span>\n    <span class=\"keyword\">var</span> isFalse = app.disabled(name)\n\n    <span class=\"comment\">// 获取设置</span>\n    <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = app.<span class=\"keyword\">get</span>(name);\n</code></pre><ul>\n<li><p>所有环境下的配置</p>\n<pre><code>  app.configure(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n      app.<span class=\"keyword\">set</span>(<span class=\"string\">'title'</span>, <span class=\"string\">'My title'</span>);\n      <span class=\"comment\">// 模板文件存放的目录</span>\n      app.<span class=\"keyword\">set</span>(<span class=\"string\">'views'</span>, __dirname + <span class=\"string\">'/views'</span>);\n      <span class=\"comment\">// 模板引擎</span>\n      app.<span class=\"keyword\">set</span>(<span class=\"string\">'view engine'</span>, <span class=\"string\">'ejs'</span>);\n      <span class=\"comment\">// 使用一些中间件</span>\n      app.<span class=\"keyword\">use</span>(express.bodyParser());\n      app.<span class=\"keyword\">use</span>(express.cookieParser());\n      app.<span class=\"keyword\">use</span>(express.<span class=\"keyword\">static</span>(__dirname + <span class=\"string\">'/public'</span>));\n      app.<span class=\"keyword\">use</span>(app.router);\n  });    \n\n  <span class=\"comment\">// 相当于：</span>\n  app.<span class=\"keyword\">set</span>(<span class=\"string\">'title'</span>, <span class=\"string\">'My title'</span>);\n  <span class=\"comment\">// ...</span>\n</code></pre></li>\n<li><p>针对开发环境的配置        </p>\n<pre><code>  app.configure(<span class=\"string\">'development'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n      app.<span class=\"keyword\">set</span>(<span class=\"string\">'db uri'</span>, <span class=\"string\">'localhost/dev'</span>);\n  });\n\n  <span class=\"comment\">// 相当于：</span>\n  <span class=\"keyword\">if</span> (app.<span class=\"keyword\">get</span>(<span class=\"string\">'env'</span>) === <span class=\"string\">'development'</span>) {\n      app.<span class=\"keyword\">set</span>(<span class=\"string\">'db uri'</span>, <span class=\"string\">'localhost/dev'</span>);\n  }\n</code></pre></li>\n<li><p>针对生产环境的配置</p>\n<pre><code>  app.configure(<span class=\"string\">'production'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n      app.<span class=\"keyword\">set</span>(<span class=\"string\">'db uri'</span>, <span class=\"string\">'222.201.132.xxx/prod'</span>);\n  })    \n\n  <span class=\"comment\">// 相当于：</span>\n  <span class=\"keyword\">if</span> (app.<span class=\"keyword\">get</span>(<span class=\"string\">'env'</span>) === <span class=\"string\">'production'</span>) {\n      app.<span class=\"keyword\">set</span>(<span class=\"string\">'db uri'</span>, <span class=\"string\">'222.201.132.xxx/prod'</span>);\n  }\n</code></pre></li>\n</ul>\n","source":"_posts/express提供的中间件.md","raw":"title: express提供的中间件\ndate: 2014-05-19 10:26:54\ncategories: Node\ntags: \n    - express\n    - middleware\n\n---\n\n## Express 框架中常用的一些中间件的使用方法\n\n- basiAuth 访问控制\n\n\t\t// 帐号密码正确时才发回 true，才能继续访问\n\t\tvar express =  require('express');\n\t\tvar app = express();\n\t\t// 这里的用户名和密码应从数据库读取\n\t\tapp.use(express.basicAuth('username', 'password'));\n\t\tapp.get('/', function (req, res) {\n\t\t\tres. send('成功登录后才会看到这段内容。');\n\t\t});\n\t\tapp.listen(1234, 'localhost');\n\n- bodyParse 处理请求 body 的内容\n\n\t\t// 内部使用 JSON\t编码、url 编码处理和文件的上传处理\n\t\t// 处理一个上传文件\n        <body>\n          <h1>使用 express.bodyParser 中间件上传文件</h1>\n          <form id=\"myForm\" action=\"upload.html\" method=\"post\" enctype=\"multipart/form-data\">\n            <input type=\"file\" id=\"file\" name=\"file\">\n            <input type=\"submit\" onclick=\"uploadFile()\" value=\"上传\">\n          </form>\n          <div id=\"result\">\n            选择文件后，点击按钮上传.\n          </div>\n        </body>\n\n\t\t\n    \t// 帐号密码正确时才发回 true，才能继续访问\n    \tvar express =  require('express');\n        var connect = require('connect');\n        var fs = require('fs');\n    \t\tvar app = express();\n        // 使用 bodyParser 处理上传\n        // app.use(express.bodyParser());\n        app.use(connect.urlencoded());\n        app.use(connect.json());\n        app.get('/upload.html', function (req, res) {\n          res.sendFile(__dirname + '/upload.html');\n        });\n        // 开始处理\n        app.post('/upload.html', function (req, res) {\n          var file = req.files.myFile;\n          // 读取文件\n          fs.readFile(file.path, function (err, data) {\n            if (err) throw err; //读取文件失败\n            fs.writeFile(file.name, data, function (err) {\n              if (err) throw err; // 写入文件失败\n              res.send('文件上传成功！');\n            })\n          })\n        })\n    \tapp.listen(1234, 'localhost');\n\t\t\n\t\t\n\t \n- compress 压缩响应流数据\n\n\t\t// 在其他中间前调用才能保证全部数据流都压缩\n\t\t\n- cookieParser 处理 cookie\n\n        var express = require('express');\n        var app = express();\n        // 使用 cookieParser 处理 cookie\n        app.use(express.cookieParser());\n        // 提前在 cookie.html 中埋下 cookie\n        app.get('/cookie.html', function (req, res) {\n            res.sendFile(__dirname + '/cookie.html');\n        });\n        app.post('/cookie.html', function (req, res) {\n          var cookies = req.cookies;\n          // 开始处理\n          for (var key in cookies) {\n            res.write('名：', key);\n            res.write('值：', cookies[key]);\n            res.write('</br>');\n          }\n          res.end();\n        });\n        app.listen(1234, 'localhost');\t\t\n\t\t\n- csrf 防止跨站访问\n\n\t\t// 与 session 中间件 和 bodyParser 中间件配合使用\n\t\t\n- directory 列出某目录下的文件列表\n\n\t\t// app.use(express.directory(path, [options]))\n\t\t// 与 express.static 配合使用\n\t\tapp.use(express.static(__dirname));\n\t\tapp.use(express.directory(__dirname), {icons: true}); // 显示文件icon\n\t\t// 此时会列出文件目录，且点击静态文件（如js/css）可直接访问\n\n\n- errorHandler 捕获错误\n\n- limit 限制请求提交数据的字节数\n\n\t\t// 限制为 1M，超出则报错\n\t\tvar size = 1024*1024; // 1M\n\t\tapp.use(express.limit(size))\n\n\n- logger 输出日志到文件中\n\n\t\t// app.use(express.logger([options]))\n\t\t// options = {\n\t\t//\timmediate: false, // 是否在接收到客户端请求时就输出日志,否则服务器端发送完响应数据才输出\n\t\t//\tformat: 'default', // 可选 default/short/tiny/dev，即输出日志的格式\t\t//  stream: process.stdout, // 指定输出数据流的对象\n\t\t// \tbuffer: undefined, // 整数毫秒则指定缓存区有效时间啊暖，或为 true 时，使用缓存区且有效时间为 1000ms\n\t\t// }\n\t\tvar express = require('express');\n\t\tvar app = express();\n\t\tapp.use(express.logger({\n\t\t\tformat: 'default',\n\t\t\tstream: process.stdout\n\t\t}))\n\t\t\n\n\n- methodOverride 为 bodyParser 提供 HTTP 支持\n\n- reponseTime 在响应头添加 X-Request-Time 字段\n\n\t\t// 使用后可在 浏览器控制台查看到响应头多了一个 X-Request-Time \n\t\tapp.use(express.responseTime());\n\t\t\n\n- router 提供路由功能\n\t\t\n\t\t// express 3.x 隐式使用了 router \n\t\t\n- session 提供session功能\n\n\t\t// session 加密过的数据保存在 cookie 中\n\t\tapp.use(express.session([options]))\n\t\toptions = {\n\t\t\tkey: connect.sid, // 字符串，指定保存这个 session 的 cookie 名\n\t\t\tstore: , // 保存 session 的第三方存储对象\n\t\t\tfingerprint: function () {}, // 一个自定义指纹生成函数\n\t\t\tcookie: {path: '/', httpOnly: true, maxAge: 14400000}, // 指定保存 session 的设置 cookie 的对象\n\t\t\tsecret: 'xiaolai', // 字符串，用于 session 的数据加密（加盐）\n\t\t}\n\t\t\n\t\t// 使用这个中间件后，就有了 req.session 属性\n\t\tvar express = require('express');\n\t\tvar app = express();\n\t\tapp.use(express.cookieParser());\n\t\tapp.use(express.session({secret: 'xiaolai'}));\n\t\tapp.get('/', function (req, res) {\n\t\t\tres.sendFile(__dianema + '/index.html');\n\t\t\t// 开始设置\n\t\t\treq.session.username = 'xiaolai';\n\t\t\treq.session.password = 'password';\n\t\t\t\n\t\t\t// 重新生成\n\t\t\t// req.session.regenerate(function (err) {});\n\t\t\t\n\t\t\t// 销毁\n\t\t\t// req.session.destroy(function (err) {});\n\t\t})\n\n- static 设置访问静态文件的功能\n\n\t\t// public 为存放静态文件的目录\n\t\tapp.use(express.static('public'))\n\t\t\n- 自定义错误处理中间件\n\n\t\tapp.use(function (err, req, res, next) {\n\t\t\t// 输出错误到服务端\n\t\t\tconsole.log(err.stack);\n\t\t\tnext();\n\t\t})\t\n\t\tapp.use(function (err, req, res, next) {\n\t\t\t// 输出错误到客户端\n\t\t\tres.send(500, err.message);\n\t\t})\t\n\n<!-- more -->\t\n\n## Express 框架中常用的一些配置的使用方法\n\n\t\t// env 指定环境， callback为无参数的回调\n\t\t// app.configure([env], callback)\t\n\n\t\t// 设置\n\t\tapp.set(name, value);\n\t\t// 将 布尔类型的内部变量设置为 true\n\t\tapp.enable(name);\n\t\t// 或 false\n\t\t\n\t\tapp.disable(name);\n\t\t// 判断是否为 true\n\t\tvar isTure = app.enabled(name)\n\t\t// 或 false\n\t\tvar isFalse = app.disabled(name)\n\t\t\n\t\t// 获取设置\n\t\tvar value = app.get(name);\n\t\t\n\n- 所有环境下的配置\n\n\t\tapp.configure(function () {\n\t\t\tapp.set('title', 'My title');\n\t\t\t// 模板文件存放的目录\n\t\t\tapp.set('views', __dirname + '/views');\n\t\t\t// 模板引擎\n\t\t\tapp.set('view engine', 'ejs');\n\t\t\t// 使用一些中间件\n\t\t\tapp.use(express.bodyParser());\n\t\t\tapp.use(express.cookieParser());\n\t\t\tapp.use(express.static(__dirname + '/public'));\n\t\t\tapp.use(app.router);\n\t\t});\t\n\t\t\n\t\t// 相当于：\n\t\tapp.set('title', 'My title');\n\t\t// ...\n\t\t\n- 针对开发环境的配置\t\t\n\t\n\t\tapp.configure('development', function () {\n\t\t\tapp.set('db uri', 'localhost/dev');\n\t\t});\n\t\t\n\t\t// 相当于：\n\t\tif (app.get('env') === 'development') {\n\t\t\tapp.set('db uri', 'localhost/dev');\n\t\t}\n\n- 针对生产环境的配置\n\n\t\tapp.configure('production', function () {\n\t\t\tapp.set('db uri', '222.201.132.xxx/prod');\n\t\t})\t\n\t\t\n\t\t// 相当于：\n\t\tif (app.get('env') === 'production') {\n\t\t\tapp.set('db uri', '222.201.132.xxx/prod');\n\t\t}\n\t\t\n\t\n\n\n\n\n\n\n\n\t\t\n\t\t\n\t\t\n\t\t\n ","slug":"express提供的中间件","updated":1418908898000,"excerpt":"<h2 id=\"Express_框架中常用的一些中间件的使用方法\">Express 框架中常用的一些中间件的使用方法</h2>\n<ul>\n<li><p>basiAuth 访问控制</p>\n<pre><code>  <span class=\"comment\">// 帐号密码正确时才发回 true，才能继续访问</span>\n  <span class=\"keyword\">var</span> express =  <span class=\"keyword\">require</span>(<span class=\"string\">'express'</span>);\n  <span class=\"keyword\">var</span> app = express();\n  <span class=\"comment\">// 这里的用户名和密码应从数据库读取</span>\n  app.<span class=\"keyword\">use</span>(express.basicAuth(<span class=\"string\">'username'</span>, <span class=\"string\">'password'</span>));\n  app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n      res. send(<span class=\"string\">'成功登录后才会看到这段内容。'</span>);\n  });\n  app.listen(<span class=\"number\">1234</span>, <span class=\"string\">'localhost'</span>);\n</code></pre></li>\n<li><p>bodyParse 处理请求 body 的内容</p>\n<pre><code>  // 内部使用 <span class=\"type\">JSON</span>    编码、url 编码处理和文件的上传处理\n  // 处理一个上传文件\n  &lt;body&gt;\n    &lt;h1&gt;使用 express.bodyParser 中间件上传文件&lt;/h1&gt;\n    &lt;form id=<span class=\"string\">\"myForm\"</span> action=<span class=\"string\">\"upload.html\"</span> <span class=\"keyword\">method</span>=<span class=\"string\">\"post\"</span> enctype=<span class=\"string\">\"multipart/form-data\"</span>&gt;\n      &lt;input <span class=\"keyword\">type</span>=<span class=\"string\">\"file\"</span> id=<span class=\"string\">\"file\"</span> name=<span class=\"string\">\"file\"</span>&gt;\n      &lt;input <span class=\"keyword\">type</span>=<span class=\"string\">\"submit\"</span> onclick=<span class=\"string\">\"uploadFile()\"</span> value=<span class=\"string\">\"上传\"</span>&gt;\n    &lt;/form&gt;\n    &lt;<span class=\"keyword\">div</span> id=<span class=\"string\">\"result\"</span>&gt;\n      选择文件后，点击按钮上传.\n    &lt;/<span class=\"keyword\">div</span>&gt;\n  &lt;/body&gt;\n</code></pre></li>\n</ul>\n<pre><code>    <span class=\"comment\">// 帐号密码正确时才发回 true，才能继续访问</span>\n    <span class=\"keyword\">var</span> express =  <span class=\"keyword\">require</span>(<span class=\"string\">'express'</span>);\n    <span class=\"keyword\">var</span> connect = <span class=\"keyword\">require</span>(<span class=\"string\">'connect'</span>);\n    <span class=\"keyword\">var</span> fs = <span class=\"keyword\">require</span>(<span class=\"string\">'fs'</span>);\n        <span class=\"keyword\">var</span> app = express();\n    <span class=\"comment\">// 使用 bodyParser 处理上传</span>\n    <span class=\"comment\">// app.use(express.bodyParser());</span>\n    app.<span class=\"keyword\">use</span>(connect.urlencoded());\n    app.<span class=\"keyword\">use</span>(connect.json());\n    app.get(<span class=\"string\">'/upload.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n      res.sendFile(__dirname + <span class=\"string\">'/upload.html'</span>);\n    });\n    <span class=\"comment\">// 开始处理</span>\n    app.post(<span class=\"string\">'/upload.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n      <span class=\"keyword\">var</span> file = req.files.myFile;\n      <span class=\"comment\">// 读取文件</span>\n      fs.readFile(file.path, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, data)</span> </span>{\n        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err; <span class=\"comment\">//读取文件失败</span>\n        fs.writeFile(file.name, data, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n          <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err; <span class=\"comment\">// 写入文件失败</span>\n          res.send(<span class=\"string\">'文件上传成功！'</span>);\n        })\n      })\n    })\n    app.listen(<span class=\"number\">1234</span>, <span class=\"string\">'localhost'</span>);\n</code></pre><ul>\n<li><p>compress 压缩响应流数据</p>\n<pre><code>  <span class=\"comment\">// 在其他中间前调用才能保证全部数据流都压缩</span>\n</code></pre></li>\n<li><p>cookieParser 处理 cookie</p>\n<pre><code>  <span class=\"keyword\">var</span> express = require(<span class=\"string\">'express'</span>);\n  <span class=\"keyword\">var</span> app = express();\n  <span class=\"comment\">// 使用 cookieParser 处理 cookie</span>\n  app.<span class=\"keyword\">use</span>(express.cookieParser());\n  <span class=\"comment\">// 提前在 cookie.html 中埋下 cookie</span>\n  app.<span class=\"keyword\">get</span>(<span class=\"string\">'/cookie.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n      res.sendFile(__dirname + <span class=\"string\">'/cookie.html'</span>);\n  });\n  app.post(<span class=\"string\">'/cookie.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n    <span class=\"keyword\">var</span> cookies = req.cookies;\n    <span class=\"comment\">// 开始处理</span>\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> cookies) {\n      res.write(<span class=\"string\">'名：'</span>, key);\n      res.write(<span class=\"string\">'值：'</span>, cookies[key]);\n      res.write(<span class=\"string\">'&lt;/br&gt;'</span>);\n    }\n    res.end();\n  });\n  app.listen(<span class=\"number\">1234</span>, <span class=\"string\">'localhost'</span>);        \n</code></pre></li>\n<li><p>csrf 防止跨站访问</p>\n<pre><code>  <span class=\"comment\">// 与 session 中间件 和 bodyParser 中间件配合使用</span>\n</code></pre></li>\n<li><p>directory 列出某目录下的文件列表</p>\n<pre><code>  <span class=\"comment\">// app.use(express.directory(path, [options]))</span>\n  <span class=\"comment\">// 与 express.static 配合使用</span>\n  app.<span class=\"keyword\">use</span>(express.<span class=\"keyword\">static</span>(<span class=\"number\">__</span>dirname));\n  app.<span class=\"keyword\">use</span>(express.directory(<span class=\"number\">__</span>dirname), {icons: <span class=\"keyword\">true</span>}); <span class=\"comment\">// 显示文件icon</span>\n  <span class=\"comment\">// 此时会列出文件目录，且点击静态文件（如js/css）可直接访问</span>\n</code></pre></li>\n</ul>\n<ul>\n<li><p>errorHandler 捕获错误</p>\n</li>\n<li><p>limit 限制请求提交数据的字节数</p>\n<pre><code>  <span class=\"comment\">// 限制为 1M，超出则报错</span>\n  <span class=\"keyword\">var</span> size = <span class=\"number\">1024</span>*<span class=\"number\">1024</span>; <span class=\"comment\">// 1M</span>\n  app.<span class=\"keyword\">use</span>(express.limit(size))\n</code></pre></li>\n</ul>\n<ul>\n<li><p>logger 输出日志到文件中</p>\n<pre><code>  <span class=\"comment\">// app.use(express.logger([options]))</span>\n  <span class=\"comment\">// options = {</span>\n  <span class=\"comment\">//    immediate: false, // 是否在接收到客户端请求时就输出日志,否则服务器端发送完响应数据才输出</span>\n  <span class=\"comment\">//    format: 'default', // 可选 default/short/tiny/dev，即输出日志的格式        //  stream: process.stdout, // 指定输出数据流的对象</span>\n  <span class=\"comment\">//     buffer: undefined, // 整数毫秒则指定缓存区有效时间啊暖，或为 true 时，使用缓存区且有效时间为 1000ms</span>\n  <span class=\"comment\">// }</span>\n  <span class=\"keyword\">var</span> express = <span class=\"keyword\">require</span>(<span class=\"string\">'express'</span>);\n  <span class=\"keyword\">var</span> app = express();\n  app.<span class=\"keyword\">use</span>(express.logger({\n      format: <span class=\"string\">'default'</span>,\n      stream: process.stdout\n  }))\n</code></pre></li>\n</ul>\n<ul>\n<li><p>methodOverride 为 bodyParser 提供 HTTP 支持</p>\n</li>\n<li><p>reponseTime 在响应头添加 X-Request-Time 字段</p>\n<pre><code>  <span class=\"comment\">// 使用后可在 浏览器控制台查看到响应头多了一个 X-Request-Time </span>\n  app.<span class=\"keyword\">use</span>(express.responseTime());\n</code></pre></li>\n</ul>\n<ul>\n<li><p>router 提供路由功能</p>\n<pre><code>  <span class=\"comment\">// express 3.x 隐式使用了 router </span>\n</code></pre></li>\n<li><p>session 提供session功能</p>\n<pre><code>  <span class=\"comment\">// session 加密过的数据保存在 cookie 中</span>\n  app.<span class=\"keyword\">use</span>(express.session([options]))\n  options = {\n      key: connect.sid, <span class=\"comment\">// 字符串，指定保存这个 session 的 cookie 名</span>\n      store: , <span class=\"comment\">// 保存 session 的第三方存储对象</span>\n      fingerprint: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{}, <span class=\"comment\">// 一个自定义指纹生成函数</span>\n      cookie: {path: <span class=\"string\">'/'</span>, httpOnly: <span class=\"keyword\">true</span>, maxAge: <span class=\"number\">14400000</span>}, <span class=\"comment\">// 指定保存 session 的设置 cookie 的对象</span>\n      secret: <span class=\"string\">'xiaolai'</span>, <span class=\"comment\">// 字符串，用于 session 的数据加密（加盐）</span>\n  }\n\n  <span class=\"comment\">// 使用这个中间件后，就有了 req.session 属性</span>\n  <span class=\"keyword\">var</span> express = <span class=\"keyword\">require</span>(<span class=\"string\">'express'</span>);\n  <span class=\"keyword\">var</span> app = express();\n  app.<span class=\"keyword\">use</span>(express.cookieParser());\n  app.<span class=\"keyword\">use</span>(express.session({secret: <span class=\"string\">'xiaolai'</span>}));\n  app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n      res.sendFile(__dianema + <span class=\"string\">'/index.html'</span>);\n      <span class=\"comment\">// 开始设置</span>\n      req.session.username = <span class=\"string\">'xiaolai'</span>;\n      req.session.password = <span class=\"string\">'password'</span>;\n\n      <span class=\"comment\">// 重新生成</span>\n      <span class=\"comment\">// req.session.regenerate(function (err) {});</span>\n\n      <span class=\"comment\">// 销毁</span>\n      <span class=\"comment\">// req.session.destroy(function (err) {});</span>\n  })\n</code></pre></li>\n<li><p>static 设置访问静态文件的功能</p>\n<pre><code>  <span class=\"comment\">// public 为存放静态文件的目录</span>\n  app.<span class=\"keyword\">use</span>(express.<span class=\"keyword\">static</span>('public'))\n</code></pre></li>\n<li><p>自定义错误处理中间件</p>\n<pre><code>  app.<span class=\"keyword\">use</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, req, res, next)</span> </span>{\n      <span class=\"comment\">// 输出错误到服务端</span>\n      console.log(err.stack);\n      next();\n  })    \n  app.<span class=\"keyword\">use</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, req, res, next)</span> </span>{\n      <span class=\"comment\">// 输出错误到客户端</span>\n      res.send(<span class=\"number\">500</span>, err.message);\n  })    \n</code></pre></li>\n</ul>\n","_id":"9jl4r414qt1zfjmy","comments":true,"layout":"post","photos":[],"link":""},{"title":"grunt 学习笔记","date":1399641582000,"categories":["s1fvmf8yl7edxxwd"],"tags":["nnw358thjbsgh7zk"],"content":"<ul>\n<li><p>配置 Gruntfile.js</p>\n<pre><code>grunt.initConfig({\n  // 读取 package.json 文件\n  pkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),\n\n  // 其他配置，如下面的 jshint/uglify\n  // <span class=\"keyword\">...</span>\n});\n</code></pre></li>\n</ul>\n<ul>\n<li><p>设置 jshint 代码审查</p>\n<p>  执行命令 ~# grunt jshint</p>\n<pre><code>  <span class=\"symbol\">jshint:</span> {\n        <span class=\"symbol\">options:</span> {\n            <span class=\"regexp\">//</span> 使用 jshint-stylish 高亮错误\n          <span class=\"symbol\">reporter:</span> <span class=\"keyword\">require</span>(<span class=\"string\">'jshint-stylish'</span>) \n        },\n      <span class=\"regexp\">//</span> 配置任务启动时要验证的文件\n       <span class=\"symbol\">build:</span> [<span class=\"string\">'Grunfile.js'</span>, <span class=\"string\">'src/**/*.js'</span>]\n     }\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>\n\n<ul>\n<li><p>设置 uglify 压缩js代码</p>\n<p>  执行命令 ~# grunt uglify</p>\n<pre><code>  uglify: {\n        options: {\n        // banner 会显示在压缩后的代码文件中\n      banner: '/*\\n &lt;%= pkg.name %&gt; &lt;%= grunt.<span class=\"keyword\">template</span>.today(<span class=\"string\">\"yyyy-mm-dd\"</span>) %&gt; \\n*/\\n'\n        },\n        // 创建压缩文件路径\n        build: {\n          files: {\n                'dist/js/magic.min.js': 'src/js/magic.js'\n          }\n        }\n  }\n</code></pre></li>\n<li><p>设置 cssmin 压缩css代码</p>\n<p>  // 执行命令 ~# grunt cssmin</p>\n<pre><code>  cssmin: {\n        options: {\n          banner: '/*\\n &lt;%= pkg.name %&gt; &lt;%= grunt.<span class=\"keyword\">template</span>.today(<span class=\"string\">\"yyyy-mm-dd\"</span>) %&gt; \\n*/\\n'\n        },\n        build: {\n          files: {\n            'dist/css/style.min.css': 'src/css/style.css'\n              }\n        }\n  } \n</code></pre></li>\n<li><p>设置 less 代码编译</p>\n<p>  执行命令 ~# grunt less</p>\n<pre><code>  <span class=\"tag\">less</span>: <span class=\"rules\">{\n        <span class=\"rule\"><span class=\"attribute\">build</span>:<span class=\"value\"> {\n          files: {\n                <span class=\"string\">'dist/css/pretty.css'</span>: <span class=\"string\">'src/css/pretty.less'</span>\n          </span></span></span>}\n        }\n  } \n</code></pre></li>\n<li><p>一次执行多个任务</p>\n<p>  执行命令 ~# grunt</p>\n<pre><code>  // Gruntfile.js\n  grunt.initConfig({\n      <span class=\"keyword\">...</span>\n  });\n  // 设置default任务\n  grunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'jshint'</span>, <span class=\"string\">'uglify'</span>, <span class=\"string\">'cssmin'</span>, <span class=\"string\">'less'</span>]);\n</code></pre></li>\n<li><p>配置文件监视，自动执行任务</p>\n<p>  执行命令 ~# grunt watch<br>  当文件改变并保存时，自动执行任务</p>\n<pre><code>  <span class=\"comment\">// Gruntfile.js</span>\n  grunt.initConfig({\n      ...\n  <span class=\"comment\">// 配置监视</span>\n      watch: {\n          <span class=\"comment\">// 监视 css/less 文件，执行 less/cssmin 任务</span>\n            stylesheets: {\n              files: [<span class=\"symbol\">'src</span><span class=\"javadoc\">/**/*.css', 'src/**/</span>*.less'],\n              tasks: [<span class=\"symbol\">'les</span>s', <span class=\"symbol\">'cssmi</span>n']\n              },\n            <span class=\"comment\">// 监视 js 文件， 执行 jshint/uplify 任务</span>\n            scripts: {\n              files: <span class=\"symbol\">'src</span><span class=\"javadoc\">/**/*.js',\n              tasks: ['jshint', 'uglify']\n              }\n          }\n  });</span>\n</code></pre></li>\n<li><p>使用  time-grunt 记录每个任务执行的时间</p>\n</li>\n<li><p>使用 node-minify 压缩文件</p>\n</li>\n</ul>\n<p><a href=\"http://scotch.io/bar-talk/a-simple-guide-to-getting-started-with-grunt\" target=\"_blank\" rel=\"external\">参考资料</a></p>\n","source":"_posts/grunt_学习笔记.md","raw":"title: grunt 学习笔记\ndate: 2014-05-09 21:19:42\ncategories: Tools\ntags: \n  - grunt\n\n---\n\n\n- 配置 Gruntfile.js\n\n\t  grunt.initConfig({\n\t    // 读取 package.json 文件\n    \tpkg: grunt.file.readJSON('package.json'),\n    \t\n\t\t// 其他配置，如下面的 jshint/uglify\n\t\t// ...\n\t  });\n\n\n- 设置 jshint 代码审查\n\n\t执行命令 ~# grunt jshint\n\n\t\tjshint: {\n      \t\toptions: {\n      \t\t\t// 使用 jshint-stylish 高亮错误\n        \t\treporter: require('jshint-stylish') \n      \t\t},\n\t  \t  // 配置任务启动时要验证的文件\n   \t\t  build: ['Grunfile.js', 'src/**/*.js']\n   \t\t}\n   \t\t\n<!--more-->\n\n- 设置 uglify 压缩js代码\n\t\n\t执行命令 ~# grunt uglify\n\t\n\t\tuglify: {\n      \t\toptions: {\n      \t\t// banner 会显示在压缩后的代码文件中\n        \tbanner: '/*\\n <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> \\n*/\\n'\n      \t\t},\n      \t\t// 创建压缩文件路径\n      \t\tbuild: {\n        \t\tfiles: {\n          \t\t\t'dist/js/magic.min.js': 'src/js/magic.js'\n        \t\t}\n      \t\t}\n    \t}\n    \t\n- 设置 cssmin 压缩css代码\n\t\n\t// 执行命令 ~# grunt cssmin\n\t\n\t\tcssmin: {\n      \t\toptions: {\n        \t\tbanner: '/*\\n <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> \\n*/\\n'\n      \t\t},\n      \t\tbuild: {\n        \t\tfiles: {\n          \t\t'dist/css/style.min.css': 'src/css/style.css'\n      \t\t  \t}\n      \t\t}\n    \t} \n   \t \t\n- 设置 less 代码编译\n\n\t执行命令 ~# grunt less\n\t\n\t\tless: {\n      \t\tbuild: {\n        \t\tfiles: {\n          \t\t\t'dist/css/pretty.css': 'src/css/pretty.less'\n        \t\t}\n      \t\t}\n    \t} \n    \t\n- 一次执行多个任务\n\n\t执行命令 ~# grunt\n\n\t\t// Gruntfile.js\n\t\tgrunt.initConfig({\n\t\t\t...\n\t\t});\n\t\t// 设置default任务\n\t\tgrunt.registerTask('default', ['jshint', 'uglify', 'cssmin', 'less']);\n\n- 配置文件监视，自动执行任务\n\n\t执行命令 ~# grunt watch\n\t当文件改变并保存时，自动执行任务\n\t\n\t\t// Gruntfile.js\n\t\tgrunt.initConfig({\n\t\t\t...\n\t\t// 配置监视\n    \t\twatch: {\n\t\t\t\t// 监视 css/less 文件，执行 less/cssmin 任务\n\t      \t\tstylesheets: {\n    \t    \t\tfiles: ['src/**/*.css', 'src/**/*.less'],\n        \t\t\ttasks: ['less', 'cssmin']\n      \t  \t\t},\n      \t\t\t// 监视 js 文件， 执行 jshint/uplify 任务\n\t      \t\tscripts: {\n    \t    \t\tfiles: 'src/**/*.js',\n\t\t        \ttasks: ['jshint', 'uglify']\n      \t\t\t  }\n\t\t    \t}\n\t\t});\n\n- 使用  time-grunt 记录每个任务执行的时间\n\n- 使用 node-minify 压缩文件\n\n   \t\n\n\n[参考资料](http://scotch.io/bar-talk/a-simple-guide-to-getting-started-with-grunt)","slug":"grunt_学习笔记","updated":1418908898000,"excerpt":"<ul>\n<li><p>配置 Gruntfile.js</p>\n<pre><code>grunt.initConfig({\n  // 读取 package.json 文件\n  pkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),\n\n  // 其他配置，如下面的 jshint/uglify\n  // <span class=\"keyword\">...</span>\n});\n</code></pre></li>\n</ul>\n<ul>\n<li><p>设置 jshint 代码审查</p>\n<p>  执行命令 ~# grunt jshint</p>\n<pre><code>  <span class=\"symbol\">jshint:</span> {\n        <span class=\"symbol\">options:</span> {\n            <span class=\"regexp\">//</span> 使用 jshint-stylish 高亮错误\n          <span class=\"symbol\">reporter:</span> <span class=\"keyword\">require</span>(<span class=\"string\">'jshint-stylish'</span>) \n        },\n      <span class=\"regexp\">//</span> 配置任务启动时要验证的文件\n       <span class=\"symbol\">build:</span> [<span class=\"string\">'Grunfile.js'</span>, <span class=\"string\">'src/**/*.js'</span>]\n     }\n</code></pre></li>\n</ul>\n","_id":"uflx76vgojlsdkwz","comments":true,"layout":"post","photos":[],"link":""},{"title":"HTML5-file API 学习","tags":["4sm1lzbot65figpw"],"id":529,"categories":["bzketmbod14nx67f"],"date":1384846970000,"content":"<p>为实现图片上传前预览并限制图片大小，貌似只能通过flash和HTML5的API来解决了吧？</p>\n<p>今天学习了HTML5的file API，将预览和限制大小的功能应用到了项目里。</p>\n<p>练习代码先贴到这，方便自己查阅，日后比较空闲时再回来好好研究那些API的机制吧：）</p>\n<p>[html]</p>\n<p>&lt;p&gt;请选择图片(可多选)：&lt;/p&gt;<br> &lt;input id=&quot;file_input&quot; type=&quot;file&quot; multiple style=&quot;display:none;&quot; onchange=&quot;handleFiles(this.files)&quot;&gt;<br> &lt;button id=&quot;select-btn&quot;&gt;请选择图片&lt;/button&gt;<br> &lt;div id=&quot;dropbox&quot; style=&quot;width:300px;height:200px;background:#eee;&quot;&gt;<br> 或拖动图片到此处<br> &lt;/div&gt;<br> &lt;ol id=&quot;preview-img-list&quot;&gt;</p>\n<p>&lt;/ol&gt;<br> &lt;button id=&quot;send-btn&quot;&gt;发送！&lt;/button&gt;</p>\n<p>[/html]</p>\n<p>[javascript]</p>\n<p>// 获取文件<br> var file_input = document.getElementById(‘file_input’);<br> var select_btn = document.getElementById(‘select-btn’);<br> var preview_img_list = document.getElementById(‘preview-img-list’);<br> var dropbox = document.getElementById(‘dropbox’);<br> var send_btn = document.getElementById(‘send-btn’);</p>\n<p>// 选择文件<br> select_btn.onclick = function(){<br> file_input.click();<br> };</p>\n<p>send_btn.onclick = function(){<br> sendFiles();<br> };</p>\n<p>// 监听文件改变<br> file_input.addEventListener(‘change’, handleFiles, false);<br> // 监听拖拽事件<br> dropbox.addEventListener(‘dragenter’, dragenter, false);<br> dropbox.addEventListener(‘dragover’, dragover, false);<br> dropbox.addEventListener(‘drop’, drop, false);</p>\n<p>// 接受并预览图片<br> function handleFiles(files){<br> var len = files.length;<br> var imageType = /image.*/;<br> window.URL = window.URL || window.webkitURL;<br> if (len) {<br> preview_img_list.innerHTML = ‘’;<br> for (var i = 0; i &lt; len; i++) {<br> if( ! files[i].type.match(imageType)) {<br> // 不是图片 跳过<br> continue;<br> }</p>\n<p>var li = document.createElement(‘li’);<br> var img = document.createElement(‘img’);<br> var p = document.createElement(‘p’);</p>\n<p>p.innerHTML = ‘name: ‘ + files[i].name + &quot; &lt;br /&gt;size: &quot; + files[i].size + ‘ Bytes’ + &quot;&lt;br/&gt;type: &quot; + files[i].type;</p>\n<p>// 将file对象存在当前图片中,用于后续创建上传任务<br> img.file = files[i];<br> // 添加一个类，方便选择<br> img.classList.add(‘obj’);<br> /<em>方法一：使用URL对象预览图片</em>/<br> // 使用window.URL.createObjectURL创建 blob URL<br> img.src = img.src = window.URL.createObjectURL(files[i]);<br> img.onload = function(e) {<br> // 使用window.URL.revokeObjectURL释放URL对象，因为图片加载完成后不再需要这个对象<br> window.URL.revokeObjectURL(this.src);<br> }<br> /<em>方法一结束</em>/</p>\n<p>/<em>方法二：使用FileReader对象预览图片 </em>/<br> // var reader = new FileReader();<br> // reader.onload = (function(aImg) {<br> // return function(e) {<br> // aImg.src = e.target.result;<br> // };<br> // })(img);<br> // reader.readAsDataURL(files[i]);<br> /<em>方法二结束 </em>/</p>\n<p>li.appendChild(img);<br> preview_img_list.appendChild(li);</p>\n<p>};<br> }<br> }</p>\n<p>// 创建上传任务<br> function sendFiles() {<br> var imgs = document.querySelectorAll(‘.obj’);<br> var len = imgs.length;<br> for (var i = 0; i &lt; len; i++) {<br> // 第二个参数用于读取图片数据<br> new FileUpLoad(imgs[i], imgs[i].file);<br> };<br> }</p>\n<p>function FileUpLoad(img, file) {<br> var reader = new FileReader();<br> // 创建一个 throbber 用于显示进度信息<br> this.ctrl = createThrobber(img);<br> // 创建一个XMLHttpRequest对象用来上传数据<br> var xhr = new XMLHttpRequest();<br> this.xhr = xhr;</p>\n<p>var self = this;<br> // 监听数据上传，更新throbber<br> this.xhr.upload.addEventListener(‘progress’, function(e){<br> if (e.lengthComputable) {<br> var percentage = Math.round((e.loaded * 100) / e.total);<br> self.ctrl.update(percentage);<br> }<br> }, false);<br> // 上传完成，更新进度到100%，移除throbber 因为不再需要<br> xhr.upload.addEventListener(‘load’, function(e) {<br> self.ctrl.update(100);<br> var canvas = self.ctrl.ctx.canvas;<br> canvas.parentNode.removeChild(canvas);<br> }, false);<br> // 使用POST方式发送数据<br> xhr.open(&quot;POST&quot;, &quot;<a href=\"http://demos.hacks.mozilla.org/paul/demos/resources/webservices/devnull.php&amp;quot\" target=\"_blank\" rel=\"external\">http://demos.hacks.mozilla.org/paul/demos/resources/webservices/devnull.php&amp;quot</a>;);<br> // 使用一个通用的MIME类型<br> xhr.overrideMimeType(‘text/plain; charset=x-user-defined-binary’);<br> reader.onload = function(evt) {<br> // 以二进制形式发送<br> xhr.sendAsBinary(evt.target.result);<br> };<br> // 将文件转化为二进制字符串形式<br> reader.readAsBinaryString(file);<br> }</p>\n<p>&amp;nbsp;</p>\n<p>function dragenter(e) {<br> e.stopPropagation();<br> e.preventDefault();<br> }<br> function dragover(e) {<br> e.stopPropagation();<br> e.preventDefault();<br> }<br> function drop(e) {<br> e.stopPropagation();<br> e.preventDefault();</p>\n<p>var dt = e.dataTransfer;<br> var files = dt.files;</p>\n<p>handleFiles(files);<br> }</p>\n<p>[/javascript]</p>\n<p>&nbsp;</p>\n<p>这个File API 使得浏览器支持预览、图片大小/类型限制、拖拽上传、多图上传。</p>\n<p>&nbsp;</p>\n","source":"_posts/html5-file-api-e5ada6e4b9a0.md","raw":"title: 'HTML5-file API 学习'\ntags:\n  - fileupload\nid: 529\ncategories:\n  - HTML\ndate: 2013-11-19 15:42:50\n---\n\n为实现图片上传前预览并限制图片大小，貌似只能通过flash和HTML5的API来解决了吧？\n\n今天学习了HTML5的file API，将预览和限制大小的功能应用到了项目里。\n\n练习代码先贴到这，方便自己查阅，日后比较空闲时再回来好好研究那些API的机制吧：）\n\n[html]\n\n&lt;p&gt;请选择图片(可多选)：&lt;/p&gt;\n &lt;input id=&quot;file_input&quot; type=&quot;file&quot; multiple style=&quot;display:none;&quot; onchange=&quot;handleFiles(this.files)&quot;&gt;\n &lt;button id=&quot;select-btn&quot;&gt;请选择图片&lt;/button&gt;\n &lt;div id=&quot;dropbox&quot; style=&quot;width:300px;height:200px;background:#eee;&quot;&gt;\n 或拖动图片到此处\n &lt;/div&gt;\n &lt;ol id=&quot;preview-img-list&quot;&gt;\n\n&lt;/ol&gt;\n &lt;button id=&quot;send-btn&quot;&gt;发送！&lt;/button&gt;\n\n[/html]\n\n[javascript]\n\n// 获取文件\n var file_input = document.getElementById('file_input');\n var select_btn = document.getElementById('select-btn');\n var preview_img_list = document.getElementById('preview-img-list');\n var dropbox = document.getElementById('dropbox');\n var send_btn = document.getElementById('send-btn');\n\n// 选择文件\n select_btn.onclick = function(){\n file_input.click();\n };\n\nsend_btn.onclick = function(){\n sendFiles();\n };\n\n// 监听文件改变\n file_input.addEventListener('change', handleFiles, false);\n // 监听拖拽事件\n dropbox.addEventListener('dragenter', dragenter, false);\n dropbox.addEventListener('dragover', dragover, false);\n dropbox.addEventListener('drop', drop, false);\n\n// 接受并预览图片\n function handleFiles(files){\n var len = files.length;\n var imageType = /image.*/;\n window.URL = window.URL || window.webkitURL;\n if (len) {\n preview_img_list.innerHTML = '';\n for (var i = 0; i &lt; len; i++) {\n if( ! files[i].type.match(imageType)) {\n // 不是图片 跳过\n continue;\n }\n\nvar li = document.createElement('li');\n var img = document.createElement('img');\n var p = document.createElement('p');\n\np.innerHTML = 'name: ' + files[i].name + &quot; &lt;br /&gt;size: &quot; + files[i].size + ' Bytes' + &quot;&lt;br/&gt;type: &quot; + files[i].type;\n\n// 将file对象存在当前图片中,用于后续创建上传任务\n img.file = files[i];\n // 添加一个类，方便选择\n img.classList.add('obj');\n /*方法一：使用URL对象预览图片*/\n // 使用window.URL.createObjectURL创建 blob URL\n img.src = img.src = window.URL.createObjectURL(files[i]);\n img.onload = function(e) {\n // 使用window.URL.revokeObjectURL释放URL对象，因为图片加载完成后不再需要这个对象\n window.URL.revokeObjectURL(this.src);\n }\n /*方法一结束*/\n\n/*方法二：使用FileReader对象预览图片 */\n // var reader = new FileReader();\n // reader.onload = (function(aImg) {\n // return function(e) {\n // aImg.src = e.target.result;\n // };\n // })(img);\n // reader.readAsDataURL(files[i]);\n /*方法二结束 */\n\nli.appendChild(img);\n preview_img_list.appendChild(li);\n\n};\n }\n }\n\n// 创建上传任务\n function sendFiles() {\n var imgs = document.querySelectorAll('.obj');\n var len = imgs.length;\n for (var i = 0; i &lt; len; i++) {\n // 第二个参数用于读取图片数据\n new FileUpLoad(imgs[i], imgs[i].file);\n };\n }\n\nfunction FileUpLoad(img, file) {\n var reader = new FileReader();\n // 创建一个 throbber 用于显示进度信息\n this.ctrl = createThrobber(img);\n // 创建一个XMLHttpRequest对象用来上传数据\n var xhr = new XMLHttpRequest();\n this.xhr = xhr;\n\nvar self = this;\n // 监听数据上传，更新throbber\n this.xhr.upload.addEventListener('progress', function(e){\n if (e.lengthComputable) {\n var percentage = Math.round((e.loaded * 100) / e.total);\n self.ctrl.update(percentage);\n }\n }, false);\n // 上传完成，更新进度到100%，移除throbber 因为不再需要\n xhr.upload.addEventListener('load', function(e) {\n self.ctrl.update(100);\n var canvas = self.ctrl.ctx.canvas;\n canvas.parentNode.removeChild(canvas);\n }, false);\n // 使用POST方式发送数据\n xhr.open(&quot;POST&quot;, &quot;http://demos.hacks.mozilla.org/paul/demos/resources/webservices/devnull.php&quot;);\n // 使用一个通用的MIME类型\n xhr.overrideMimeType('text/plain; charset=x-user-defined-binary');\n reader.onload = function(evt) {\n // 以二进制形式发送\n xhr.sendAsBinary(evt.target.result);\n };\n // 将文件转化为二进制字符串形式\n reader.readAsBinaryString(file);\n }\n\n&amp;nbsp;\n\nfunction dragenter(e) {\n e.stopPropagation();\n e.preventDefault();\n }\n function dragover(e) {\n e.stopPropagation();\n e.preventDefault();\n }\n function drop(e) {\n e.stopPropagation();\n e.preventDefault();\n\nvar dt = e.dataTransfer;\n var files = dt.files;\n\nhandleFiles(files);\n }\n\n[/javascript]\n\n&nbsp;\n\n这个File API 使得浏览器支持预览、图片大小/类型限制、拖拽上传、多图上传。\n\n&nbsp;","slug":"html5-file-api-e5ada6e4b9a0","updated":1418908898000,"excerpt":"","_id":"t0vbr8w79l78nfxk","comments":true,"layout":"post","photos":[],"link":""},{"title":"HTML5-新特性尝鲜","date":1401897051000,"categories":["bzketmbod14nx67f"],"tags":["ndyjn5r8miqd29wq","3nqad3u3qfqiwl5n"],"content":"<h1 id=\"Desktop_notification_-_桌面通知\">Desktop notification - 桌面通知</h1>\n<pre><code>    <span class=\"built_in\">var</span> notification <span class=\"subst\">=</span> <span class=\"literal\">new</span> Notification(<span class=\"string\">\"标题\"</span>, {dir: <span class=\"string\">'auto'</span>, lang: <span class=\"string\">''</span>, <span class=\"built_in\">tag</span>: <span class=\"string\">'Tag'</span>, icon: <span class=\"string\">'icon.png'</span>, body: <span class=\"string\">'内容...'</span>})\n</code></pre><h3 id=\"参考资料\">参考资料</h3>\n<p><a href=\"http://tech.pro/tutorial/1481/desktop-notification-api-explained\" target=\"_blank\" rel=\"external\">Desktop Notification API</a>        </p>\n","source":"_posts/html5-新特性尝鲜.md","raw":"title: HTML5-新特性尝鲜\n\ndate: 2014-06-04 23:50:51\n\ncategories: HTML\n\ntags: [HTML5, Notification]\n\n---\n\n\n# Desktop notification - 桌面通知\n\n\t\n\n\n\t\tvar notification = new Notification(\"标题\", {dir: 'auto', lang: '', tag: 'Tag', icon: 'icon.png', body: '内容...'})\n\t\t\n\t\t\n\t\t\n\n\n### 参考资料\n\n[Desktop Notification API](http://tech.pro/tutorial/1481/desktop-notification-api-explained)\t\t","slug":"html5-新特性尝鲜","updated":1418908898000,"excerpt":"","_id":"ecnmmq4reusftmws","comments":true,"layout":"post","photos":[],"link":""},{"title":"jQuery动画函数animate()的学习","tags":["fhulu8nr6f39n0l5","cku3mn9akxny14u9"],"id":356,"categories":["casje7dbzdekawgu"],"date":1364834572000,"content":"<p>jQuery的animate()太强大了，可自定义做各种动画。<br>把一些简单的动画效果集中在一块，给自己作参考吧。<br>注意：animate控制的是能用数值表示的css属性,如width、height等，而诸如color等值则不行。<br><a href=\"http://www.laispace.com/XiaoSpace/Demo/2013-03/jquery-animate%E7%BB%83%E4%B9%A0/\" target=\"_blank\" rel=\"external\">Demo</a></p>\n","source":"_posts/jQuery动画函数animate()的学习.md","raw":"title: jQuery动画函数animate()的学习\ntags:\n  - jquery\n  - animate\nid: 356\ncategories:\n  - 每日一发\ndate: 2013-04-02 00:42:52\n---\n\njQuery的animate()太强大了，可自定义做各种动画。\n把一些简单的动画效果集中在一块，给自己作参考吧。\n注意：animate控制的是能用数值表示的css属性,如width、height等，而诸如color等值则不行。\n[Demo](http://www.laispace.com/XiaoSpace/Demo/2013-03/jquery-animate%E7%BB%83%E4%B9%A0/)","slug":"jQuery动画函数animate()的学习","updated":1418908898000,"excerpt":"","_id":"xejg9a6um4l9xz0i","comments":true,"layout":"post","photos":[],"link":""},{"title":"jQuery碎片积累","id":408,"categories":["be592wtznj5wcvwn"],"date":1370077505000,"tags":["fhulu8nr6f39n0l5","icgldl43cc8gt0in"],"content":"<p>-</p>\n<p>td:last与td:last-child的区别</p>\n<p>$(‘td:last’）选择所有td元素中的最后一个</p>\n<p>$(‘td:last-child’)选择tr下最后一个子元素td，有多个</p>\n<p>-<br>让页面内所有的外链都是在新窗口中打开<br>[javascript]</p>\n<p>$(‘a[href^=&quot;<a href=\"http://&quot;]&#39;).attr(&quot;target&quot;,&quot;_blank&amp;quot\" target=\"_blank\" rel=\"external\">http://&quot;]&#39;).attr(&quot;target&quot;,&quot;_blank&amp;quot</a>;);<br>[/javascript]</p>\n<p>-<br>禁用表单的提交按钮<br>[javascript]</p>\n<p>$(&quot;form&quot;).submit(function(){<br> $(&quot;:submit&quot;,this).attr(&quot;disabled&quot;,&quot;disabled&quot;);<br>});<br>[/javascript]</p>\n<p>-<br>绝对定位与相对定位<br>W3CFUNS解释<br>属性为relative的元素可以用来布局页面，属性为absolute的元素用来定位某元素在父级中的位置<br>W3CFUNS实例<br>-<br>如果用定位来布局页面，父级元素的position属性必须为relative，而定位于父级内部某个位置的元素，最好用absolute，因为它不受父级元素的padding的属性影响，当然你也可以用 relative，计算的时候不要忘记计算padding的值。<br>-<br>-<br>$(“#test”).each(i,item)方法:<br>函数中的this关键字指向一个不同的DOM元素<br>返回 ‘false’ 将停止循环 (就像在普通的循环中使用 ‘break’)。返回 ‘true’ 跳至下一个循环(就像在普通的循环中使用’continue’)。<br>利用each给元素设置不同样式：<br>$(“.laispace”).each(function(i){this.style.color=[‘#f00’,’#0f0’,’#00f’][i]});<br>$.each(obj, fn)<br>通用例遍方法，可用于例遍对象和数组。<br>-DOM和JQ对象互转时要注意：</p>\n<p>$(document.getElementById(‘test’)) 相当于$(“#test”);<br>$(“#test”)[0]或者$(“#test”).get(0)<br>注意：eq()返回JQ对象，get()返回DOM对象，而JQ对象只能调用JQ方法，DOM对象同理<br>$(“div”).eq(2).html();//调用jquery对象的方法<br>$(“div”).get(2).innerHTML;//调用dom的方法属性-$(“$bt1”).click(function(){<br>$(“#bt2”).click(); //点击按钮1时也触发按钮2<br>})<br>-<br>扩展自定义功能:<br>[javascript]</p>\n<p>$.extend({<br> min: function(a, b){return a &lt; b?a:b; },<br> max: function(a, b){return a &gt; b?a:b; }<br>});//为在jquery的命名空间中扩展了min,max两个方法<br>//可以像下面这样使用<br>var a = 10,b=20;<br>var max = $.max(a,b);//20<br>var min = $.min(a.b);//10<br>[/javascript]</p>\n","source":"_posts/jQuery碎片积累.md","raw":"title: jQuery碎片积累\nid: 408\ncategories:\n  - Javascript\ndate: 2013-06-01 17:05:05\ntags:\n  - jquery\n  - 碎片\n \n---\n\n-\n\ntd:last与td:last-child的区别\n\n$('td:last'）选择所有td元素中的最后一个\n\n$('td:last-child')选择tr下最后一个子元素td，有多个\n\n-\n让页面内所有的外链都是在新窗口中打开\n[javascript]\n\n$('a[href^=&quot;http://&quot;]').attr(&quot;target&quot;,&quot;_blank&quot;);\n[/javascript]\n\n-\n禁用表单的提交按钮\n[javascript]\n\n$(&quot;form&quot;).submit(function(){\n $(&quot;:submit&quot;,this).attr(&quot;disabled&quot;,&quot;disabled&quot;);\n});\n[/javascript]\n\n-\n绝对定位与相对定位\nW3CFUNS解释\n属性为relative的元素可以用来布局页面，属性为absolute的元素用来定位某元素在父级中的位置\nW3CFUNS实例\n-\n如果用定位来布局页面，父级元素的position属性必须为relative，而定位于父级内部某个位置的元素，最好用absolute，因为它不受父级元素的padding的属性影响，当然你也可以用 relative，计算的时候不要忘记计算padding的值。\n-\n-\n$(\"#test\").each(i,item)方法:\n函数中的this关键字指向一个不同的DOM元素\n返回 ‘false’ 将停止循环 (就像在普通的循环中使用 ‘break’)。返回 ‘true’ 跳至下一个循环(就像在普通的循环中使用’continue’)。\n利用each给元素设置不同样式：\n$(\".laispace\").each(function(i){this.style.color=['#f00','#0f0','#00f'][i]});\n$.each(obj, fn)\n通用例遍方法，可用于例遍对象和数组。\n-DOM和JQ对象互转时要注意：\n\n$(document.getElementById('test')) 相当于$(\"#test\");\n$(\"#test\")[0]或者$(\"#test\").get(0)\n注意：eq()返回JQ对象，get()返回DOM对象，而JQ对象只能调用JQ方法，DOM对象同理\n$(\"div\").eq(2).html();//调用jquery对象的方法\n$(\"div\").get(2).innerHTML;//调用dom的方法属性-$(\"$bt1\").click(function(){\n$(\"#bt2\").click(); //点击按钮1时也触发按钮2\n})\n-\n扩展自定义功能:\n[javascript]\n\n$.extend({\n min: function(a, b){return a &lt; b?a:b; },\n max: function(a, b){return a &gt; b?a:b; }\n});//为在jquery的命名空间中扩展了min,max两个方法\n//可以像下面这样使用\nvar a = 10,b=20;\nvar max = $.max(a,b);//20\nvar min = $.min(a.b);//10\n[/javascript]","slug":"jQuery碎片积累","updated":1418908898000,"excerpt":"","_id":"4jzyuz20hpa2e0fy","comments":true,"layout":"post","photos":[],"link":""},{"title":"Javascript 最佳实践","tags":["xrqknw180yx87gm8"],"id":501,"categories":["be592wtznj5wcvwn"],"date":1380886111000,"content":"<p>// @author lxl:使用高质量JS代码对提高性能肯定是非常有帮助的，小赖对常见的好方法总结在这里，不断更新。<br>// @update 2013/10/04<br>-<br>使用压缩后的文件（如lxl.min.js），并开启http gzip压缩工具<br>-<br>尽量将script标签放在前，可以尝试用异步加载的方法加载js文件<br>-<br>尽量保证js代码和HTML结构的分离，不要内嵌代码到HTML中，以统一维护和缓存处理</p>\n<p>-</p>\n<ul>\n<li>避免全局变量的污染</li>\n</ul>\n<p>1. 使用命名空间<br>2. 匿名函数封装立即执行<br>3. 始终使用var来声明变量</p>\n<ul>\n<li>使用var声明（显式）的<em>全局</em>变量是<strong>不能</strong>被删除的</li>\n<li>未用var声明（隐式）的<em>全局</em>变量是<strong>可以</strong>被删除的</li>\n<li><p>隐式全局变量并非真正的全局变量，但却是全局对象的属性，因为属性是可以通过delete操作符删除的，而变量则不行</p>\n</li>\n<li><p>for循环中将长度缓存到变量中。</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">避免重复计算HTMLCollections的长度（操作DOM一般都是比较昂贵的,缓存长度后效率竟然是是IE7下不缓存的190倍！）</div></pre></td></tr></table></figure>\n\n<ul>\n<li>for循环中建议使用降序来遍历</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">向下数到0通常更快，因为和0作比较要比和数组长度或非0的东西作比较更有效率</div></pre></td></tr></table></figure>\n\n<ul>\n<li>for-in循环只在遍历对象属性的时候才使用，其他情况建议使用for循环就够了</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>-<span class=\"keyword\">in</span> 循环枚举出的顺序是不能保证的，且若数组对象已被自定义的功能增强，就可能发生逻辑错误</div></pre></td></tr></table></figure>\n\n<ul>\n<li>避免隐式类型转换，使用===或!==总是最严谨的！</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">这总能避免一些意想不到的类型转换问题，不是么？</div></pre></td></tr></table></figure>\n\n<ul>\n<li>使用hasOwnProperty()方法过滤从原型链继承的属性，如：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> man) {</div><div class=\"line\"><span class=\"keyword\">if</span> (man.hasOwnProperty(i)) { <span class=\"comment\">// 过滤</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(i, <span class=\"string\">\":\"</span>, man[i]);</div><div class=\"line\">}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<ul>\n<li>使用单var语句声明变量</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">变量的声明会被被<span class=\"type\">JS</span>引擎提至函数顶部预解析（hoisting），不如直接使用单<span class=\"keyword\">var</span>统 一声明所有将会用到的变量，方便查询又易于管理，如：</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</div><div class=\"line\">b = <span class=\"number\">2</span>,</div><div class=\"line\"><span class=\"built_in\">c</span> = <span class=\"number\">3</span>;</div></pre></td></tr></table></figure>\n\n<ul>\n<li>避免改变或增加原型对象的方法</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">随意改变或增加原型会增加维护成本，当以后使用一个方法却发现这个方法被重定义时，就会带来问题。</div><div class=\"line\">除非团队认可这种做法并意识到原型已添加了方法，知道怎么使用时：</div><div class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.prototype.myMethod !== <span class=\"string\">\"function\"</span>){</div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.myMethod = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\"><span class=\"comment\">// 实现新增方法</span></div><div class=\"line\">}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<ul>\n<li>避免使用eval语句</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">eval</span>是魔鬼，除非知道它执行的代码本身会有什么问题。</div><div class=\"line\"><span class=\"keyword\">eval</span>里的代码被恶意篡改的话，就会带来严重的安全问题。</div><div class=\"line\">若绝对需要使用<span class=\"keyword\">eval</span>，实则可以</div><div class=\"line\"><span class=\"number\">1.</span>用<span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">Function</span><span class=\"params\">()</span>替代，因为它有局部函数作用域，其中的<span class=\"title\">var</span>变量不会变成全局 的，可以避免一些问题.</span></div><div class=\"line\">2.将<span class=\"title\">eval</span>语句封装到即时的匿名函数中，与1有相同效果。</div><div class=\"line\">注意，<span class=\"title\">setInterval</span>、<span class=\"title\">setTimeout</span>中传递字符串跟<span class=\"title\">eval</span><span class=\"params\">()</span>是一样的，要注意避免直接 传递字符串：</div><div class=\"line\"><span class=\"title\">setTimeout</span><span class=\"params\">(myFunc, <span class=\"number\">1000</span>)</span>; <span class=\"comment\">// 正确</span></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{ <span class=\"comment\">// 正确</span></div><div class=\"line\">myFunc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</div><div class=\"line\">}, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n\n<ul>\n<li>parseInt() 数制转换，不要忽略第二个参数指定基数</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">EC3中以字母o开头的字符串被当做八进制处理，而在EC5中已经改变，为了避免意外，应 该总是指定基数参数，尽管默认是10</div></pre></td></tr></table></figure>\n\n<ul>\n<li>团队里使用同一套缩进方案，tab或space缩进</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">比起纠结于具体的规范，团队里总是执行同一套方案更有价值！</div></pre></td></tr></table></figure>\n\n<ul>\n<li>总是使用花括号{},尽管只有一行代码</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">花括号开始的位置，是同一行还是换行，这也是团队规范的问题了：统一就好，不必 纠结。</div><div class=\"line\">为了避免下一条谈到<span class=\"keyword\">js</span>引擎自动补全分好的问题，建议花括号开始于同一行，可终端<span class=\"keyword\">JS</span>分 号的自动补全。</div></pre></td></tr></table></figure>\n\n<ul>\n<li>总是使用分号结束代码</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">因为JS引擎自动补全分号的机制，不小心的换行可能会中断代码逻辑，如<span class=\"keyword\">return</span>语句块 换到了下一行。</div></pre></td></tr></table></figure>\n\n<ul>\n<li>命名规范,多种，选择一套喜欢的呗<br>1. 构造函数首字母大写，如Person(){}<br>2. 构造函数驼峰命名分割单词，如MyFunc(){}<br>3. 变量名用下划线分割单词，如 my_name，这可以喝ECMAScript默认属性和方法的Camel标记法相区分<br>4. 常量用全大写和下划线书写，如 MAX_WIDTH<br>5. 全局变量名全部大写，如GLOBAL，并使用它来定义明明空间，如GLOBAL.name = “xiaolai”;GLOBAL.myMethod = function(){};<br>6. 私有属性或方法用下划线前缀来表示，如 _index<br>-</li>\n</ul>\n<h2 id=\"编码技巧\">编码技巧</h2>\n<ul>\n<li>访问全局对象</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">全局对象一般直接通过<span class=\"built_in\">window</span>属性来访问，但特殊情况下（如定义了名为<span class=\"built_in\">window</span>的局部 变量覆盖了全局的<span class=\"built_in\">window</span>）可使用匿名函数内的<span class=\"keyword\">this</span>来获得全局对象：</div><div class=\"line\"><span class=\"keyword\">var</span> global = (<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">})();</div></pre></td></tr></table></figure>\n\n<h2 id=\"新鲜概念\">新鲜概念</h2>\n<ul>\n<li>HTMLCollections对象</li>\n</ul>\n<figure class=\"highlight HTMLCollections对象指的是DOM方法返回的对象，是一个集合，如：\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByName();</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName();</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName();</div><div class=\"line\"><span class=\"built_in\">document</span>.images; <span class=\"comment\">// 页面上所有的图片元素</span></div><div class=\"line\"><span class=\"built_in\">document</span>.links; <span class=\"comment\">// 所有a标签</span></div><div class=\"line\"><span class=\"built_in\">document</span>.forms; <span class=\"comment\">// 所有表单</span></div><div class=\"line\"><span class=\"built_in\">document</span>.forms[<span class=\"number\">0</span>].elements; <span class=\"comment\">// 页面上第一个表单中的所有域</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/javascript-e69c80e4bdb3e5ae9ee8b7b5.md","raw":"title: 'Javascript 最佳实践'\ntags:\n  - 最佳实践\nid: 501\ncategories:\n  - Javascript\ndate: 2013-10-04 19:28:31\n---\n\n// @author lxl:使用高质量JS代码对提高性能肯定是非常有帮助的，小赖对常见的好方法总结在这里，不断更新。\n// @update 2013/10/04\n-\n使用压缩后的文件（如lxl.min.js），并开启http gzip压缩工具\n-\n尽量将script标签放在前，可以尝试用异步加载的方法加载js文件\n-\n尽量保证js代码和HTML结构的分离，不要内嵌代码到HTML中，以统一维护和缓存处理\n\n-\n\n- 避免全局变量的污染\n\n1\\. 使用命名空间\n2\\. 匿名函数封装立即执行\n3\\. 始终使用var来声明变量\n- 使用var声明（显式）的*全局*变量是**不能**被删除的\n- 未用var声明（隐式）的*全局*变量是**可以**被删除的\n- 隐式全局变量并非真正的全局变量，但却是全局对象的属性，因为属性是可以通过delete操作符删除的，而变量则不行\n\n- for循环中将长度缓存到变量中。\n```\n避免重复计算HTMLCollections的长度（操作DOM一般都是比较昂贵的,缓存长度后效率竟然是是IE7下不缓存的190倍！）\n```\n- for循环中建议使用降序来遍历\n```\n向下数到0通常更快，因为和0作比较要比和数组长度或非0的东西作比较更有效率\n```\n- for-in循环只在遍历对象属性的时候才使用，其他情况建议使用for循环就够了\n```\nfor-in 循环枚举出的顺序是不能保证的，且若数组对象已被自定义的功能增强，就可能发生逻辑错误\n```\n- 避免隐式类型转换，使用===或!==总是最严谨的！\n```\n这总能避免一些意想不到的类型转换问题，不是么？\n```\n\n- 使用hasOwnProperty()方法过滤从原型链继承的属性，如：\n```\nfor (var i in man) {\nif (man.hasOwnProperty(i)) { // 过滤\nconsole.log(i, \":\", man[i]);\n}\n}\n```\n- 使用单var语句声明变量\n```\n变量的声明会被被JS引擎提至函数顶部预解析（hoisting），不如直接使用单var统 一声明所有将会用到的变量，方便查询又易于管理，如：\nvar a = 1,\nb = 2,\nc = 3;\n```\n- 避免改变或增加原型对象的方法\n```\n随意改变或增加原型会增加维护成本，当以后使用一个方法却发现这个方法被重定义时，就会带来问题。\n除非团队认可这种做法并意识到原型已添加了方法，知道怎么使用时：\nif( typeof Object.prototype.myMethod !== \"function\"){\nObject.prototype.myMethod = function(){\n// 实现新增方法\n}\n}\n```\n- 避免使用eval语句\n```\neval是魔鬼，除非知道它执行的代码本身会有什么问题。\neval里的代码被恶意篡改的话，就会带来严重的安全问题。\n若绝对需要使用eval，实则可以\n1.用new Function()替代，因为它有局部函数作用域，其中的var变量不会变成全局 的，可以避免一些问题.\n2.将eval语句封装到即时的匿名函数中，与1有相同效果。\n注意，setInterval、setTimeout中传递字符串跟eval()是一样的，要注意避免直接 传递字符串：\nsetTimeout(myFunc, 1000); // 正确\nsetTimeout(function () { // 正确\nmyFunc(1, 2, 3);\n}, 1000);\n```\n- parseInt() 数制转换，不要忽略第二个参数指定基数\n```\nEC3中以字母o开头的字符串被当做八进制处理，而在EC5中已经改变，为了避免意外，应 该总是指定基数参数，尽管默认是10\n```\n- 团队里使用同一套缩进方案，tab或space缩进\n```\n比起纠结于具体的规范，团队里总是执行同一套方案更有价值！\n```\n- 总是使用花括号{},尽管只有一行代码\n```\n花括号开始的位置，是同一行还是换行，这也是团队规范的问题了：统一就好，不必 纠结。\n为了避免下一条谈到js引擎自动补全分好的问题，建议花括号开始于同一行，可终端JS分 号的自动补全。\n```\n- 总是使用分号结束代码\n```\n因为JS引擎自动补全分号的机制，不小心的换行可能会中断代码逻辑，如return语句块 换到了下一行。\n```\n- 命名规范,多种，选择一套喜欢的呗\n1\\. 构造函数首字母大写，如Person(){}\n2\\. 构造函数驼峰命名分割单词，如MyFunc(){}\n3\\. 变量名用下划线分割单词，如 my_name，这可以喝ECMAScript默认属性和方法的Camel标记法相区分\n4\\. 常量用全大写和下划线书写，如 MAX_WIDTH\n5\\. 全局变量名全部大写，如GLOBAL，并使用它来定义明明空间，如GLOBAL.name = \"xiaolai\";GLOBAL.myMethod = function(){};\n6\\. 私有属性或方法用下划线前缀来表示，如 _index\n-\n\n## 编码技巧\n- 访问全局对象\n```\n全局对象一般直接通过window属性来访问，但特殊情况下（如定义了名为window的局部 变量覆盖了全局的window）可使用匿名函数内的this来获得全局对象：\nvar global = (function(){\nreturn this;\n})();\n```\n## 新鲜概念\n- HTMLCollections对象\n```HTMLCollections对象指的是DOM方法返回的对象，是一个集合，如：\ndocument.getElementsByName();\ndocument.getElementsByClassName();\ndocument.getElementsByTagName();\ndocument.images; // 页面上所有的图片元素\ndocument.links; // 所有a标签\ndocument.forms; // 所有表单\ndocument.forms[0].elements; // 页面上第一个表单中的所有域\n```","slug":"javascript-e69c80e4bdb3e5ae9ee8b7b5","updated":1418908898000,"excerpt":"","_id":"m35zp0ot8ct34taf","comments":true,"layout":"post","photos":[],"link":""},{"title":"learnyounode 练习","date":1400641088000,"categories":["f1q8dl6bbauvoh8x"],"tags":["1r19h0mfxhgs7nzc","uibn8wy0mp910u4h"],"content":"<blockquote>\n<p>learnyounode 是 nodeschool.io 出品的nodejs入门练习项目</p>\n<p>通过这个练习算是对nodejs有了个入门的认识吧，边学边敲边写笔记</p>\n</blockquote>\n<ul>\n<li><p>2.输入任意数字求和.js</p>\n<pre><code><span class=\"comment\">// 输入任意个数字，输出这任意个数字的和</span>\n<span class=\"comment\">// process.argv 变量保存了输入的参数，注意第一个永远为'node',第二个是执行路径'path/to/my/file'，第三个开始才是我们真正传入的参数</span>\n<span class=\"comment\">// 传入的参数当做字符串了，注意类型转换，如下面Number() 将数字字符转换为数字再进行计算</span>\n\n<span class=\"keyword\">var</span> len = process.argv.length;\n<span class=\"comment\">// slice(2) 截取数组</span>\n<span class=\"keyword\">var</span> numbers = process.argv.slice(<span class=\"number\">2</span>);\n<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;\n<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = numbers.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) {\n      sum += <span class=\"built_in\">Number</span>(numbers[i]);\n};\n<span class=\"built_in\">console</span>.log(sum);\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>      \n\n<ul>\n<li><p>3.fs.readFileSync同步方式读取文件.js</p>\n<pre><code><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);\n\n<span class=\"comment\">// 用同步方法读取README.md,以utf8编码</span>\n<span class=\"keyword\">var</span> path = process.argv[<span class=\"number\">2</span>];\n<span class=\"keyword\">var</span> data = fs.readFileSync(path, <span class=\"string\">'utf8'</span>);\n<span class=\"comment\">// console.log(data);</span>\n\n<span class=\"comment\">// 打印这个文件的行数</span>\n<span class=\"keyword\">var</span> len = data.toString().split(<span class=\"string\">'\\n'</span>).length;\n<span class=\"comment\">// 注意：长度减一才是真正的行数！</span>\n<span class=\"built_in\">console</span>.log(len-<span class=\"number\">1</span>)\n</code></pre></li>\n<li><p>4.fs.readFile异步方式读取文件.js</p>\n<pre><code><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);\n<span class=\"comment\">// 用异步方法读取README.md,以utf8编码</span>\n<span class=\"keyword\">var</span> path = process.argv[<span class=\"number\">2</span>];\nfs.readFile(path, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, data)</span> </span>{\n      <span class=\"keyword\">if</span> (err) {\n            <span class=\"keyword\">throw</span> err;\n      }\n      <span class=\"comment\">// console.log(data);</span>\n      <span class=\"comment\">// 打印这个文件的行数，指定了上述utf8时才能省略以下的toString()方法</span>\n      <span class=\"keyword\">var</span> len = data.toString().split(<span class=\"string\">'\\n'</span>).length;\n      <span class=\"comment\">// 注意：长度减一才是真正的行数！</span>\n      <span class=\"built_in\">console</span>.log(len-<span class=\"number\">1</span>);\n});\n</code></pre></li>\n<li><p>5.fs.readdir读取某目录下文件并过滤输出.js</p>\n<pre><code><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);\n<span class=\"comment\">// 用异步方法读取参数1指定的目录下的文件列表，以参数2为过滤条件</span>\n<span class=\"keyword\">var</span> dir = process.argv[<span class=\"number\">2</span>];\n<span class=\"keyword\">var</span> filter = process.argv[<span class=\"number\">3</span>];\nfs.readdir(dir, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, data)</span> </span>{\n      <span class=\"keyword\">if</span> (err) {\n            <span class=\"keyword\">throw</span> err;\n      }\n      <span class=\"comment\">// 显示目录下的所有文件, 文件数为data.length</span>\n      <span class=\"comment\">// console.log(data);</span>\n      <span class=\"comment\">// 遍历，以参数2提供的后缀进行过滤</span>\n      <span class=\"comment\">// 构造正则，https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp</span>\n      <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\.'</span> + filter + <span class=\"string\">'$'</span>);\n      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = data.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) {\n      <span class=\"comment\">// 如果文件后缀符合参数2 则添加到新数组中</span>\n            <span class=\"keyword\">if</span> (reg.test(data[i])) {\n                  <span class=\"built_in\">console</span>.log(data[i]);\n            }\n      }\n});\n</code></pre></li>\n<li><p>6.module.export使用的模块 mymodule.js</p>\n<pre><code><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readAdir</span><span class=\"params\">(dir, filter, callback)</span> </span>{\n      fs.readdir(dir, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, data)</span> </span>{\n            <span class=\"keyword\">if</span> (err) {\n                  <span class=\"comment\">// 将错误传给回调函数处理</span>\n                  <span class=\"keyword\">return</span> callback(err);\n            } <span class=\"keyword\">else</span> {\n                  <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\.'</span> + filter + <span class=\"string\">'$'</span>);\n                  <span class=\"keyword\">var</span> newData = [];\n                  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) {\n                        <span class=\"keyword\">if</span> (reg.test(data[i])) {\n                              newData.push(data[i]);\n                        }\n                  }\n                  <span class=\"comment\">// 将处理后的数据传给回调函数处理</span>\n                  callback(<span class=\"literal\">null</span>, newData);\n            }\n      });\n}\n<span class=\"comment\">// 导出模块</span>\n<span class=\"built_in\">module</span>.exports = readAdir;\n</code></pre></li>\n</ul>\n<ul>\n<li><p>7.http.get简单的http客户端.js</p>\n<pre><code><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);\n<span class=\"keyword\">var</span> url = process.argv[<span class=\"number\">2</span>];      \nhttp.get(url, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(res)</span> </span>{\n      <span class=\"comment\">// 设置编码</span>\n      res.setEncoding(<span class=\"string\">'utf8'</span>);\n      <span class=\"comment\">// 监听数据</span>\n      res.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> </span>{\n            <span class=\"built_in\">console</span>.log(data);\n      });\n      <span class=\"comment\">// 数据传输完成</span>\n      res.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> </span>{\n            <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据接受完成！'</span>, data);\n      });\n\n      <span class=\"comment\">// 数据传输错误</span>\n      res.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n            <span class=\"built_in\">console</span>.log(<span class=\"string\">'啊哦~发生了错误。'</span>)\n      });\n})\n</code></pre></li>\n<li><p>8.http.get简单的http客户端-输出完整数据流.js</p>\n<pre><code><span class=\"keyword\">var</span> http = require('http');\n<span class=\"keyword\">var</span> url = process.argv[<span class=\"number\">2</span>];\nhttp.get(url, function (res) {\n      // 设置编码\n      res.setEncoding('utf8');\n      <span class=\"keyword\">var</span> <span class=\"literal\">result</span> = '';\n      // 监听数据\n      res.on('data', function (data) {\n            <span class=\"literal\">result</span> += data;\n      });\n      // 数据传输完成，将完整的数据流输出\n      res.on('<span class=\"keyword\">end</span>', function (data) {\n            console.log(<span class=\"literal\">result</span>.length);\n            console.log(<span class=\"literal\">result</span>);\n      });\n      // 数据传输错误\n      // res.on('error', function (err) {\n            // console.log('啊哦~发生了错误。', err)\n            // });\n});\n</code></pre></li>\n</ul>\n<ul>\n<li><p>9.http.get简单的http客户端-同步get操作.js</p>\n<pre><code><span class=\"keyword\">var</span> http = require('http');\n<span class=\"keyword\">var</span> urls = process.argv.slice(<span class=\"number\">2</span>);\n<span class=\"keyword\">var</span> results = [];\n<span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;\n<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;urls.length;i++) {\n      // 用闭包来保证顺序同步操作\n      ;(function(i){\n            http.get(urls[i], function (res) {\n                  <span class=\"keyword\">var</span> <span class=\"literal\">result</span> = '';\n                  res.on('data', function (data) {\n                        <span class=\"literal\">result</span> += data;\n                  });\n                  res.on('<span class=\"keyword\">end</span>', function (data) {\n                        results[i] = <span class=\"literal\">result</span>;\n                        count++;\n                        // 计数器达到url总数，说明完成了顺序同步操作，输出结果\n                        <span class=\"keyword\">if</span> (count === urls.length) {\n                              <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;j&lt;count;j++) {\n                                    console.log(results[j]);\n                              }\n                        }\n                  })\n            })\n      })(i);\n}\n</code></pre></li>\n<li><p>10.net.createServer简单的TCP服务器端.js</p>\n<pre><code><span class=\"built_in\">var</span> net <span class=\"subst\">=</span> <span class=\"keyword\">require</span>(<span class=\"string\">'net'</span>);\n<span class=\"built_in\">var</span> server <span class=\"subst\">=</span> net<span class=\"built_in\">.</span>createServer(function (socket) {\n      <span class=\"comment\">// 获取当前年、月、日、小时、分钟</span>\n      <span class=\"built_in\">var</span> <span class=\"built_in\">date</span> <span class=\"subst\">=</span> <span class=\"literal\">new</span> <span class=\"built_in\">Date</span>(),\n      y <span class=\"subst\">=</span> <span class=\"built_in\">date</span><span class=\"built_in\">.</span>getFullYear(),\n      m <span class=\"subst\">=</span> <span class=\"built_in\">date</span><span class=\"built_in\">.</span>getMonth() <span class=\"subst\">+</span> <span class=\"number\">1</span>,\n      d <span class=\"subst\">=</span> <span class=\"built_in\">date</span><span class=\"built_in\">.</span>getDate(),\n      h <span class=\"subst\">=</span> <span class=\"built_in\">date</span><span class=\"built_in\">.</span>getHours(),\n      minutes <span class=\"subst\">=</span> <span class=\"built_in\">date</span><span class=\"built_in\">.</span>getMinutes();\n      <span class=\"comment\">// 格式化</span>\n      y <span class=\"subst\">=</span> y<span class=\"subst\">&lt;</span> <span class=\"number\">10</span> <span class=\"subst\">?</span> <span class=\"string\">'0'</span><span class=\"subst\">+</span>y: y,\n      m <span class=\"subst\">=</span> m<span class=\"subst\">&lt;</span> <span class=\"number\">10</span> <span class=\"subst\">?</span> <span class=\"string\">'0'</span><span class=\"subst\">+</span>m: m,\n      d <span class=\"subst\">=</span> d<span class=\"subst\">&lt;</span> <span class=\"number\">10</span> <span class=\"subst\">?</span> <span class=\"string\">'0'</span><span class=\"subst\">+</span>d: d,\n      h <span class=\"subst\">=</span> h<span class=\"subst\">&lt;</span> <span class=\"number\">10</span> <span class=\"subst\">?</span> <span class=\"string\">'0'</span><span class=\"subst\">+</span>h: h,\n      minutes <span class=\"subst\">=</span> minutes<span class=\"subst\">&lt;</span> <span class=\"number\">10</span> <span class=\"subst\">?</span> <span class=\"string\">'0'</span><span class=\"subst\">+</span>minutes: minutes;\n      <span class=\"built_in\">var</span> dateString <span class=\"subst\">=</span> y <span class=\"subst\">+</span> <span class=\"string\">'-'</span> <span class=\"subst\">+</span> m <span class=\"subst\">+</span> <span class=\"string\">'-'</span> <span class=\"subst\">+</span> d <span class=\"subst\">+</span> <span class=\"string\">' '</span> <span class=\"subst\">+</span> h <span class=\"subst\">+</span> <span class=\"string\">':'</span> <span class=\"subst\">+</span> minutes <span class=\"subst\">+</span> <span class=\"string\">'\\n'</span>;\n      <span class=\"comment\">// console.log(dateString);</span>\n      <span class=\"comment\">// socket.write(data);</span>\n      <span class=\"comment\">// 输出</span>\n      socket<span class=\"built_in\">.</span>end(dateString);\n});\n<span class=\"comment\">// 监听参数指定的端口</span>\n<span class=\"built_in\">var</span> port <span class=\"subst\">=</span> Number(process<span class=\"built_in\">.</span>argv<span class=\"preprocessor\">[</span><span class=\"number\">2</span><span class=\"preprocessor\">]</span><span class=\"markup\">);\nserver.listen(port);</span>\n</code></pre></li>\n</ul>\n<ul>\n<li><p>11.createReadStream 输出文件内容.js</p>\n<pre><code><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);\n<span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);\n<span class=\"keyword\">var</span> portNo = process.argv[<span class=\"number\">2</span>];\n<span class=\"keyword\">var</span> filePath = process.argv[<span class=\"number\">3</span>];\n<span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n      <span class=\"comment\">// fs,createReadStream 返回 ReadStream 对象 http://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options</span>\n      <span class=\"keyword\">var</span> readStream = fs.createReadStream(filePath);\n      <span class=\"keyword\">var</span> body = <span class=\"string\">''</span>;\n      readStream.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(chunk)</span> </span>{\n            body += chunk;\n      });\n      readStream.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n            res.writeHead(<span class=\"number\">200</span>);\n            res.end(body.toString());\n      });\n});\nserver.listen(portNo);\n\n<span class=\"comment\">// 官方答案</span>\n<span class=\"comment\">// var http = require('http')</span>\n<span class=\"comment\">// var fs = require('fs')</span>\n\n<span class=\"comment\">// var server = http.createServer(function (req, res) {</span>\n      <span class=\"comment\">// fs.createReadStream(process.argv[3]).pipe(res)</span>\n<span class=\"comment\">// })</span>\n<span class=\"comment\">// server.listen(Number(process.argv[2]))</span>\n</code></pre></li>\n<li><p>12.使用through2-map将POST数据转成大写输出</p>\n<pre><code><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)\n<span class=\"keyword\">var</span> map = <span class=\"built_in\">require</span>(<span class=\"string\">'through2-map'</span>)\n<span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n      <span class=\"comment\">// 非POST请求</span>\n      <span class=\"keyword\">if</span> (req.method != <span class=\"string\">'POST'</span>) {\n            res.end();\n      }\n      req.pipe(map(toUpper)).pipe(res);\n});\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toUpper</span> <span class=\"params\">(chunk)</span> </span>{\n      <span class=\"keyword\">return</span> chunk.toString().toUpperCase();\n}\nserver.listen(process.argv[<span class=\"number\">2</span>]);\n</code></pre></li>\n</ul>\n","source":"_posts/learnyounode-练习.md","raw":"title: learnyounode 练习\ndate: 2014-05-21 10:58:08\ncategories: Node\ntags: \n  - node\n  - learnyounode\n\n---\n\n> learnyounode 是 nodeschool.io 出品的nodejs入门练习项目\n\n> 通过这个练习算是对nodejs有了个入门的认识吧，边学边敲边写笔记\n      \n\n- 2.输入任意数字求和.js\n\n      // 输入任意个数字，输出这任意个数字的和\n      // process.argv 变量保存了输入的参数，注意第一个永远为'node',第二个是执行路径'path/to/my/file'，第三个开始才是我们真正传入的参数\n      // 传入的参数当做字符串了，注意类型转换，如下面Number() 将数字字符转换为数字再进行计算\n\n      var len = process.argv.length;\n      // slice(2) 截取数组\n      var numbers = process.argv.slice(2);\n      var sum = 0;\n      for (var i = numbers.length - 1; i >= 0; i--) {\n            sum += Number(numbers[i]);\n      };\n      console.log(sum);\n\n<!-- more -->      \n      \n- 3.fs.readFileSync同步方式读取文件.js\n\n      var fs = require('fs');\n\n      // 用同步方法读取README.md,以utf8编码\n      var path = process.argv[2];\n      var data = fs.readFileSync(path, 'utf8');\n      // console.log(data);\n\n      // 打印这个文件的行数\n      var len = data.toString().split('\\n').length;\n      // 注意：长度减一才是真正的行数！\n      console.log(len-1)\n            \n- 4.fs.readFile异步方式读取文件.js\n\n      var fs = require('fs');\n      // 用异步方法读取README.md,以utf8编码\n      var path = process.argv[2];\n      fs.readFile(path, 'utf8', function (err, data) {\n            if (err) {\n                  throw err;\n            }\n            // console.log(data);\n            // 打印这个文件的行数，指定了上述utf8时才能省略以下的toString()方法\n            var len = data.toString().split('\\n').length;\n            // 注意：长度减一才是真正的行数！\n            console.log(len-1);\n      });\n            \n- 5.fs.readdir读取某目录下文件并过滤输出.js\n\n      var fs = require('fs');\n      // 用异步方法读取参数1指定的目录下的文件列表，以参数2为过滤条件\n      var dir = process.argv[2];\n      var filter = process.argv[3];\n      fs.readdir(dir, function (err, data) {\n            if (err) {\n                  throw err;\n            }\n            // 显示目录下的所有文件, 文件数为data.length\n            // console.log(data);\n            // 遍历，以参数2提供的后缀进行过滤\n            // 构造正则，https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n            var reg = new RegExp('\\\\.' + filter + '$');\n            for (var i = data.length - 1; i >= 0; i--) {\n            // 如果文件后缀符合参数2 则添加到新数组中\n                  if (reg.test(data[i])) {\n                        console.log(data[i]);\n                  }\n            }\n      });\n      \n- 6.module.export使用的模块 mymodule.js\n\n      var fs = require('fs');\n      function readAdir(dir, filter, callback) {\n            fs.readdir(dir, function (err, data) {\n                  if (err) {\n                        // 将错误传给回调函数处理\n                        return callback(err);\n                  } else {\n                        var reg = new RegExp('\\\\.' + filter + '$');\n                        var newData = [];\n                        for (var i = 0; i < data.length; i++) {\n                              if (reg.test(data[i])) {\n                                    newData.push(data[i]);\n                              }\n                        }\n                        // 将处理后的数据传给回调函数处理\n                        callback(null, newData);\n                  }\n            });\n      }\n      // 导出模块\n      module.exports = readAdir;\n      \n      \n- 7.http.get简单的http客户端.js\n\n      var http = require('http');\n      var url = process.argv[2];      \n      http.get(url, function (res) {\n            // 设置编码\n            res.setEncoding('utf8');\n            // 监听数据\n            res.on('data', function (data) {\n                  console.log(data);\n            });\n            // 数据传输完成\n            res.on('end', function (data) {\n                  console.log('数据接受完成！', data);\n            });\n\n            // 数据传输错误\n            res.on('error', function (err) {\n                  console.log('啊哦~发生了错误。')\n            });\n      })\n            \n- 8.http.get简单的http客户端-输出完整数据流.js\n\n      var http = require('http');\n      var url = process.argv[2];\n      http.get(url, function (res) {\n            // 设置编码\n            res.setEncoding('utf8');\n            var result = '';\n            // 监听数据\n            res.on('data', function (data) {\n                  result += data;\n            });\n            // 数据传输完成，将完整的数据流输出\n            res.on('end', function (data) {\n                  console.log(result.length);\n                  console.log(result);\n            });\n            // 数据传输错误\n            // res.on('error', function (err) {\n                  // console.log('啊哦~发生了错误。', err)\n                  // });\n      });\n      \n      \n- 9.http.get简单的http客户端-同步get操作.js\n\n      var http = require('http');\n      var urls = process.argv.slice(2);\n      var results = [];\n      var count = 0;\n      for (var i=0;i<urls.length;i++) {\n            // 用闭包来保证顺序同步操作\n            ;(function(i){\n                  http.get(urls[i], function (res) {\n                        var result = '';\n                        res.on('data', function (data) {\n                              result += data;\n                        });\n                        res.on('end', function (data) {\n                              results[i] = result;\n                              count++;\n                              // 计数器达到url总数，说明完成了顺序同步操作，输出结果\n                              if (count === urls.length) {\n                                    for (var j=0;j<count;j++) {\n                                          console.log(results[j]);\n                                    }\n                              }\n                        })\n                  })\n            })(i);\n      }\n            \n- 10.net.createServer简单的TCP服务器端.js\n\n      var net = require('net');\n      var server = net.createServer(function (socket) {\n            // 获取当前年、月、日、小时、分钟\n            var date = new Date(),\n            y = date.getFullYear(),\n            m = date.getMonth() + 1,\n            d = date.getDate(),\n            h = date.getHours(),\n            minutes = date.getMinutes();\n            // 格式化\n            y = y< 10 ? '0'+y: y,\n            m = m< 10 ? '0'+m: m,\n            d = d< 10 ? '0'+d: d,\n            h = h< 10 ? '0'+h: h,\n            minutes = minutes< 10 ? '0'+minutes: minutes;\n            var dateString = y + '-' + m + '-' + d + ' ' + h + ':' + minutes + '\\n';\n            // console.log(dateString);\n            // socket.write(data);\n            // 输出\n            socket.end(dateString);\n      });\n      // 监听参数指定的端口\n      var port = Number(process.argv[2]);\n      server.listen(port);\n      \n      \n- 11.createReadStream 输出文件内容.js\n\n      var http = require('http');\n      var fs = require('fs');\n      var portNo = process.argv[2];\n      var filePath = process.argv[3];\n      var server = http.createServer(function (req, res) {\n            // fs,createReadStream 返回 ReadStream 对象 http://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options\n            var readStream = fs.createReadStream(filePath);\n            var body = '';\n            readStream.on('data', function (chunk) {\n                  body += chunk;\n            });\n            readStream.on('end', function () {\n                  res.writeHead(200);\n                  res.end(body.toString());\n            });\n      });\n      server.listen(portNo);\n\n      // 官方答案\n      // var http = require('http')\n      // var fs = require('fs')\n\n      // var server = http.createServer(function (req, res) {\n            // fs.createReadStream(process.argv[3]).pipe(res)\n      // })\n      // server.listen(Number(process.argv[2]))\n            \n- 12.使用through2-map将POST数据转成大写输出\n\n      var http = require('http')\n      var map = require('through2-map')\n      var server = http.createServer(function (req, res) {\n            // 非POST请求\n            if (req.method != 'POST') {\n                  res.end();\n            }\n            req.pipe(map(toUpper)).pipe(res);\n      });\n      function toUpper (chunk) {\n            return chunk.toString().toUpperCase();\n      }\n      server.listen(process.argv[2]);\n      ","slug":"learnyounode-练习","updated":1418908898000,"excerpt":"<blockquote>\n<p>learnyounode 是 nodeschool.io 出品的nodejs入门练习项目</p>\n<p>通过这个练习算是对nodejs有了个入门的认识吧，边学边敲边写笔记</p>\n</blockquote>\n<ul>\n<li><p>2.输入任意数字求和.js</p>\n<pre><code><span class=\"comment\">// 输入任意个数字，输出这任意个数字的和</span>\n<span class=\"comment\">// process.argv 变量保存了输入的参数，注意第一个永远为'node',第二个是执行路径'path/to/my/file'，第三个开始才是我们真正传入的参数</span>\n<span class=\"comment\">// 传入的参数当做字符串了，注意类型转换，如下面Number() 将数字字符转换为数字再进行计算</span>\n\n<span class=\"keyword\">var</span> len = process.argv.length;\n<span class=\"comment\">// slice(2) 截取数组</span>\n<span class=\"keyword\">var</span> numbers = process.argv.slice(<span class=\"number\">2</span>);\n<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;\n<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = numbers.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) {\n      sum += <span class=\"built_in\">Number</span>(numbers[i]);\n};\n<span class=\"built_in\">console</span>.log(sum);\n</code></pre></li>\n</ul>\n","_id":"dmj6cdd9spobe5qg","comments":true,"layout":"post","photos":[],"link":""},{"title":"linux 学习笔记","date":1399641582000,"categories":["m2dq33qewj6qwyei"],"tags":["widi8npuw1bm1e03"],"content":"<blockquote>\n<p>TODO - 待整理</p>\n</blockquote>\n<h1 id=\"一些概念\">一些概念</h1>\n<ul>\n<li><p>bytes stream 字节流</p>\n<p>  linux 执行一个程序时会自动打开三个流：标准输入流、标准输出流、标准错误流</p>\n<p>  输出流用 “&gt;” 或 “&gt;&gt;” 表示</p>\n<p>  输入流用 “&lt;” 表示</p>\n<p>  错误流用 “&gt;&amp;” 表示</p>\n<pre><code>  <span class=\"comment\">// 输出文本流到屏幕</span>\n  $ <span class=\"keyword\">echo</span> <span class=\"string\">'我是小赖'</span>\n  <span class=\"comment\">// echo 输出信息到 a.txt</span>\n  $ <span class=\"keyword\">echo</span> <span class=\"string\">'我是小赖'</span> &gt; a.txt\n  <span class=\"comment\">// 追加文本流到 a.txt</span>\n  $ <span class=\"keyword\">echo</span> <span class=\"string\">'我才是小赖'</span> &gt;&gt; a.txt\n\n  <span class=\"comment\">// 输出命令执行结果文本流到屏幕</span>\n  $ ls\n  <span class=\"comment\">// 重新定向, 这样 ls 命令的输出文本流就会写到这个文件上</span>\n  $ ls &gt; a.txt\n  <span class=\"comment\">// 若 a.txt 已存在，则将ls 命令的输出文本流追加到这个文件上</span>\n  $ ls &gt;&gt; a.txt \n\n  <span class=\"comment\">// 输入文本流</span>\n  $ cat &lt; a.txt\n  <span class=\"comment\">// 复制 a.txt 到 b.txt</span>\n  $ cat &lt; a.txt &gt; b.txt\n\n  <span class=\"comment\">// 输出错误，假定 wrongDir 是不存在的目录</span>\n  $ cd void &gt;&amp; a.txt\n</code></pre></li>\n<li><p>pipe 管道</p>\n<p>  使用管道，可以将一个命令的输出流当做另一个命令的输入流</p>\n<p>  管道用 “|” 表示</p>\n<pre><code>  // 输出 <span class=\"string\">\"cat &gt; a.txt\"</span> 当做命令 <span class=\"string\">\"wc\"</span> 的输入\n  // wc 即 word <span class=\"built_in\">count</span>：输出文本的行、词和字符总数\n  $ <span class=\"keyword\">cat</span> &lt; <span class=\"keyword\">a</span>.txt | wc\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>            \n\n<h1 id=\"帮助类命令\u001b\">帮助类命令\u001b</h1>\n<ul>\n<li>type 查看某个命令的类型</li>\n</ul>\n<p>类型可为：1.可执行文件 2.内建函数 3.别名</p>\n<pre><code>    $ <span class=\"built_in\">type</span> <span class=\"keyword\">ls</span>\n    $ <span class=\"built_in\">type</span> <span class=\"keyword\">cd</span>\n    $ <span class=\"built_in\">type</span> <span class=\"keyword\">open</span>\n</code></pre><ul>\n<li><p>which 查看命令的绝对路径</p>\n<pre><code>  $ which <span class=\"keyword\">ls</span>\n</code></pre></li>\n<li><p>where 更大范围查看命令的绝对路径        </p>\n<pre><code>  $ whereis <span class=\"keyword\">ls</span>\n</code></pre></li>\n<li><p>whatis 查看命令的介绍</p>\n<pre><code>  $ whatis <span class=\"keyword\">ls</span>    \n</code></pre></li>\n<li><p>man 查询命令的帮助文档</p>\n<pre><code>  <span class=\"comment\">// 学习 linux 必备！</span>\n  $ man <span class=\"keyword\">ls</span>    \n</code></pre></li>\n<li><p>info 查询命令的更详细帮助文档</p>\n<pre><code>  $ info <span class=\"keyword\">ls</span>\n</code></pre></li>\n<li><p>history 查看输入的命令历史</p>\n<pre><code>  $ <span class=\"keyword\">history</span> \n</code></pre></li>\n<li><p>alias 别名</p>\n<pre><code>  <span class=\"comment\">// 查看所有别名</span>\n  $ <span class=\"keyword\">alias</span>\n  <span class=\"comment\">// 设置别名，llss 为 ls 的别名</span>\n  $ <span class=\"keyword\">alias</span> lllsss = <span class=\"keyword\">ls</span>    \n</code></pre></li>\n<li><p>env 环境变量</p>\n<pre><code>  <span class=\"comment\">// 查看所有环境变量</span>\n  $ env\n  <span class=\"comment\">// 设置环境变量</span>\n  <span class=\"comment\">// $ export [key]=[value]    </span>\n  $ <span class=\"keyword\">export</span> testKey=testVal\n</code></pre></li>\n<li><p>finger 查看用户信息</p>\n<pre><code>  <span class=\"comment\">// 查看所有用户信息</span>\n  $ finger\n  <span class=\"comment\">// 查看特定用户信息</span>\n  $ finger xiaolai\n</code></pre></li>\n<li><p>who am I 显示当前用户</p>\n<pre><code>  $ who <span class=\"keyword\">am</span> I\n</code></pre></li>\n<li><p>su 成为超级用户</p>\n<pre><code>  $ su\n  <span class=\"comment\">// 或者用超级用户执行命令：</span>\n  <span class=\"comment\">// $ sudo [commmand]    </span>\n</code></pre></li>\n<li><p>passwd 修改密码</p>\n<pre><code>  <span class=\"variable\">$ </span>passwd    \n</code></pre></li>\n</ul>\n<h1 id=\"文件管理类命令\">文件管理类命令</h1>\n<ul>\n<li><p>touch 新建文件</p>\n<pre><code> <span class=\"comment\"> // 如果文件已经存在，则只修改时间信息</span>\n  $ touch <span class=\"operator\">a</span>.txt    \n</code></pre></li>\n</ul>\n<ul>\n<li><p>ls 列出目录/文件信息 </p>\n<pre><code>  <span class=\"comment\">// 显示当前目录下的文件</span>\n  $ <span class=\"keyword\">ls</span>\n  <span class=\"comment\">// 显示桌面目录下的文件</span>\n  $ <span class=\"keyword\">ls</span> ~/Desktop\n  <span class=\"comment\">// 显示目录下所有文件的信息</span>\n  $ <span class=\"keyword\">ls</span> -l\n  <span class=\"comment\">// 显示目录下特定文件的信息</span>\n  $ <span class=\"keyword\">ls</span> -l a.txt\n  <span class=\"comment\">// 显示目录下多个文件的信息</span>\n  $ <span class=\"keyword\">ls</span> -l a.txt b.txt c.txt d.txt\n  <span class=\"comment\">// 列出当前目录下的文件的详细信息，包括隐藏文件</span>\n  $ <span class=\"keyword\">ls</span> -l -a\n  <span class=\"comment\">// 或</span>\n  $ <span class=\"keyword\">ls</span> -la\n  <span class=\"comment\">// 列出当前目录下特定文件的详细信息，包括隐藏文件</span>\n  $ <span class=\"keyword\">ls</span> -l -a a.txt\n  <span class=\"comment\">// 或</span>\n  $ <span class=\"keyword\">ls</span> -la a.txt\n</code></pre></li>\n<li><p>cp 复制</p>\n<pre><code>  <span class=\"comment\">// 将 a.txt 复制到 b.txt</span>\n  $ cp a.txt b.txt\n  <span class=\"comment\">// 将 a.txt 复制到父目录下的 a.txt</span>\n  $ cp a.txt ..\n</code></pre></li>\n<li><p>mv 移动                </p>\n<pre><code>  <span class=\"comment\">// 移动 a.txt 到 b.txt ，此时相当于重命名了</span>\n  $ mv a.txt b.txt\n  <span class=\"comment\">// 移动 a.txt 到桌面目录下</span>\n  $ mv a.txt /Desktop\n</code></pre></li>\n<li><p>rm 删除文件</p>\n<pre><code>  <span class=\"comment\">// 删除 a.txt 文件</span>\n  $ rm a.txt\n</code></pre></li>\n<li><p>rm -r 删除目录-目录不一定非空</p>\n<pre><code>  <span class=\"comment\">// 删除 /home/xiaolai 整个目录，参数 -r 是 recursive 重复删除之意</span>\n  $ rm -r <span class=\"regexp\">/home/</span>xiaolai    \n\n  <span class=\"comment\">// 慎用 rm -rf 即强制删除目录不提供确认！！</span>\n  <span class=\"comment\">// $rm -rf /home/xiaolai</span>\n</code></pre></li>\n<li><p>pwd 显示当前路径</p>\n<pre><code>  $ <span class=\"built_in\">pwd</span>\n</code></pre></li>\n<li><p>cd 切换路径</p>\n<pre><code>  <span class=\"comment\">// 切换到 /home/xiaolai</span>\n  $ cd <span class=\"regexp\">/home/</span>xiaolai\n  <span class=\"comment\">// 切换到之前的路径</span>\n  $ cd -    \n</code></pre></li>\n</ul>\n<ul>\n<li><p>mkdir 创建目录</p>\n<pre><code>  /<span class=\"regexp\">/ 创建目录 /home</span><span class=\"regexp\">/xiaolai/newdir</span>\n  <span class=\"variable\">$ </span>mkdir /home/xiaolai/newdir\n</code></pre></li>\n<li><p>rmdir 删除目录</p>\n<pre><code>  <span class=\"comment\">// 目录为空时才可删除</span>\n  $ rmdir <span class=\"regexp\">/home/</span>xiaolai<span class=\"regexp\">/newdir    </span>\n</code></pre></li>\n<li><p>chmod 修改权限</p>\n<pre><code>  <span class=\"comment\">// 修改 a.txt 的权限为 755</span>\n  $ chmod <span class=\"number\">755</span> a.txt\n</code></pre></li>\n<li><p>chown 修改拥有者</p>\n<pre><code>  // 修改 a.txt 的拥有者为 root, <span class=\"built_in\">sudo</span> 指以超级权限运行\n  $ <span class=\"built_in\">sudo</span> chown root a.txt     \n</code></pre></li>\n<li><p>chgrp 修改拥有组</p>\n<pre><code>  <span class=\"comment\">// 修改 a.txt 的拥有组为 root 组</span>\n  $ sudo chgrp root a.txt    \n</code></pre></li>\n<li><p>cat 查看文件内容</p>\n<pre><code> <span class=\"comment\"> // 命令行中列出文件内容</span>\n  $ cat <span class=\"operator\">a</span>.txt    \n <span class=\"comment\"> // 链接显示 a.txt 和 b.txt</span>\n  $ cat <span class=\"operator\">a</span>.txt b.txt\n</code></pre></li>\n<li><p>head -1 显示文件第一行</p>\n<pre><code>  <span class=\"variable\">$ </span>head -<span class=\"number\">1</span> a.txt\n</code></pre></li>\n<li><p>tail -2 显示文件倒数第二行</p>\n<pre><code>  <span class=\"variable\">$ </span>tail -<span class=\"number\">2</span> a.txt\n</code></pre></li>\n<li><p>diff 文件对比</p>\n<pre><code>  <span class=\"comment\">// 显示 a.txt 和 b.txt 的差异</span>\n  $ diff a.txt b.txt\n</code></pre></li>\n<li><p>du 文件占用的磁盘空间</p>\n<pre><code>  <span class=\"comment\">// du    </span>\n</code></pre></li>\n<li><p>df 文件系统的磁盘空间占用情况</p>\n<pre><code>  <span class=\"comment\">// df                            </span>\n</code></pre></li>\n<li><p>wc 显示文件内容的字符、词和行数             </p>\n<pre><code>  <span class=\"variable\">$ </span>wc a.txt    \n</code></pre></li>\n</ul>\n<ul>\n<li><p>od -c 使用ASCII查看文件内容</p>\n<pre><code>  <span class=\"variable\">$ </span>od -c a.txt    \n</code></pre></li>\n</ul>\n<ul>\n<li><p>open 打开文件</p>\n<pre><code> <span class=\"comment\"> // 打开一个应用</span>\n  $ <span class=\"built_in\">open</span> /Applications/Safari.app/\n\n <span class=\"comment\"> // 打开一个目录</span>\n  $ <span class=\"built_in\">open</span> /Applications/\n <span class=\"comment\"> // 打开当前目录</span>\n  $ <span class=\"built_in\">open</span> ./\n\n <span class=\"comment\"> // 使用默认软件打开文件</span>\n  $ <span class=\"built_in\">open</span> fa.css \n <span class=\"comment\"> // 使用文本编辑器打开文件</span>\n  $ <span class=\"built_in\">open</span> fa.css \n <span class=\"comment\"> // 指定一个软件打开一个文件，如这里指定用 sublime text 打开</span>\n  $ <span class=\"built_in\">open</span> test.txt -<span class=\"operator\">a</span> /Applications/Sublime\\ Text.app/    \n</code></pre></li>\n<li><p>du 查看文件夹大小</p>\n<pre><code>  $ du <span class=\"regexp\">/home/</span>xiaolai\n  <span class=\"comment\">// -h 人类可读单位，-s 只显示摘要    </span>\n  $ du -sh <span class=\"regexp\">/home/</span>xiaolai\n</code></pre></li>\n<li><p>find 查找文件</p>\n<pre><code>  <span class=\"comment\">// 查找test.txt</span>\n  $ <span class=\"built_in\">find</span>  test.txt\n</code></pre></li>\n<li><p>locate 查找匹配名文件</p>\n<pre><code>  // 向下查找文件名中含有 <span class=\"keyword\">test</span> 的文件\n  $ locate <span class=\"keyword\">test</span>\n\n  // 与 find 不同的是，locate 并不是实时查找，需要更新数据库才能获取到最新信息\n  $ updatedb\n  $ locate <span class=\"keyword\">test</span>\n</code></pre></li>\n<li><p>其他命令</p>\n<pre><code> <span class=\"comment\"> // 时间</span>\n  $ <span class=\"built_in\">date</span>    \n <span class=\"comment\"> // 休眠 300s</span>\n  $ sleep <span class=\"number\">300</span>\n <span class=\"comment\"> // 系统日志</span>\n  $ dmesg\n</code></pre><p>  硬件信息</p>\n<pre><code>  // 系统信息\n  $ uname\n  // 系统详细信息\n  $ uname -a\n  // 所有硬盘的使用情况\n  $ df -lh\n  // 所有硬盘使用情况\n  $ mount\n  // 所有分区\n  $ sudo fdisk -l\n  // 架构信息\n  $ arh\n  // <span class=\"type\">CPU</span>信息\n  $ cat /<span class=\"keyword\">proc</span>/cpuinfo\n  // 内存信息\n  $ cat /<span class=\"keyword\">proc</span>/meminfo\n  // 内存使用情况\n  $ free\n  // 内存page大小(<span class=\"type\">KB</span>)\n  $ pagesize\n</code></pre><p>  网络信息</p>\n<pre><code>  <span class=\"comment\">// 网络接口信息</span>\n  $ ifconfig\n  <span class=\"comment\">// 路由表</span>\n  $ route\n  <span class=\"comment\">// 网络连接状态</span>\n  $ netstat\n  <span class=\"comment\">// 发送 ping 包</span>\n  $ ping <span class=\"attr_selector\">[IP]</span>\n  <span class=\"comment\">// 探测路由路径</span>\n  $ traceroute <span class=\"attr_selector\">[IP]</span>\n  <span class=\"comment\">// 向DHCP发送请求，获取IP地址和其他设置信息</span>\n  $ dhclient\n  <span class=\"comment\">// DNS查询domain对应的IP</span>\n  $ host <span class=\"attr_selector\">[domain]</span>\n  <span class=\"comment\">// DNS查询IP对应的domain</span>\n  $ host <span class=\"attr_selector\">[IP]</span>\n  <span class=\"comment\">// 使用 wget 下载 url 指定的资源</span>\n  $ wget <span class=\"attr_selector\">[url]</span>\n</code></pre></li>\n</ul>\n<h1 id=\"进程\">进程</h1>\n<ul>\n<li><p>top 显示进程信息</p>\n<pre><code>  <span class=\"variable\">$ </span>top\n</code></pre></li>\n<li><p>ps 列出进程</p>\n</li>\n<li><p>ps -e -o 列出进程特定信息</p>\n<pre><code>  // <span class=\"operator\">-e</span> 列出全部进程\n  $ ps <span class=\"operator\">-e</span>\n  // -o pid,comm,cmd 列出 PID,COMMAND,CMD,PPID 信息\n  $ ps <span class=\"operator\">-e</span> -o pid,comm,cmd,ppid\n</code></pre></li>\n<li><p>fork 创建进程</p>\n<p>  通过复制父进程来得到子进程，子进程有个 ppid 属性保存了父进程 id</p>\n<pre><code>  <span class=\"comment\">// 显示父子进程</span>\n  $ ps -o pid, ppid, cmd\n  <span class=\"comment\">// 显示进程树</span>\n  $ pstree    \n</code></pre></li>\n<li><p>ps -ajx 显示较完整的进程信息</p>\n<pre><code>  $ <span class=\"keyword\">ps</span> -ajx    \n</code></pre></li>\n<li><p>ps -o pgid</p>\n<p>  进程组的作用在于可以将一个新号发送给这个组</p>\n<pre><code>  // pgid 表示进程组的领导进程的 id\n  $ ps -p pid,,ppid,pgid,cmd\n</code></pre></li>\n<li><p>ps -o sid</p>\n<p>  几个进程组可以组成一个会话，会话领导进程的PID为SID</p>\n<p>  会话中的每个进程组都是一个工作(job)，每个会话可以连接一个终端(control terminal)</p>\n<p>  会话的作用在于可以将多个工作囊括在一个终端，并取其中的一个作为前台(foreground)，其他工作则进行在后台(background)</p>\n<pre><code>  // 用 &amp; 将ping工作在后台运行, 并将输出流写到<span class=\"built_in\">log</span>文件中\n  $ ping localhost &gt; <span class=\"built_in\">log</span> &amp;\n</code></pre></li>\n</ul>\n<h1 id=\"信号\">信号</h1>\n<pre><code>常见信号：SIGINT, SIGQUIT, SIGCONT, SIGTSTP, SIGALRM\n\n    <span class=\"comment\">// 查询信号</span>\n    $ man <span class=\"number\">7</span> <span class=\"keyword\">signal</span>\n\n按下键盘 CTRL+C 时，发出<span class=\"constant\"> SIGINT </span>信号，默认操作是中断(INTERRUPT)该进程    \n按下键盘 CTRL+\\ 时，发出<span class=\"constant\"> SIGQUIT </span>信号，默认操作是退出(QUIT)该进程\n\n按下键盘 CTRL+Z 时，发出 SIGTSTP，默认操作是暂停(STOP)该进程\n\nSIGCONT 用于通知暂停的进程继续\n\nSIGALRM 用作定时器：一定时间后才生成该信号\n\n    <span class=\"comment\">// 运行一个进程</span>\n    $ ping localhost\n    <span class=\"comment\">// 按下键盘 CTRL+Z 发出 SIGTSTP 信号，暂停该进程</span>\n    <span class=\"comment\">// CTRL+Z,显示：</span>\n    <span class=\"comment\">// [1]+ Stopped        ping localhost</span>\n    <span class=\"comment\">// 查询这个ping进程的pid</span>\n    $ ps -e -o cmd,pid\n    <span class=\"comment\">// 查询到 5132，使用 kill 来发送SIGCONT信号，继续该进程</span>\n    $ kill -SIGCONT <span class=\"number\">5132</span>\n    <span class=\"comment\">// 接着ping进程就会继续了</span>\n</code></pre><h1 id=\"用户\">用户</h1>\n<pre><code>用户登录后，有用户id(UID)和组id(GID)\n\n用户信息保存在 <span class=\"regexp\">/etc/</span>passwd\n组信息保存在 <span class=\"regexp\">/etc/g</span>roup\n</code></pre><h1 id=\"SSH_登录_VPS\">SSH 登录 VPS</h1>\n<ul>\n<li><p>登录到远程主机</p>\n<pre><code>  <span class=\"variable\">$ </span>ssh root<span class=\"variable\">@123</span>.<span class=\"number\">123.123</span>.<span class=\"number\">123</span>\n</code></pre></li>\n<li><p>修改root用户密码</p>\n<pre><code>  <span class=\"variable\">$ </span>passwd\n</code></pre></li>\n<li><p>添加用户组</p>\n<pre><code>  $ addgroup <span class=\"literal\">admin</span>\n</code></pre></li>\n<li><p>添加用户</p>\n<pre><code>  $ useradd <span class=\"operator\">-d</span> /home/xiaolai <span class=\"operator\">-s</span> /bin/bash -m xiaolai\n</code></pre><p>  参数 -d 指定用户主目录，-s 指定用户的shell，-m 指定目录不存在则创建    </p>\n</li>\n<li><p>设置新用户的密码</p>\n<pre><code>  <span class=\"variable\">$ </span>passwd xiaolai\n</code></pre></li>\n<li><p>添加用户到用户组</p>\n<pre><code>  $ usermod <span class=\"operator\">-a</span> -G admin xiaolai\n</code></pre></li>\n<li><p>为用户设定sudo权限</p>\n<pre><code>  <span class=\"variable\">$ </span>visudo\n</code></pre><p>  visudo会打开/etc/sudoers 在：<br>  root    ALL=(ALL:ALL) ALL 后添加：<br>  xiaolai    ALL=(ALL:ALL) ALL    </p>\n</li>\n</ul>\n<h1 id=\"压缩与归档\">压缩与归档</h1>\n<ul>\n<li><p>zip 压缩</p>\n<pre><code>  // 将 file1 和 file2 压缩到 <span class=\"keyword\">file</span>.zip\n  $ zip <span class=\"keyword\">file</span>.zip file1 file2\n</code></pre></li>\n<li><p>unzip    解压缩</p>\n<pre><code>  $ unzip <span class=\"keyword\">file</span>.zip    \n</code></pre></li>\n<li><p>gzip 压缩</p>\n<pre><code>  // file1 压缩到 <span class=\"keyword\">file</span>.gz\n  $ gzip -<span class=\"keyword\">c</span> file1 &gt; <span class=\"keyword\">file</span>.gz\n</code></pre></li>\n<li><p>gunzip 解压缩</p>\n<pre><code>  $ gunzip <span class=\"keyword\">file</span>.gz\n</code></pre></li>\n<li><p>tar -cf 创建归档</p>\n<pre><code>  // 将 file1 和 file2 归档到 <span class=\"keyword\">file</span>.tar\n  $ tar -<span class=\"keyword\">cf</span> <span class=\"keyword\">file</span>.tar file1 file2    \n</code></pre></li>\n<li><p>tar -zcvf 创建归档并压缩        </p>\n<pre><code>  $ tat -zcvf <span class=\"keyword\">file</span>.tar file1 file2\n</code></pre></li>\n<li><p>tar -xf 释放归档</p>\n<pre><code>  $ tar -xf <span class=\"keyword\">file</span>.tar\n</code></pre></li>\n<li><p>tar -zxf 解压并释放归档</p>\n<pre><code>  $ tar -zxf <span class=\"keyword\">file</span>.tar.gz    \n</code></pre></li>\n</ul>\n","source":"_posts/linux_学习笔记.md","raw":"title: linux 学习笔记\n\ndate: 2014-05-09 21:19:42\n\ncategories: \n\t- Linux\n\ntags: \n\t-linux\n\n---\n\n\n\n> TODO - 待整理\n\n\n# 一些概念\n\n- bytes stream 字节流\n\n\tlinux 执行一个程序时会自动打开三个流：标准输入流、标准输出流、标准错误流\n\t\n\t输出流用 \">\" 或 \">>\" 表示\n\t\n\t输入流用 \"<\" 表示\n\t\n\t错误流用 \">&\" 表示\n\t\n\t\t// 输出文本流到屏幕\n\t\t$ echo '我是小赖'\n\t\t// echo 输出信息到 a.txt\n\t\t$ echo '我是小赖' > a.txt\n\t\t// 追加文本流到 a.txt\n\t\t$ echo '我才是小赖' >> a.txt\n\n\t\t// 输出命令执行结果文本流到屏幕\n\t\t$ ls\n\t\t// 重新定向, 这样 ls 命令的输出文本流就会写到这个文件上\n\t\t$ ls > a.txt\n\t\t// 若 a.txt 已存在，则将ls 命令的输出文本流追加到这个文件上\n\t\t$ ls >> a.txt \n\t\t\n\t\t// 输入文本流\n\t\t$ cat < a.txt\n\t\t// 复制 a.txt 到 b.txt\n\t\t$ cat < a.txt > b.txt\n\t\t\n\t\t// 输出错误，假定 wrongDir 是不存在的目录\n\t\t$ cd void >& a.txt\n\t\t\n- pipe 管道\n\n\t使用管道，可以将一个命令的输出流当做另一个命令的输入流\n\t\n\t管道用 \"|\" 表示\n\t\n\t\t// 输出 \"cat > a.txt\" 当做命令 \"wc\" 的输入\n\t\t// wc 即 word count：输出文本的行、词和字符总数\n\t\t$ cat < a.txt | wc\n\n<!-- more -->\t\t\t\n\t\n# 帮助类命令\u001b\n\n- type 查看某个命令的类型\n\n类型可为：1.可执行文件 2.内建函数 3.别名\n\n\t\t$ type ls\n\t\t$ type cd\n\t\t$ type open\n\n- which 查看命令的绝对路径\n\n\t\t$ which ls\n\t\t\n- where 更大范围查看命令的绝对路径\t\t\n\n\t\t$ whereis ls\n\n- whatis 查看命令的介绍\n\n\t\t$ whatis ls\t\n\n- man 查询命令的帮助文档\n\t\t\n\t\t// 学习 linux 必备！\n\t\t$ man ls\t\n\n- info 查询命令的更详细帮助文档\n\n\t\t$ info ls\n\n- history 查看输入的命令历史\n\n\t\t$ history \n\t\t\n- alias 别名\n\n\t\t// 查看所有别名\n\t\t$ alias\n\t\t// 设置别名，llss 为 ls 的别名\n\t\t$ alias lllsss = ls\t\n\n- env 环境变量\n\n\t\t// 查看所有环境变量\n\t\t$ env\n\t\t// 设置环境变量\n\t\t// $ export [key]=[value]\t\n\t\t$ export testKey=testVal\n\t\t\n- finger 查看用户信息\n\t\t\n\t\t// 查看所有用户信息\n\t\t$ finger\n\t\t// 查看特定用户信息\n\t\t$ finger xiaolai\n\t\t\n- who am I 显示当前用户\n\n\t\t$ who am I\n\t\t\n- su 成为超级用户\n\n\t\t$ su\n\t\t// 或者用超级用户执行命令：\n\t\t// $ sudo [commmand]\t\n\n- passwd 修改密码\n\t\t\n\t\t$ passwd\t\n\t\n\t\t\n\t\n\t\t\t\t\t\n\t\n# 文件管理类命令\n\t\n- touch 新建文件\n\n\t\t// 如果文件已经存在，则只修改时间信息\n\t\t$ touch a.txt\t\n\n\t\n- ls 列出目录/文件信息 \n\t\t\n\t\t// 显示当前目录下的文件\n\t\t$ ls\n\t\t// 显示桌面目录下的文件\n\t\t$ ls ~/Desktop\n\t\t// 显示目录下所有文件的信息\n\t\t$ ls -l\n\t\t// 显示目录下特定文件的信息\n\t\t$ ls -l a.txt\n\t\t// 显示目录下多个文件的信息\n\t\t$ ls -l a.txt b.txt c.txt d.txt\n\t\t// 列出当前目录下的文件的详细信息，包括隐藏文件\n\t\t$ ls -l -a\n\t\t// 或\n\t\t$ ls -la\n\t\t// 列出当前目录下特定文件的详细信息，包括隐藏文件\n\t\t$ ls -l -a a.txt\n\t\t// 或\n\t\t$ ls -la a.txt\n\n- cp 复制\n \n\t\t// 将 a.txt 复制到 b.txt\n\t\t$ cp a.txt b.txt\n\t\t// 将 a.txt 复制到父目录下的 a.txt\n\t\t$ cp a.txt ..\n\n- mv 移动\t\t\t\t\n\n\t\t// 移动 a.txt 到 b.txt ，此时相当于重命名了\n\t\t$ mv a.txt b.txt\n\t\t// 移动 a.txt 到桌面目录下\n\t\t$ mv a.txt /Desktop\n\n- rm 删除文件\n\n\t\t// 删除 a.txt 文件\n\t\t$ rm a.txt\n\t\t\n- rm -r 删除目录-目录不一定非空\n\n\t\t// 删除 /home/xiaolai 整个目录，参数 -r 是 recursive 重复删除之意\n\t\t$ rm -r /home/xiaolai\t\n\t\t\n\t\t// 慎用 rm -rf 即强制删除目录不提供确认！！\n\t\t// $rm -rf /home/xiaolai\n\t\n- pwd 显示当前路径\n\t\t\n\t\t$ pwd\n\t\t\t\t\n- cd 切换路径\n\t\t\n\t\t// 切换到 /home/xiaolai\n\t\t$ cd /home/xiaolai\n\t\t// 切换到之前的路径\n\t\t$ cd -\t\n\t\n\t\t\n- mkdir 创建目录\n\n\t\t// 创建目录 /home/xiaolai/newdir\n\t\t$ mkdir /home/xiaolai/newdir\n\n- rmdir 删除目录\n\n\t\t// 目录为空时才可删除\n\t\t$ rmdir /home/xiaolai/newdir\t\n\n- chmod 修改权限\n\n\t\t// 修改 a.txt 的权限为 755\n\t\t$ chmod 755 a.txt\n\n- chown 修改拥有者\n\n\t\t// 修改 a.txt 的拥有者为 root, sudo 指以超级权限运行\n\t\t$ sudo chown root a.txt \t\n\n- chgrp 修改拥有组\n\n\t\t// 修改 a.txt 的拥有组为 root 组\n\t\t$ sudo chgrp root a.txt\t\n\t\t\n- cat 查看文件内容\n\t\t\n\t\t// 命令行中列出文件内容\n\t\t$ cat a.txt\t\n\t\t// 链接显示 a.txt 和 b.txt\n\t\t$ cat a.txt b.txt\n\n- head -1 显示文件第一行\n\n\t\t$ head -1 a.txt\n\n- tail -2 显示文件倒数第二行\n\n\t\t$ tail -2 a.txt\n\t\t\n- diff 文件对比\n\t\t\n\t\t// 显示 a.txt 和 b.txt 的差异\n\t\t$ diff a.txt b.txt\n\t\t\n- du 文件占用的磁盘空间\n\t\t\n\t\t// du\t\n\n- df 文件系统的磁盘空间占用情况\n\n\t\t// df\t\t\t\t\t\t\t\n\n- wc 显示文件内容的字符、词和行数 \t\t\t\n\n\t\t$ wc a.txt\t\n\n\t\t\n- od -c 使用ASCII查看文件内容\n\n\t\t$ od -c a.txt\t\n\t\n\t\n- open 打开文件\n\n\t\t// 打开一个应用\n\t\t$ open /Applications/Safari.app/\n\t\t\n\t\t// 打开一个目录\n\t\t$ open /Applications/\n\t\t// 打开当前目录\n\t\t$ open ./\n\t\t\n\t\t// 使用默认软件打开文件\n\t\t$ open fa.css \n\t\t// 使用文本编辑器打开文件\n\t\t$ open fa.css \n\t\t// 指定一个软件打开一个文件，如这里指定用 sublime text 打开\n\t\t$ open test.txt -a /Applications/Sublime\\ Text.app/\t\n- du 查看文件夹大小\n\n\t\t$ du /home/xiaolai\n\t\t// -h 人类可读单位，-s 只显示摘要\t\n\t\t$ du -sh /home/xiaolai\n\n- find 查找文件\n\t\t\n\t\t// 查找test.txt\n\t\t$ find  test.txt\n\n- locate 查找匹配名文件\n\n\t\t// 向下查找文件名中含有 test 的文件\n\t\t$ locate test\n\t\t\n\t\t// 与 find 不同的是，locate 并不是实时查找，需要更新数据库才能获取到最新信息\n\t\t$ updatedb\n\t\t$ locate test\n\n- 其他命令\n\t\n\t\t// 时间\n\t\t$ date\t\n\t\t// 休眠 300s\n\t\t$ sleep 300\n\t\t// 系统日志\n\t\t$ dmesg\n\t\n\t硬件信息\n\t\t\n\t\t// 系统信息\n\t\t$ uname\n\t\t// 系统详细信息\n\t\t$ uname -a\n\t\t// 所有硬盘的使用情况\n\t\t$ df -lh\n\t\t// 所有硬盘使用情况\n\t\t$ mount\n\t\t// 所有分区\n\t\t$ sudo fdisk -l\n\t\t// 架构信息\n\t\t$ arh\n\t\t// CPU信息\n\t\t$ cat /proc/cpuinfo\n\t\t// 内存信息\n\t\t$ cat /proc/meminfo\n\t\t// 内存使用情况\n\t\t$ free\n\t\t// 内存page大小(KB)\n\t\t$ pagesize\n\t\t\n\t网络信息\n\t\t\n\t\t// 网络接口信息\n\t\t$ ifconfig\n\t\t// 路由表\n\t\t$ route\n\t\t// 网络连接状态\n\t\t$ netstat\n\t\t// 发送 ping 包\n\t\t$ ping [IP]\n\t\t// 探测路由路径\n\t\t$ traceroute [IP]\n\t\t// 向DHCP发送请求，获取IP地址和其他设置信息\n\t\t$ dhclient\n\t\t// DNS查询domain对应的IP\n\t\t$ host [domain]\n\t\t// DNS查询IP对应的domain\n\t\t$ host [IP]\n\t\t// 使用 wget 下载 url 指定的资源\n\t\t$ wget [url]\n\t\t\n\n# 进程\n\n- top 显示进程信息\n\t\t\n\t\t$ top\n\n- ps 列出进程\n\n- ps -e -o 列出进程特定信息\n\n\t\t// -e 列出全部进程\n\t\t$ ps -e\n\t\t// -o pid,comm,cmd 列出 PID,COMMAND,CMD,PPID 信息\n\t\t$ ps -e -o pid,comm,cmd,ppid\n\n- fork 创建进程\n\n\t通过复制父进程来得到子进程，子进程有个 ppid 属性保存了父进程 id\n\t\n\t\t// 显示父子进程\n\t\t$ ps -o pid, ppid, cmd\n\t\t// 显示进程树\n\t\t$ pstree\t\n\t\t\n- ps -ajx 显示较完整的进程信息\n\n\t\t$ ps -ajx\t\n\t\n- ps -o pgid\n\t\n\t进程组的作用在于可以将一个新号发送给这个组\n\t\n\t\t// pgid 表示进程组的领导进程的 id\n\t\t$ ps -p pid,,ppid,pgid,cmd\n\n- ps -o sid\n\n\t几个进程组可以组成一个会话，会话领导进程的PID为SID\n\t\n\t会话中的每个进程组都是一个工作(job)，每个会话可以连接一个终端(control terminal)\n\t\n\t会话的作用在于可以将多个工作囊括在一个终端，并取其中的一个作为前台(foreground)，其他工作则进行在后台(background)\n\t\n\t\t// 用 & 将ping工作在后台运行, 并将输出流写到log文件中\n\t\t$ ping localhost > log &\n\n# 信号\n\n\t常见信号：SIGINT, SIGQUIT, SIGCONT, SIGTSTP, SIGALRM\n\t\t\n\t\t// 查询信号\n\t\t$ man 7 signal\n\t\n\t按下键盘 CTRL+C 时，发出 SIGINT 信号，默认操作是中断(INTERRUPT)该进程\t\n\t按下键盘 CTRL+\\ 时，发出 SIGQUIT 信号，默认操作是退出(QUIT)该进程\n\t\n\t按下键盘 CTRL+Z 时，发出 SIGTSTP，默认操作是暂停(STOP)该进程\n\t\n\tSIGCONT 用于通知暂停的进程继续\n\t\n\tSIGALRM 用作定时器：一定时间后才生成该信号\n\t\n\t\t// 运行一个进程\n\t\t$ ping localhost\n\t\t// 按下键盘 CTRL+Z 发出 SIGTSTP 信号，暂停该进程\n\t\t// CTRL+Z,显示：\n\t\t// [1]+ Stopped\t\tping localhost\n\t\t// 查询这个ping进程的pid\n\t\t$ ps -e -o cmd,pid\n\t\t// 查询到 5132，使用 kill 来发送SIGCONT信号，继续该进程\n\t\t$ kill -SIGCONT 5132\n\t\t// 接着ping进程就会继续了\n\t\t\n# 用户\n\n\t用户登录后，有用户id(UID)和组id(GID)\n\t\n\t用户信息保存在 /etc/passwd\n\t组信息保存在 /etc/group\n\t\n\t\t\n# SSH 登录 VPS\n\n- 登录到远程主机\n\n\t\t$ ssh root@123.123.123.123\n\t\n- 修改root用户密码\n\n\t\t$ passwd\n\t\n- 添加用户组\n\n\t\t$ addgroup admin\n\t\n- 添加用户\n\n\t\t$ useradd -d /home/xiaolai -s /bin/bash -m xiaolai\n\t\n\t参数 -d 指定用户主目录，-s 指定用户的shell，-m 指定目录不存在则创建\t\n- 设置新用户的密码\n\n\t\t$ passwd xiaolai\n\t\n- 添加用户到用户组\n\n\t\t$ usermod -a -G admin xiaolai\n\t\n- 为用户设定sudo权限\n\n\t\t$ visudo\n\t\n\tvisudo会打开/etc/sudoers 在：\n\troot    ALL=(ALL:ALL) ALL 后添加：\n\txiaolai    ALL=(ALL:ALL) ALL\t\n\t\n\t\n# 压缩与归档\n\n- zip 压缩\n\n\t\t// 将 file1 和 file2 压缩到 file.zip\n\t\t$ zip file.zip file1 file2\n\n- unzip\t解压缩\n\n\t\t$ unzip file.zip\t\n\t\n- gzip 压缩\n\n\t\t// file1 压缩到 file.gz\n\t\t$ gzip -c file1 > file.gz\n\n- gunzip 解压缩\n\n\t\t$ gunzip file.gz\n\n- tar -cf 创建归档\n\t\t\n\t\t// 将 file1 和 file2 归档到 file.tar\n\t\t$ tar -cf file.tar file1 file2\t\n\n- tar -zcvf 创建归档并压缩\t\t\n\n\t\t$ tat -zcvf file.tar file1 file2\n\t\t\n- tar -xf 释放归档\n\t\t\n\t\t$ tar -xf file.tar\n\n- tar -zxf 解压并释放归档\n\n\t\t$ tar -zxf file.tar.gz\t\n\t\t\n\t\t\t\n\t\t\n\t\t\n\n\n\n\t\n\n\t\n\n\n\n\n\t","slug":"linux_学习笔记","updated":1418908898000,"excerpt":"<blockquote>\n<p>TODO - 待整理</p>\n</blockquote>\n<h1 id=\"一些概念\">一些概念</h1>\n<ul>\n<li><p>bytes stream 字节流</p>\n<p>  linux 执行一个程序时会自动打开三个流：标准输入流、标准输出流、标准错误流</p>\n<p>  输出流用 “&gt;” 或 “&gt;&gt;” 表示</p>\n<p>  输入流用 “&lt;” 表示</p>\n<p>  错误流用 “&gt;&amp;” 表示</p>\n<pre><code>  <span class=\"comment\">// 输出文本流到屏幕</span>\n  $ <span class=\"keyword\">echo</span> <span class=\"string\">'我是小赖'</span>\n  <span class=\"comment\">// echo 输出信息到 a.txt</span>\n  $ <span class=\"keyword\">echo</span> <span class=\"string\">'我是小赖'</span> &gt; a.txt\n  <span class=\"comment\">// 追加文本流到 a.txt</span>\n  $ <span class=\"keyword\">echo</span> <span class=\"string\">'我才是小赖'</span> &gt;&gt; a.txt\n\n  <span class=\"comment\">// 输出命令执行结果文本流到屏幕</span>\n  $ ls\n  <span class=\"comment\">// 重新定向, 这样 ls 命令的输出文本流就会写到这个文件上</span>\n  $ ls &gt; a.txt\n  <span class=\"comment\">// 若 a.txt 已存在，则将ls 命令的输出文本流追加到这个文件上</span>\n  $ ls &gt;&gt; a.txt \n\n  <span class=\"comment\">// 输入文本流</span>\n  $ cat &lt; a.txt\n  <span class=\"comment\">// 复制 a.txt 到 b.txt</span>\n  $ cat &lt; a.txt &gt; b.txt\n\n  <span class=\"comment\">// 输出错误，假定 wrongDir 是不存在的目录</span>\n  $ cd void &gt;&amp; a.txt\n</code></pre></li>\n<li><p>pipe 管道</p>\n<p>  使用管道，可以将一个命令的输出流当做另一个命令的输入流</p>\n<p>  管道用 “|” 表示</p>\n<pre><code>  // 输出 <span class=\"string\">\"cat &gt; a.txt\"</span> 当做命令 <span class=\"string\">\"wc\"</span> 的输入\n  // wc 即 word <span class=\"built_in\">count</span>：输出文本的行、词和字符总数\n  $ <span class=\"keyword\">cat</span> &lt; <span class=\"keyword\">a</span>.txt | wc\n</code></pre></li>\n</ul>\n","_id":"hpbrl9l8rmsirmlt","comments":true,"layout":"post","photos":[],"link":""},{"title":"lodash.js 学习笔记","tags":["uexsw91clqvjzltf"],"date":1405218529000,"content":"<p>underscore.js 提供了一系列工具函数，而 lodash.js 可以认为是 underscore.js 的一个超集。</p>\n<p>简单示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"keyword\">require</span>(<span class=\"string\">'lodash'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 去掉falsy值后的数组</span></div><div class=\"line\">_.compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"keyword\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>]);</div><div class=\"line\"><span class=\"comment\">// → [1, 2, 3]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 找出数组中不同的值</span></div><div class=\"line\">_.difference([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>]);</div><div class=\"line\"><span class=\"comment\">// → [1, 3, 4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 根据条件找出数组元素的索引值，未找到则返回 -1</span></div><div class=\"line\"><span class=\"keyword\">var</span> characters = [</div><div class=\"line\">  { <span class=\"string\">'name'</span>: <span class=\"string\">'barney'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'blocked'</span>: <span class=\"keyword\">false</span> },</div><div class=\"line\">  { <span class=\"string\">'name'</span>: <span class=\"string\">'fred'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'blocked'</span>: <span class=\"keyword\">true</span> },</div><div class=\"line\">  { <span class=\"string\">'name'</span>: <span class=\"string\">'pebbles'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'blocked'</span>: <span class=\"keyword\">false</span> }</div><div class=\"line\">];</div><div class=\"line\">_.findIndex(characters, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(chr)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> chr.age &lt; <span class=\"number\">20</span>;</div><div class=\"line\">});</div><div class=\"line\"><span class=\"comment\">// → 2</span></div><div class=\"line\"><span class=\"comment\">// using \"_.where\" callback shorthand</span></div><div class=\"line\">_.findIndex(characters, { <span class=\"string\">'age'</span>: <span class=\"number\">36</span> });</div><div class=\"line\"><span class=\"comment\">// → 0</span></div><div class=\"line\"><span class=\"comment\">// using \"_.pluck\" callback shorthand</span></div><div class=\"line\">_.findIndex(characters, <span class=\"string\">'blocked'</span>);</div><div class=\"line\"><span class=\"comment\">// → 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 找出数组中相同的值</span></div><div class=\"line\">_.intersection([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>]);</div><div class=\"line\"><span class=\"comment\">// → [1, 2]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 找出数组中最后的值</span></div><div class=\"line\">_.last([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\"><span class=\"comment\">// → 3</span></div><div class=\"line\">_.last([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// → [2, 3]</span></div><div class=\"line\">_.last([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(num)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> num &gt; <span class=\"number\">1</span>;</div><div class=\"line\">});</div><div class=\"line\"><span class=\"comment\">// → [2, 3]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 找出某个值最后出现的索引</span></div><div class=\"line\">_.lastIndexOf([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// → 4</span></div><div class=\"line\"><span class=\"comment\">// 从 第三个元素开始</span></div><div class=\"line\">_.lastIndexOf([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// → 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 移除数组中指定的值</span></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">array</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">_.pull(<span class=\"keyword\">array</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</div><div class=\"line\">console.log(<span class=\"keyword\">array</span>);</div><div class=\"line\"><span class=\"comment\">// → [1, 1]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回一个范围数组</span></div><div class=\"line\"><span class=\"comment\">// _.range([start=0], end, [step=1])</span></div><div class=\"line\">_.range(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// → [0, 1, 2, 3]</span></div><div class=\"line\">_.range(<span class=\"number\">1</span>, <span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">// → [1, 2, 3, 4]</span></div><div class=\"line\">_.range(<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">// → [0, 5, 10, 15]</span></div><div class=\"line\">_.range(<span class=\"number\">0</span>, -<span class=\"number\">4</span>, -<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// → [0, -1, -2, -3]</span></div><div class=\"line\">_.range(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">// → [1, 1, 1]</span></div><div class=\"line\">_.range(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">// → []</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 移除数组中匹配条件的值</span></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">array</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> evens = _.remove(<span class=\"keyword\">array</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(num)</span> </span>{ <span class=\"keyword\">return</span> num % <span class=\"number\">2</span> == <span class=\"number\">0</span>; });</div><div class=\"line\">console.log(<span class=\"keyword\">array</span>);</div><div class=\"line\"><span class=\"comment\">// → [1, 3, 5]</span></div><div class=\"line\">console.log(evens);</div><div class=\"line\"><span class=\"comment\">// → [2, 4, 6]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 切割数组，默认切割 1</span></div><div class=\"line\"><span class=\"comment\">// _.rest(array, [callback=1], [thisArg])</span></div><div class=\"line\">_.rest([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\"><span class=\"comment\">// → [2, 3]</span></div><div class=\"line\">_.rest([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// → [3]</span></div><div class=\"line\">_.rest([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(num)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> num &lt; <span class=\"number\">3</span>;</div><div class=\"line\">});</div><div class=\"line\"><span class=\"comment\">// → [3]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 更多实用函数见 http://lodash.com/docs</span></div></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h3 id=\"参考链接\">参考链接</h3>\n<ul>\n<li><a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">underscorejs.org</a></li>\n<li><a href=\"http://lodash.com/\" target=\"_blank\" rel=\"external\">lodash.com</a></li>\n<li><a href=\"http://blog.fens.me/nodejs-underscore/\" target=\"_blank\" rel=\"external\">http://blog.fens.me/nodejs-underscore/</a></li>\n<li><a href=\"http://learningcn.com/underscore/\" target=\"_blank\" rel=\"external\">http://learningcn.com/underscore/</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/library/underscore.html\" target=\"_blank\" rel=\"external\">Underscore.js 中文</a></li>\n<li><a href=\"http://kitcambridge.be/blog/say-hello-to-lo-dash/\" target=\"_blank\" rel=\"external\">Say “Hello” to Lo-Dash</a></li>\n<li><a href=\"http://stackoverflow.com/questions/13789618/differences-between-lodash-and-underscore\" target=\"_blank\" rel=\"external\">Differences between lodash and underscore</a></li>\n</ul>\n","source":"_posts/lodashjs-学习笔记.md","raw":"title: 'lodash.js 学习笔记'\n\ntags: [lodash]\t\n\t\n\ndate: 2014-07-13 10:28:49\n---\n\nunderscore.js 提供了一系列工具函数，而 lodash.js 可以认为是 underscore.js 的一个超集。\n\n\n简单示例：\n\n```\nvar _ = require('lodash');\n\n// 去掉falsy值后的数组\n_.compact([0, 1, false, 2, '', 3]);\n// → [1, 2, 3]\n\n// 找出数组中不同的值\n_.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n// → [1, 3, 4]\n\n// 根据条件找出数组元素的索引值，未找到则返回 -1\nvar characters = [\n  { 'name': 'barney',  'age': 36, 'blocked': false },\n  { 'name': 'fred',    'age': 40, 'blocked': true },\n  { 'name': 'pebbles', 'age': 1,  'blocked': false }\n];\n_.findIndex(characters, function(chr) {\n  return chr.age < 20;\n});\n// → 2\n// using \"_.where\" callback shorthand\n_.findIndex(characters, { 'age': 36 });\n// → 0\n// using \"_.pluck\" callback shorthand\n_.findIndex(characters, 'blocked');\n// → 1\n\n// 找出数组中相同的值\n_.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);\n// → [1, 2]\n\n// 找出数组中最后的值\n_.last([1, 2, 3]);\n// → 3\n_.last([1, 2, 3], 2);\n// → [2, 3]\n_.last([1, 2, 3], function(num) {\n  return num > 1;\n});\n// → [2, 3]\n\n// 找出某个值最后出现的索引\n_.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n// → 4\n// 从 第三个元素开始\n_.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n// → 1\n\n// 移除数组中指定的值\nvar array = [1, 2, 3, 1, 2, 3];\n_.pull(array, 2, 3);\nconsole.log(array);\n// → [1, 1]\n\n// 返回一个范围数组\n// _.range([start=0], end, [step=1])\n_.range(4);\n// → [0, 1, 2, 3]\n_.range(1, 5);\n// → [1, 2, 3, 4]\n_.range(0, 20, 5);\n// → [0, 5, 10, 15]\n_.range(0, -4, -1);\n// → [0, -1, -2, -3]\n_.range(1, 4, 0);\n// → [1, 1, 1]\n_.range(0);\n// → []\n\n// 移除数组中匹配条件的值\nvar array = [1, 2, 3, 4, 5, 6];\nvar evens = _.remove(array, function(num) { return num % 2 == 0; });\nconsole.log(array);\n// → [1, 3, 5]\nconsole.log(evens);\n// → [2, 4, 6]\n\n// 切割数组，默认切割 1\n// _.rest(array, [callback=1], [thisArg])\n_.rest([1, 2, 3]);\n// → [2, 3]\n_.rest([1, 2, 3], 2);\n// → [3]\n_.rest([1, 2, 3], function(num) {\n  return num < 3;\n});\n// → [3]\n\n// 更多实用函数见 http://lodash.com/docs\n\n```\n<!-- more -->\n\n### 参考链接\n\n- [underscorejs.org](http://underscorejs.org/)\n- [lodash.com](http://lodash.com/)\n- [http://blog.fens.me/nodejs-underscore/](http://blog.fens.me/nodejs-underscore/)\n- [http://learningcn.com/underscore/](http://learningcn.com/underscore/)\n- [Underscore.js 中文](http://javascript.ruanyifeng.com/library/underscore.html)\n- [Say \"Hello\" to Lo-Dash](http://kitcambridge.be/blog/say-hello-to-lo-dash/)\n-  [Differences between lodash and underscore](http://stackoverflow.com/questions/13789618/differences-between-lodash-and-underscore)\n\n\n","slug":"lodashjs-学习笔记","updated":1418908898000,"excerpt":"<p>underscore.js 提供了一系列工具函数，而 lodash.js 可以认为是 underscore.js 的一个超集。</p>\n<p>简单示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"keyword\">require</span>(<span class=\"string\">'lodash'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 去掉falsy值后的数组</span></div><div class=\"line\">_.compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"keyword\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>]);</div><div class=\"line\"><span class=\"comment\">// → [1, 2, 3]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 找出数组中不同的值</span></div><div class=\"line\">_.difference([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>]);</div><div class=\"line\"><span class=\"comment\">// → [1, 3, 4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 根据条件找出数组元素的索引值，未找到则返回 -1</span></div><div class=\"line\"><span class=\"keyword\">var</span> characters = [</div><div class=\"line\">  { <span class=\"string\">'name'</span>: <span class=\"string\">'barney'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'blocked'</span>: <span class=\"keyword\">false</span> },</div><div class=\"line\">  { <span class=\"string\">'name'</span>: <span class=\"string\">'fred'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'blocked'</span>: <span class=\"keyword\">true</span> },</div><div class=\"line\">  { <span class=\"string\">'name'</span>: <span class=\"string\">'pebbles'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'blocked'</span>: <span class=\"keyword\">false</span> }</div><div class=\"line\">];</div><div class=\"line\">_.findIndex(characters, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(chr)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> chr.age &lt; <span class=\"number\">20</span>;</div><div class=\"line\">});</div><div class=\"line\"><span class=\"comment\">// → 2</span></div><div class=\"line\"><span class=\"comment\">// using \"_.where\" callback shorthand</span></div><div class=\"line\">_.findIndex(characters, { <span class=\"string\">'age'</span>: <span class=\"number\">36</span> });</div><div class=\"line\"><span class=\"comment\">// → 0</span></div><div class=\"line\"><span class=\"comment\">// using \"_.pluck\" callback shorthand</span></div><div class=\"line\">_.findIndex(characters, <span class=\"string\">'blocked'</span>);</div><div class=\"line\"><span class=\"comment\">// → 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 找出数组中相同的值</span></div><div class=\"line\">_.intersection([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>]);</div><div class=\"line\"><span class=\"comment\">// → [1, 2]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 找出数组中最后的值</span></div><div class=\"line\">_.last([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\"><span class=\"comment\">// → 3</span></div><div class=\"line\">_.last([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// → [2, 3]</span></div><div class=\"line\">_.last([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(num)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> num &gt; <span class=\"number\">1</span>;</div><div class=\"line\">});</div><div class=\"line\"><span class=\"comment\">// → [2, 3]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 找出某个值最后出现的索引</span></div><div class=\"line\">_.lastIndexOf([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// → 4</span></div><div class=\"line\"><span class=\"comment\">// 从 第三个元素开始</span></div><div class=\"line\">_.lastIndexOf([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// → 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 移除数组中指定的值</span></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">array</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">_.pull(<span class=\"keyword\">array</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</div><div class=\"line\">console.log(<span class=\"keyword\">array</span>);</div><div class=\"line\"><span class=\"comment\">// → [1, 1]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回一个范围数组</span></div><div class=\"line\"><span class=\"comment\">// _.range([start=0], end, [step=1])</span></div><div class=\"line\">_.range(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// → [0, 1, 2, 3]</span></div><div class=\"line\">_.range(<span class=\"number\">1</span>, <span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">// → [1, 2, 3, 4]</span></div><div class=\"line\">_.range(<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">// → [0, 5, 10, 15]</span></div><div class=\"line\">_.range(<span class=\"number\">0</span>, -<span class=\"number\">4</span>, -<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// → [0, -1, -2, -3]</span></div><div class=\"line\">_.range(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">// → [1, 1, 1]</span></div><div class=\"line\">_.range(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">// → []</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 移除数组中匹配条件的值</span></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">array</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> evens = _.remove(<span class=\"keyword\">array</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(num)</span> </span>{ <span class=\"keyword\">return</span> num % <span class=\"number\">2</span> == <span class=\"number\">0</span>; });</div><div class=\"line\">console.log(<span class=\"keyword\">array</span>);</div><div class=\"line\"><span class=\"comment\">// → [1, 3, 5]</span></div><div class=\"line\">console.log(evens);</div><div class=\"line\"><span class=\"comment\">// → [2, 4, 6]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 切割数组，默认切割 1</span></div><div class=\"line\"><span class=\"comment\">// _.rest(array, [callback=1], [thisArg])</span></div><div class=\"line\">_.rest([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\"><span class=\"comment\">// → [2, 3]</span></div><div class=\"line\">_.rest([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// → [3]</span></div><div class=\"line\">_.rest([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(num)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> num &lt; <span class=\"number\">3</span>;</div><div class=\"line\">});</div><div class=\"line\"><span class=\"comment\">// → [3]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 更多实用函数见 http://lodash.com/docs</span></div></pre></td></tr></table></figure>\n\n","_id":"58gmsf705ctg8d6o","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"meta viewport 标签","categories":["bzketmbod14nx67f"],"date":1406279142000,"tags":["e9ch81ifhln56ig5","9ba25ohigum68i69"],"content":"<p>viewport 可以控制页面的原始宽度，限制用户的缩放行为。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta <span class=\"variable\">name=</span><span class=\"string\">\"viewport\"</span> <span class=\"variable\">content=</span><span class=\"string\">\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\"</span> /&gt;</div></pre></td></tr></table></figure>\n\n<p>width: 控制 viewport 的宽度，可指定为数字如 800，或特殊值如 device-width，即设置为 100%。</p>\n<p>height: 控制 viewport 的高度。</p>\n<p>initial-scale: 页面第一次加载时的缩放比例。</p>\n<p>maximum-scale: 最大缩放比例，取值从 0 到 10。</p>\n<p>minimum-scale: 最小缩放比例，取值从 0 到 10。</p>\n<p>user-scaleble: 是否允许用户缩放，取值为 yes/true 或 no/false。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"参考链接\">参考链接</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag\" target=\"_blank\" rel=\"external\">Using the viewport meta tag to control layout on mobile browsers</a></li>\n</ul>\n","source":"_posts/meta-viewport-标签.md","raw":"title: meta viewport 标签\ncategories:\n  - HTML\ndate: 2014-07-25 17:05:42\ntags:\n  - meta\n  - viewport\n  \n---\n\nviewport 可以控制页面的原始宽度，限制用户的缩放行为。\n\n```\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\" />\n```\n\nwidth: 控制 viewport 的宽度，可指定为数字如 800，或特殊值如 device-width，即设置为 100%。\n\nheight: 控制 viewport 的高度。\n\ninitial-scale: 页面第一次加载时的缩放比例。\n\nmaximum-scale: 最大缩放比例，取值从 0 到 10。\n\nminimum-scale: 最小缩放比例，取值从 0 到 10。\n\nuser-scaleble: 是否允许用户缩放，取值为 yes/true 或 no/false。\n\n\n<!-- more -->\n\n### 参考链接\n\n- [Using the viewport meta tag to control layout on mobile browsers](https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag)","slug":"meta-viewport-标签","updated":1418908898000,"excerpt":"<p>viewport 可以控制页面的原始宽度，限制用户的缩放行为。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta <span class=\"variable\">name=</span><span class=\"string\">\"viewport\"</span> <span class=\"variable\">content=</span><span class=\"string\">\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\"</span> /&gt;</div></pre></td></tr></table></figure>\n\n<p>width: 控制 viewport 的宽度，可指定为数字如 800，或特殊值如 device-width，即设置为 100%。</p>\n<p>height: 控制 viewport 的高度。</p>\n<p>initial-scale: 页面第一次加载时的缩放比例。</p>\n<p>maximum-scale: 最大缩放比例，取值从 0 到 10。</p>\n<p>minimum-scale: 最小缩放比例，取值从 0 到 10。</p>\n<p>user-scaleble: 是否允许用户缩放，取值为 yes/true 或 no/false。</p>\n","_id":"fqybili5m2yoj97l","comments":true,"layout":"post","photos":[],"link":""},{"title":"moment.js 学习笔记","categories":["be592wtznj5wcvwn"],"date":1405627143000,"tags":["26ed9ofa52jpsb7g"],"content":"<p>moment.js 是一个专注于处理时间的工具库。</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// moment 创建了一个 Date 对象的容器，使用 moment() 来获取这个对象</span></div><div class=\"line\"><span class=\"comment\">// moment().format();</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// # Now</span></div><div class=\"line\"><span class=\"comment\">// 获取当前时间 Moment 对象</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    moment()</div><div class=\"line\">);</div><div class=\"line\"><span class=\"comment\">// =&gt; 输出一个 Moment 对象，属性如下：</span></div><div class=\"line\"><span class=\"comment\">/*{ _isAMomentObject: true,</span></div><div class=\"line\">*    _i: undefined,    // input</div><div class=\"line\">*    _f: undefined,    // format</div><div class=\"line\">*    _l: undefined,</div><div class=\"line\">*   _strict: undefined,</div><div class=\"line\">*    _isUTC: false,</div><div class=\"line\">*    _pf:</div><div class=\"line\">*    { empty: false,</div><div class=\"line\">*        unusedTokens: [],</div><div class=\"line\">*        unusedInput: [],</div><div class=\"line\">*        overflow: -2,</div><div class=\"line\">*        charsLeftOver: 0,</div><div class=\"line\">*        nullInput: false,</div><div class=\"line\">*        invalidMonth: null,</div><div class=\"line\">*        invalidFormat: false,</div><div class=\"line\">*        userInvalidated: false,</div><div class=\"line\">*        iso: false },</div><div class=\"line\">*    _d: Mon Jul 14 2014 21:32:18 GMT+0800 (CST)</div><div class=\"line\">}*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将字符串转化为 Moment 对象</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    moment(<span class=\"string\">'July 14, 2014'</span>)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 判断字符串是否为时间字符串</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    moment(<span class=\"string\">'I\\'m not a date string'</span>).isValid()</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 已知时间字符串的格式，格式化为 Moment 对象</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    moment(<span class=\"string\">'07-14-2014'</span>, <span class=\"string\">'MM-DD-YYYY'</span>)</div><div class=\"line\">);</div><div class=\"line\"><span class=\"comment\">// 会忽略非数字字母以外的字符，所以以下输入也可以：</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    moment(<span class=\"string\">'07.14.2014'</span>, <span class=\"string\">'MM-DD-YYYY'</span>)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 未指定时区，创建的 Moment 对象将基于本地时间</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    moment(<span class=\"string\">'07-14-2014 21:30'</span>, <span class=\"string\">'YYYY-MM-DD HH:mm'</span>) <span class=\"comment\">// =&gt; Tue Feb 20 7 21:30:00 GMT+0800</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"comment\">// 指定时区</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    moment(<span class=\"string\">'07-14-2014 21:30 +0000'</span>, <span class=\"string\">'YYYY-MM-DD HH:mm Z'</span>) <span class=\"comment\">// =&gt; Wed Feb 21 7 05:30:00 GMT+0800</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 若 返回的 Moment 对象对应的时间不存在时，其 isValid() 将返回 false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    moment(<span class=\"string\">'15-14-2014'</span>, <span class=\"string\">'MM DD YYYY'</span>).isValid()  <span class=\"comment\">// =&gt; false  不存在15月</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    moment(<span class=\"string\">'06-31-2014'</span>, <span class=\"string\">'MM DD YYYY'</span>).isValid()  <span class=\"comment\">// =&gt; false  6月可没有31日！</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// moment() 第三个参数可指定是否严格匹配，默认为 false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    moment(<span class=\"string\">'Today is 2014-07-14'</span>, <span class=\"string\">'YYYY-MM-DD'</span>).isValid() <span class=\"comment\">// =&gt; true</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"comment\">// 严格匹配</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    moment(<span class=\"string\">'Today is 2014-07-14'</span>, <span class=\"string\">'YYYY-MM-DD'</span>, <span class=\"literal\">true</span>).isValid() <span class=\"comment\">// =&gt; false</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个 Moment 对象</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    <span class=\"comment\">// 传入一个对象</span></div><div class=\"line\">    moment({year: <span class=\"number\">2014</span>, month: <span class=\"number\">6</span>, day: <span class=\"number\">14</span>, hour: <span class=\"number\">19</span>, minute: <span class=\"number\">5</span>, second: <span class=\"number\">4</span>, millisecond: <span class=\"number\">321</span>}),</div><div class=\"line\">    <span class=\"comment\">// 传入一个数组</span></div><div class=\"line\">    <span class=\"comment\">// [year, month, day, hour, minute, second, millisecond]</span></div><div class=\"line\">    moment([<span class=\"number\">2014</span>, <span class=\"number\">6</span>, <span class=\"number\">14</span>, <span class=\"number\">19</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">321</span>])</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 或传入一个已有的 Date 对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2014</span>, <span class=\"number\">6</span>, <span class=\"number\">14</span>, <span class=\"number\">19</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">321</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    moment(date)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 判断错误位置</span></div><div class=\"line\"><span class=\"comment\">// 0 years</span></div><div class=\"line\"><span class=\"comment\">// 1 months</span></div><div class=\"line\"><span class=\"comment\">// 2 days</span></div><div class=\"line\"><span class=\"comment\">// 3 hours</span></div><div class=\"line\"><span class=\"comment\">// 4 minutes</span></div><div class=\"line\"><span class=\"comment\">// 5 seconds</span></div><div class=\"line\"><span class=\"comment\">// 6 milliseconds</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">    moment(<span class=\"string\">\"2014-07-14T21:13:90\"</span>).invalidAt() <span class=\"comment\">//=&gt; 5 即 90 秒是错误的</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 设置 或 读取</span></div><div class=\"line\"><span class=\"comment\">// 这里的 second 可以替换为</span></div><div class=\"line\"><span class=\"comment\">// minute/hour/date/day/weekday/isoWeekday/dayOfYear/</span></div><div class=\"line\"><span class=\"comment\">// week/isoWeek/month/quarter/year/weekYear/isoWeekYear/weeksInYear/isoWeeksInYear/</span></div><div class=\"line\">moment().second(<span class=\"built_in\">Number</span>);</div><div class=\"line\">moment().second(); <span class=\"comment\">// Number</span></div><div class=\"line\">moment().seconds(<span class=\"built_in\">Number</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 读取</span></div><div class=\"line\">moment().get(<span class=\"string\">'year'</span>);</div><div class=\"line\">moment().get(<span class=\"string\">'month'</span>);  <span class=\"comment\">// 0 to 11</span></div><div class=\"line\">moment().get(<span class=\"string\">'date'</span>);</div><div class=\"line\">moment().get(<span class=\"string\">'hour'</span>);</div><div class=\"line\">moment().get(<span class=\"string\">'minute'</span>);</div><div class=\"line\">moment().get(<span class=\"string\">'second'</span>);</div><div class=\"line\">moment().get(<span class=\"string\">'millisecond'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 设置</span></div><div class=\"line\">moment().set(<span class=\"string\">'year'</span>, <span class=\"number\">2014</span>);</div><div class=\"line\">moment().set(<span class=\"string\">'month'</span>, <span class=\"number\">6</span>);  <span class=\"comment\">// 七月</span></div><div class=\"line\">moment().set(<span class=\"string\">'date'</span>, <span class=\"number\">17</span>);</div><div class=\"line\">moment().set(<span class=\"string\">'hour'</span>, <span class=\"number\">19</span>);</div><div class=\"line\">moment().set(<span class=\"string\">'minute'</span>, <span class=\"number\">5</span>);</div><div class=\"line\">moment().set(<span class=\"string\">'second'</span>, <span class=\"number\">4</span>);</div><div class=\"line\">moment().set(<span class=\"string\">'millisecond'</span>, <span class=\"number\">321</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 日期的增、减和比较</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'day'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> b = moment().add(<span class=\"number\">1</span>, <span class=\"string\">'day'</span>);</div><div class=\"line\">moment.max(a, b);  <span class=\"comment\">//=&gt; b</span></div><div class=\"line\">moment.min(a, b);  <span class=\"comment\">//=&gt; a</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 链式调用更新</span></div><div class=\"line\">moment().add(<span class=\"string\">'days'</span>, <span class=\"number\">1</span>).subtract(<span class=\"string\">'months'</span>, <span class=\"number\">1</span>).year(<span class=\"number\">2014</span>).hours(<span class=\"number\">19</span>).minutes(<span class=\"number\">5</span>).seconds(<span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 计算时间间隔</span></div><div class=\"line\">moment([<span class=\"number\">2011</span>, <span class=\"number\">6</span>, <span class=\"number\">17</span>]).fromNow(); <span class=\"comment\">//=&gt; '3 years ago''</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = moment([<span class=\"number\">2009</span>, <span class=\"number\">6</span>, <span class=\"number\">17</span>]);</div><div class=\"line\"><span class=\"keyword\">var</span> b = moment([<span class=\"number\">2014</span>, <span class=\"number\">8</span>, <span class=\"number\">18</span>]);</div><div class=\"line\">a.from(b)  <span class=\"comment\">//=&gt; '5 years ago''</span></div><div class=\"line\">a.diff(b) <span class=\"comment\">//=&gt; -163209600000 单位是 ms</span></div><div class=\"line\">a.diff(b, <span class=\"string\">'days'</span>) <span class=\"comment\">//=&gt; -1889</span></div><div class=\"line\">a.diff(b, <span class=\"string\">'years'</span>, <span class=\"literal\">true</span>); <span class=\"comment\">//=&gt; -5.169398907103825 第三个参数为false表示输出浮点数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 判断时间是否相同</span></div><div class=\"line\">moment(<span class=\"string\">'2014-06-17'</span>).isSame(<span class=\"string\">'2014 06 17'</span>); <span class=\"comment\">//=&gt; true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 判断时间前后</span></div><div class=\"line\">moment(<span class=\"string\">'2014-06-18'</span>).isAfter(<span class=\"string\">'2014-06-17'</span>); <span class=\"comment\">//=&gt; true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 判断是否为闰年</span></div><div class=\"line\">moment([<span class=\"number\">2014</span>]).isLeapYear(); <span class=\"comment\">//=&gt; true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 判断是否为 Moment 对象</span></div><div class=\"line\">moment.isMoment() <span class=\"comment\">//=&gt; false</span></div><div class=\"line\">moment.isMoment(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()) <span class=\"comment\">//=&gt; false</span></div><div class=\"line\">moment.isMoment(moment()) <span class=\"comment\">//=&gt; true</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"参考链接\">参考链接</h3>\n<ul>\n<li><a href=\"http://momentjs.com/docs/#/parsing/\" target=\"_blank\" rel=\"external\">momentjs.com</a></li>\n</ul>\n","source":"_posts/momentjs-学习笔记.md","raw":"title: moment.js 学习笔记\ncategories:\n  - Javascript\ndate: 2014-07-18 03:59:03\ntags:\n- moment\n\n---\n\nmoment.js 是一个专注于处理时间的工具库。\n\n<!-- more -->\n\n```\n\nvar moment = require('moment');\n\n// moment 创建了一个 Date 对象的容器，使用 moment() 来获取这个对象\n// moment().format();\n\n// # Now\n// 获取当前时间 Moment 对象\nconsole.log(\n    moment()\n);\n// => 输出一个 Moment 对象，属性如下：\n/*{ _isAMomentObject: true,\n*    _i: undefined,    // input\n*    _f: undefined,    // format\n*    _l: undefined,\n*   _strict: undefined,\n*    _isUTC: false,\n*    _pf:\n*    { empty: false,\n*        unusedTokens: [],\n*        unusedInput: [],\n*        overflow: -2,\n*        charsLeftOver: 0,\n*        nullInput: false,\n*        invalidMonth: null,\n*        invalidFormat: false,\n*        userInvalidated: false,\n*        iso: false },\n*    _d: Mon Jul 14 2014 21:32:18 GMT+0800 (CST)\n}*/\n\n// 将字符串转化为 Moment 对象\nconsole.log(\n    moment('July 14, 2014')\n);\n\n// 判断字符串是否为时间字符串\nconsole.log(\n    moment('I\\'m not a date string').isValid()\n);\n\n// 已知时间字符串的格式，格式化为 Moment 对象\nconsole.log(\n    moment('07-14-2014', 'MM-DD-YYYY')\n);\n// 会忽略非数字字母以外的字符，所以以下输入也可以：\nconsole.log(\n    moment('07.14.2014', 'MM-DD-YYYY')\n);\n\n// 未指定时区，创建的 Moment 对象将基于本地时间\nconsole.log(\n    moment('07-14-2014 21:30', 'YYYY-MM-DD HH:mm') // => Tue Feb 20 7 21:30:00 GMT+0800\n);\n// 指定时区\nconsole.log(\n    moment('07-14-2014 21:30 +0000', 'YYYY-MM-DD HH:mm Z') // => Wed Feb 21 7 05:30:00 GMT+0800\n);\n\n// 若 返回的 Moment 对象对应的时间不存在时，其 isValid() 将返回 false\nconsole.log(\n    moment('15-14-2014', 'MM DD YYYY').isValid()  // => false  不存在15月\n);\nconsole.log(\n    moment('06-31-2014', 'MM DD YYYY').isValid()  // => false  6月可没有31日！\n);\n\n// moment() 第三个参数可指定是否严格匹配，默认为 false\nconsole.log(\n    moment('Today is 2014-07-14', 'YYYY-MM-DD').isValid() // => true\n);\n// 严格匹配\nconsole.log(\n    moment('Today is 2014-07-14', 'YYYY-MM-DD', true).isValid() // => false\n);\n\n// 创建一个 Moment 对象\nconsole.log(\n    // 传入一个对象\n    moment({year: 2014, month: 6, day: 14, hour: 19, minute: 5, second: 4, millisecond: 321}),\n    // 传入一个数组\n    // [year, month, day, hour, minute, second, millisecond]\n    moment([2014, 6, 14, 19, 5, 4, 321])\n);\n\n\n\n// 或传入一个已有的 Date 对象\nvar date = new Date(2014, 6, 14, 19, 5, 4, 321);\nconsole.log(\n    moment(date)\n);\n\n// 判断错误位置\n// 0 years\n// 1 months\n// 2 days\n// 3 hours\n// 4 minutes\n// 5 seconds\n// 6 milliseconds\nconsole.log(\n    moment(\"2014-07-14T21:13:90\").invalidAt() //=> 5 即 90 秒是错误的\n);\n\n// 设置 或 读取\n// 这里的 second 可以替换为\n// minute/hour/date/day/weekday/isoWeekday/dayOfYear/\n// week/isoWeek/month/quarter/year/weekYear/isoWeekYear/weeksInYear/isoWeeksInYear/\nmoment().second(Number);\nmoment().second(); // Number\nmoment().seconds(Number);\n\n// 读取\nmoment().get('year');\nmoment().get('month');  // 0 to 11\nmoment().get('date');\nmoment().get('hour');\nmoment().get('minute');\nmoment().get('second');\nmoment().get('millisecond');\n\n// 设置\nmoment().set('year', 2014);\nmoment().set('month', 6);  // 七月\nmoment().set('date', 17);\nmoment().set('hour', 19);\nmoment().set('minute', 5);\nmoment().set('second', 4);\nmoment().set('millisecond', 321);\n\n// 日期的增、减和比较\nvar a = moment().subtract(1, 'day');\nvar b = moment().add(1, 'day');\nmoment.max(a, b);  //=> b\nmoment.min(a, b);  //=> a\n\n// 链式调用更新\nmoment().add('days', 1).subtract('months', 1).year(2014).hours(19).minutes(5).seconds(5);\n\n// 计算时间间隔\nmoment([2011, 6, 17]).fromNow(); //=> '3 years ago''\nvar a = moment([2009, 6, 17]);\nvar b = moment([2014, 8, 18]);\na.from(b)  //=> '5 years ago''\na.diff(b) //=> -163209600000 单位是 ms\na.diff(b, 'days') //=> -1889\na.diff(b, 'years', true); //=> -5.169398907103825 第三个参数为false表示输出浮点数\n\n// 判断时间是否相同\nmoment('2014-06-17').isSame('2014 06 17'); //=> true\n\n// 判断时间前后\nmoment('2014-06-18').isAfter('2014-06-17'); //=> true\n\n// 判断是否为闰年\nmoment([2014]).isLeapYear(); //=> true\n\n// 判断是否为 Moment 对象\nmoment.isMoment() //=> false\nmoment.isMoment(new Date()) //=> false\nmoment.isMoment(moment()) //=> true\n\n```\n\n\n### 参考链接\n\n- [momentjs.com](http://momentjs.com/docs/#/parsing/)\n","slug":"momentjs-学习笔记","updated":1418908898000,"excerpt":"<p>moment.js 是一个专注于处理时间的工具库。</p>\n","_id":"uy1v1i0ha3f7h7cx","comments":true,"layout":"post","photos":[],"link":""},{"title":"MongoDB-学习笔记","date":1400065435000,"categories":["b77a2jgxm72gxq7s"],"tags":["6ce4vvmry47srbd4","1w1wj1qb7pcv7lru"],"content":"<h2 id=\"MongoDB_支持的几钟数据类型\">MongoDB 支持的几钟数据类型</h2>\n<ul>\n<li><p>String</p>\n<pre><code>  <span class=\"comment\">// 字符串</span>\n  <span class=\"keyword\">var</span> mySite = <span class=\"string\">'laispace.com'</span>;            \n</code></pre></li>\n<li><p>Array</p>\n<pre><code>  <span class=\"comment\">// 数组</span>\n  <span class=\"keyword\">var</span> myFriends = [<span class=\"string\">'小赖'</span>, <span class=\"string\">'小清'</span>, <span class=\"string\">'大花'</span>, <span class=\"string\">'大黄'</span>];\n</code></pre></li>\n<li><p>Boolean</p>\n<pre><code>  // 布尔类型，<span class=\"constant\">true</span> 或 <span class=\"constant\">false</span>         \n  var <span class=\"variable\">IloveU =</span> <span class=\"constant\">true</span>;\n</code></pre></li>\n<li><p>Code</p>\n<pre><code>  <span class=\"comment\">// 代码，可在数据库内运行</span>\n  <span class=\"keyword\">var</span> myCode = <span class=\"keyword\">new</span> BSON.Code(<span class=\"symbol\">'function</span> (name) {\n      <span class=\"keyword\">return</span> <span class=\"symbol\">'My</span> name is ' + name;\n  }');\n</code></pre></li>\n<li><p>Date</p>\n<pre><code>  <span class=\"comment\">// 日期</span>\n  <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();\n</code></pre></li>\n</ul>\n<ul>\n<li><p>Integer</p>\n<pre><code>  <span class=\"comment\">// 整数</span>\n  <span class=\"keyword\">var</span> myAge = <span class=\"number\">18</span>; <span class=\"comment\">// 让我年轻一次嘛~</span>\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>\n\n<ul>\n<li><p>Long</p>\n<pre><code>  <span class=\"comment\">// 长整数</span>\n  <span class=\"keyword\">var</span> myMoney = <span class=\"keyword\">new</span> BSON.Long(<span class=\"string\">'999999999999999999999'</span>);\n</code></pre></li>\n<li><p>Hash</p>\n<pre><code>  <span class=\"comment\">// 数据字典</span>\n  <span class=\"keyword\">var</span> myInfo = {\n      name: <span class=\"string\">'小赖'</span>,\n      age: <span class=\"string\">'18,\n      sex: '</span>male<span class=\"string\">'\n  };</span>\n</code></pre></li>\n<li><p>Null </p>\n<pre><code>  <span class=\"comment\">// null 值</span>\n  <span class=\"keyword\">var</span> myBadFriend = <span class=\"literal\">null</span>;\n</code></pre></li>\n<li><p>ObjectId</p>\n<pre><code>  <span class=\"comment\">// 索引ID，12字节，24位16进制串，用于唯一标识</span>\n  <span class=\"keyword\">var</span> myId = <span class=\"keyword\">new</span> BSON.ObjectId()\n</code></pre></li>\n<li><p>DBRef</p>\n<pre><code>  <span class=\"comment\">// 数据库引用</span>\n  <span class=\"keyword\">var</span> bestFriendId = <span class=\"keyword\">new</span> BSON.DBRef(<span class=\"string\">'users'</span>, friendObjectId);\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"使用MongoDB\">使用MongoDB</h2>\n<ul>\n<li><p>连接数据库</p>\n<pre><code>  <span class=\"keyword\">var</span> mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>);\n</code></pre><p>  创建 Server对象 实例        </p>\n<pre><code>  var <span class=\"keyword\">server</span> = <span class=\"keyword\">new</span> mongodb.<span class=\"keyword\">server</span>(host, port, [options]);\n</code></pre><p>  options 可选，默认参数为：</p>\n<pre><code>  <span class=\"keyword\">options</span> = {\n      ssl: <span class=\"keyword\">false</span>, <span class=\"comment\">// 是否启用ssl安全协议</span>\n      sslValidate: <span class=\"keyword\">false</span>, <span class=\"comment\">// 是否验证服务器提交的证书</span>\n      sslCA: <span class=\"keyword\">null</span>, <span class=\"comment\">// 数组，一组供服务器验证的证书</span>\n      sslCert: <span class=\"keyword\">null</span>, <span class=\"comment\">// 数组，一组服务器验证时使用的证书</span>\n      sslKey: <span class=\"keyword\">null</span>, <span class=\"comment\">// Buffer 或 String, 一个供服务器验证时使用的私钥</span>\n      sslPass: <span class=\"keyword\">null</span>, <span class=\"comment\">// Buffer 或 String, 一个供服务器验证时使用的证书密码</span>\n      poolSize: <span class=\"number\">5</span>, <span class=\"comment\">// 整数，连接池中最大连接数</span>\n      socketOptions: <span class=\"keyword\">null</span>, <span class=\"comment\">// 对象，指定与服务器连接时端口设置的选项</span>\n      <span class=\"comment\">// socketOptions: {</span>\n      <span class=\"comment\">//    keepAlive: [Number], // 整数毫秒，指定客户端向服务器发送 keepAlive探测包的时间间隔</span>\n      <span class=\"comment\">//    connectTimeMS: [Number], // 整数毫秒，指定客户端连接超时时间</span>\n      <span class=\"comment\">//    socketTimeoutMS: [Number] // 整数毫秒，指定客户端端口超时时间</span>\n      <span class=\"comment\">// }</span>\n      logger: <span class=\"keyword\">null</span>, <span class=\"comment\">// 对象，用于记录日志</span>\n      auto_reconnect: <span class=\"keyword\">false</span>, <span class=\"comment\">// 是否在客户端与服务器连接出错时自动重连</span>\n      disableDriverBSONSizeCheck: <span class=\"keyword\">false</span> <span class=\"comment\">// 是否在 BSON对象过大时抛出错误</span>\n  }\n</code></pre><p>  创建 Db对象 实例</p>\n<p>  创建了 server服务器对象后，使用它创建代表 MongoDB数据库的 Db对象：</p>\n<pre><code>  <span class=\"keyword\">var</span> Db = <span class=\"keyword\">new</span> mongodb.Db(databaseName, server, [options]);\n</code></pre><p>  options 可选，默认参数为：</p>\n<pre><code>  options = {\n      safe: <span class=\"literal\">false</span> <span class=\"comment\">// 是否使用  getLastError命令 执行数据操作，该命令返回数据操作的执行结果</span>\n      w: [<span class=\"built_in\">Number</span> lt -<span class=\"number\">1</span>], <span class=\"comment\">// 大于-1d的整数或字符串，用于设置 write concern机制，该值大于等于1或为字符串时，才承认数据被写入</span>\n      wtimeout: [<span class=\"built_in\">Number</span>], <span class=\"comment\">// 整数毫秒，指定数据操作的超时时间</span>\n      fsync: <span class=\"literal\">false</span>, <span class=\"comment\">// 写入数据的方法返回前是否等待数据库内部的 fsync操作</span>\n      journal: <span class=\"literal\">false</span>, <span class=\"comment\">// 写入数据的方法返回前是否等待数据库内部的 journal操作 </span>\n      native_parse: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否使用C++ BSON解析器</span>\n      forceServerObjectId: <span class=\"literal\">false</span>, 是否强制在服务器端而不是客户端创建 BSON对象ID\n      pkFactory: {}, <span class=\"comment\">// 用于重载数据库内部生成的对象ID主键的对象</span>\n      serializeFunctions: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否序列化Javascript函数</span>\n      raw: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否使用二进制BSON数据缓存区来执行数据操作</span>\n      recordQueryStats: <span class=\"literal\">false</span>, <span class=\"comment\">// 查询数据时是否在数据库内部执行查询统计</span>\n      retryMiliSeconds: <span class=\"number\">5000</span>, <span class=\"comment\">// 整数毫秒，指定连接数据库失败时建个多长时间重连数据库</span>\n      numberOfRetries: <span class=\"number\">5</span>, <span class=\"comment\">// 重连数据库的次数</span>\n      logger: <span class=\"literal\">null</span>, <span class=\"comment\">// 对象，用于记录日志</span>\n      slaveOk: <span class=\"literal\">null</span>, <span class=\"comment\">// 整数，查询时使用的SlaveOk值</span>\n  }\n</code></pre><p>  创建好 Db对象后，则开始打开数据库进行操作：</p>\n<pre><code>  <span class=\"comment\">// 连接失败时 db 为 null</span>\n  Db.open(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, db)</span> </span>{\n      <span class=\"comment\">// db operations here.</span>\n\n      <span class=\"comment\">// 关闭数据库， forceClose 是否强制关闭，强制关闭后不可再用 open() 方法打开 </span>\n      <span class=\"comment\">// db.close([forceClose], function (err) {</span>\n          <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n          <span class=\"comment\">// operations after closing db.</span>\n      })        \n  })                \n</code></pre><p>  实例：</p>\n<pre><code>  <span class=\"keyword\">var</span> mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>);\n  <span class=\"keyword\">var</span> host = <span class=\"string\">'localhost'</span>;\n  <span class=\"keyword\">var</span> port = mongodb.Connection.DEFAULT_PORT || <span class=\"number\">1234</span>;\n  <span class=\"comment\">// 创建服务器实例</span>\n  <span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> mongodb.Server(host, port, {auto_connect: <span class=\"literal\">true</span>});\n  <span class=\"comment\">// 创建数据库实例</span>\n  <span class=\"keyword\">var</span> Db = <span class=\"keyword\">new</span> mongodb.Db(<span class=\"string\">'testDbName'</span>, server, {safe: <span class=\"literal\">true</span>});\n  <span class=\"comment\">// 打开数据库</span>\n  Db.open(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, db)</span> </span>{\n      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接数据库成功'</span>);\n      <span class=\"comment\">// 记得操作完要关闭数据库</span>\n      db.close(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n          <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n          <span class=\"comment\">// console.log('关闭数据库成功');</span>\n      });\n  });\n</code></pre></li>\n<li><p>增查改删操作</p>\n<p>  先获取数据库对象的文档集合</p>\n<pre><code>  <span class=\"comment\">// options 参数与上文的大致相同，增加</span>\n  <span class=\"comment\">// optiosn.strict, 默认为false，指定是否在访问的集合不存在时抛出错误</span>\n  db.collection(collectionName, [<span class=\"keyword\">options</span>], function (err, collection) {\n      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n      console.log(<span class=\"string\">'获取到的文档集合是：\\n'</span>, collection);\n      <span class=\"comment\">// 在这里进行【增查改删】操作</span>\n      <span class=\"comment\">// 增</span>\n      collection.insert(docs, [<span class=\"keyword\">options</span>], [callback]);\n      <span class=\"comment\">// 查</span>\n      collection.<span class=\"keyword\">find</span>(selector, [<span class=\"keyword\">options</span>]).toArray(callback);\n      <span class=\"comment\">// 改</span>\n      collection.update(selector, document, [<span class=\"keyword\">options</span>], [callback]);\n      <span class=\"comment\">// 查并改</span>\n      collection.findAndModify(selector, <span class=\"keyword\">sort</span>, document, [<span class=\"keyword\">options</span>], [callback]);\n      <span class=\"comment\">// 删</span>\n      collection.remove([selector], [<span class=\"keyword\">options</span>], [callback]);\n      <span class=\"comment\">// 查并删</span>\n      collection.findAndRemove(selector, <span class=\"keyword\">sort</span>, [<span class=\"keyword\">options</span>], [callback]);\n  });    \n</code></pre><p>  collection.insert(docs, [options], [callback])中的options与上文的大致相同，增加：</p>\n<pre><code>  <span class=\"keyword\">options</span> = {    \n      continueOnError: <span class=\"keyword\">false</span>, <span class=\"comment\">// 若一个文档插入失败，是否继续插入剩余文档</span>\n      checkKeys: <span class=\"keyword\">true</span>, <span class=\"comment\">// 插入数据时是否取消检查该数据文档的主键是否已存在的处理</span>\n  }    \n</code></pre><p>  collection.update(selector, document, [options], [callback]);中的options与上文的大致相同，增加：</p>\n<pre><code>  options = {    \n      <span class=\"symbol\">upsert:</span> <span class=\"keyword\">false</span>, <span class=\"regexp\">//</span> 是否在更新时执行upsert操作：数据不存在则创建\n      <span class=\"symbol\">multi:</span> <span class=\"keyword\">false</span>, <span class=\"regexp\">//</span> 是否更新所有符合查询条件的数据文档，默认为<span class=\"keyword\">false</span>即更新第一条\n  }    \n</code></pre><p>  collection.remove([selector], [options], [callback]);中的options与上文的大致相同，增加：</p>\n<pre><code>  <span class=\"keyword\">options</span> = {    \n      single: <span class=\"keyword\">false</span>, <span class=\"comment\">// 是否只删除符合条件的第一条数据文档</span>\n  }                        \n</code></pre><p>  【增查改删】操作的实例：</p>\n<pre><code>  <span class=\"keyword\">var</span> mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>);\n  <span class=\"keyword\">var</span> host = <span class=\"string\">'localhost'</span>;\n  <span class=\"keyword\">var</span> port = mongodb.Connection.DEFAULT_PORT || <span class=\"number\">1234</span>;\n  <span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> mongodb.Server(host, port, {auto_connect: <span class=\"literal\">true</span>});\n  <span class=\"keyword\">var</span> Db = <span class=\"keyword\">new</span> mongodb.Db(<span class=\"string\">'testDbName'</span>, server, {safe: <span class=\"literal\">true</span>});\n  Db.open(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, db)</span> </span>{\n      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接数据库成功'</span>);\n\n      <span class=\"comment\">// 先获取文档集合</span>\n      db.collection(<span class=\"string\">'users'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, collection)</span> </span>{\n          <span class=\"comment\">// 【增】</span>\n          collection.insert({\n              name: <span class=\"string\">'小赖'</span>,\n              password: <span class=\"string\">'pws123456'</span>,\n              email: <span class=\"string\">'laixiaolai@foxmail.com'</span>,\n              age: <span class=\"number\">18</span>,\n              sex: <span class=\"string\">'male'</span>\n          }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> </span>{\n              <span class=\"comment\">// docs 是成功插入后的文档集合</span>\n              <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n【增】插入数据成功，刚插入的数据是：\\n'</span>, docs);\n              <span class=\"comment\">// 记得关闭数据库！</span>\n              <span class=\"comment\">// db.close();</span>\n          });\n\n          <span class=\"comment\">// 【查】, {} 表示查询所有</span>\n          collection.find({}).toArray(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> </span>{\n              <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n              <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n【查】所有文档集合是：\\n'</span>, docs);\n          });\n          <span class=\"comment\">// 【查】，{name: '小赖'} 为限定条件</span>\n          collection.find({name: <span class=\"string\">'小赖'</span>}).toArray(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> </span>{\n              <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n              <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n【查】名字叫小赖的文档是：\\n'</span>, docs);\n          });\n\n          <span class=\"comment\">// 【改】</span>\n          <span class=\"keyword\">var</span> xiaoqing = {\n              name: <span class=\"string\">'小清'</span>,\n              password: <span class=\"string\">'newPws123456'</span>,\n              email: <span class=\"string\">'abcd@laispace.com'</span>,\n              age: <span class=\"number\">180</span>,\n              sex: <span class=\"string\">'male'</span>\n          };\n          <span class=\"comment\">// 把名字为小赖的用户改为小清</span>\n          collection.update({name: <span class=\"string\">'小赖'</span>}, xiaoqing, {upsert: <span class=\"literal\">true</span>}, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, result)</span> </span>{\n              <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n              <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n更新数据成功，刚更新的文档数是：\\n'</span>, result);\n          });\n\n          <span class=\"comment\">// 【删】</span>\n          collection.remove({name: <span class=\"string\">'小清'</span>}, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, result)</span> </span>{\n              <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n              <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\n删除数据成功，刚删除的文档数是：\\n'</span>, result);\n\n              <span class=\"comment\">// 记得最后一次操作要关闭数据库！！！</span>\n              <span class=\"comment\">// db.close();</span>\n          });            \n      });\n  });    \n  Db.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'关闭数据库成功'</span>);\n  })\n</code></pre><p>  在查询操作 collection.find(selector, [options]).toArray(callback) 中可以设置一些限定：</p>\n<pre><code>  <span class=\"comment\">// 查找全部，缺省参数{} 即 db.users.find({});</span>\n  $ db.users.<span class=\"built_in\">find</span>();\n  <span class=\"comment\">// 指定范围查找</span>\n  $ db.users.<span class=\"built_in\">find</span>({<span class=\"string\">\"name\"</span>: <span class=\"string\">\"小清\"</span>, <span class=\"string\">\"email\"</span>: <span class=\"string\">\"abcd@laispace.com\"</span>});\n  <span class=\"comment\">// 查找全部，但只返回指定的键，1表示true， 注意 _id 总会被返回</span>\n  $ db.users.<span class=\"built_in\">find</span>({}, {<span class=\"string\">\"name\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"email\"</span>: <span class=\"number\">1</span>});\n  <span class=\"comment\">// 查找全部，但不要返回指定的键，0表示false</span>\n  $ db.users.<span class=\"built_in\">find</span>({}, {<span class=\"string\">\"password\"</span>: <span class=\"number\">0</span>});\n  <span class=\"comment\">// 大于小于</span>\n  $ db.users.<span class=\"built_in\">find</span>({<span class=\"string\">\"age\"</span>: {<span class=\"string\">\"$gte\"</span>: <span class=\"number\">18</span>, <span class=\"string\">\"$lte\"</span>: <span class=\"number\">30</span>}}) <span class=\"comment\">// 大于等于18小于等于30岁</span>\n  db.users.<span class=\"built_in\">find</span>({<span class=\"string\">\"registered\"</span>: {<span class=\"string\">\"$lt\"</span>: <span class=\"keyword\">new</span> <span class=\"type\">Date</span>(<span class=\"string\">\"01/01/2014\"</span>)}}); <span class=\"comment\">// 在2014/01/01前注册</span>\n  <span class=\"comment\">// 不等于</span>\n  $ db.users.<span class=\"built_in\">find</span>({<span class=\"string\">\"name\"</span>: {<span class=\"string\">\"$ne\"</span>: <span class=\"string\">\"小清\"</span>}}); <span class=\"comment\">// 用户名不是『小清』</span>\n  <span class=\"comment\">// 包含于</span>\n  db.users.<span class=\"built_in\">find</span>({<span class=\"string\">\"name\"</span>: {<span class=\"string\">\"$in\"</span>: [<span class=\"string\">\"小清\"</span>, <span class=\"string\">\"小赖\"</span>]}}); <span class=\"comment\">// 用户名是『小清』或『小赖』</span>\n  <span class=\"comment\">// 不包含于</span>\n  db.users.<span class=\"built_in\">find</span>({<span class=\"string\">\"name\"</span>: {<span class=\"string\">\"$nin\"</span>: [<span class=\"string\">\"小清\"</span>, <span class=\"string\">\"小赖\"</span>]}}); <span class=\"comment\">// 用户名不是『小清』和『小赖』</span>\n  <span class=\"comment\">// 或</span>\n  db.users.<span class=\"built_in\">find</span>({<span class=\"string\">\"$or\"</span>: [{<span class=\"string\">\"name\"</span>: <span class=\"string\">\"小清\"</span>}, {<span class=\"string\">\"email\"</span>: <span class=\"string\">\"laixiaolai@foxmail.com\"</span>}]}); <span class=\"comment\">// 用户名是『小清』或 邮箱是 \"123@example.com\"</span>\n</code></pre><p>  也可在更新操作 collection.update(selector, document, [options], [callback]); 中可以设置一些限定：</p>\n<pre><code>  <span class=\"comment\">// 原子修改器</span>\n  db.users.update({<span class=\"string\">\"name\"</span>: <span class=\"string\">\"小清\"</span>}, {\n      <span class=\"string\">\"$inc\"</span>: {\n      <span class=\"string\">\"age\"</span>: <span class=\"number\">1</span> <span class=\"comment\">// 年龄加一</span>\n      }\n  })\n  <span class=\"string\">\"$inc\"</span> <span class=\"comment\">// 增加</span>\n  <span class=\"string\">\"$set\"</span> <span class=\"comment\">// 修改，无则创建</span>\n  <span class=\"string\">\"$unset\"</span> <span class=\"comment\">// 删除</span>\n\n  <span class=\"comment\">// 数组修改器</span>\n  <span class=\"comment\">// \"$push\" // 添加</span>\n  <span class=\"comment\">// \"$pop\": {key: 1} // 数组末删除一个元素</span>\n  <span class=\"comment\">// \"$pop\": {key: -1} // 数组头删除一个元素</span>\n  <span class=\"comment\">// \"$pull\": {\"foo\": \"bar\"} // 删除数组foo中的bar</span>\n\n  <span class=\"comment\">// 函数 update(query , obj , upsert , multi) 参数说明：</span>\n  $ db.users.update({<span class=\"string\">\"name\"</span>: <span class=\"string\">\"小清\"</span>}, xiaoqing);\n  <span class=\"comment\">// 若指定第三个参数upsert为true,即：</span>\n  $ db.users.update({<span class=\"string\">\"name\"</span>: <span class=\"string\">\"小清\"</span>}, xiaoqing, <span class=\"literal\">true</span>);\n  <span class=\"comment\">// 则表示：</span>\n  <span class=\"comment\">// - 若找到匹配文档，正常更新；</span>\n  <span class=\"comment\">// - 若没有文档符合更新条件，则以这个条件和更新文档为基础建立一个新的文档。</span>\n  <span class=\"comment\">// 若指定第四个参数multi为true, 即：</span>\n  $ db.users.update({<span class=\"string\">\"name\"</span>: <span class=\"string\">\"小清\"</span>}, xiaoqing, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>);\n  <span class=\"comment\">// 则表示：</span>\n  <span class=\"comment\">// 匹配到的所有文档都得到更新（为false则只匹配第一个）。    </span>\n</code></pre></li>\n</ul>\n<h2 id=\"使用_Mongoose类库\">使用 Mongoose类库</h2>\n<p>使用mongoose可以让MongoDB在NodeJS中得到更好的支持。</p>\n<p>直接上实例吧：</p>\n<pre><code>  <span class=\"keyword\">var</span> mongoose =<span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);\n  <span class=\"comment\">// 通过 Schema 来定义数据架构</span>\n  <span class=\"keyword\">var</span> Schema = mongoose.Schema;\n  <span class=\"comment\">// 连接数据库, 27017 是MongoDB的默认端口</span>\n  mongoose.connect(<span class=\"string\">'mongodb://localhost:27017/testDbName'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n      <span class=\"keyword\">if</span> (err) {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接数据库失败'</span>);\n          <span class=\"keyword\">throw</span> err;\n      }\n      <span class=\"comment\">// 定义数据架构</span>\n      <span class=\"keyword\">var</span> userSchema = <span class=\"keyword\">new</span> Schema({\n          name: <span class=\"built_in\">String</span>, <span class=\"comment\">// name 为字符串</span>\n          age: <span class=\"built_in\">Number</span>   <span class=\"comment\">// age 为整数</span>\n      });\n\n      <span class=\"keyword\">var</span> user1 = {name: <span class=\"string\">'小赖'</span>, age: <span class=\"number\">18</span>};\n      <span class=\"keyword\">var</span> user2 = {name: <span class=\"string\">'小清'</span>, age: <span class=\"number\">19</span>};\n      <span class=\"keyword\">var</span> user3 = {name: <span class=\"string\">'大花'</span>, age: <span class=\"number\">20</span>};\n      <span class=\"keyword\">var</span> user4 = {name: <span class=\"string\">'大黄'</span>, age: <span class=\"number\">21</span>};\n      <span class=\"keyword\">var</span> docs = [user1, user2, user3, user4];\n      <span class=\"keyword\">var</span> Users = mongoose.model(<span class=\"string\">'users'</span>, userSchema);\n      Users.create(docs, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> </span>{\n          <span class=\"keyword\">if</span> (err) {\n              <span class=\"built_in\">console</span>.log(<span class=\"string\">'保存数据失败'</span>);\n              <span class=\"keyword\">throw</span> err;\n          }\n          Users.find(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> </span>{\n              <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n              <span class=\"built_in\">console</span>.log(docs);\n              <span class=\"comment\">// 断开数据库连接</span>\n              mongoose.disconnect();\n          });\n      });\n  })\n</code></pre><h3 id=\"参考资料：\">参考资料：</h3>\n<ol>\n<li><a href=\"http://laispace.github.io/MongoDB%E5%85%A5%E9%97%A8-CRUD%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%20/\" target=\"_blank\" rel=\"external\">MongoDB入门-CRUD简单操作</a></li>\n<li><a href=\"https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md\" target=\"_blank\" rel=\"external\">the-little-mongodb-book-cn</a></li>\n</ol>\n","source":"_posts/mongodb-学习笔记.md","raw":"title: MongoDB-学习笔记\n\ndate: 2014-05-14 19:03:55\n\ncategories: Database\n\n\ntags: \n\t- mongodb \n\t- mongoose\n\n---\n\n## MongoDB 支持的几钟数据类型\n\n- String\n\n\t\t// 字符串\n\t\tvar mySite = 'laispace.com';\t\t\t\n\n- Array\n\n\t\t// 数组\n\t\tvar myFriends = ['小赖', '小清', '大花', '大黄'];\n\n- Boolean\n\n\t\t// 布尔类型，true 或 false \t\t\n\t\tvar IloveU = true;\n\n- Code\n\n\t\t// 代码，可在数据库内运行\n\t\tvar myCode = new BSON.Code('function (name) {\n\t\t\treturn 'My name is ' + name;\n\t\t}');\n\n- Date\n\n\t\t// 日期\n\t\tvar myDate = new Date();\n\t\t\n\n\t\t\n- Integer\n\n\t\t// 整数\n\t\tvar myAge = 18; // 让我年轻一次嘛~\n\n<!--more-->\n\n- Long\n\n\t\t// 长整数\n\t\tvar myMoney = new BSON.Long('999999999999999999999');\n\t\t\n- Hash\n\n\t\t// 数据字典\n\t\tvar myInfo = {\n\t\t\tname: '小赖',\n\t\t\tage: '18,\n\t\t\tsex: 'male'\n\t\t};\n\n- Null \n\n\t\t// null 值\n\t\tvar myBadFriend = null;\n\n- ObjectId\n\n\t\t// 索引ID，12字节，24位16进制串，用于唯一标识\n\t\tvar myId = new BSON.ObjectId()\n\n- DBRef\n\n\t\t// 数据库引用\n\t\tvar bestFriendId = new BSON.DBRef('users', friendObjectId);\n\n<!-- more -->\n\n## 使用MongoDB\n\n\n- 连接数据库\n\n\t\tvar mongodb = require('mongodb');\n\t\t\n\t创建 Server对象 实例\t\t\n\n\t\tvar server = new mongodb.server(host, port, [options]);\n\n\toptions 可选，默认参数为：\n \n\t\toptions = {\n\t\t\tssl: false, // 是否启用ssl安全协议\n\t\t\tsslValidate: false, // 是否验证服务器提交的证书\n\t\t\tsslCA: null, // 数组，一组供服务器验证的证书\n\t\t\tsslCert: null, // 数组，一组服务器验证时使用的证书\n\t\t\tsslKey: null, // Buffer 或 String, 一个供服务器验证时使用的私钥\n\t\t\tsslPass: null, // Buffer 或 String, 一个供服务器验证时使用的证书密码\n\t\t\tpoolSize: 5, // 整数，连接池中最大连接数\n\t\t\tsocketOptions: null, // 对象，指定与服务器连接时端口设置的选项\n\t\t\t// socketOptions: {\n\t\t\t//\tkeepAlive: [Number], // 整数毫秒，指定客户端向服务器发送 keepAlive探测包的时间间隔\n\t\t\t//\tconnectTimeMS: [Number], // 整数毫秒，指定客户端连接超时时间\n\t\t\t//\tsocketTimeoutMS: [Number] // 整数毫秒，指定客户端端口超时时间\n\t\t\t// }\n\t\t\tlogger: null, // 对象，用于记录日志\n\t\t\tauto_reconnect: false, // 是否在客户端与服务器连接出错时自动重连\n\t\t\tdisableDriverBSONSizeCheck: false // 是否在 BSON对象过大时抛出错误\n\t\t}\n\t\n\t创建 Db对象 实例\n\n\t创建了 server服务器对象后，使用它创建代表 MongoDB数据库的 Db对象：\n\n\t\tvar Db = new mongodb.Db(databaseName, server, [options]);\n\t\t\n\toptions 可选，默认参数为：\n\t\n\t\toptions = {\n\t\t\tsafe: false // 是否使用  getLastError命令 执行数据操作，该命令返回数据操作的执行结果\n\t\t\tw: [Number lt -1], // 大于-1d的整数或字符串，用于设置 write concern机制，该值大于等于1或为字符串时，才承认数据被写入\n\t\t\twtimeout: [Number], // 整数毫秒，指定数据操作的超时时间\n\t\t\tfsync: false, // 写入数据的方法返回前是否等待数据库内部的 fsync操作\n\t\t\tjournal: false, // 写入数据的方法返回前是否等待数据库内部的 journal操作 \n\t\t\tnative_parse: false, // 是否使用C++ BSON解析器\n\t\t\tforceServerObjectId: false, 是否强制在服务器端而不是客户端创建 BSON对象ID\n\t\t\tpkFactory: {}, // 用于重载数据库内部生成的对象ID主键的对象\n\t\t\tserializeFunctions: false, // 是否序列化Javascript函数\n\t\t\traw: false, // 是否使用二进制BSON数据缓存区来执行数据操作\n\t\t\trecordQueryStats: false, // 查询数据时是否在数据库内部执行查询统计\n\t\t\tretryMiliSeconds: 5000, // 整数毫秒，指定连接数据库失败时建个多长时间重连数据库\n\t\t\tnumberOfRetries: 5, // 重连数据库的次数\n\t\t\tlogger: null, // 对象，用于记录日志\n\t\t\tslaveOk: null, // 整数，查询时使用的SlaveOk值\n\t\t}\n\t\n\t创建好 Db对象后，则开始打开数据库进行操作：\n\t\t\n\t\t// 连接失败时 db 为 null\n\t\tDb.open(function (err, db) {\n\t\t\t// db operations here.\n\t\t\t\n\t\t\t// 关闭数据库， forceClose 是否强制关闭，强制关闭后不可再用 open() 方法打开 \n\t\t\t// db.close([forceClose], function (err) {\n\t\t\t\tif (err) throw err;\n\t\t\t\t// operations after closing db.\n\t\t\t})\t\t\n\t\t})\t\t\t\t\n\t\n\t实例：\n\n\t\tvar mongodb = require('mongodb');\n\t\tvar host = 'localhost';\n\t\tvar port = mongodb.Connection.DEFAULT_PORT || 1234;\n\t\t// 创建服务器实例\n\t\tvar server = new mongodb.Server(host, port, {auto_connect: true});\n\t\t// 创建数据库实例\n\t\tvar Db = new mongodb.Db('testDbName', server, {safe: true});\n\t\t// 打开数据库\n\t\tDb.open(function (err, db) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('连接数据库成功');\n\t\t\t// 记得操作完要关闭数据库\n\t\t\tdb.close(function (err) {\n\t\t\t\tif (err) throw err;\n\t\t\t\t// console.log('关闭数据库成功');\n\t\t\t});\n\t\t});\n\n- 增查改删操作\n\n\t先获取数据库对象的文档集合\n\t\n\t\t// options 参数与上文的大致相同，增加\n\t\t// optiosn.strict, 默认为false，指定是否在访问的集合不存在时抛出错误\n\t\tdb.collection(collectionName, [options], function (err, collection) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('获取到的文档集合是：\\n', collection);\n\t\t\t// 在这里进行【增查改删】操作\n\t\t\t// 增\n\t\t\tcollection.insert(docs, [options], [callback]);\n\t\t\t// 查\n\t\t\tcollection.find(selector, [options]).toArray(callback);\n\t\t\t// 改\n\t\t\tcollection.update(selector, document, [options], [callback]);\n\t\t\t// 查并改\n\t\t\tcollection.findAndModify(selector, sort, document, [options], [callback]);\n\t\t\t// 删\n\t\t\tcollection.remove([selector], [options], [callback]);\n\t\t\t// 查并删\n\t\t\tcollection.findAndRemove(selector, sort, [options], [callback]);\n\t\t});\t\n\t\n\tcollection.insert(docs, [options], [callback])中的options与上文的大致相同，增加：\n\t\n\t\toptions = {\t\n\t\t\tcontinueOnError: false, // 若一个文档插入失败，是否继续插入剩余文档\n\t\t\tcheckKeys: true, // 插入数据时是否取消检查该数据文档的主键是否已存在的处理\n\t\t}\t\n\n\tcollection.update(selector, document, [options], [callback]);中的options与上文的大致相同，增加：\n\t\n\t\toptions = {\t\n\t\t\tupsert: false, // 是否在更新时执行upsert操作：数据不存在则创建\n\t\t\tmulti: false, // 是否更新所有符合查询条件的数据文档，默认为false即更新第一条\n\t\t}\t\n\t\n\tcollection.remove([selector], [options], [callback]);中的options与上文的大致相同，增加：\n\t\n\t\toptions = {\t\n\t\t\tsingle: false, // 是否只删除符合条件的第一条数据文档\n\t\t}\t\t\t\t\t\t\n\t\t\n\t【增查改删】操作的实例：\n\t\n\t\tvar mongodb = require('mongodb');\n\t\tvar host = 'localhost';\n\t\tvar port = mongodb.Connection.DEFAULT_PORT || 1234;\n\t\tvar server = new mongodb.Server(host, port, {auto_connect: true});\n\t\tvar Db = new mongodb.Db('testDbName', server, {safe: true});\n\t\tDb.open(function (err, db) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('连接数据库成功');\n\t\t\t\n\t\t\t// 先获取文档集合\n\t\t\tdb.collection('users', function (err, collection) {\n\t\t\t\t// 【增】\n\t\t\t\tcollection.insert({\n\t\t\t\t\tname: '小赖',\n\t\t\t\t\tpassword: 'pws123456',\n\t\t\t\t\temail: 'laixiaolai@foxmail.com',\n\t\t\t\t\tage: 18,\n\t\t\t\t\tsex: 'male'\n\t\t\t\t}, function (err, docs) {\n\t\t\t\t\t// docs 是成功插入后的文档集合\n\t\t\t\t\tconsole.log('\\n【增】插入数据成功，刚插入的数据是：\\n', docs);\n\t\t\t\t\t// 记得关闭数据库！\n\t\t\t\t\t// db.close();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 【查】, {} 表示查询所有\n\t\t\t\tcollection.find({}).toArray(function (err, docs) {\n\t\t\t\t\tif (err) throw err;\n\t\t\t\t\tconsole.log('\\n【查】所有文档集合是：\\n', docs);\n\t\t\t\t});\n\t\t\t\t// 【查】，{name: '小赖'} 为限定条件\n\t\t\t\tcollection.find({name: '小赖'}).toArray(function (err, docs) {\n\t\t\t\t\tif (err) throw err;\n\t\t\t\t\tconsole.log('\\n【查】名字叫小赖的文档是：\\n', docs);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 【改】\n\t\t\t\tvar xiaoqing = {\n\t\t\t\t\tname: '小清',\n\t\t\t\t\tpassword: 'newPws123456',\n\t\t\t\t\temail: 'abcd@laispace.com',\n\t\t\t\t\tage: 180,\n\t\t\t\t\tsex: 'male'\n\t\t\t\t};\n\t\t\t\t// 把名字为小赖的用户改为小清\n\t\t\t\tcollection.update({name: '小赖'}, xiaoqing, {upsert: true}, function (err, result) {\n\t\t\t\t\tif (err) throw err;\n\t\t\t\t\tconsole.log('\\n更新数据成功，刚更新的文档数是：\\n', result);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 【删】\n\t\t\t\tcollection.remove({name: '小清'}, function (err, result) {\n\t\t\t\t\tif (err) throw err;\n\t\t\t\t\tconsole.log('\\n删除数据成功，刚删除的文档数是：\\n', result);\n\t\t\t\t\n\t\t\t\t\t// 记得最后一次操作要关闭数据库！！！\n\t\t\t\t\t// db.close();\n\t\t\t\t});\t\t\t\n\t\t\t});\n\t\t});\t\n\t\tDb.on('close', function (err) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('关闭数据库成功');\n\t\t})\n\n\t在查询操作 collection.find(selector, [options]).toArray(callback) 中可以设置一些限定：\n\t\n\t\t// 查找全部，缺省参数{} 即 db.users.find({});\n\t\t$ db.users.find();\n\t\t// 指定范围查找\n\t\t$ db.users.find({\"name\": \"小清\", \"email\": \"abcd@laispace.com\"});\n\t\t// 查找全部，但只返回指定的键，1表示true， 注意 _id 总会被返回\n\t\t$ db.users.find({}, {\"name\": 1, \"email\": 1});\n\t\t// 查找全部，但不要返回指定的键，0表示false\n\t\t$ db.users.find({}, {\"password\": 0});\n\t\t// 大于小于\n\t\t$ db.users.find({\"age\": {\"$gte\": 18, \"$lte\": 30}}) // 大于等于18小于等于30岁\n\t\tdb.users.find({\"registered\": {\"$lt\": new Date(\"01/01/2014\")}}); // 在2014/01/01前注册\n\t\t// 不等于\n\t\t$ db.users.find({\"name\": {\"$ne\": \"小清\"}}); // 用户名不是『小清』\n\t\t// 包含于\n\t\tdb.users.find({\"name\": {\"$in\": [\"小清\", \"小赖\"]}}); // 用户名是『小清』或『小赖』\n\t\t// 不包含于\n\t\tdb.users.find({\"name\": {\"$nin\": [\"小清\", \"小赖\"]}}); // 用户名不是『小清』和『小赖』\n\t\t// 或\n\t\tdb.users.find({\"$or\": [{\"name\": \"小清\"}, {\"email\": \"laixiaolai@foxmail.com\"}]}); // 用户名是『小清』或 邮箱是 \"123@example.com\"\n\n\t也可在更新操作 collection.update(selector, document, [options], [callback]); 中可以设置一些限定：\n\t\n\t\t// 原子修改器\n\t\tdb.users.update({\"name\": \"小清\"}, {\n\t\t\t\"$inc\": {\n\t\t\t\"age\": 1 // 年龄加一\n\t\t\t}\n\t\t})\n\t\t\"$inc\" // 增加\n\t\t\"$set\" // 修改，无则创建\n\t\t\"$unset\" // 删除\n \n\t\t// 数组修改器\n\t\t// \"$push\" // 添加\n\t\t// \"$pop\": {key: 1} // 数组末删除一个元素\n\t\t// \"$pop\": {key: -1} // 数组头删除一个元素\n\t\t// \"$pull\": {\"foo\": \"bar\"} // 删除数组foo中的bar\n \n\t\t// 函数 update(query , obj , upsert , multi) 参数说明：\n\t\t$ db.users.update({\"name\": \"小清\"}, xiaoqing);\n\t\t// 若指定第三个参数upsert为true,即：\n\t\t$ db.users.update({\"name\": \"小清\"}, xiaoqing, true);\n\t\t// 则表示：\n\t\t// - 若找到匹配文档，正常更新；\n\t\t// - 若没有文档符合更新条件，则以这个条件和更新文档为基础建立一个新的文档。\n\t\t// 若指定第四个参数multi为true, 即：\n\t\t$ db.users.update({\"name\": \"小清\"}, xiaoqing, true, true);\n\t\t// 则表示：\n\t\t// 匹配到的所有文档都得到更新（为false则只匹配第一个）。\t\n\n## 使用 Mongoose类库\n\n使用mongoose可以让MongoDB在NodeJS中得到更好的支持。\n\n直接上实例吧：\n\t\n  \tvar mongoose =require('mongoose');\n  \t// 通过 Schema 来定义数据架构\n  \tvar Schema = mongoose.Schema;\n  \t// 连接数据库, 27017 是MongoDB的默认端口\n  \tmongoose.connect('mongodb://localhost:27017/testDbName', function (err) {\n  \t\tif (err) {\n  \t\t\tconsole.log('连接数据库失败');\n  \t\t\tthrow err;\n  \t\t}\n  \t\t// 定义数据架构\n  \t\tvar userSchema = new Schema({\n  \t\t\tname: String, // name 为字符串\n  \t\t\tage: Number   // age 为整数\n  \t\t});\n  \t\t\n  \t\tvar user1 = {name: '小赖', age: 18};\n  \t\tvar user2 = {name: '小清', age: 19};\n  \t\tvar user3 = {name: '大花', age: 20};\n  \t\tvar user4 = {name: '大黄', age: 21};\n  \t\tvar docs = [user1, user2, user3, user4];\n  \t\tvar Users = mongoose.model('users', userSchema);\n  \t\tUsers.create(docs, function (err, docs) {\n  \t\t\tif (err) {\n  \t\t\t\tconsole.log('保存数据失败');\n  \t\t\t\tthrow err;\n  \t\t\t}\n  \t\t\tUsers.find(function (err, docs) {\n  \t\t\t\tif (err) throw err;\n  \t\t\t\tconsole.log(docs);\n  \t\t\t\t// 断开数据库连接\n  \t\t\t\tmongoose.disconnect();\n  \t\t\t});\n  \t\t});\n  \t})\n\n### 参考资料：\n\n1. [MongoDB入门-CRUD简单操作](http://laispace.github.io/MongoDB%E5%85%A5%E9%97%A8-CRUD%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%20/)\n2. [the-little-mongodb-book-cn](https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md)","slug":"mongodb-学习笔记","updated":1418908898000,"excerpt":"<h2 id=\"MongoDB_支持的几钟数据类型\">MongoDB 支持的几钟数据类型</h2>\n<ul>\n<li><p>String</p>\n<pre><code>  <span class=\"comment\">// 字符串</span>\n  <span class=\"keyword\">var</span> mySite = <span class=\"string\">'laispace.com'</span>;            \n</code></pre></li>\n<li><p>Array</p>\n<pre><code>  <span class=\"comment\">// 数组</span>\n  <span class=\"keyword\">var</span> myFriends = [<span class=\"string\">'小赖'</span>, <span class=\"string\">'小清'</span>, <span class=\"string\">'大花'</span>, <span class=\"string\">'大黄'</span>];\n</code></pre></li>\n<li><p>Boolean</p>\n<pre><code>  // 布尔类型，<span class=\"constant\">true</span> 或 <span class=\"constant\">false</span>         \n  var <span class=\"variable\">IloveU =</span> <span class=\"constant\">true</span>;\n</code></pre></li>\n<li><p>Code</p>\n<pre><code>  <span class=\"comment\">// 代码，可在数据库内运行</span>\n  <span class=\"keyword\">var</span> myCode = <span class=\"keyword\">new</span> BSON.Code(<span class=\"symbol\">'function</span> (name) {\n      <span class=\"keyword\">return</span> <span class=\"symbol\">'My</span> name is ' + name;\n  }');\n</code></pre></li>\n<li><p>Date</p>\n<pre><code>  <span class=\"comment\">// 日期</span>\n  <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();\n</code></pre></li>\n</ul>\n<ul>\n<li><p>Integer</p>\n<pre><code>  <span class=\"comment\">// 整数</span>\n  <span class=\"keyword\">var</span> myAge = <span class=\"number\">18</span>; <span class=\"comment\">// 让我年轻一次嘛~</span>\n</code></pre></li>\n</ul>\n<!--more-->\n\n<ul>\n<li><p>Long</p>\n<pre><code>  <span class=\"comment\">// 长整数</span>\n  <span class=\"keyword\">var</span> myMoney = <span class=\"keyword\">new</span> BSON.Long(<span class=\"string\">'999999999999999999999'</span>);\n</code></pre></li>\n<li><p>Hash</p>\n<pre><code>  <span class=\"comment\">// 数据字典</span>\n  <span class=\"keyword\">var</span> myInfo = {\n      name: <span class=\"string\">'小赖'</span>,\n      age: <span class=\"string\">'18,\n      sex: '</span>male<span class=\"string\">'\n  };</span>\n</code></pre></li>\n<li><p>Null </p>\n<pre><code>  <span class=\"comment\">// null 值</span>\n  <span class=\"keyword\">var</span> myBadFriend = <span class=\"literal\">null</span>;\n</code></pre></li>\n<li><p>ObjectId</p>\n<pre><code>  <span class=\"comment\">// 索引ID，12字节，24位16进制串，用于唯一标识</span>\n  <span class=\"keyword\">var</span> myId = <span class=\"keyword\">new</span> BSON.ObjectId()\n</code></pre></li>\n<li><p>DBRef</p>\n<pre><code>  <span class=\"comment\">// 数据库引用</span>\n  <span class=\"keyword\">var</span> bestFriendId = <span class=\"keyword\">new</span> BSON.DBRef(<span class=\"string\">'users'</span>, friendObjectId);\n</code></pre></li>\n</ul>\n","_id":"rzidvpo7izc0xi0y","comments":true,"layout":"post","photos":[],"link":""},{"title":"Mongoose-学习笔记","date":1400667773000,"categories":["b77a2jgxm72gxq7s"],"tags":["1r19h0mfxhgs7nzc","uoz9hvdqhu0y7qf1","1w1wj1qb7pcv7lru"],"content":"<p>定义模式 Schema -&gt; 定义模型 model -&gt; 定义实例 -&gt; 增查删改这个实例</p>\n<p>在模式中可以直接定义一些方法，使得使用模型生成的实例都继承了这些方法，可直接调用。</p>\n<ul>\n<li><p>快速开始</p>\n<pre><code>  <span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);\n\n  <span class=\"comment\">// 【模式】</span>\n  <span class=\"keyword\">var</span> UserSchema = mongoose.Schema({\n    name: <span class=\"built_in\">String</span>,\n    age: <span class=\"built_in\">Number</span>\n  })\n\n  <span class=\"comment\">// 【方法】在模式中添加一个方法，则生成的实例中将可以直接调用这个方法</span>\n  UserSchema.methods.say = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">var</span> name = <span class=\"keyword\">this</span>.name;\n    <span class=\"keyword\">if</span> (name) {\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>, name);\n    } <span class=\"keyword\">else</span> {\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'我还没有名字'</span>);\n    }\n  };\n\n  <span class=\"comment\">// 【模型】使用模式定义一个模型</span>\n  <span class=\"keyword\">var</span> User = mongoose.model(<span class=\"string\">'User'</span>, UserSchema);\n\n  <span class=\"comment\">// 【实例】使用模型定义一个实例</span>\n  <span class=\"keyword\">var</span> newUser = <span class=\"keyword\">new</span> User({\n    name: <span class=\"string\">'小赖'</span>,\n    age: <span class=\"number\">18</span>  <span class=\"comment\">// 我年年十八</span>\n  })\n  <span class=\"comment\">// 【实例】使用模型定义一个实例</span>\n  <span class=\"keyword\">var</span> r = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span> + <span class=\"number\">20</span>);\n  <span class=\"keyword\">var</span> newUserRandom = <span class=\"keyword\">new</span> User({\n    name: <span class=\"string\">'用户'</span>+r,\n    age: r  <span class=\"comment\">//</span>\n  })\n  <span class=\"comment\">// 实例中调用模式中定义好的方法</span>\n  newUser.say(); <span class=\"comment\">// =&gt; '我的名字是：小赖'</span>\n  newUserRandom.say();\n\n  <span class=\"comment\">// 【增】将实例保存到数据库</span>\n  newUser.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, newUser)</span> </span>{\n    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'【增】保存数据成功, 成功保存的数据是：\\n'</span>, newUser);\n  });\n  <span class=\"comment\">// 【增】将实例保存到数据库</span>\n  newUserRandom.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, newUser)</span> </span>{\n    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'【增】保存数据成功, 成功保存的数据是：\\n'</span>, newUserRandom);\n  });\n\n  <span class=\"comment\">// 【查】查询所有文档</span>\n  User.find(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, users)</span> </span>{\n    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'【查】当前数据库的所有用户是：\\n'</span>, users);\n  });\n  <span class=\"comment\">// 【查】限定条件查询</span>\n  User.find({age: <span class=\"number\">20</span>}, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, users)</span> </span>{\n    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'查询到年龄为20的用户有：\\n'</span>, users);\n  })\n\n  <span class=\"comment\">// 连接数据库</span>\n  mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);\n\n  <span class=\"comment\">// 获取连接</span>\n  <span class=\"keyword\">var</span> db = mongoose.connection;\n\n  <span class=\"comment\">// 连接错误</span>\n  db.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接失败：'</span>, err);\n  });\n\n  <span class=\"comment\">// 连接成功</span>\n  db.on(<span class=\"string\">'open'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接成功！'</span>);\n  })\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>    \n\n<ul>\n<li><p>定义模式 Schema</p>\n<pre><code>  // <span class=\"keyword\">new</span> Schema(properties, <span class=\"keyword\">options</span>);\n</code></pre></li>\n</ul>\n<p>options 中的key为autoIndex/capped/collection/id/_id/read/safe/shardKey/strict/toJSON/toObject/versionKey</p>\n<p>模式中的数据类型，可以为：String/Number/Date/Buffer/Boolean/Mixed/ObjectId/Array</p>\n<pre><code>    <span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);\n    <span class=\"keyword\">var</span> Schema = mongoose.Schema;\n\n    <span class=\"comment\">// 定义一篇博文的模式</span>\n    <span class=\"keyword\">var</span> articleSchema = <span class=\"keyword\">new</span> Schema({\n      title:  <span class=\"built_in\">String</span>,\n      author: <span class=\"built_in\">String</span>,\n      content:    <span class=\"built_in\">String</span>,\n      comments: [{ author: <span class=\"built_in\">String</span>, content: <span class=\"built_in\">String</span>, date: <span class=\"built_in\">Date</span> }],\n      date: { type: <span class=\"built_in\">Date</span>, <span class=\"keyword\">default</span>: <span class=\"built_in\">Date</span>.now },\n      meta: {\n        votes: <span class=\"built_in\">Number</span>,\n        favs:  <span class=\"built_in\">Number</span>\n      }\n    }); \n\n    <span class=\"comment\">// 后期添加模式属性</span>\n    articleSchema.add({visited: <span class=\"string\">'string'</span>})\n\n    <span class=\"comment\">// 在模式中添加静态方法-供模型调用</span>\n    articlesSchema.statics.findByAuthor = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(name, callback)</span> </span>{\n        <span class=\"keyword\">this</span>.find({author: name}, callback)\n    };\n\n    <span class=\"comment\">// 在模式中添加实例方法-供实例调用</span>\n    articleSchema.methods.getInfo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'文章标题是：'</span>, <span class=\"keyword\">this</span>.title);\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'文章作者是：'</span>, <span class=\"keyword\">this</span>.author);\n        <span class=\"comment\">// ... </span>\n    };\n\n    <span class=\"comment\">// 在模式中添加虚拟化方法-供实例调用</span>\n    <span class=\"comment\">// 相当于实例中会存在一个新的description属性: </span>\n    articleSchema.virtual(<span class=\"string\">'description'</span>).get(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n        <span class=\"keyword\">return</span> <span class=\"string\">'作者'</span>+ <span class=\"keyword\">this</span>.author + <span class=\"string\">'写了一篇名为『'</span> + <span class=\"keyword\">this</span>.title + <span class=\"string\">'』的文章'</span>;\n    })\n</code></pre><ul>\n<li>定义模型 model</li>\n</ul>\n<p>使用模式定义模型</p>\n<pre><code>    <span class=\"keyword\">var</span> Article = mongoose.model(<span class=\"string\">'Article'</span>, articleSchema);\n\n    <span class=\"comment\">// 调用静态方法</span>\n    Article.findByAuthor(<span class=\"string\">'小赖'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, articles)</span> </span>{\n        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'找到所有作者为小赖的文章：'</span>, articles);\n    })\n</code></pre><ul>\n<li>生成实例</li>\n</ul>\n<p>使用模型生成实例，实例中可调用模式中定义好的方法</p>\n<pre><code>    var newArticle = new Article({\n        title: <span class=\"string\">'hello Mongoose'</span>,\n        author: <span class=\"string\">'小赖'</span>,\n        <span class=\"keyword\">...</span> \n    })    \n\n    // 调用实例方法\n    newArticle.getInfo();\n\n    // 调用虚拟化方法\n    var desc = newArticle.description;\n    console.log(desc); // =&gt; <span class=\"string\">'小赖写了一篇名为『hello Mongoose』的文章'</span>\n</code></pre><ul>\n<li><p>增查删改数据操作</p>\n<pre><code>  <span class=\"comment\">// 【增】</span>\n  newArticle.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, newArticle)</span> </span>{\n      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'保存数据成功, 成功保存的数据是：\\n'</span>, newArticle);\n  })\n  <span class=\"comment\">// 想当于：</span>\n  <span class=\"comment\">// var newArc = {</span>\n  <span class=\"comment\">//      title: 'hello Mongoose',</span>\n  <span class=\"comment\">//     author: '小赖',</span>\n  <span class=\"comment\">//     ... </span>\n  <span class=\"comment\">//}</span>\n  <span class=\"comment\">//Article.create(newArc, function (err, newArc) {</span>\n  <span class=\"comment\">//     if (err) throw err;</span>\n  <span class=\"comment\">//     console.log('保存数据成功, 成功保存的数据是：\\n', newArc);</span>\n  <span class=\"comment\">//})</span>\n\n  <span class=\"comment\">// 【删】</span>\n  Article.remove({author: <span class=\"string\">'小赖'</span>}, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'删除数据成功'</span>);\n  })\n\n  <span class=\"comment\">// 【查】</span>\n  Article.find({ahthor: <span class=\"string\">'小赖'</span>}, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, articles)</span> </span>{\n      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'小赖写的文章有：'</span>, articles);\n  })\n  <span class=\"comment\">// 更多查询方法，见 http://mongoosejs.com/docs/api.html#model_Model.find</span>\n  <span class=\"comment\">// Model.find(conditions, [fields], [options], [callback])</span>\n  <span class=\"comment\">// Model.findById(id, [fields], [options], [callback])</span>\n  <span class=\"comment\">// Model.findByIdAndRemove(id, [options], [callback])</span>\n  <span class=\"comment\">// Model.findByIdAndUpdate(id, [update], [options], [callback])</span>\n  <span class=\"comment\">// Model.findOne(conditions, [fields], [options], [callback])</span>\n  <span class=\"comment\">// Model.findOneAndRemove(conditions, [options], [callback])</span>\n  <span class=\"comment\">// Model.findOneAndUpdate([conditions], [update], [options], [callback])</span>\n</code></pre></li>\n</ul>\n<p> 注意：静态方法和实例方法都定义在模式上，但前者由模型调用，后者由实例调用。        </p>\n<h3 id=\"参考资料\">参考资料</h3>\n<ul>\n<li><p><a href=\"http://docs.mongodb.org/manual/\" target=\"_blank\" rel=\"external\">Mongoo manual</a></p>\n</li>\n<li><p><a href=\"http://mongoosejs.com/docs/guide.html\" target=\"_blank\" rel=\"external\">Mongoose guide</a></p>\n</li>\n<li><p><a href=\"http://mongoosejs.com/docs/api.html\" target=\"_blank\" rel=\"external\">Mongoose aip</a></p>\n</li>\n</ul>\n","source":"_posts/mongoose-学习笔记.md","raw":"title: Mongoose-学习笔记\n\ndate: 2014-05-21 18:22:53\n\ncategories: Database\n\ntags: \n  - node\n  - mongo \n  - mongoose\n\n---\n\n定义模式 Schema -> 定义模型 model -> 定义实例 -> 增查删改这个实例\n\n在模式中可以直接定义一些方法，使得使用模型生成的实例都继承了这些方法，可直接调用。\n\t\n- 快速开始\n\n        var mongoose = require('mongoose');\n\n        // 【模式】\n        var UserSchema = mongoose.Schema({\n          name: String,\n          age: Number\n        })\n\n        // 【方法】在模式中添加一个方法，则生成的实例中将可以直接调用这个方法\n        UserSchema.methods.say = function () {\n          var name = this.name;\n          if (name) {\n            console.log('我的名字是：', name);\n          } else {\n            console.log('我还没有名字');\n          }\n        };\n\n        // 【模型】使用模式定义一个模型\n        var User = mongoose.model('User', UserSchema);\n\n        // 【实例】使用模型定义一个实例\n        var newUser = new User({\n          name: '小赖',\n          age: 18  // 我年年十八\n        })\n        // 【实例】使用模型定义一个实例\n        var r = parseInt(Math.random() * 10 + 20);\n        var newUserRandom = new User({\n          name: '用户'+r,\n          age: r  //\n        })\n        // 实例中调用模式中定义好的方法\n        newUser.say(); // => '我的名字是：小赖'\n        newUserRandom.say();\n\n        // 【增】将实例保存到数据库\n        newUser.save(function (err, newUser) {\n          if (err) throw err;\n          console.log('【增】保存数据成功, 成功保存的数据是：\\n', newUser);\n        });\n        // 【增】将实例保存到数据库\n        newUserRandom.save(function (err, newUser) {\n          if (err) throw err;\n          console.log('【增】保存数据成功, 成功保存的数据是：\\n', newUserRandom);\n        });\n\n        // 【查】查询所有文档\n        User.find(function (err, users) {\n          if (err) throw err;\n          console.log('【查】当前数据库的所有用户是：\\n', users);\n        });\n        // 【查】限定条件查询\n        User.find({age: 20}, function (err, users) {\n          if (err) throw err;\n          console.log('查询到年龄为20的用户有：\\n', users);\n        })\n\n        // 连接数据库\n        mongoose.connect('mongodb://localhost/test');\n\n        // 获取连接\n        var db = mongoose.connection;\n\n        // 连接错误\n        db.on('error', function (err) {\n          console.log('连接失败：', err);\n        });\n\n        // 连接成功\n        db.on('open', function () {\n          console.log('连接成功！');\n        })\n        \n<!-- more -->\t\n                \n- 定义模式 Schema\n\t\n\t\t// new Schema(properties, options);\n\noptions 中的key为autoIndex/capped/collection/id/_id/read/safe/shardKey/strict/toJSON/toObject/versionKey\n\n模式中的数据类型，可以为：String/Number/Date/Buffer/Boolean/Mixed/ObjectId/Array\n        \n        var mongoose = require('mongoose');\n        var Schema = mongoose.Schema;\n\t\t\n\t\t// 定义一篇博文的模式\n        var articleSchema = new Schema({\n          title:  String,\n          author: String,\n          content:\tString,\n          comments: [{ author: String, content: String, date: Date }],\n          date: { type: Date, default: Date.now },\n          meta: {\n            votes: Number,\n            favs:  Number\n          }\n        }); \n        \n        // 后期添加模式属性\n        articleSchema.add({visited: 'string'})\n        \n        // 在模式中添加静态方法-供模型调用\n        articlesSchema.statics.findByAuthor = function (name, callback) {\n        \tthis.find({author: name}, callback)\n        };\n        \n        // 在模式中添加实例方法-供实例调用\n        articleSchema.methods.getInfo = function () {\n        \tconsole.log('文章标题是：', this.title);\n        \tconsole.log('文章作者是：', this.author);\n        \t// ... \n        };\n        \n        // 在模式中添加虚拟化方法-供实例调用\n        // 相当于实例中会存在一个新的description属性: \n        articleSchema.virtual('description').get(function () {\n        \treturn '作者'+ this.author + '写了一篇名为『' + this.title + '』的文章';\n        })\n        \n        \n- 定义模型 model\n\n使用模式定义模型\n\t\n\t\tvar Article = mongoose.model('Article', articleSchema);\n\t\t\n\t\t// 调用静态方法\n\t\tArticle.findByAuthor('小赖', function (err, articles) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('找到所有作者为小赖的文章：', articles);\n\t\t})\n\t\t\n- 生成实例\n\n使用模型生成实例，实例中可调用模式中定义好的方法\n\n\t\tvar newArticle = new Article({\n\t\t\ttitle: 'hello Mongoose',\n\t\t\tauthor: '小赖',\n\t\t\t... \n\t\t})\t\n\t\t\n\t\t// 调用实例方法\n\t\tnewArticle.getInfo();\n\t\t\n\t\t// 调用虚拟化方法\n\t\tvar desc = newArticle.description;\n\t\tconsole.log(desc); // => '小赖写了一篇名为『hello Mongoose』的文章'\n\n- 增查删改数据操作\n\t\t\n\t\t// 【增】\n\t\tnewArticle.save(function (err, newArticle) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('保存数据成功, 成功保存的数据是：\\n', newArticle);\n\t\t})\n\t\t// 想当于：\n\t\t// var newArc = {\n\t\t// \t title: 'hello Mongoose',\n\t\t//\t author: '小赖',\n\t\t//\t ... \n\t\t//}\n\t\t//Article.create(newArc, function (err, newArc) {\n\t\t//\t if (err) throw err;\n\t\t//\t console.log('保存数据成功, 成功保存的数据是：\\n', newArc);\n\t\t//})\n\t\t\n\t\t// 【删】\n\t\tArticle.remove({author: '小赖'}, function (err) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('删除数据成功');\n\t\t})\n\t\t\n\t\t// 【查】\n\t\tArticle.find({ahthor: '小赖'}, function (err, articles) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('小赖写的文章有：', articles);\n\t\t})\n\t\t// 更多查询方法，见 http://mongoosejs.com/docs/api.html#model_Model.find\n\t\t// Model.find(conditions, [fields], [options], [callback])\n\t\t// Model.findById(id, [fields], [options], [callback])\n\t\t// Model.findByIdAndRemove(id, [options], [callback])\n\t\t// Model.findByIdAndUpdate(id, [update], [options], [callback])\n\t\t// Model.findOne(conditions, [fields], [options], [callback])\n\t\t// Model.findOneAndRemove(conditions, [options], [callback])\n\t\t// Model.findOneAndUpdate([conditions], [update], [options], [callback])\n\t\t\n\n\n 注意：静态方法和实例方法都定义在模式上，但前者由模型调用，后者由实例调用。\t\t\n\t\n### 参考资料\n\n- [Mongoo manual](http://docs.mongodb.org/manual/)\n\n- [Mongoose guide](http://mongoosejs.com/docs/guide.html)\n\n- [Mongoose aip](http://mongoosejs.com/docs/api.html)\n\n \n       \n       \n","slug":"mongoose-学习笔记","updated":1418908898000,"excerpt":"<p>定义模式 Schema -&gt; 定义模型 model -&gt; 定义实例 -&gt; 增查删改这个实例</p>\n<p>在模式中可以直接定义一些方法，使得使用模型生成的实例都继承了这些方法，可直接调用。</p>\n<ul>\n<li><p>快速开始</p>\n<pre><code>  <span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);\n\n  <span class=\"comment\">// 【模式】</span>\n  <span class=\"keyword\">var</span> UserSchema = mongoose.Schema({\n    name: <span class=\"built_in\">String</span>,\n    age: <span class=\"built_in\">Number</span>\n  })\n\n  <span class=\"comment\">// 【方法】在模式中添加一个方法，则生成的实例中将可以直接调用这个方法</span>\n  UserSchema.methods.say = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">var</span> name = <span class=\"keyword\">this</span>.name;\n    <span class=\"keyword\">if</span> (name) {\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>, name);\n    } <span class=\"keyword\">else</span> {\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'我还没有名字'</span>);\n    }\n  };\n\n  <span class=\"comment\">// 【模型】使用模式定义一个模型</span>\n  <span class=\"keyword\">var</span> User = mongoose.model(<span class=\"string\">'User'</span>, UserSchema);\n\n  <span class=\"comment\">// 【实例】使用模型定义一个实例</span>\n  <span class=\"keyword\">var</span> newUser = <span class=\"keyword\">new</span> User({\n    name: <span class=\"string\">'小赖'</span>,\n    age: <span class=\"number\">18</span>  <span class=\"comment\">// 我年年十八</span>\n  })\n  <span class=\"comment\">// 【实例】使用模型定义一个实例</span>\n  <span class=\"keyword\">var</span> r = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span> + <span class=\"number\">20</span>);\n  <span class=\"keyword\">var</span> newUserRandom = <span class=\"keyword\">new</span> User({\n    name: <span class=\"string\">'用户'</span>+r,\n    age: r  <span class=\"comment\">//</span>\n  })\n  <span class=\"comment\">// 实例中调用模式中定义好的方法</span>\n  newUser.say(); <span class=\"comment\">// =&gt; '我的名字是：小赖'</span>\n  newUserRandom.say();\n\n  <span class=\"comment\">// 【增】将实例保存到数据库</span>\n  newUser.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, newUser)</span> </span>{\n    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'【增】保存数据成功, 成功保存的数据是：\\n'</span>, newUser);\n  });\n  <span class=\"comment\">// 【增】将实例保存到数据库</span>\n  newUserRandom.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, newUser)</span> </span>{\n    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'【增】保存数据成功, 成功保存的数据是：\\n'</span>, newUserRandom);\n  });\n\n  <span class=\"comment\">// 【查】查询所有文档</span>\n  User.find(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, users)</span> </span>{\n    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'【查】当前数据库的所有用户是：\\n'</span>, users);\n  });\n  <span class=\"comment\">// 【查】限定条件查询</span>\n  User.find({age: <span class=\"number\">20</span>}, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, users)</span> </span>{\n    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'查询到年龄为20的用户有：\\n'</span>, users);\n  })\n\n  <span class=\"comment\">// 连接数据库</span>\n  mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);\n\n  <span class=\"comment\">// 获取连接</span>\n  <span class=\"keyword\">var</span> db = mongoose.connection;\n\n  <span class=\"comment\">// 连接错误</span>\n  db.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接失败：'</span>, err);\n  });\n\n  <span class=\"comment\">// 连接成功</span>\n  db.on(<span class=\"string\">'open'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接成功！'</span>);\n  })\n</code></pre></li>\n</ul>\n","_id":"cg1piu34k6etmjz7","comments":true,"layout":"post","photos":[],"link":""},{"title":"NODEJS-Buffer对象","date":1399641582000,"categories":["f1q8dl6bbauvoh8x"],"tags":["7vh6slrie6ute0c3"],"content":"<ul>\n<li><p>构造一个指定大小的 buffer</p>\n<pre><code>  <span class=\"keyword\">var</span> newBuffer = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">1024</span>);\n  <span class=\"comment\">// var len = newBuffer.length;</span>\n</code></pre></li>\n<li><p>用指定值初始化 buffer 的内容</p>\n<pre><code>  <span class=\"comment\">// 填充第10字节开始的内容为 1 </span>\n  newBuffer.fill(<span class=\"number\">1</span>, <span class=\"number\">10</span>);\n  <span class=\"comment\">// 填充第10~20字节的内容为 2 </span>\n  newBuffer.fill(<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>);\n</code></pre></li>\n<li><p>用数组初始化 buffer 的内容</p>\n<pre><code>  <span class=\"comment\">// 用数组 [0, 1, 2] 初始化</span>\n  <span class=\"keyword\">var</span> newBuffer = newBuffer([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]) \n</code></pre></li>\n<li><p>用字符串初始化 buffer 的内容</p>\n<pre><code>  // 用字符串 <span class=\"attribute\">'xiaolai</span>' 初始化\n  var newBuffer = <span class=\"keyword\">new</span> <span class=\"keyword\">Buffer</span>(<span class=\"attribute\">'xiaolai</span>');\n  // 指定编码, 默认为 utf8，可选 ascii/utf8/utf16le/ucs2/base64/hex 等编码格式\n  // var newBuffer = <span class=\"keyword\">new</span> <span class=\"keyword\">Buffer</span>(<span class=\"attribute\">'xiaolai</span>', <span class=\"attribute\">'utf8</span>');\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>\n\n<ul>\n<li><p>取出 buffer 中的字节        </p>\n<pre><code>  <span class=\"comment\">// 取出第2~4个字节</span>\n  <span class=\"keyword\">var</span> buff = newBuffer.slice(<span class=\"number\">2</span>, <span class=\"number\">4</span>);    \n</code></pre></li>\n<li><p>将 buffer 转化为字符串</p>\n<pre><code>  <span class=\"comment\">// Buffer.toString([encoding], [start], [end])</span>\n  <span class=\"comment\">// 默认以uft-8 编码，将 buffer 转化为字符串</span>\n  <span class=\"keyword\">var</span> str = newbuffer.<span class=\"built_in\">toString</span>();\n  <span class=\"comment\">// 以uft-8 编码，将第4~10字节转化为字符串</span>\n  <span class=\"keyword\">var</span> str = newbuffer.<span class=\"built_in\">toString</span>('utf8', <span class=\"number\">4</span>, <span class=\"number\">10</span>);\n</code></pre></li>\n<li><p>将字符串写入已有的 buffer 中</p>\n<pre><code>  // Buffer.<span class=\"keyword\">write</span>(<span class=\"built_in\">string</span>, [offset], [length], [encoding]);\n  // 在 newBuffer 的第<span class=\"number\">3</span>个字节后插入长度为<span class=\"number\">3</span>的字符串 <span class=\"string\">\"赖\"</span>\n  newBuffer.<span class=\"keyword\">write</span>(<span class=\"string\">'赖'</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>)    \n</code></pre></li>\n<li><p>使用 string_decoder 模块解决中文被截断乱码的问题</p>\n<p>  使用场景：在 utf-8 编码中，『赖小赖』这三个字占用9个字节，如果将这九个字节分为两个buffer，一个5字节另一个4字节，分别打印时就会乱码了（因为一个汉子占用3字节）. 在遇上长字符串时虽然可以将多个这样的buffer使用concact()方法合并后再调用toString()方法输出，但性能不好。</p>\n<pre><code>  <span class=\"comment\">// 使用 string_decoder 模块解决这个问题</span>\n  <span class=\"keyword\">var</span> StringDecoder = <span class=\"keyword\">require</span>(<span class=\"string\">'string_decoder'</span>).StringDecoder;\n  <span class=\"keyword\">var</span> decoder = <span class=\"keyword\">new</span> StringDecoder();\n  <span class=\"comment\">// 分别解码</span>\n  decoder.<span class=\"keyword\">write</span>(str1); <span class=\"comment\">// '赖'</span>\n  decoder.<span class=\"keyword\">write</span>(str2); <span class=\"comment\">// '小赖'</span>\n</code></pre></li>\n<li><p>使用 JSON.stringify() 将 buffer 转换为字符串</p>\n<pre><code>  <span class=\"keyword\">var</span> newBuffer = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'我叫赖小赖'</span>);\n  <span class=\"keyword\">var</span> json = <span class=\"built_in\">JSON</span>.stringify(newBuffer);\n  <span class=\"comment\">//使用 JSON.parse() 将转化后的字符串转化为数组</span>\n  <span class=\"keyword\">var</span> arr = <span class=\"built_in\">JSON</span>.parse(json);\n</code></pre></li>\n<li><p>复制 buffer 到另一个 buffer</p>\n<pre><code>  <span class=\"comment\">// Buffer.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])</span>\n  <span class=\"keyword\">var</span> oldBuffer = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'我叫赖小赖'</span>);\n  <span class=\"keyword\">var</span> newBuffer = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">1024</span>);\n  <span class=\"comment\">// 将 oldBuffer 复制到 newBuffer;</span>\n  oldBuffer.<span class=\"keyword\">copy</span>(newBuffer);    \n</code></pre></li>\n<li><p>Buffer.isBuffer(object) 判断是否为 Buffer对象            </p>\n<pre><code><span class=\"attribute\">  var isObjBuffer </span>=<span class=\"string\"> Buffer.isBuffer(obj);</span>\n</code></pre></li>\n<li><p>Buffer.byteLength(string, [encoding]) 计算字符串的字节数</p>\n<pre><code>  <span class=\"keyword\">var</span> str = <span class=\"string\">'赖小赖'</span>;\n  <span class=\"keyword\">var</span> byteLen = Buffer.byteLength(str);    \n</code></pre></li>\n<li><p>Buffer.concat(BufferList, [totalLength]) 将多个 Buffer 合并为一个</p>\n<pre><code>  <span class=\"keyword\">var</span> str1 = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'我'</span>);    \n  <span class=\"keyword\">var</span> str2 = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'叫'</span>);    \n  <span class=\"keyword\">var</span> str3 = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'小'</span>);    \n  <span class=\"keyword\">var</span> str4 = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'赖'</span>);\n  <span class=\"keyword\">var</span> str5 = Buffer.concat([str1, str2, str3, str4]); \n  <span class=\"built_in\">console</span>.log(str5.toString()); <span class=\"comment\">// \"我叫小赖\"    </span>\n</code></pre></li>\n</ul>\n","source":"_posts/nodejs-buffer对象.md","raw":"title: NODEJS-Buffer对象\n\ndate: 2014-05-09 21:19:42\n\ncategories: Node\n\ntags: [buffer] \n\n---\n \n\n- 构造一个指定大小的 buffer\n\n\t\tvar newBuffer = new Buffer(1024);\n\t\t// var len = newBuffer.length;\n- 用指定值初始化 buffer 的内容\n\n\t\t// 填充第10字节开始的内容为 1 \n\t\tnewBuffer.fill(1, 10);\n\t\t// 填充第10~20字节的内容为 2 \n\t\tnewBuffer.fill(2, 10, 20);\n\t\t\n- 用数组初始化 buffer 的内容\n\t\t\n\t\t// 用数组 [0, 1, 2] 初始化\n\t\tvar newBuffer = newBuffer([0, 1, 2]) \n\t\t\n- 用字符串初始化 buffer 的内容\n\n\t\t// 用字符串 'xiaolai' 初始化\n\t\tvar newBuffer = new Buffer('xiaolai');\n\t\t// 指定编码, 默认为 utf8，可选 ascii/utf8/utf16le/ucs2/base64/hex 等编码格式\n\t\t// var newBuffer = new Buffer('xiaolai', 'utf8');\n\n<!--more-->\n\t\t\n- 取出 buffer 中的字节\t\t\n\t\t\n\t\t// 取出第2~4个字节\n\t\tvar buff = newBuffer.slice(2, 4);\t\n\n- 将 buffer 转化为字符串\n\n\t\t// Buffer.toString([encoding], [start], [end])\n\t\t// 默认以uft-8 编码，将 buffer 转化为字符串\n\t\tvar str = newbuffer.toString();\n\t\t// 以uft-8 编码，将第4~10字节转化为字符串\n\t\tvar str = newbuffer.toString('utf8', 4, 10);\n\t\n- 将字符串写入已有的 buffer 中\n\n\t\t// Buffer.write(string, [offset], [length], [encoding]);\n\t\t// 在 newBuffer 的第3个字节后插入长度为3的字符串 \"赖\"\n\t\tnewBuffer.write('赖', 3, 3)\t\n\t\t\n- 使用 string_decoder 模块解决中文被截断乱码的问题\n\n\t使用场景：在 utf-8 编码中，『赖小赖』这三个字占用9个字节，如果将这九个字节分为两个buffer，一个5字节另一个4字节，分别打印时就会乱码了（因为一个汉子占用3字节）. 在遇上长字符串时虽然可以将多个这样的buffer使用concact()方法合并后再调用toString()方法输出，但性能不好。\n\n\t\t// 使用 string_decoder 模块解决这个问题\n\t\tvar StringDecoder = require('string_decoder').StringDecoder;\n\t\tvar decoder = new StringDecoder();\n\t\t// 分别解码\n\t\tdecoder.write(str1); // '赖'\n\t\tdecoder.write(str2); // '小赖'\n\t\t\n- 使用 JSON.stringify() 将 buffer 转换为字符串\n\n\t\tvar newBuffer = new Buffer('我叫赖小赖');\n\t\tvar json = JSON.stringify(newBuffer);\n\t\t//使用 JSON.parse() 将转化后的字符串转化为数组\n\t\tvar arr = JSON.parse(json);\n\t\t\n- 复制 buffer 到另一个 buffer\n\n\t\t// Buffer.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])\n\t\tvar oldBuffer = new Buffer('我叫赖小赖');\n\t\tvar newBuffer = new Buffer(1024);\n\t\t// 将 oldBuffer 复制到 newBuffer;\n\t\toldBuffer.copy(newBuffer);\t\n\n- Buffer.isBuffer(object) 判断是否为 Buffer对象\t\t\t\n\n\t\tvar isObjBuffer = Buffer.isBuffer(obj);\n\t\t\n- Buffer.byteLength(string, [encoding]) 计算字符串的字节数\n\n\t\tvar str = '赖小赖';\n\t\tvar byteLen = Buffer.byteLength(str);\t\n\n- Buffer.concat(BufferList, [totalLength]) 将多个 Buffer 合并为一个\n\n\t\tvar str1 = new Buffer('我');\t\n\t\tvar str2 = new Buffer('叫');\t\n\t\tvar str3 = new Buffer('小');\t\n\t\tvar str4 = new Buffer('赖');\n\t\tvar str5 = Buffer.concat([str1, str2, str3, str4]); \n\t\tconsole.log(str5.toString()); // \"我叫小赖\"\t\n\t\n\n\t\n\t\t\t\n\t\n\n\n\t\t\t\n\t","slug":"nodejs-buffer对象","updated":1418908898000,"excerpt":"<ul>\n<li><p>构造一个指定大小的 buffer</p>\n<pre><code>  <span class=\"keyword\">var</span> newBuffer = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">1024</span>);\n  <span class=\"comment\">// var len = newBuffer.length;</span>\n</code></pre></li>\n<li><p>用指定值初始化 buffer 的内容</p>\n<pre><code>  <span class=\"comment\">// 填充第10字节开始的内容为 1 </span>\n  newBuffer.fill(<span class=\"number\">1</span>, <span class=\"number\">10</span>);\n  <span class=\"comment\">// 填充第10~20字节的内容为 2 </span>\n  newBuffer.fill(<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>);\n</code></pre></li>\n<li><p>用数组初始化 buffer 的内容</p>\n<pre><code>  <span class=\"comment\">// 用数组 [0, 1, 2] 初始化</span>\n  <span class=\"keyword\">var</span> newBuffer = newBuffer([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]) \n</code></pre></li>\n<li><p>用字符串初始化 buffer 的内容</p>\n<pre><code>  // 用字符串 <span class=\"attribute\">'xiaolai</span>' 初始化\n  var newBuffer = <span class=\"keyword\">new</span> <span class=\"keyword\">Buffer</span>(<span class=\"attribute\">'xiaolai</span>');\n  // 指定编码, 默认为 utf8，可选 ascii/utf8/utf16le/ucs2/base64/hex 等编码格式\n  // var newBuffer = <span class=\"keyword\">new</span> <span class=\"keyword\">Buffer</span>(<span class=\"attribute\">'xiaolai</span>', <span class=\"attribute\">'utf8</span>');\n</code></pre></li>\n</ul>\n","_id":"efn8uirfln4qw9u7","comments":true,"layout":"post","photos":[],"link":""},{"title":"NODEJS-fs模块操作文件系统","date":1399641582000,"categories":["f1q8dl6bbauvoh8x"],"tags":["co9oz5jdtnentgvy","m4vxmftnnz9qf4vr"],"content":"<h2 id=\"使用_fs模块_对文件/目录进行操作\">使用 fs模块 对文件/目录进行操作</h2>\n<ul>\n<li><p>读取文件内容</p>\n<pre><code>  <span class=\"comment\">// fs.readFile(filename, [options], callback) </span>\n  <span class=\"comment\">// options 中的 flag 默认为 r，表示读取文件</span>\n  fs.readFile(<span class=\"string\">'test.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, data)</span> </span>{\n      <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件内容是：'</span>, data);\n  })\n</code></pre></li>\n</ul>\n<pre><code>    <span class=\"comment\">// fs.readFileSync(filename, [options]) </span>\n    <span class=\"comment\">// 同步方式读取</span>\n    <span class=\"keyword\">try</span> {\n        <span class=\"keyword\">var</span> data = fs.readFileSync(<span class=\"string\">'test.txt'</span>);\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件内容是：'</span>, data);\n    } <span class=\"keyword\">catch</span> (err) {\n        <span class=\"keyword\">throw</span> err;\n    }\n</code></pre><a id=\"more\"></a>\n\n<pre><code><span class=\"keyword\">options</span> 中的 flag 取值：r<span class=\"regexp\">/r+/</span>rs<span class=\"regexp\">/w/</span>wx<span class=\"regexp\">/w+/</span>wx+<span class=\"regexp\">/a/</span>ax<span class=\"regexp\">/a+/</span>ax+\n\n<span class=\"keyword\">options</span> 中的 encoding 取值：utf8<span class=\"regexp\">/ascii/</span>base64\n</code></pre><ul>\n<li><p>写入文件内容</p>\n<pre><code>  <span class=\"comment\">// fs.writeFile(filename, data, [options], callback)</span>\n  <span class=\"comment\">// options 中的 flag 默认为 w，表示写入文件，mode 默认为 0666（可读写的读写权限）</span>\n  fs.writeFile(<span class=\"string\">'test.txt'</span>, <span class=\"string\">'我是被写入的内容'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;\n      console.log(<span class=\"string\">'成功写入.'</span>)\n  })        \n\n  <span class=\"comment\">// 同步方式写入</span>\n  fs.writeFile(filename, data, [options])\n\n  <span class=\"comment\">// 将 data 添加到文件底部, flag 默认为 a</span>\n  fs.appendFile(filename, data, [options], <span class=\"keyword\">callback</span>)\n  <span class=\"comment\">// 同步方式添加</span>\n  fs.appendFileSync(filename, data, [options])\n</code></pre><p>  options 中的 flag 和 encoding 与上同。</p>\n<p>  options 中的 mode 为表示读写权限的数字，默认为 0666 可读写</p>\n<p>  写入的 data 可以是一个 Buffer    </p>\n</li>\n<li><p>在指定位置读写文件</p>\n<pre><code>  fs.<span class=\"built_in\">open</span>(filename, flags, [mode], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"title\">err</span>, <span class=\"title\">fd</span>){</span>\n     <span class=\"comment\"> // 读</span>\n      fs.<span class=\"built_in\">read</span>(fd, buffer, <span class=\"built_in\">offset</span>, <span class=\"built_in\">length</span>, position, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"title\">err</span>, <span class=\"title\">bytesRead</span>, <span class=\"title\">buffer</span>){})</span>\n     <span class=\"comment\"> // 写</span>\n      fs.<span class=\"built_in\">write</span>(fd, buffer, <span class=\"built_in\">offset</span>, <span class=\"built_in\">length</span>, position, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"title\">err</span>, <span class=\"title\">written</span>, <span class=\"title\">buffer</span>){})</span>\n     <span class=\"comment\"> // 关闭</span>\n      fs.<span class=\"built_in\">close</span>(fd)\n  })\n</code></pre></li>\n</ul>\n<ul>\n<li><p>创建目录</p>\n<pre><code>  <span class=\"comment\">// fs.mkdir(path, [mode], callback)</span>\n  <span class=\"comment\">// mode 默认为 0777，表示可读可写</span>\n  fs.mkdir(<span class=\"string\">'./testDir'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n      <span class=\"keyword\">if</span> (err) {\n          <span class=\"keyword\">throw</span> err;\n      }\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'目录创建成功'</span>)\n  })    \n</code></pre></li>\n<li><p>读取目录</p>\n<pre><code>  fs.readdir(<span class=\"string\">'./testDir'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, files)</span> </span>{\n      <span class=\"keyword\">if</span> (err) {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取目录失败'</span>)\n      }\n      <span class=\"built_in\">console</span>.log(files);\n  })    \n</code></pre></li>\n<li><p>查看文件/目录信息</p>\n<pre><code>  <span class=\"comment\">// fs.fstat('testDir', function (err, stats) {</span>\n  fs.stat(<span class=\"string\">'testFile.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, stats)</span> </span>{\n      <span class=\"keyword\">if</span> (err) {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取文件信息失败'</span>)\n      }            \n      <span class=\"comment\">// stats 是一个 Fs.Stats 对象</span>\n      <span class=\"built_in\">console</span>.log(stats);\n\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'是否为文件：'</span>, stats.isFile);\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'是否为目录：'</span>, stats.isDictionary);\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'读写权限是：'</span>, stats.mode);\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件大小是：'</span>, stats.size);\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'访问时间是：'</span>, stats.atime);\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'修改时间是：'</span>, stats.mtime);\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'创建时间是：'</span>, stats.ctime);\n  })    \n</code></pre></li>\n<li><p>检查文件/目录是否存在</p>\n<pre><code>  fs.<span class=\"built_in\">exists</span>(<span class=\"string\">'./testFile.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(exists)</span> {</span>\n      console.<span class=\"built_in\">log</span>(<span class=\"string\">'testFile.txt是否存在：'</span>, <span class=\"built_in\">exists</span>);\n  })    \n</code></pre></li>\n<li><p>获取文件的绝对路径</p>\n<pre><code>  fs.realpath(<span class=\"string\">'./testFile.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, resolvedPath)</span> </span>{\n      <span class=\"keyword\">if</span> (err) {\n          <span class=\"keyword\">throw</span> err;\n      }\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件的绝对路径是：'</span>, resolvedPath);\n  })\n</code></pre></li>\n<li><p>修改文件时间</p>\n<pre><code>  <span class=\"comment\">// fs.utimes(path, atime, mtime, callback)</span>\n  fs.utimes(<span class=\"string\">'./testFile.txt'</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(), <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n      <span class=\"keyword\">if</span> (err) {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'修改失败'</span>)\n      }\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'修改成功'</span>);\n  })    \n</code></pre></li>\n<li><p>修改文件/目录的读取权限</p>\n<pre><code>  <span class=\"comment\">// fs.chmod(path, mode, callback)</span>\n  <span class=\"comment\">// 0600 表示所有者可读写，其他人不可</span>\n  fs.chmod(<span class=\"string\">'./testFile.txt'</span>, <span class=\"number\">0600</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n      <span class=\"keyword\">if</span> (err) {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'修改失败'</span>);\n      }\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'修改成功'</span>);\n  })\n</code></pre></li>\n<li><p>移动/重命名文件</p>\n<pre><code>  <span class=\"comment\">// fs.rename(oldPath, newPath, callback);        // oldPath 与 newPath 所在目录相同但文件名不同时，重命名</span>\n  <span class=\"comment\">// oldPath 与 newPath 所在目录不相同时，移动；若文件名不同，则移动后重命名</span>\n  fs.rename(<span class=\"string\">'./testFile.txt'</span>, <span class=\"string\">'./test/testNewFile.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n      <span class=\"keyword\">if</span> (err) {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件移动失败'</span>);        \n      }\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件移动成功'</span>);\n  })\n</code></pre></li>\n<li><p>创建和删除硬连接</p>\n<p>  新创建的硬连接与旧的硬连接会指向相同文件</p>\n<p>  删除的硬连接若是最后一个，则删除这个文件</p>\n<pre><code>  <span class=\"comment\">// 创建</span>\n  <span class=\"comment\">// fs.link(srcPath, dstPath, callback);</span>\n  fs.line(<span class=\"string\">'./testFile.txt'</span>, <span class=\"string\">'./test/testNewFile.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n      <span class=\"keyword\">if</span> (err) {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'创建硬连接失败'</span>);\n      }\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'创建硬连接成功'</span>);\n  })    \n  <span class=\"comment\">// 删除</span>\n  fs.unlink(path, callback);\n</code></pre></li>\n<li><p>截断文件</p>\n<p>  清除文件内容，后修改文件尺寸的操作</p>\n<pre><code>  fs.truncate(filename, len, <span class=\"keyword\">callback</span>)\n</code></pre></li>\n<li><p>删除空目录</p>\n<pre><code>  fs.rmdir(path, <span class=\"keyword\">callback</span>);\n</code></pre></li>\n<li><p>监视文件/目录</p>\n<pre><code>  <span class=\"comment\">// fs.watchFile(filename, [options], listener)</span>\n  <span class=\"comment\">// options 中的 interval 指多久检查一次，这里设定了 1小时</span>\n  fs.watchFile(<span class=\"string\">'./testFile.txt'</span>, {interval: <span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>}, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(curr, prev)</span> </span>{\n      <span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.parse(prev.ctime) == <span class=\"number\">0</span>) {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件被创建'</span>);\n      } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.parse(curr.ctime) == <span class=\"number\">0</span>) {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件被删除'</span>);\n      } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.parse(prev.mtime) != <span class=\"built_in\">Date</span>.parse(curr.mtime)\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件被修改'</span>);\n      })\n  })            \n  <span class=\"comment\">// 取消监视, 不指定listener则清空所有监视</span>\n  fs.unwatchFile(filename, [listener])\n</code></pre></li>\n<li><p>使用 ReadStream对象 读取文件</p>\n<pre><code>  // 创建\n  // fs.createReadStream(path, [<span class=\"keyword\">options</span>])\n  // <span class=\"keyword\">options</span> 可填的key有：flags/encoding/autoClose/start/end\n  var <span class=\"keyword\">file</span> = fs.createReadStream(<span class=\"string\">'./testFile.txt'</span>);\n  var body = <span class=\"string\">''</span>;\n  // 监听\n  <span class=\"keyword\">file</span>.<span class=\"keyword\">on</span>(<span class=\"string\">'open'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(fd)</span> {</span>\n      console.<span class=\"built_in\">log</span>(<span class=\"string\">'文件被打开，开始读取...'</span>);\n  });\n  <span class=\"keyword\">file</span>.<span class=\"keyword\">on</span>(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> {</span>\n      console.<span class=\"built_in\">log</span>(<span class=\"string\">'正在读取数据...'</span>);\n      body += data;\n  });\n  <span class=\"keyword\">file</span>.<span class=\"keyword\">on</span>(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span>{</span>\n      console.<span class=\"built_in\">log</span>(<span class=\"string\">'文件被读取完毕：'</span>);\n      console.<span class=\"built_in\">log</span>(body);\n  });\n  <span class=\"keyword\">file</span>.<span class=\"keyword\">on</span>(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n      console.<span class=\"built_in\">log</span>(<span class=\"string\">'文件已关闭'</span>);\n  })\n  <span class=\"keyword\">file</span>.<span class=\"keyword\">on</span>(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n      console.<span class=\"built_in\">log</span>(<span class=\"string\">'文件读取出错'</span>);\n  })\n\n  // 手动出发暂停/恢复读取文件\n  // <span class=\"keyword\">file</span>.pause();\n  // <span class=\"keyword\">file</span>.resume();\n</code></pre></li>\n<li><p>使用 WriteStream对象 写入文件</p>\n<pre><code>  <span class=\"comment\">// 创建</span>\n  <span class=\"comment\">// var writable = fs.createWriteStream(path, [options])</span>\n  <span class=\"comment\">// options 可填的key有：flags/encoding/start</span>\n\n  <span class=\"comment\">// writable.write(chunk, [encoding], [callback])        // chunk 可为 Buffer/string</span>\n\n  <span class=\"comment\">// writable.end([chunk], [encoding], [callback])</span>\n  <span class=\"comment\">// 调用end方法结束写入</span>\n\n  <span class=\"comment\">// 将 file1.txt 的内容写入 file2.txt</span>\n  <span class=\"keyword\">var</span> file1 = fs.createReadStream(<span class=\"string\">'./file1.txt'</span>);\n  <span class=\"keyword\">var</span> file2 = fs.creatWriteStream(<span class=\"string\">'./file2.txt'</span>);\n  file1.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> </span>{\n      file2.write(data);\n  });\n  file1.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n      file2.end(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件写入完成'</span>);\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'共写入的 %d 字节数据'</span>, file2.bytesWritten);\n      });\n  });        \n</code></pre></li>\n</ul>\n<pre><code>    <span class=\"comment\">// 使用 pipe方法 写入数据</span>\n    <span class=\"comment\">// readStream.pipe(destination, [options])</span>\n    <span class=\"keyword\">var</span> file1 = fs.createReadStream(<span class=\"string\">'./file1.txt'</span>);\n    <span class=\"keyword\">var</span> file2 = fs.createWriteStream(<span class=\"string\">'./file2.txt'</span>);\n    <span class=\"comment\">// options 中的 end 设置为 false 表示不会自动关闭文件</span>\n    file1.pipe(file2, {end: <span class=\"literal\">false</span>});\n    <span class=\"comment\">// 手动关闭</span>\n    file1.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n        <span class=\"comment\">// 这样可以继续写入数据再关闭</span>\n        file2.end(<span class=\"string\">'我是被继续写入的数据'</span>);\n    });\n\n    <span class=\"comment\">// 取消写入</span>\n    <span class=\"comment\">// readStream.unpipe([destination])</span>\n</code></pre><h2 id=\"使用_path模块_对路径进行操作\">使用 path模块 对路径进行操作</h2>\n<pre><code>    <span class=\"comment\">// 将非标准路径转化为标准路径</span>\n    <span class=\"keyword\">var</span> unStdPath = <span class=\"string\">'./..//testFile.txt'</span>;\n    <span class=\"keyword\">var</span> stdPath = path.normalize(unStdPath);\n\n    <span class=\"comment\">// 将多个字符串拼接</span>\n    <span class=\"keyword\">var</span> newPath = path.<span class=\"keyword\">join</span>(__dirname, <span class=\"string\">'aaa'</span>, <span class=\"string\">'bbb'</span>, <span class=\"string\">'ccc'</span>);\n\n    <span class=\"comment\">// 解析出绝对路径</span>\n    path.resolve(path1, [path2])    \n\n    <span class=\"comment\">// 找出两个路径间的关系</span>\n    path.relative(<span class=\"keyword\">from</span>, <span class=\"keyword\">to</span>)\n\n    <span class=\"comment\">// 获取某路径中的目录名</span>\n    path.dirname(path1)\n\n    <span class=\"comment\">// 获取某路径中的文件名，去除 ext后缀        </span>\n    path.basename(path1, [ext])\n\n    <span class=\"comment\">// 获取某路径中的拓展名</span>\n    path.extname(path1)\n</code></pre>","source":"_posts/nodejs-fs模块操作文件系统.md","raw":"title: NODEJS-fs模块操作文件系统\n\ndate: 2014-05-09 21:19:42\n\ncategories: Node\n\ntags: [fs, path] \n\n---\n  \n## 使用 fs模块 对文件/目录进行操作\n\n- 读取文件内容\n\t\t\n\t\t// fs.readFile(filename, [options], callback) \n\t\t// options 中的 flag 默认为 r，表示读取文件\n\t\tfs.readFile('test.txt', function (err, data) {\n\t\t\tif(err) throw err;\n\t\t\tconsole.log('文件内容是：', data);\n\t\t})\n\t\t\n\t\t\n\t\t// fs.readFileSync(filename, [options]) \n\t\t// 同步方式读取\n\t\ttry {\n\t\t\tvar data = fs.readFileSync('test.txt');\n\t\t\tconsole.log('文件内容是：', data);\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\n<!--more-->\n\t\n\toptions 中的 flag 取值：r/r+/rs/w/wx/w+/wx+/a/ax/a+/ax+\n\n\toptions 中的 encoding 取值：utf8/ascii/base64\n\t\n- 写入文件内容\n\n\t\t// fs.writeFile(filename, data, [options], callback)\n\t\t// options 中的 flag 默认为 w，表示写入文件，mode 默认为 0666（可读写的读写权限）\n\t\tfs.writeFile('test.txt', '我是被写入的内容', function (err) {\n\t\t\tif (err) throw err;\n\t\t\tconsole.log('成功写入.')\n\t\t})\t\t\n\t\t\n\t\t// 同步方式写入\n\t\tfs.writeFile(filename, data, [options])\n\t\t\n\t\t// 将 data 添加到文件底部, flag 默认为 a\n\t\tfs.appendFile(filename, data, [options], callback)\n\t\t// 同步方式添加\n\t\tfs.appendFileSync(filename, data, [options])\n\t\n\toptions 中的 flag 和 encoding 与上同。\n\t\n\toptions 中的 mode 为表示读写权限的数字，默认为 0666 可读写\n\t\n\t写入的 data 可以是一个 Buffer\t\n\t\n- 在指定位置读写文件\n\n\t\tfs.open(filename, flags, [mode], function (err, fd){\n\t\t\t// 读\n\t\t\tfs.read(fd, buffer, offset, length, position, function(err, bytesRead, buffer){})\n\t\t\t// 写\n\t\t\tfs.write(fd, buffer, offset, length, position, function(err, written, buffer){})\n\t\t\t// 关闭\n\t\t\tfs.close(fd)\n\t\t})\n\t\t\n\n- 创建目录\n\n\t\t// fs.mkdir(path, [mode], callback)\n\t\t// mode 默认为 0777，表示可读可写\n\t\tfs.mkdir('./testDir', function (err) {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('目录创建成功')\n\t\t})\t\n- 读取目录\n\n\t\tfs.readdir('./testDir', function (err, files) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('读取目录失败')\n\t\t\t}\n\t\t\tconsole.log(files);\n\t\t})\t\n\t\t\n- 查看文件/目录信息\n\n\t\t// fs.fstat('testDir', function (err, stats) {\n\t\tfs.stat('testFile.txt', function (err, stats) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('读取文件信息失败')\n\t\t\t}\t\t\t\n\t\t\t// stats 是一个 Fs.Stats 对象\n\t\t\tconsole.log(stats);\n\t\t\t\n\t\t\tconsole.log('是否为文件：', stats.isFile);\n\t\t\tconsole.log('是否为目录：', stats.isDictionary);\n\t\t\tconsole.log('读写权限是：', stats.mode);\n\t\t\tconsole.log('文件大小是：', stats.size);\n\t\t\tconsole.log('访问时间是：', stats.atime);\n\t\t\tconsole.log('修改时间是：', stats.mtime);\n\t\t\tconsole.log('创建时间是：', stats.ctime);\n\t\t})\t\n\n- 检查文件/目录是否存在\n\n\t\tfs.exists('./testFile.txt', function (exists) {\n\t\t\tconsole.log('testFile.txt是否存在：', exists);\n\t\t})\t\n\n- 获取文件的绝对路径\n\n\t\tfs.realpath('./testFile.txt', function (err, resolvedPath) {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('文件的绝对路径是：', resolvedPath);\n\t\t})\n\t\t\n- 修改文件时间\n\n\t\t// fs.utimes(path, atime, mtime, callback)\n\t\tfs.utimes('./testFile.txt', new Date(), new Date(), function (err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('修改失败')\n\t\t\t}\n\t\t\tconsole.log('修改成功');\n\t\t})\t\n\t\n- 修改文件/目录的读取权限\n\n\t\t// fs.chmod(path, mode, callback)\n\t\t// 0600 表示所有者可读写，其他人不可\n\t\tfs.chmod('./testFile.txt', 0600, function (err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('修改失败');\n\t\t\t}\n\t\t\tconsole.log('修改成功');\n\t\t})\n\t\n- 移动/重命名文件\n\n\t\t// fs.rename(oldPath, newPath, callback);\t\t// oldPath 与 newPath 所在目录相同但文件名不同时，重命名\n\t\t// oldPath 与 newPath 所在目录不相同时，移动；若文件名不同，则移动后重命名\n\t\tfs.rename('./testFile.txt', './test/testNewFile.txt', function (err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('文件移动失败');\t\t\n\t\t\t}\n\t\t\tconsole.log('文件移动成功');\n\t\t})\n\t\t\n- 创建和删除硬连接\n\n\t新创建的硬连接与旧的硬连接会指向相同文件\n\t\n\t删除的硬连接若是最后一个，则删除这个文件\n\t\n\t\t// 创建\n\t\t// fs.link(srcPath, dstPath, callback);\n\t\tfs.line('./testFile.txt', './test/testNewFile.txt', function (err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('创建硬连接失败');\n\t\t\t}\n\t\t\tconsole.log('创建硬连接成功');\n\t\t})\t\n\t\t// 删除\n\t\tfs.unlink(path, callback);\n\n- 截断文件\n\n\t清除文件内容，后修改文件尺寸的操作\n\t\n\t\tfs.truncate(filename, len, callback)\n\t\t\n- 删除空目录\n\n\t\tfs.rmdir(path, callback);\n\t\t\n- 监视文件/目录\n\n\t\t// fs.watchFile(filename, [options], listener)\n\t\t// options 中的 interval 指多久检查一次，这里设定了 1小时\n\t\tfs.watchFile('./testFile.txt', {interval: 60*60*1000}, function (curr, prev) {\n\t\t\tif (Date.parse(prev.ctime) == 0) {\n\t\t\t\tconsole.log('文件被创建');\n\t\t\t} else if (Date.parse(curr.ctime) == 0) {\n\t\t\t\tconsole.log('文件被删除');\n\t\t\t} else if (Date.parse(prev.mtime) != Date.parse(curr.mtime)\n\t\t\t\tconsole.log('文件被修改');\n\t\t\t})\n\t\t})\t\t\t\n\t\t// 取消监视, 不指定listener则清空所有监视\n\t\tfs.unwatchFile(filename, [listener])\n\n- 使用 ReadStream对象 读取文件\n\n\t\t// 创建\n\t\t// fs.createReadStream(path, [options])\n\t\t// options 可填的key有：flags/encoding/autoClose/start/end\n\t\tvar file = fs.createReadStream('./testFile.txt');\n\t\tvar body = '';\n\t\t// 监听\n\t\tfile.on('open', function (fd) {\n\t\t\tconsole.log('文件被打开，开始读取...');\n\t\t});\n\t\tfile.on('data', function (data) {\n\t\t\tconsole.log('正在读取数据...');\n\t\t\tbody += data;\n\t\t});\n\t\tfile.on('end', function(){\n\t\t\tconsole.log('文件被读取完毕：');\n\t\t\tconsole.log(body);\n\t\t});\n\t\tfile.on('close', function () {\n\t\t\tconsole.log('文件已关闭');\n\t\t})\n\t\tfile.on('error', function (err) {\n\t\t\tconsole.log('文件读取出错');\n\t\t})\n\t\t\n\t\t// 手动出发暂停/恢复读取文件\n\t\t// file.pause();\n\t\t// file.resume();\n\n- 使用 WriteStream对象 写入文件\n\n\t\t// 创建\n\t\t// var writable = fs.createWriteStream(path, [options])\n\t\t// options 可填的key有：flags/encoding/start\n\t\t\n\t\t// writable.write(chunk, [encoding], [callback])\t\t// chunk 可为 Buffer/string\n\t\t\n\t\t// writable.end([chunk], [encoding], [callback])\n\t\t// 调用end方法结束写入\n\t\t\n\t\t// 将 file1.txt 的内容写入 file2.txt\n\t\tvar file1 = fs.createReadStream('./file1.txt');\n\t\tvar file2 = fs.creatWriteStream('./file2.txt');\n\t\tfile1.on('data', function (data) {\n\t\t\tfile2.write(data);\n\t\t});\n\t\tfile1.on('end', function () {\n\t\t\tfile2.end(function() {\n\t\t\t\tconsole.log('文件写入完成');\n\t\t\t\tconsole.log('共写入的 %d 字节数据', file2.bytesWritten);\n\t\t\t});\n\t\t});\t\t\n\t\n\t\n\t\t// 使用 pipe方法 写入数据\n\t\t// readStream.pipe(destination, [options])\n\t\tvar file1 = fs.createReadStream('./file1.txt');\n\t\tvar file2 = fs.createWriteStream('./file2.txt');\n\t\t// options 中的 end 设置为 false 表示不会自动关闭文件\n\t\tfile1.pipe(file2, {end: false});\n\t\t// 手动关闭\n\t\tfile1.on('end', function () {\n\t\t\t// 这样可以继续写入数据再关闭\n\t\t\tfile2.end('我是被继续写入的数据');\n\t\t});\n\t\t\n\t\t// 取消写入\n\t\t// readStream.unpipe([destination])\n\t\t\n\n## 使用 path模块 对路径进行操作\t\n\n\t\t// 将非标准路径转化为标准路径\n\t\tvar unStdPath = './..//testFile.txt';\n\t\tvar stdPath = path.normalize(unStdPath);\n\t\t\n\t\t// 将多个字符串拼接\n\t\tvar newPath = path.join(__dirname, 'aaa', 'bbb', 'ccc');\n\t\t\n\t\t// 解析出绝对路径\n\t\tpath.resolve(path1, [path2])\t\n\t\t\n\t\t// 找出两个路径间的关系\n\t\tpath.relative(from, to)\n\t\t\n\t\t// 获取某路径中的目录名\n\t\tpath.dirname(path1)\n\t\t\n\t\t// 获取某路径中的文件名，去除 ext后缀\t\t\n\t\tpath.basename(path1, [ext])\n\t\t\n\t\t// 获取某路径中的拓展名\n\t\tpath.extname(path1)\n\t\n\n\t\t\t\n\t\n\t\t\n\t\t\n\t\n\n\t\t\t\t\n\t\t\n\t\t\t\n\t\n\t\t\n","slug":"nodejs-fs模块操作文件系统","updated":1418908898000,"excerpt":"<h2 id=\"使用_fs模块_对文件/目录进行操作\">使用 fs模块 对文件/目录进行操作</h2>\n<ul>\n<li><p>读取文件内容</p>\n<pre><code>  <span class=\"comment\">// fs.readFile(filename, [options], callback) </span>\n  <span class=\"comment\">// options 中的 flag 默认为 r，表示读取文件</span>\n  fs.readFile(<span class=\"string\">'test.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, data)</span> </span>{\n      <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件内容是：'</span>, data);\n  })\n</code></pre></li>\n</ul>\n<pre><code>    <span class=\"comment\">// fs.readFileSync(filename, [options]) </span>\n    <span class=\"comment\">// 同步方式读取</span>\n    <span class=\"keyword\">try</span> {\n        <span class=\"keyword\">var</span> data = fs.readFileSync(<span class=\"string\">'test.txt'</span>);\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件内容是：'</span>, data);\n    } <span class=\"keyword\">catch</span> (err) {\n        <span class=\"keyword\">throw</span> err;\n    }\n</code></pre>","_id":"08ovdk9i2x79zk8j","comments":true,"layout":"post","photos":[],"link":""},{"title":"NODEJS-编写命令行脚本","date":1401844338000,"categories":["f1q8dl6bbauvoh8x"],"tags":["1r19h0mfxhgs7nzc"],"content":"<h1 id=\"在Shell中运行Node程序\">在Shell中运行Node程序</h1>\n<p>方法1 - 指定node程序和需要运行的脚本：</p>\n<pre><code>    <span class=\"variable\">$ </span>node app.js\n</code></pre><p>方法2 - 使用 #! 将文件声明为可执行文件：</p>\n<pre><code>    <span class=\"comment\">// app.js #!表示调用解释器，执行 /usr/local/bin/node 的指令</span>\n\n    <span class=\"comment\">// 静态设置node程序路径 通过 $ which node 查询到</span>\n    #!<span class=\"regexp\">/usr/</span>local/bin/node        \n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello Lai'</span>)\n\n    <span class=\"comment\">// 动态设置node程序路径，使用 env 指令查找 PATH 环境变量存储的 node 路径</span>\n    #!<span class=\"regexp\">/usr/</span>bin/env node\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello Lai'</span>)\n</code></pre><p>同时记得要将文件权限改为可执行：</p>\n<pre><code>    <span class=\"char\">$ </span>chmod <span class=\"number\">755</span> app.js\n    // 或\n    <span class=\"char\">$ </span>chmod +x app.js\n</code></pre><p>接着直接运行脚本就可以了：</p>\n<pre><code>    <span class=\"variable\">$ </span>./app.js\n</code></pre><a id=\"more\"></a>\n\n<h1 id=\"向脚本传递参数\">向脚本传递参数</h1>\n<p>方法1 - 在指定node程序时，直接传入参数：</p>\n<pre><code>   <span class=\"comment\"> // app.js</span>\n    console.<span class=\"built_in\">log</span>(<span class=\"built_in\">process</span>.argv)\n\n   <span class=\"comment\"> // 启动程序时传参</span>\n    $ node app.js <span class=\"string\">\"argv1\"</span> <span class=\"string\">\"argv2\"</span> <span class=\"string\">\"argv3...\"</span> \n</code></pre><p>方法2 - 使用 #! 启动时，参数会直接传递给程序</p>\n<pre><code>    <span class=\"comment\">// app.js</span>\n    #!<span class=\"regexp\">/usr/</span>local/bin/node        \n    <span class=\"built_in\">console</span>.log(process.argv);\n\n    <span class=\"comment\">// 执行脚本时自动传入</span>\n    $ ./app.js <span class=\"string\">\"argv1\"</span> <span class=\"string\">\"argv2\"</span> <span class=\"string\">\"argv3...\"</span>\n</code></pre><h1 id=\"使用同步方式处理文件\">使用同步方式处理文件</h1>\n<p>命令行脚本，同步方式处理非常重要。</p>\n<h1 id=\"处理标准输入和输出\">处理标准输入和输出</h1>\n<p>Node 中的 console.log 和 console.error 等价于：</p>\n<pre><code>    process.stdout.<span class=\"keyword\">write</span>(text + <span class=\"string\">'\\n'</span>);\n    process.stderr.<span class=\"keyword\">write</span>(text + <span class=\"string\">'\\n'</span>);\n</code></pre><ul>\n<li><p>缓冲输入输出</p>\n<p>  即逐行输入输出，按下Enter回车键才从数据流中读取数据，通过 readable 事件实现：</p>\n<pre><code>  process.stdin.<span class=\"keyword\">on</span>(<span class=\"string\">'readable'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n      var data = process.stdin.<span class=\"keyword\">read</span>();\n\n      console.<span class=\"built_in\">log</span>(<span class=\"string\">'输入的是：'</span>, data);\n  })        \n</code></pre><p>  默认情况下，输入流处于暂停状态，调用 resume 函数 才能从输入流中接收数据</p>\n<pre><code>  process.<span class=\"literal\">stdin</span>.resume();\n</code></pre></li>\n</ul>\n<pre><code>示例 - 将逐行输入的字符串进行md5处理后再输出：\n\n    process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'Hello 小赖！\\n'</span>);\n    process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'按 Ctrl+C 或输入空行退出\\n'</span>);\n    process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'请输入：'</span>);\n\n    process.<span class=\"keyword\">stdin</span>.on(<span class=\"string\">'readable'</span>, function () {\n        <span class=\"keyword\">var</span> data = process.<span class=\"keyword\">stdin</span>.read();\n        if (data == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;\n        <span class=\"comment\">// 输入空行退出</span>\n        if (data == <span class=\"string\">'\\n'</span>) process.exit(<span class=\"number\">0</span>);\n\n        <span class=\"comment\">// 依赖模块</span>\n        <span class=\"keyword\">var</span> hash = require(<span class=\"string\">'crypto'</span>).createHash(<span class=\"string\">'md5'</span>);\n        hash.update(data);\n\n        process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'加密后: '</span> + hash.digest(<span class=\"string\">'hex'</span>) + <span class=\"string\">'\\n'</span>);\n\n        <span class=\"comment\">// 继续输入</span>\n        process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'\\n请继续输入：'</span>);\n    });\n\n    <span class=\"comment\">// 设置编码</span>\n    process.<span class=\"keyword\">stdin</span>.setEncoding(<span class=\"string\">'utf8'</span>);\n    <span class=\"comment\">// resume 方法可保证只有用户手动才能终止程序</span>\n    process.<span class=\"keyword\">stdin</span>.resume();    \n</code></pre><ul>\n<li><p>无缓冲输入输出</p>\n<p>  即逐字输入输出，需要开启stdin.setRawMode来启动原始模式</p>\n<pre><code>    #!/usr/bin/env node\n\n    process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'Hello 小赖！\\n'</span>);\n    process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'按 Ctrl+C 或输入空行退出\\n'</span>);\n    process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'请输入：'</span>);\n\n    process.<span class=\"keyword\">stdin</span>.on(<span class=\"string\">'readable'</span>, function () {\n        <span class=\"keyword\">var</span> data = process.<span class=\"keyword\">stdin</span>.read();\n  <span class=\"comment\">// console.log(data);</span>\n\n  if (data == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;\n\n  <span class=\"comment\">// 未启用原始模式</span>\n  if (!process.<span class=\"keyword\">stdin</span>.isRaw) {\n    if (data == <span class=\"string\">'\\n'</span>) {\n      process.exit(<span class=\"number\">0</span>);\n    }\n\n    process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'请选择一个加密类型 '</span>);\n    process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'1-md5, 2-sha1, 3-sha256, 4-sha512'</span>);\n    process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'\\n请选择数字[1-4]：'</span>);\n\n    <span class=\"comment\">// 打开原始模式</span>\n    process.<span class=\"keyword\">stdin</span>.setRawMode(<span class=\"literal\">true</span>);\n  <span class=\"comment\">// 启用原始模式</span>\n  } <span class=\"keyword\">else</span> {\n    <span class=\"keyword\">var</span> alg;\n    <span class=\"comment\">// 未按下 CTRL+C</span>\n    if (data != <span class=\"string\">'^C'</span>) {\n      <span class=\"keyword\">var</span> c = parseInt(data);\n      <span class=\"keyword\">switch</span> (c) {\n      <span class=\"keyword\">case</span> <span class=\"number\">1</span>: alg = <span class=\"string\">'md5'</span>; <span class=\"keyword\">break</span>;\n      <span class=\"keyword\">case</span> <span class=\"number\">2</span>: alg = <span class=\"string\">'sha1'</span>; <span class=\"keyword\">break</span>;\n      <span class=\"keyword\">case</span> <span class=\"number\">3</span>: alg = <span class=\"string\">'sha256'</span>; <span class=\"keyword\">break</span>;\n      <span class=\"keyword\">case</span> <span class=\"number\">4</span>: alg = <span class=\"string\">'sha512'</span>; <span class=\"keyword\">break</span>;\n      }\n\n      <span class=\"comment\">// 使用用户选择的算法进行加密</span>\n      if (alg) {\n        <span class=\"comment\">// 依赖模块</span>\n        <span class=\"keyword\">var</span> hash = require(<span class=\"string\">'crypto'</span>).createHash(alg);\n        hash.update(data);\n        process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'使用'</span>+ alg +<span class=\"string\">'加密后: '</span> + hash.digest(<span class=\"string\">'hex'</span>) + <span class=\"string\">'\\n'</span>);\n        <span class=\"comment\">// 继续输入</span>\n        process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'\\n请继续输入：'</span>);\n        <span class=\"comment\">// 关闭原始模式</span>\n        process.<span class=\"keyword\">stdin</span>.setRawMode(<span class=\"literal\">false</span>);\n      } <span class=\"keyword\">else</span> {\n        <span class=\"comment\">// 未输入算法类型</span>\n        process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'请选择一个加密类型 '</span>);\n        process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'1-md5, 2-sha1, 3-sha256, 4-sha512'</span>);\n        process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'\\n请选择数字[1-4]：'</span>);\n      }\n    <span class=\"comment\">// 按下 CTRL+C 退出</span>\n    } <span class=\"keyword\">else</span> {\n      process.<span class=\"keyword\">stdout</span>.write(<span class=\"string\">'\\n请输入：'</span>);\n      <span class=\"comment\">// 关闭原始模式</span>\n      process.<span class=\"keyword\">stdin</span>.setRawMode(<span class=\"literal\">false</span>);\n    }\n  }\n});\n\n    <span class=\"comment\">// 设置编码</span>\n    process.<span class=\"keyword\">stdin</span>.setEncoding(<span class=\"string\">'utf8'</span>);\n    <span class=\"comment\">// 继续</span>\n    process.<span class=\"keyword\">stdin</span>.resume();\n</code></pre></li>\n</ul>\n<h1 id=\"使用_readline_模块\">使用 readline 模块</h1>\n<p>使用这个模块来逐行读取文件</p>\n<pre><code>官方样例：\n\n    <span class=\"keyword\">var</span> readline = <span class=\"built_in\">require</span>(<span class=\"string\">'readline'</span>);\n    <span class=\"keyword\">var</span> rl = readline(<span class=\"string\">\"./somefile.txt\"</span>);\n    rl.on(<span class=\"string\">\"line\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(line)</span></span>{\n        <span class=\"comment\">//do something with the line of text</span>\n    });\n    rl.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(e)</span></span>{\n       <span class=\"comment\">//something went wrong</span>\n    });        \n</code></pre><h1 id=\"使用_conmmander_模块\">使用 conmmander 模块</h1>\n<p>方便快速构建命令行工具</p>\n<h1 id=\"!/usr/bin/env_node\">!/usr/bin/env node</h1>\n<pre><code>官方样例：\n\n    <span class=\"comment\">/**\n     * Module dependencies.\n     */</span>\n\n    <span class=\"keyword\">var</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);\n\n    program\n      .version(<span class=\"string\">'0.0.1'</span>)\n      .option(<span class=\"string\">'-p, --peppers'</span>, <span class=\"string\">'Add peppers'</span>)\n      .option(<span class=\"string\">'-P, --pineapple'</span>, <span class=\"string\">'Add pineapple'</span>)\n      .option(<span class=\"string\">'-b, --bbq'</span>, <span class=\"string\">'Add bbq sauce'</span>)\n      .option(<span class=\"string\">'-c, --cheese [type]'</span>, <span class=\"string\">'Add the specified type of cheese [marble]'</span>, <span class=\"string\">'marble'</span>)\n      .parse(process.argv);\n\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'you ordered a pizza with:'</span>);\n    <span class=\"keyword\">if</span> (program.peppers) <span class=\"built_in\">console</span>.log(<span class=\"string\">'  - peppers'</span>);\n    <span class=\"keyword\">if</span> (program.pineapple) <span class=\"built_in\">console</span>.log(<span class=\"string\">'  - pineapple'</span>);\n    <span class=\"keyword\">if</span> (program.bbq) <span class=\"built_in\">console</span>.log(<span class=\"string\">'  - bbq'</span>);\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'  - %s cheese'</span>, program.cheese);\n\n使用 conmmander 模块，调用Github的API写一个简单的 repo 查询工具：\n\n    #!<span class=\"regexp\">/usr/</span>bin/env node\n\n    <span class=\"comment\">// 使用 commander 模块快速构建命令行工具应用</span>\n    <span class=\"comment\">// 使用 request 模块发起网络请求</span>\n    <span class=\"comment\">// 使用 chalk 模块美化命令行输出</span>\n    <span class=\"keyword\">var</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);\n    <span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);\n    <span class=\"keyword\">var</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">'chalk'</span>);\n\n    program\n      .version(<span class=\"string\">'0.0.1'</span>)\n      .usage(<span class=\"string\">'[options] &lt;keywords&gt;'</span>)\n      .option(<span class=\"string\">'-o, --owner [name]'</span>, <span class=\"string\">'Filter by the repositories owner'</span>)\n      .option(<span class=\"string\">'-l, --language [language]'</span>, <span class=\"string\">'Filter by the repositories language'</span>)\n      .option(<span class=\"string\">'-f, --full'</span>, <span class=\"string\">'Full output without any styling'</span>)\n      .parse(process.argv);\n\n    <span class=\"comment\">// console.log(program.args.length)</span>\n    <span class=\"comment\">// 未输入参数，则输出帮助</span>\n    <span class=\"keyword\">if</span> (!program.args.length) {\n      program.help();\n      <span class=\"comment\">// 带错误退出</span>\n      process.exit(<span class=\"number\">1</span>);\n    } <span class=\"keyword\">else</span> {\n      <span class=\"keyword\">var</span> keywords = program.args;\n      <span class=\"keyword\">var</span> url = <span class=\"string\">'https://api.github.com/search/repositories?sort=stars&amp;order=desc&amp;q='</span>+keywords;\n\n      <span class=\"comment\">// 处理输入的 --option</span>\n      <span class=\"keyword\">if</span>(program.owner) {\n            url = url + <span class=\"string\">'+user:'</span> + program.owner;\n      }\n\n      <span class=\"keyword\">if</span>(program.language) {\n          url = url + <span class=\"string\">'+language:'</span> + program.language;\n      }\n\n\n      <span class=\"comment\">// console.log('Keywords: ' + program.args);</span>\n      <span class=\"keyword\">var</span> options = {\n        method: <span class=\"string\">'GET'</span>,\n        headers: {\n          <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'laispace'</span>\n        },\n        url: url\n      }\n      request(options, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, res, data)</span> </span>{\n        <span class=\"keyword\">if</span> (err) {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error: '</span> + err);\n        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!err &amp;&amp; res.statusCode == <span class=\"number\">200</span>) {\n          <span class=\"keyword\">var</span> body = <span class=\"built_in\">JSON</span>.parse(data);\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'查询结果 '</span>+ body.items.length +<span class=\"string\">'\\n'</span>);\n          <span class=\"keyword\">if</span> (program.full) {\n            <span class=\"comment\">// 无过滤输出</span>\n            <span class=\"built_in\">console</span>.log(body);\n          } <span class=\"keyword\">else</span> {\n              <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; body.items.length; i++) {\n                <span class=\"built_in\">console</span>.log(chalk.cyan.bold.underline(<span class=\"string\">'Name: '</span> + body.items[i].name));\n                <span class=\"built_in\">console</span>.log(chalk.magenta.bold(<span class=\"string\">'Owner: '</span> + body.items[i].owner.login));\n                <span class=\"built_in\">console</span>.log(chalk.grey(<span class=\"string\">'Desc: '</span> + body.items[i].description));\n                <span class=\"built_in\">console</span>.log(chalk.grey(<span class=\"string\">'Clone url: '</span> + body.items[i].clone_url + <span class=\"string\">'\\n'</span>));\n              }\n\n              <span class=\"comment\">// 无错误退出</span>\n              process.exit(<span class=\"number\">0</span>);\n          }\n        }\n      });\n\n    }\n\n记得将gitsearch.js的权限修改为可执行.\n\n测试命令：\n\n    <span class=\"comment\">// repo名为lai的repo</span>\n    $ ./gitsearch.js lai\n    <span class=\"comment\">// 作者为laispace</span>\n    $ ./gitsearch.js lai -o laispace\n    <span class=\"comment\">// 语言分类为 javascript</span>\n    $ ./gitsearch.js lai -o laispace -l javascript\n    <span class=\"comment\">// 不过滤输出</span>\n    $ ./gitsearch.js lai -o laispace -l javascript -f\n    <span class=\"comment\">// 将结果复制到剪贴板</span>\n    $ ./gitsearch.js lai -o laispace | pbcopy        <span class=\"comment\">// 将结果分页输出（vim模式）</span>\n    $ ./gitsearch.js lai -o laispace | less\n    <span class=\"comment\">// 将结果正则匹配后输出，这里将输出匹配有 'node' 的信息</span>\n    $ ./gitsearch.js lai -o laispace | grep node\n</code></pre><h3 id=\"参考资料\">参考资料</h3>\n<ol>\n<li><a href=\"https://www.npmjs.org/package/readline\" target=\"_blank\" rel=\"external\">readline 模块</a></li>\n<li><a href=\"https://github.com/visionmedia/commander.js/\" target=\"_blank\" rel=\"external\">commander 模块</a></li>\n<li><a href=\"https://www.npmjs.org/package/chalk\" target=\"_blank\" rel=\"external\">chalk 模块</a></li>\n<li><a href=\"https://developer.github.com/v3/\" target=\"_blank\" rel=\"external\">Gtihub API</a></li>\n<li><a href=\"http://cruft.io/posts/node-command-line-utilities/\" target=\"_blank\" rel=\"external\">Command-line utilities with Node.js</a></li>\n</ol>\n","source":"_posts/nodejs-编写命令行脚本.md","raw":"title: NODEJS-编写命令行脚本\n\ndate: 2014-06-04 09:12:18\n\ncategories: Node\n\ntags: \n    - node\n\n---\n\n\n# 在Shell中运行Node程序\n\n方法1 - 指定node程序和需要运行的脚本：\n\t\n\t\t$ node app.js\n\t\t\n方法2 - 使用 #! 将文件声明为可执行文件：\n\n\t\t// app.js #!表示调用解释器，执行 /usr/local/bin/node 的指令\n\t\n\t\t// 静态设置node程序路径 通过 $ which node 查询到\n\t\t#!/usr/local/bin/node\t\t\n\t\tconsole.log('Hello Lai')\n\t\t\n\t\t// 动态设置node程序路径，使用 env 指令查找 PATH 环境变量存储的 node 路径\n\t\t#!/usr/bin/env node\n\t\tconsole.log('Hello Lai')\n\t\t\n同时记得要将文件权限改为可执行：\n\n\t\t$ chmod 755 app.js\n\t\t// 或\n\t\t$ chmod +x app.js\n\t\t\n接着直接运行脚本就可以了：\n\n\t\t$ ./app.js\n\t\t\n<!-- more -->\n\t\t\n# 向脚本传递参数\n\n方法1 - 在指定node程序时，直接传入参数：\n\n\t\t// app.js\n\t\tconsole.log(process.argv)\n\n\t\t// 启动程序时传参\n\t\t$ node app.js \"argv1\" \"argv2\" \"argv3...\" \n\t\t\t\t\n方法2 - 使用 #! 启动时，参数会直接传递给程序\n\t\t\n\t\t// app.js\n\t\t#!/usr/local/bin/node\t\t\n\t\tconsole.log(process.argv);\n\t\t\n\t\t// 执行脚本时自动传入\n\t\t$ ./app.js \"argv1\" \"argv2\" \"argv3...\"\n\t\t\n\n\t\t\n# 使用同步方式处理文件\n\n命令行脚本，同步方式处理非常重要。\n\n\n# 处理标准输入和输出\n\nNode 中的 console.log 和 console.error 等价于：\n\n\t\tprocess.stdout.write(text + '\\n');\n\t\tprocess.stderr.write(text + '\\n');\n\t\t\n\n- 缓冲输入输出\n\n\t即逐行输入输出，按下Enter回车键才从数据流中读取数据，通过 readable 事件实现：\n\t\n\t\tprocess.stdin.on('readable', function () {\n\t\t\tvar data = process.stdin.read();\n\t\t\t\n\t\t\tconsole.log('输入的是：', data);\n\t\t})\t\t\n\t\t\n\t默认情况下，输入流处于暂停状态，调用 resume 函数 才能从输入流中接收数据\n\t\n\t\tprocess.stdin.resume();\n\t\t\n\n\t示例 - 将逐行输入的字符串进行md5处理后再输出：\n\t\n\t\tprocess.stdout.write('Hello 小赖！\\n');\n\t\tprocess.stdout.write('按 Ctrl+C 或输入空行退出\\n');\n\t\tprocess.stdout.write('请输入：');\n\t\t\n\t\tprocess.stdin.on('readable', function () {\n\t\t\tvar data = process.stdin.read();\n\t\t\tif (data == null) return;\n\t\t\t// 输入空行退出\n\t\t\tif (data == '\\n') process.exit(0);\n\t\t\t\n\t\t\t// 依赖模块\n\t\t\tvar hash = require('crypto').createHash('md5');\n\t\t\thash.update(data);\n\t\t\t\n\t\t\tprocess.stdout.write('加密后: ' + hash.digest('hex') + '\\n');\n\t\t\n\t\t\t// 继续输入\n\t\t\tprocess.stdout.write('\\n请继续输入：');\n\t\t});\n\t\t\n\t\t// 设置编码\n\t\tprocess.stdin.setEncoding('utf8');\n\t\t// resume 方法可保证只有用户手动才能终止程序\n\t\tprocess.stdin.resume();\t\n\t\t\t\t\t\t\n- 无缓冲输入输出\n\n\t即逐字输入输出，需要开启stdin.setRawMode来启动原始模式\n\t\n      \t#!/usr/bin/env node\n      \t\n  \t\tprocess.stdout.write('Hello 小赖！\\n');\n  \t\tprocess.stdout.write('按 Ctrl+C 或输入空行退出\\n');\n  \t\tprocess.stdout.write('请输入：');\n\n  \t\tprocess.stdin.on('readable', function () {\n  \t\t\tvar data = process.stdin.read();\n        // console.log(data);\n\n        if (data == null) return;\n\n        // 未启用原始模式\n        if (!process.stdin.isRaw) {\n          if (data == '\\n') {\n            process.exit(0);\n          }\n\n          process.stdout.write('请选择一个加密类型 ');\n          process.stdout.write('1-md5, 2-sha1, 3-sha256, 4-sha512');\n          process.stdout.write('\\n请选择数字[1-4]：');\n\n          // 打开原始模式\n          process.stdin.setRawMode(true);\n        // 启用原始模式\n        } else {\n          var alg;\n          // 未按下 CTRL+C\n          if (data != '^C') {\n            var c = parseInt(data);\n            switch (c) {\n            case 1: alg = 'md5'; break;\n            case 2: alg = 'sha1'; break;\n            case 3: alg = 'sha256'; break;\n            case 4: alg = 'sha512'; break;\n            }\n\n            // 使用用户选择的算法进行加密\n            if (alg) {\n              // 依赖模块\n              var hash = require('crypto').createHash(alg);\n              hash.update(data);\n              process.stdout.write('使用'+ alg +'加密后: ' + hash.digest('hex') + '\\n');\n              // 继续输入\n              process.stdout.write('\\n请继续输入：');\n              // 关闭原始模式\n              process.stdin.setRawMode(false);\n            } else {\n              // 未输入算法类型\n              process.stdout.write('请选择一个加密类型 ');\n              process.stdout.write('1-md5, 2-sha1, 3-sha256, 4-sha512');\n              process.stdout.write('\\n请选择数字[1-4]：');\n            }\n          // 按下 CTRL+C 退出\n          } else {\n            process.stdout.write('\\n请输入：');\n            // 关闭原始模式\n            process.stdin.setRawMode(false);\n          }\n        }\n      });\n\n  \t\t// 设置编码\n  \t\tprocess.stdin.setEncoding('utf8');\n  \t\t// 继续\n  \t\tprocess.stdin.resume();\n\t\t\t\n\n# 使用 readline 模块\n\n使用这个模块来逐行读取文件\n\n\t官方样例：\n\t\n\t\tvar readline = require('readline');\n\t\tvar rl = readline(\"./somefile.txt\");\n\t    rl.on(\"line\", function (line){\n\t\t    //do something with the line of text\n\t\t});\n\t    rl.on('error', function (e){\n\t\t   //something went wrong\n\t    });\t\t\n\n\n\n# 使用 conmmander 模块\n\n方便快速构建命令行工具\n\n#!/usr/bin/env node\n\n\t官方样例：\n\t\n\t\t/**\n\t\t * Module dependencies.\n\t\t */\n\n\t\tvar program = require('commander');\n\n\t\tprogram\n\t\t  .version('0.0.1')\n\t\t  .option('-p, --peppers', 'Add peppers')\n\t\t  .option('-P, --pineapple', 'Add pineapple')\n\t\t  .option('-b, --bbq', 'Add bbq sauce')\n\t\t  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')\n\t\t  .parse(process.argv);\n\n\t\tconsole.log('you ordered a pizza with:');\n\t\tif (program.peppers) console.log('  - peppers');\n\t\tif (program.pineapple) console.log('  - pineapple');\n\t\tif (program.bbq) console.log('  - bbq');\n\t\tconsole.log('  - %s cheese', program.cheese);\n\t\t\n\t使用 conmmander 模块，调用Github的API写一个简单的 repo 查询工具：\n\n        #!/usr/bin/env node\n\n        // 使用 commander 模块快速构建命令行工具应用\n        // 使用 request 模块发起网络请求\n        // 使用 chalk 模块美化命令行输出\n        var program = require('commander');\n        var request = require('request');\n        var chalk = require('chalk');\n\n        program\n          .version('0.0.1')\n          .usage('[options] <keywords>')\n          .option('-o, --owner [name]', 'Filter by the repositories owner')\n          .option('-l, --language [language]', 'Filter by the repositories language')\n          .option('-f, --full', 'Full output without any styling')\n          .parse(process.argv);\n\n        // console.log(program.args.length)\n        // 未输入参数，则输出帮助\n        if (!program.args.length) {\n          program.help();\n          // 带错误退出\n          process.exit(1);\n        } else {\n          var keywords = program.args;\n          var url = 'https://api.github.com/search/repositories?sort=stars&order=desc&q='+keywords;\n\n          // 处理输入的 --option\n          if(program.owner) {\n                url = url + '+user:' + program.owner;\n          }\n\n          if(program.language) {\n              url = url + '+language:' + program.language;\n          }\n\n\n          // console.log('Keywords: ' + program.args);\n          var options = {\n            method: 'GET',\n            headers: {\n              'User-Agent': 'laispace'\n            },\n            url: url\n          }\n          request(options, function (err, res, data) {\n            if (err) {\n              console.log('Error: ' + err);\n            } else if (!err && res.statusCode == 200) {\n              var body = JSON.parse(data);\n              console.log('查询结果 '+ body.items.length +'\\n');\n              if (program.full) {\n                // 无过滤输出\n                console.log(body);\n              } else {\n                  for(var i = 0; i < body.items.length; i++) {\n                    console.log(chalk.cyan.bold.underline('Name: ' + body.items[i].name));\n                    console.log(chalk.magenta.bold('Owner: ' + body.items[i].owner.login));\n                    console.log(chalk.grey('Desc: ' + body.items[i].description));\n                    console.log(chalk.grey('Clone url: ' + body.items[i].clone_url + '\\n'));\n                  }\n\n                  // 无错误退出\n                  process.exit(0);\n              }\n            }\n          });\n\n        }\n\n\t记得将gitsearch.js的权限修改为可执行.\n\t\n\t测试命令：\n\t\t\n\t\t// repo名为lai的repo\n\t\t$ ./gitsearch.js lai\n\t\t// 作者为laispace\n\t\t$ ./gitsearch.js lai -o laispace\n\t\t// 语言分类为 javascript\n\t\t$ ./gitsearch.js lai -o laispace -l javascript\n\t\t// 不过滤输出\n\t\t$ ./gitsearch.js lai -o laispace -l javascript -f\n\t\t// 将结果复制到剪贴板\n\t\t$ ./gitsearch.js lai -o laispace | pbcopy\t\t// 将结果分页输出（vim模式）\n\t\t$ ./gitsearch.js lai -o laispace | less\n\t\t// 将结果正则匹配后输出，这里将输出匹配有 'node' 的信息\n\t\t$ ./gitsearch.js lai -o laispace | grep node\n\t\t\n\t\t\n\t\t\t\t\t\n### 参考资料\n\n1. [readline 模块](https://www.npmjs.org/package/readline)\n2. [commander 模块](https://github.com/visionmedia/commander.js/)\n3. [chalk 模块](https://www.npmjs.org/package/chalk)\n4. [Gtihub API](https://developer.github.com/v3/)\n4. [Command-line utilities with Node.js](http://cruft.io/posts/node-command-line-utilities/)\n\t\n\t\t\n\t\t\n\n\n\t\t\t\t\n\t\t\n\n\t\t\t\t\t\t","slug":"nodejs-编写命令行脚本","updated":1418908898000,"excerpt":"<h1 id=\"在Shell中运行Node程序\">在Shell中运行Node程序</h1>\n<p>方法1 - 指定node程序和需要运行的脚本：</p>\n<pre><code>    <span class=\"variable\">$ </span>node app.js\n</code></pre><p>方法2 - 使用 #! 将文件声明为可执行文件：</p>\n<pre><code>    <span class=\"comment\">// app.js #!表示调用解释器，执行 /usr/local/bin/node 的指令</span>\n\n    <span class=\"comment\">// 静态设置node程序路径 通过 $ which node 查询到</span>\n    #!<span class=\"regexp\">/usr/</span>local/bin/node        \n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello Lai'</span>)\n\n    <span class=\"comment\">// 动态设置node程序路径，使用 env 指令查找 PATH 环境变量存储的 node 路径</span>\n    #!<span class=\"regexp\">/usr/</span>bin/env node\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello Lai'</span>)\n</code></pre><p>同时记得要将文件权限改为可执行：</p>\n<pre><code>    <span class=\"char\">$ </span>chmod <span class=\"number\">755</span> app.js\n    // 或\n    <span class=\"char\">$ </span>chmod +x app.js\n</code></pre><p>接着直接运行脚本就可以了：</p>\n<pre><code>    <span class=\"variable\">$ </span>./app.js\n</code></pre>","_id":"wipkjyhmh00olvw1","comments":true,"layout":"post","photos":[],"link":""},{"title":"NODEJS-进程与子进程","date":1401950449000,"categories":["f1q8dl6bbauvoh8x"],"tags":["lpay8ajzjtzrtm3e","xzgcz0yy9e9b355w","phe2lff36se0m9i9"],"content":"<p>在操作系统中，每一个程序都是一个进程类的实例对象。</p>\n<h1 id=\"进程信息\">进程信息</h1>\n<p>在 NodeJS 中，使用 process 代表 NodeJS 应用程序。</p>\n<h2 id=\"进程属性\">进程属性</h2>\n<pre><code>   <span class=\"comment\"> // 执行程序的绝对路径</span>\n    <span class=\"built_in\">process</span>.execPath\n\n   <span class=\"comment\"> // NodeJS版本号</span>\n    <span class=\"built_in\">process</span>.<span class=\"built_in\">version</span>\n\n   <span class=\"comment\"> // NodeJS 及其依赖的版本号</span>\n    <span class=\"built_in\">process</span>.versions\n\n   <span class=\"comment\"> // 运行平台</span>\n    <span class=\"built_in\">process</span>.<span class=\"built_in\">platform</span>\n\n   <span class=\"comment\"> // 一个标准输入流对象</span>\n    <span class=\"built_in\">process</span>.<span class=\"keyword\">stdin</span>\n   <span class=\"comment\"> // 恢复读取标准输入流数据</span>\n    <span class=\"built_in\">process</span>.<span class=\"keyword\">stdin</span>.resume()\n\n   <span class=\"comment\"> // 一个标准输出流对象</span>\n    <span class=\"built_in\">process</span>.<span class=\"keyword\">stdout</span>\n\n   <span class=\"comment\"> // 一个标准错误流对象</span>\n    <span class=\"built_in\">process</span>.<span class=\"keyword\">stderr</span>\n\n   <span class=\"comment\"> // 参数列表</span>\n    <span class=\"built_in\">process</span>.argv\n\n   <span class=\"comment\"> // 环境变量</span>\n    <span class=\"built_in\">process</span>.env\n\n   <span class=\"comment\"> // 配置信息</span>\n    <span class=\"built_in\">process</span>.config\n\n   <span class=\"comment\"> // 进程 id</span>\n    <span class=\"built_in\">process</span>.pid\n\n   <span class=\"comment\"> // 命令行窗口的标题</span>\n    <span class=\"built_in\">process</span>.title\n\n   <span class=\"comment\"> // 处理器架构</span>\n    <span class=\"built_in\">process</span>.arch\n</code></pre><a id=\"more\"></a>        \n\n<h2 id=\"进程方法：\">进程方法：</h2>\n<pre><code>    <span class=\"comment\">// 进程内存使用量</span>\n    process.memoryUsage()        \n\n    <span class=\"comment\">// 将callback函数推迟执行</span>\n    process.nextTick(callback)\n    <span class=\"comment\">// 示例：</span>\n    <span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);\n    <span class=\"keyword\">var</span> finish = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件读取完成'</span>)\n    }\n    process.nextTick(finish);\n    <span class=\"built_in\">console</span>.log(fs.readFileSync(<span class=\"string\">'./test.txt'</span>).toString());\n\n    <span class=\"comment\">// 发出 SIGABRT 新号，终止进程    </span>\n    process.abort()\n\n    <span class=\"comment\">// 改变程序使用的当前目录</span>\n    process.chdir(directory)\n\n    <span class=\"comment\">// 返回当前目录</span>\n    process.cwd()\n\n    <span class=\"comment\">// 退出程序进程，code 为 0 表示正常退出</span>\n    process.exit([code])\n\n    <span class=\"comment\">// 获取 group id</span>\n    process.getgid()\n    <span class=\"comment\">// 设置</span>\n    process.setgid(id)\n\n    <span class=\"comment\">// 获取 user id</span>\n    process.getuid()\n    <span class=\"comment\">// 设置</span>\n    process.setuid(id)\n\n    <span class=\"comment\">// 获取附属组 id 构成的数组</span>\n    process.getgroups()\n    <span class=\"comment\">// 设置</span>\n    process.setgroups(groups)\n\n    <span class=\"comment\">// 指定归属组来初始化 /etc/group 组列表</span>\n    process.initgroups(user, extra_group)\n\n    <span class=\"comment\">// 向一个进程发送信号, signal 默认为 SIGTERM 表示终止进程</span>\n    process.kill(pid, [signal])\n\n    <span class=\"comment\">// 读取或修改运行程序进程的文件的权限掩码</span>\n    process.unmash([mask])\n\n    <span class=\"comment\">// 读取程序当前运行时间</span>\n    process.uptime()\n\n    <span class=\"comment\">// 测试一个代码段的运行时间</span>\n    process.hrtime()\n    <span class=\"comment\">// 示例：</span>\n    <span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);\n    <span class=\"keyword\">var</span> time = process.hrtime();\n    <span class=\"keyword\">var</span> data = fs.readFileSync(<span class=\"string\">'./test.txt'</span>);\n    <span class=\"keyword\">var</span> diff = process.hrtime(time);\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'读取文件耗费%d纳秒'</span>, diff[<span class=\"number\">0</span>] * <span class=\"number\">1e9</span> + diff[<span class=\"number\">1</span>])\n</code></pre><h2 id=\"进程事件：\">进程事件：</h2>\n<pre><code>    <span class=\"comment\">// exit - 进程退出时触发</span>\n    process.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'进程已退出'</span>);\n    });\n    <span class=\"comment\">// 手动退出进程</span>\n    process.exit();\n\n    <span class=\"comment\">// uncaughtException - 未捕获异常</span>\n    process.on(<span class=\"string\">'uncaughtException'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'未捕获异常：'</span>, err);\n    });\n    <span class=\"comment\">// 调用一个未定义的函数</span>\n    nonExectentFunction();\n\n    <span class=\"comment\">// 其他信号事件, 如 SIGINT</span>\n    process.on(<span class=\"string\">'SIGINT'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'捕获到SIGINT信号'</span>);\n    });\n    process.stdin.resume();\n</code></pre><h1 id=\"系统信息\">系统信息</h1>\n<p>此外，可以使用os模块来访问类似的操作系统信息：</p>\n<pre><code>    <span class=\"comment\">// 临时文件目录</span>\n    os.tmpdir()   \n\n    <span class=\"comment\">// CPU的字节序</span>\n    os.endianness()\n\n    <span class=\"comment\">// 计算机名</span>\n    os.hostname\n\n    <span class=\"comment\">// 操作系统类型</span>\n    os.<span class=\"keyword\">type</span>\n\n    <span class=\"comment\">// 操作系统平台</span>\n    os.<span class=\"keyword\">platform</span>\n\n    <span class=\"comment\">// CPS架构</span>\n    os.arch()\n\n    <span class=\"comment\">// 操作系统版本号</span>\n    os.release()\n\n    <span class=\"comment\">// 系统当前运行时间</span>\n    os.uptime()\n\n    <span class=\"comment\">// 1、5、15分钟的系统平均负载</span>\n    os.loadavg()\n\n    <span class=\"comment\">// 系统总内存，以字节为单位</span>\n    os.totalmem()\n\n    <span class=\"comment\">// 系统空闲内存</span>\n    os.freemem()\n\n    <span class=\"comment\">// CPS信息</span>\n    os.cpus()\n\n    <span class=\"comment\">// 系统中所有网络接口</span>\n    os.networkInterfaces()\n\n    <span class=\"comment\">// 系统使用的换行符</span>\n    os.EOL         \n</code></pre><h1 id=\"使用_child_process_模块开启子进程\">使用 child_process 模块开启子进程</h1>\n<p>子进程间共享内存空间，也可通过共享端口将请求分配给多个子进程来处理。</p>\n<h2 id=\"使用_spawn_方法开启子进程\">使用 spawn 方法开启子进程</h2>\n<pre><code>    child_process.spawn(command, [args], [<span class=\"keyword\">options</span>])\n\n    command 指定运行命令\n\n    args 数组，指定运行该命令时使用的参数\n\n    <span class=\"keyword\">options</span>    对象，指定开启子进程时使用的选项\n\n    <span class=\"comment\">// 默认值为：</span>\n    <span class=\"keyword\">options</span> = {\n        cwd: undefined,\n        env: process.env\n    }\n\n    <span class=\"keyword\">options</span> = {\n        cwd: 字符串，指定子进程的当前工作目录\n        stdio: 字符串或三元素数组，设置标准输入输出\n        env: 对象，指定环境变量\n        detached: 布尔值默认为<span class=\"keyword\">false</span>，是否设定为进程组中的组长进程\n        uid: 数值，指定 user id\n        gid: 数值，指定 <span class=\"keyword\">group</span> id\n    }\n\n    <span class=\"keyword\">options</span>.stdio = <span class=\"string\">'ignore'</span>\n    等同于：\n    <span class=\"keyword\">options</span>.stdio = [<span class=\"string\">'ignore'</span>, <span class=\"string\">'ignore'</span>, <span class=\"string\">'ignore'</span>];\n\n    <span class=\"keyword\">options</span>.stdio = <span class=\"string\">'pipe'</span>\n    等同于：\n    <span class=\"keyword\">options</span>.stdio = [<span class=\"string\">'pipe'</span>, <span class=\"string\">'pipe'</span>, <span class=\"string\">'pipe'</span>];\n\n    <span class=\"keyword\">options</span>.stdio = <span class=\"string\">'inherit'</span>\n    等同于：\n    <span class=\"keyword\">options</span>.stdio = [process.stdin, process.stdout, process.stderr];\n    或：\n    <span class=\"keyword\">options</span>.stdio = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n    <span class=\"keyword\">options</span>.stdio 中的数组元素可为：\n    pipe 在父子进程间创建管道\n    ipc 在父子进程间创建专用于传递消息或文件描述符的IPC通道\n    ignore 不为子进程设置文件描述符\n\n    Stream对象 指定父子进程共享一个终端设备、文件、端口或管道\n\n    <span class=\"keyword\">null</span>或undefined 使用默认值\n\n\nspawn 方式示例：\n\n    var cp = require(<span class=\"string\">'child_process'</span>);\n\n    <span class=\"comment\">// TODO</span>\n    <span class=\"comment\">// p239 代码清单 9-13</span>\n</code></pre>","source":"_posts/nodejs-进程与子进程.md","raw":"title: NODEJS-进程与子进程\n\ndate: 2014-06-05 14:40:49\n\ncategories: Node\n\ntags: [Node, Child_process, Cluster]\n\n---\n\n在操作系统中，每一个程序都是一个进程类的实例对象。\n\n# 进程信息\n\n在 NodeJS 中，使用 process 代表 NodeJS 应用程序。\n\n## 进程属性\n\n\t\t// 执行程序的绝对路径\n\t\tprocess.execPath\n\t\t\n\t\t// NodeJS版本号\n\t\tprocess.version\n\t\t\n\t\t// NodeJS 及其依赖的版本号\n\t\tprocess.versions\n\t\t\n\t\t// 运行平台\n\t\tprocess.platform\n\t\t\n\t\t// 一个标准输入流对象\n\t\tprocess.stdin\n\t\t// 恢复读取标准输入流数据\n\t\tprocess.stdin.resume()\n\t\t\n\t\t// 一个标准输出流对象\n\t\tprocess.stdout\n\t\t\n\t\t// 一个标准错误流对象\n\t\tprocess.stderr\n\t\t\n\t\t// 参数列表\n\t\tprocess.argv\n\t\t\n\t\t// 环境变量\n\t\tprocess.env\n\t\t\n\t\t// 配置信息\n\t\tprocess.config\n\t\t\n\t\t// 进程 id\n\t\tprocess.pid\n\t\t\n\t\t// 命令行窗口的标题\n\t\tprocess.title\n\t\t\n\t\t// 处理器架构\n\t\tprocess.arch\n\n<!-- more -->\t\t\n\t\n## 进程方法：\n\t\n\t\t// 进程内存使用量\n\t\tprocess.memoryUsage()\t\t\n\t\t\n\t\t// 将callback函数推迟执行\n\t\tprocess.nextTick(callback)\n\t\t// 示例：\n\t\tvar fs = require('fs');\n\t\tvar finish = function () {\n\t\t\tconsole.log('文件读取完成')\n\t\t}\n\t\tprocess.nextTick(finish);\n\t\tconsole.log(fs.readFileSync('./test.txt').toString());\n\t\t\n\t\t// 发出 SIGABRT 新号，终止进程\t\n\t\tprocess.abort()\n\t\t\n\t\t// 改变程序使用的当前目录\n\t\tprocess.chdir(directory)\n\t\t\n\t\t// 返回当前目录\n\t\tprocess.cwd()\n\t\t\n\t\t// 退出程序进程，code 为 0 表示正常退出\n\t\tprocess.exit([code])\n\t\t\n\t\t// 获取 group id\n\t\tprocess.getgid()\n\t\t// 设置\n\t\tprocess.setgid(id)\n\t\t\n\t\t// 获取 user id\n\t\tprocess.getuid()\n\t\t// 设置\n\t\tprocess.setuid(id)\n\t\t\n\t\t// 获取附属组 id 构成的数组\n\t\tprocess.getgroups()\n\t\t// 设置\n\t\tprocess.setgroups(groups)\n\t\t\n\t\t// 指定归属组来初始化 /etc/group 组列表\n\t\tprocess.initgroups(user, extra_group)\n\t\t\n\t\t// 向一个进程发送信号, signal 默认为 SIGTERM 表示终止进程\n\t\tprocess.kill(pid, [signal])\n\t\t\n\t\t// 读取或修改运行程序进程的文件的权限掩码\n\t\tprocess.unmash([mask])\n\t\t\n\t\t// 读取程序当前运行时间\n\t\tprocess.uptime()\n\t\t\n\t\t// 测试一个代码段的运行时间\n\t\tprocess.hrtime()\n\t\t// 示例：\n\t\tvar fs = require('fs');\n\t\tvar time = process.hrtime();\n\t\tvar data = fs.readFileSync('./test.txt');\n\t\tvar diff = process.hrtime(time);\n\t\tconsole.log('读取文件耗费%d纳秒', diff[0] * 1e9 + diff[1])\n\t\t\n## 进程事件：\n\t\n\t\t// exit - 进程退出时触发\n\t\tprocess.on('exit', function () {\n\t\t\tconsole.log('进程已退出');\n\t\t});\n\t\t// 手动退出进程\n\t\tprocess.exit();\n\t\t\n\t\t// uncaughtException - 未捕获异常\n\t\tprocess.on('uncaughtException', function (err) {\n\t\t\tconsole.log('未捕获异常：', err);\n\t\t});\n\t\t// 调用一个未定义的函数\n\t\tnonExectentFunction();\n\t\t\n\t\t// 其他信号事件, 如 SIGINT\n\t\tprocess.on('SIGINT', function () {\n\t\t\tconsole.log('捕获到SIGINT信号');\n\t\t});\n\t\tprocess.stdin.resume();\n\n\t\t\n\n# 系统信息\n\n此外，可以使用os模块来访问类似的操作系统信息：\n\n\t\t// 临时文件目录\n\t\tos.tmpdir()   \n\t\t \n\t\t// CPU的字节序\n\t\tos.endianness()\n\t\t\n\t\t// 计算机名\n\t\tos.hostname\n\t\t\n\t\t// 操作系统类型\n\t\tos.type\n\t\t\n\t\t// 操作系统平台\n\t\tos.platform\n\t\t\n\t\t// CPS架构\n\t\tos.arch()\n\t\t\n\t\t// 操作系统版本号\n\t\tos.release()\n\t\t\n\t\t// 系统当前运行时间\n\t\tos.uptime()\n\t\t\n\t\t// 1、5、15分钟的系统平均负载\n\t\tos.loadavg()\n\t\t\n\t\t// 系统总内存，以字节为单位\n\t\tos.totalmem()\n\t\t\n\t\t// 系统空闲内存\n\t\tos.freemem()\n\t\t\n\t\t// CPS信息\n\t\tos.cpus()\n\t\t\n\t\t// 系统中所有网络接口\n\t\tos.networkInterfaces()\n\t\t\n\t\t// 系统使用的换行符\n\t\tos.EOL \t\t\n\t\t\n\t\t\n\n# 使用 child_process 模块开启子进程\n\n子进程间共享内存空间，也可通过共享端口将请求分配给多个子进程来处理。\n\n## 使用 spawn 方法开启子进程\n\n\t\tchild_process.spawn(command, [args], [options])\n\t\t\n\t\tcommand 指定运行命令\n\t\t\n\t\targs 数组，指定运行该命令时使用的参数\n\t\t\n\t\toptions\t对象，指定开启子进程时使用的选项\n\t\t\n\t\t// 默认值为：\n\t\toptions = {\n\t\t\tcwd: undefined,\n\t\t\tenv: process.env\n\t\t}\n\t\t\n\t\toptions = {\n\t\t\tcwd: 字符串，指定子进程的当前工作目录\n\t\t\tstdio: 字符串或三元素数组，设置标准输入输出\n\t\t\tenv: 对象，指定环境变量\n\t\t\tdetached: 布尔值默认为false，是否设定为进程组中的组长进程\n\t\t\tuid: 数值，指定 user id\n\t\t\tgid: 数值，指定 group id\n\t\t}\n\t\t\n\t\toptions.stdio = 'ignore'\n\t\t等同于：\n\t\toptions.stdio = ['ignore', 'ignore', 'ignore'];\n\n\t\toptions.stdio = 'pipe'\n\t\t等同于：\n\t\toptions.stdio = ['pipe', 'pipe', 'pipe'];\n\n\t\toptions.stdio = 'inherit'\n\t\t等同于：\n\t\toptions.stdio = [process.stdin, process.stdout, process.stderr];\n\t\t或：\n\t\toptions.stdio = [0, 1, 2];\n\t\t\n\t\toptions.stdio 中的数组元素可为：\n\t\tpipe 在父子进程间创建管道\n\t\tipc 在父子进程间创建专用于传递消息或文件描述符的IPC通道\n\t\tignore 不为子进程设置文件描述符\n\t\t\n\t\tStream对象 指定父子进程共享一个终端设备、文件、端口或管道\n\t\t\n\t\tnull或undefined 使用默认值\n\t\t\n\n\tspawn 方式示例：\n\t\n\t\tvar cp = require('child_process');\n\t\t\n\t\t// TODO\n\t\t// p239 代码清单 9-13\n\t\t\n\t\t\n\t\t\n\t\t\t\t\n\t\t\t\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"nodejs-进程与子进程","updated":1418908898000,"excerpt":"<p>在操作系统中，每一个程序都是一个进程类的实例对象。</p>\n<h1 id=\"进程信息\">进程信息</h1>\n<p>在 NodeJS 中，使用 process 代表 NodeJS 应用程序。</p>\n<h2 id=\"进程属性\">进程属性</h2>\n<pre><code>   <span class=\"comment\"> // 执行程序的绝对路径</span>\n    <span class=\"built_in\">process</span>.execPath\n\n   <span class=\"comment\"> // NodeJS版本号</span>\n    <span class=\"built_in\">process</span>.<span class=\"built_in\">version</span>\n\n   <span class=\"comment\"> // NodeJS 及其依赖的版本号</span>\n    <span class=\"built_in\">process</span>.versions\n\n   <span class=\"comment\"> // 运行平台</span>\n    <span class=\"built_in\">process</span>.<span class=\"built_in\">platform</span>\n\n   <span class=\"comment\"> // 一个标准输入流对象</span>\n    <span class=\"built_in\">process</span>.<span class=\"keyword\">stdin</span>\n   <span class=\"comment\"> // 恢复读取标准输入流数据</span>\n    <span class=\"built_in\">process</span>.<span class=\"keyword\">stdin</span>.resume()\n\n   <span class=\"comment\"> // 一个标准输出流对象</span>\n    <span class=\"built_in\">process</span>.<span class=\"keyword\">stdout</span>\n\n   <span class=\"comment\"> // 一个标准错误流对象</span>\n    <span class=\"built_in\">process</span>.<span class=\"keyword\">stderr</span>\n\n   <span class=\"comment\"> // 参数列表</span>\n    <span class=\"built_in\">process</span>.argv\n\n   <span class=\"comment\"> // 环境变量</span>\n    <span class=\"built_in\">process</span>.env\n\n   <span class=\"comment\"> // 配置信息</span>\n    <span class=\"built_in\">process</span>.config\n\n   <span class=\"comment\"> // 进程 id</span>\n    <span class=\"built_in\">process</span>.pid\n\n   <span class=\"comment\"> // 命令行窗口的标题</span>\n    <span class=\"built_in\">process</span>.title\n\n   <span class=\"comment\"> // 处理器架构</span>\n    <span class=\"built_in\">process</span>.arch\n</code></pre>","_id":"jprjnyzv18tspcei","comments":true,"layout":"post","photos":[],"link":""},{"title":"NODEJS-常用模块","date":1400031745000,"categories":["f1q8dl6bbauvoh8x"],"tags":["6nw4rkrlz1uq9phz"],"content":"<h2 id=\"dns模块_解析域名\">dns模块 解析域名</h2>\n<ul>\n<li><p>dns.resolve() 将一个域名解析为一组DNS记录</p>\n</li>\n<li><p>dns.reverse() 将一个IP地址饥饿虚伪一组域名</p>\n</li>\n<li><p>dns.lookup() 将一个域名转换为一个IP地址 </p>\n<pre><code>  <span class=\"comment\">// rrtype即记录类型，默认为A，可选 A/AAAA/CNAME/MX/TXT/SRV/PTR/NS</span>\n  <span class=\"comment\">// A 将IPV4地址映射为域名</span>\n  <span class=\"comment\">// AAAA 将IPV6地址映射为域名</span>\n  <span class=\"comment\">// CNAME 别名解析，如 laispace.com 是 www.laispace.com 的别名</span>\n  <span class=\"comment\">// MX 邮件服务器解析</span>\n  <span class=\"comment\">// dns.resolve(domain, [rrtype], callback)</span>\n  <span class=\"keyword\">var</span> dns = <span class=\"built_in\">require</span>(<span class=\"string\">'dns'</span>);\n  <span class=\"keyword\">var</span> domain = <span class=\"string\">'www.laispace.com'</span>;\n  dns.resolve(domain, <span class=\"string\">'A'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, addresses)</span> </span>{\n      <span class=\"keyword\">if</span> (err) {\n          <span class=\"keyword\">throw</span> err;\n      }\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'域名解析结果为：\\n'</span>, addresses);\n  })\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>\n\n<pre><code>更便捷的方法：        \n\n    <span class=\"comment\">// 解析 A 记录</span>\n    dns.resolve4(domain, <span class=\"keyword\">callback</span>)\n    <span class=\"comment\">// 解析 AAAA 记录</span>\n    dns.resolve6(domain, <span class=\"keyword\">callback</span>)\n    <span class=\"comment\">// 解析 CNAME 记录</span>\n    dns.resolveCname(domain, <span class=\"keyword\">callback</span>)\n    <span class=\"comment\">// 解析 MX 记录</span>\n    dns.resolveMx(domain, <span class=\"keyword\">callback</span>)\n    <span class=\"comment\">// 解析 TXT 记录</span>\n    dns.resolveTxt(domain, <span class=\"keyword\">callback</span>)\n    <span class=\"comment\">// 解析 SRV 记录</span>\n    dns.resolveSrv(domain, <span class=\"keyword\">callback</span>)\n    <span class=\"comment\">// 解析 NS 记录</span>\n    dns.resolveNs(domain, <span class=\"keyword\">callback</span>)\n\ndns.resolve() 回调中返回的是 一组地址数组 addresses\n\ndns.lookup() 则返回 addresses 中的第一个：\n\n    <span class=\"comment\">// family 默认为 null，即可取IPV4或IPV6， 若为 4 或 6，则取为 IPV4 或 IPV6</span>\n    <span class=\"comment\">// dns.lookup(domain, [family], function (err, address, family) {})</span>\n    <span class=\"keyword\">var</span> dns = require(<span class=\"string\">'dns'</span>);\n    <span class=\"keyword\">var</span> domain = <span class=\"string\">'www.laispace.com'</span>;\n    dns.lookup(domain, <span class=\"number\">4</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, address)</span> </span>{\n        <span class=\"keyword\">if</span> (err) {\n            <span class=\"keyword\">throw</span> err;\n        }\n        console.log(<span class=\"string\">'域名解析结果为：\\n'</span>, address)\n    })    \n\ndns.reverse() 则反过来解析IP地址为域名：\n\n    <span class=\"comment\">// dns.reverse(ip, callback)</span>\n    <span class=\"keyword\">var</span> dns = require(<span class=\"string\">'dns'</span>);\n    <span class=\"keyword\">var</span> ip = <span class=\"string\">'173.194.127.82'</span>;\n    dns.reverse(ip, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, domains)</span> </span>{\n        <span class=\"keyword\">if</span> (err) {\n            <span class=\"keyword\">throw</span> err;\n        }\n        console.log(<span class=\"string\">'IP解析结果为：\\n'</span>, domains);\n    })        \n</code></pre><h2 id=\"os模块_获取操作系统信息\">os模块 获取操作系统信息</h2>\n<pre><code><span class=\"comment\">// 临时文件目录</span>\nos.tmpdir()    \n\n<span class=\"comment\">// CPU的字节序</span>\nos.endianness()\n\n<span class=\"comment\">// 计算机名</span>\nos.hostname\n\n<span class=\"comment\">// 操作系统类型</span>\nos.<span class=\"keyword\">type</span>\n\n<span class=\"comment\">// 操作系统平台</span>\nos.<span class=\"keyword\">platform</span>\n\n<span class=\"comment\">// CPS架构</span>\nos.arch()\n\n<span class=\"comment\">// 操作系统版本号</span>\nos.release()\n\n<span class=\"comment\">// 系统当前运行时间</span>\nos.uptime()\n\n<span class=\"comment\">// 1、5、15分钟的系统平均负载</span>\nos.loadavg()\n\n<span class=\"comment\">// 系统总内存，以字节为单位</span>\nos.totalmem()\n\n<span class=\"comment\">// 系统空闲内存</span>\nos.freemem()\n\n<span class=\"comment\">// CPS信息</span>\nos.cpus()\n\n<span class=\"comment\">// 系统中所有网络接口</span>\nos.networkInterfaces()\n\n<span class=\"comment\">// 系统使用的换行符</span>\nos.EOL \n</code></pre><h2 id=\"util_模块_一些实用方法\">util 模块 一些实用方法</h2>\n<pre><code>    <span class=\"comment\">// 格式化字符串</span>\n    <span class=\"comment\">// util.format(format, [...])</span>\n    util.format(<span class=\"string\">'输入%d个参数，分别为%s, %s和%s'</span>, <span class=\"number\">3</span>, <span class=\"string\">'lai'</span>, <span class=\"string\">'xiao'</span>, <span class=\"string\">'lai'</span>);\n    %s 字符串参数\n    %d 数值参数\n    %j <span class=\"built_in\">JSON</span>对象\n    %% 一个百分号\n\n    <span class=\"comment\">// debug输出标准错误流，同步方法，阻塞线程</span>\n    <span class=\"comment\">// util.debug(string)</span>\n    util.debug(<span class=\"string\">'出现错误！'</span>);\n\n    <span class=\"comment\">// error输出标准错误流，也是同步方法，阻塞线程</span>\n    <span class=\"comment\">// util.error([...])</span>\n    util.error([<span class=\"string\">'error1'</span>, <span class=\"string\">'error2'</span>, <span class=\"string\">'error3'</span>])\n\n    <span class=\"comment\">// puts输出标准输出流，也是同步方法，阻塞线程</span>\n    <span class=\"comment\">// util.puts([...])</span>\n    util.puts([<span class=\"string\">'ouput1'</span>, <span class=\"string\">'output2'</span>, <span class=\"string\">'output3'</span>])\n\n    <span class=\"comment\">// print输出标准输出流，也是同步方法，阻塞线程，输出后不产生新行</span>\n    <span class=\"comment\">// util.print([...])</span>\n    util.puts([<span class=\"string\">'ouput1'</span>, <span class=\"string\">'output2'</span>, <span class=\"string\">'output3'</span>])\n\n    <span class=\"comment\">// log输出标准输出流，前面会自动加上系统时间</span>\n    <span class=\"comment\">// util.log(string)</span>\n    util.log(<span class=\"string\">'Hello Lai!'</span>)\n\n    <span class=\"comment\">// inspect输出一个对象信息</span>\n    <span class=\"comment\">// util.inspect(object, [options])</span>\n    <span class=\"keyword\">var</span> obj = {\n        name: <span class=\"string\">'小赖1'</span>,\n        child: {\n            name: <span class=\"string\">'小赖2'</span>,\n            child: {\n                name: <span class=\"string\">'小赖3'</span>\n            }\n        },\n        sayHi: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{<span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi Lai!'</span>)}\n    }\n    util.inspect(obj, {showHidden: <span class=\"literal\">true</span>});\n    <span class=\"comment\">// options = {</span>\n    <span class=\"comment\">//    showHidden: 布尔值默认false，是否显示对象的不可枚举属性</span>\n    <span class=\"comment\">//    depth: 整数，指定查看对象的信息的深度</span>\n    <span class=\"comment\">//    colors: 布尔值默认false，是否输出时应用颜色高亮</span>\n    <span class=\"comment\">//    customInspect: 布尔值默认为true，是否在查看对象信息时调用自定义的Inspect方法</span>\n    <span class=\"comment\">// }</span>\n    <span class=\"comment\">// 设置inspect的默认颜色</span>\n    util.inspect.styles = {\n        number: <span class=\"string\">'yellow'</span>,\n        boolean: <span class=\"string\">'yellow'</span>,\n        string: <span class=\"string\">'green'</span>,\n        date: <span class=\"string\">'magenta'</span>,\n        regexp: <span class=\"string\">'red'</span>,\n        <span class=\"literal\">null</span>: <span class=\"string\">'bold'</span>,\n        <span class=\"literal\">undefined</span>: <span class=\"string\">'grey'</span>,\n        special: <span class=\"string\">'cyan'</span>\n    }\n\n    <span class=\"comment\">// isArray 判断数组</span>\n    <span class=\"comment\">// util.isArray(object)</span>\n    util.isArray([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n    <span class=\"comment\">// isRegExp 判断正则</span>\n    <span class=\"comment\">// util.isRegExp(object)</span>\n    util.isRegExp(<span class=\"regexp\">/a regexp/</span>);\n\n    <span class=\"comment\">// isDate 判断日期</span>\n    <span class=\"comment\">// util.isDate(object)</span>\n    util.isDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());\n\n    <span class=\"comment\">// isError 判断错误</span>\n    <span class=\"comment\">// util.isError(object)</span>\n    util.isError(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>());\n\n    <span class=\"comment\">// inherits 将父类方法继承给子类</span>\n    <span class=\"comment\">// util.inherits(constructor, superConstructor)</span>\n    <span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);\n    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span><span class=\"params\">()</span> </span>{}\n    Father.prototype = {\n        sayHi: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi Lai'</span>);\n        }\n    }        \n    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span><span class=\"params\">()</span> </span>{}\n    <span class=\"comment\">// 继承方法</span>\n    util.inherits(Child, Father);\n    <span class=\"comment\">// 生成实例</span>\n    <span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child()\n    child.sayHi(); <span class=\"comment\">// =&gt; 'Hi Lai'</span>\n</code></pre><h2 id=\"validator模块_客户端/服务器端验证\">validator模块 客户端/服务器端验证</h2>\n<pre><code>    <span class=\"comment\">// 使用 npm 或者 bower 安装：</span>\n    $ npm install validator\n    <span class=\"comment\">// 或者 </span>\n    $ bower install validator-js\n\n    <span class=\"comment\">// 使用示例：</span>\n    <span class=\"comment\">// 服务器端</span>\n    <span class=\"keyword\">var</span> validator = require(<span class=\"symbol\">'validato</span>r');\n    validator.isEmail(<span class=\"symbol\">'foo</span><span class=\"annotation\">@bar</span>.com'); <span class=\"comment\">//=&gt; true</span>\n\n    <span class=\"comment\">// 客户端</span>\n    &lt;script <span class=\"keyword\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"validator.min.js\"</span>&gt;&lt;/script&gt;\n    &lt;script <span class=\"keyword\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;\n      validator.isEmail(<span class=\"symbol\">'foo</span><span class=\"annotation\">@bar</span>.com'); <span class=\"comment\">//=&gt; true</span>\n    &lt;/script&gt;\n</code></pre><p><a href=\"https://github.com/chriso/validator.js\" target=\"_blank\" rel=\"external\">地址</a>        </p>\n","source":"_posts/nodejs常用模块.md","raw":"title: NODEJS-常用模块\n\ndate: 2014-05-14 09:42:25\n\ncategories: Node\n\ntags: [Node modules] \n\n---\n\n## dns模块 解析域名\n\n- dns.resolve() 将一个域名解析为一组DNS记录\n\n- dns.reverse() 将一个IP地址饥饿虚伪一组域名\n\n- dns.lookup() 将一个域名转换为一个IP地址 \n\n\t\t// rrtype即记录类型，默认为A，可选 A/AAAA/CNAME/MX/TXT/SRV/PTR/NS\n\t\t// A 将IPV4地址映射为域名\n\t\t// AAAA 将IPV6地址映射为域名\n\t\t// CNAME 别名解析，如 laispace.com 是 www.laispace.com 的别名\n\t\t// MX 邮件服务器解析\n\t\t// dns.resolve(domain, [rrtype], callback)\n\t\tvar dns = require('dns');\n\t\tvar domain = 'www.laispace.com';\n\t\tdns.resolve(domain, 'A', function (err, addresses) {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('域名解析结果为：\\n', addresses);\n\t\t})\n\n<!--more-->\n\t\n\t更便捷的方法：\t\t\n\t\n\t\t// 解析 A 记录\n\t\tdns.resolve4(domain, callback)\n\t\t// 解析 AAAA 记录\n\t\tdns.resolve6(domain, callback)\n\t\t// 解析 CNAME 记录\n\t\tdns.resolveCname(domain, callback)\n\t\t// 解析 MX 记录\n\t\tdns.resolveMx(domain, callback)\n\t\t// 解析 TXT 记录\n\t\tdns.resolveTxt(domain, callback)\n\t\t// 解析 SRV 记录\n\t\tdns.resolveSrv(domain, callback)\n\t\t// 解析 NS 记录\n\t\tdns.resolveNs(domain, callback)\n\t\t\n\tdns.resolve() 回调中返回的是 一组地址数组 addresses\n\t\n\tdns.lookup() 则返回 addresses 中的第一个：\n\t\n\t\t// family 默认为 null，即可取IPV4或IPV6， 若为 4 或 6，则取为 IPV4 或 IPV6\n\t\t// dns.lookup(domain, [family], function (err, address, family) {})\n\t\tvar dns = require('dns');\n\t\tvar domain = 'www.laispace.com';\n\t\tdns.lookup(domain, 4, function (err, address) {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('域名解析结果为：\\n', address)\n\t\t})\t\n\n\tdns.reverse() 则反过来解析IP地址为域名：\n\t\n\t\t// dns.reverse(ip, callback)\n\t\tvar dns = require('dns');\n\t\tvar ip = '173.194.127.82';\n\t\tdns.reverse(ip, function (err, domains) {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('IP解析结果为：\\n', domains);\n\t\t})\t\t\n\n## os模块 获取操作系统信息\n\n\t// 临时文件目录\n\tos.tmpdir()\t\n\t\n\t// CPU的字节序\n\tos.endianness()\n\t\n\t// 计算机名\n\tos.hostname\n\t\n\t// 操作系统类型\n\tos.type\n\t\n\t// 操作系统平台\n\tos.platform\n\t\n\t// CPS架构\n\tos.arch()\n\t\n\t// 操作系统版本号\n\tos.release()\n\t\n\t// 系统当前运行时间\n\tos.uptime()\n\t\n\t// 1、5、15分钟的系统平均负载\n\tos.loadavg()\n\t\n\t// 系统总内存，以字节为单位\n\tos.totalmem()\n\t\n\t// 系统空闲内存\n\tos.freemem()\n\t\n\t// CPS信息\n\tos.cpus()\n\t\n\t// 系统中所有网络接口\n\tos.networkInterfaces()\n\t\n\t// 系统使用的换行符\n\tos.EOL \n\t\t\n\t\t\n## util 模块 一些实用方法\n\n\t\t// 格式化字符串\n\t\t// util.format(format, [...])\n\t\tutil.format('输入%d个参数，分别为%s, %s和%s', 3, 'lai', 'xiao', 'lai');\n\t\t%s 字符串参数\n\t\t%d 数值参数\n\t\t%j JSON对象\n\t\t%% 一个百分号\n\t\t\n\t\t// debug输出标准错误流，同步方法，阻塞线程\n\t\t// util.debug(string)\n\t\tutil.debug('出现错误！');\n\t\t\n\t\t// error输出标准错误流，也是同步方法，阻塞线程\n\t\t// util.error([...])\n\t\tutil.error(['error1', 'error2', 'error3'])\n\t\t\n\t\t// puts输出标准输出流，也是同步方法，阻塞线程\n\t\t// util.puts([...])\n\t\tutil.puts(['ouput1', 'output2', 'output3'])\n\t\t\n\t\t// print输出标准输出流，也是同步方法，阻塞线程，输出后不产生新行\n\t\t// util.print([...])\n\t\tutil.puts(['ouput1', 'output2', 'output3'])\n\t\t\n\t\t// log输出标准输出流，前面会自动加上系统时间\n\t\t// util.log(string)\n\t\tutil.log('Hello Lai!')\n\t\t\n\t\t// inspect输出一个对象信息\n\t\t// util.inspect(object, [options])\n\t\tvar obj = {\n\t\t\tname: '小赖1',\n\t\t\tchild: {\n\t\t\t\tname: '小赖2',\n\t\t\t\tchild: {\n\t\t\t\t\tname: '小赖3'\n\t\t\t\t}\n\t\t\t},\n\t\t\tsayHi: function () {console.log('Hi Lai!')}\n\t\t}\n\t\tutil.inspect(obj, {showHidden: true});\n\t\t// options = {\n\t\t//\tshowHidden: 布尔值默认false，是否显示对象的不可枚举属性\n\t\t//\tdepth: 整数，指定查看对象的信息的深度\n\t\t//\tcolors: 布尔值默认false，是否输出时应用颜色高亮\n\t\t//\tcustomInspect: 布尔值默认为true，是否在查看对象信息时调用自定义的Inspect方法\n\t\t// }\n\t\t// 设置inspect的默认颜色\n\t\tutil.inspect.styles = {\n\t\t\tnumber: 'yellow',\n\t\t\tboolean: 'yellow',\n\t\t\tstring: 'green',\n\t\t\tdate: 'magenta',\n\t\t\tregexp: 'red',\n\t\t\tnull: 'bold',\n\t\t\tundefined: 'grey',\n\t\t\tspecial: 'cyan'\n\t\t}\n\t\t\n\t\t// isArray 判断数组\n\t\t// util.isArray(object)\n\t\tutil.isArray([1, 2, 3]);\n\t\t\n\t\t// isRegExp 判断正则\n\t\t// util.isRegExp(object)\n\t\tutil.isRegExp(/a regexp/);\n\t\t\n\t\t// isDate 判断日期\n\t\t// util.isDate(object)\n\t\tutil.isDate(new Date());\n\t\t\n\t\t// isError 判断错误\n\t\t// util.isError(object)\n\t\tutil.isError(new Error());\n\t\t\n\t\t// inherits 将父类方法继承给子类\n\t\t// util.inherits(constructor, superConstructor)\n\t\tvar util = require('util');\n\t\tfunction Father() {}\n\t\tFather.prototype = {\n\t\t\tsayHi: function () {\n\t\t\t\tconsole.log('Hi Lai');\n\t\t\t}\n\t\t}\t\t\n\t\tfunction Child() {}\n\t\t// 继承方法\n\t\tutil.inherits(Child, Father);\n\t\t// 生成实例\n\t\tvar child = new Child()\n\t\tchild.sayHi(); // => 'Hi Lai'\n\t\t\n## validator模块 客户端/服务器端验证\n\n\t\t// 使用 npm 或者 bower 安装：\n\t\t$ npm install validator\n\t\t// 或者 \n\t\t$ bower install validator-js\n\t\t\n\t\t// 使用示例：\n\t\t// 服务器端\n\t\tvar validator = require('validator');\n\t\tvalidator.isEmail('foo@bar.com'); //=> true\n\t\t\n\t\t// 客户端\n\t\t<script type=\"text/javascript\" src=\"validator.min.js\"></script>\n\t\t<script type=\"text/javascript\">\n\t\t  validator.isEmail('foo@bar.com'); //=> true\n\t\t</script>\n\n[地址](https://github.com/chriso/validator.js\n)\t\t\n\t\n\t\t\n\t\t\n\t\t\n\n\n\t\n\t\n","slug":"nodejs常用模块","updated":1418908898000,"excerpt":"<h2 id=\"dns模块_解析域名\">dns模块 解析域名</h2>\n<ul>\n<li><p>dns.resolve() 将一个域名解析为一组DNS记录</p>\n</li>\n<li><p>dns.reverse() 将一个IP地址饥饿虚伪一组域名</p>\n</li>\n<li><p>dns.lookup() 将一个域名转换为一个IP地址 </p>\n<pre><code>  <span class=\"comment\">// rrtype即记录类型，默认为A，可选 A/AAAA/CNAME/MX/TXT/SRV/PTR/NS</span>\n  <span class=\"comment\">// A 将IPV4地址映射为域名</span>\n  <span class=\"comment\">// AAAA 将IPV6地址映射为域名</span>\n  <span class=\"comment\">// CNAME 别名解析，如 laispace.com 是 www.laispace.com 的别名</span>\n  <span class=\"comment\">// MX 邮件服务器解析</span>\n  <span class=\"comment\">// dns.resolve(domain, [rrtype], callback)</span>\n  <span class=\"keyword\">var</span> dns = <span class=\"built_in\">require</span>(<span class=\"string\">'dns'</span>);\n  <span class=\"keyword\">var</span> domain = <span class=\"string\">'www.laispace.com'</span>;\n  dns.resolve(domain, <span class=\"string\">'A'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, addresses)</span> </span>{\n      <span class=\"keyword\">if</span> (err) {\n          <span class=\"keyword\">throw</span> err;\n      }\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'域名解析结果为：\\n'</span>, addresses);\n  })\n</code></pre></li>\n</ul>\n","_id":"x30wgnpawbi3h14g","comments":true,"layout":"post","photos":[],"link":""},{"title":"Ubuntu下部署nodejs+mongodb","date":1401003996000,"categories":["f1q8dl6bbauvoh8x"],"tags":["lpay8ajzjtzrtm3e","3o3boffd22y5aqvb","55hd6ydlzi3d7i1w"],"content":"<blockquote>\n<p>捣鼓阿里云上的VPS，入门Linux，记录一下部署 NodeJs+MongoDB 的过程</p>\n</blockquote>\n<ol>\n<li><p><a href=\"https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#ubuntu-mint-elementary-os\" target=\"_blank\" rel=\"external\">Ubuntu下安装NodeJS</a></p>\n<p> 在 Ubuntu 12.04 ~ 13.04 中，默认安装的的 Node 版本是 0.6.x的</p>\n<pre><code> <span class=\"variable\">$ </span>sudo apt-get install nodejs\n <span class=\"variable\">$ </span>sudo apt-get install npm\n <span class=\"variable\">$ </span>node -v\n</code></pre><p> 而在 Ubuntu 13.10 ~ 14.04 中则是 0.10.x 版本</p>\n<p> 我的版本是旧版，所以需要使用这种方式来安装：</p>\n<pre><code> $ sudo apt-<span class=\"built_in\">get</span> install software-properties-common\n $ sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-software-properties\n // 安装以上两个包后才会有下面这个 <span class=\"built_in\">add</span>-apt-repository 命令：\n $ sudo <span class=\"built_in\">add</span>-apt-repository <span class=\"keyword\">pp</span><span class=\"variable\">a:chris</span>-lea/node.js\n $ sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span>\n $ sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-software-properties <span class=\"keyword\">python</span> <span class=\"keyword\">g</span>++ <span class=\"keyword\">make</span> nodejs\n</code></pre></li>\n</ol>\n<ol>\n<li><a href=\"http://docs.mongodb.org/manual/tutorial/install-mongodb-on-linux/\" target=\"_blank\" rel=\"external\">Linux下安装MongoDB</a></li>\n</ol>\n<a id=\"more\"></a>\n\n<pre><code>需要先导入mongodb.org的公钥到<span class=\"class\">Ubuntu</span>的包管理系统\n\n    <span class=\"char\">$ </span>sudo apt-key adv --keyserver <span class=\"method\">hkp:</span>//keyserver.ubuntu.<span class=\"method\">com:</span><span class=\"number\">80</span> --recv <span class=\"number\">7</span>F0CEB10\n\n接着创建 /etc/apt/sources.list.d/mongodb.list 列表文件\n\n    <span class=\"char\">$ </span>echo <span class=\"string\">'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen'</span> | sudo tee /etc/apt/sources.list.d/mongodb.list\n\n然后先更新包管理系统\n\n    <span class=\"char\">$ </span>sudp apt-get update\n\n更新完毕就可以安装 <span class=\"class\">Mongodb</span>-org 这个包了\n\n    <span class=\"char\">$ </span>sudo apt-get install mongodb-org\n\n建立存放数据库的目录\n\n    <span class=\"char\">$ </span>mkdir -p /data/db\n\n启动<span class=\"class\">MongoDB</span>    \n\n    <span class=\"char\">$ </span>sudo /usr/bin/mongod --dbpath /data/db\n\n启动 mongo shell \n\n    <span class=\"char\">$ </span>/usr/bin/mongo\n\n    // 建立一个新的数据库\n    <span class=\"char\">$ </span>use newDb\n    // 创建一个 users 集合并往集合中插入数据\n    <span class=\"char\">$ </span>db.users.insert({<span class=\"method\">name:</span> <span class=\"string\">'小赖'</span>, <span class=\"method\">age:</span> <span class=\"number\">18</span>});\n    // 查看是否插入成功\n    <span class=\"char\">$ </span>db.users.find()\n    // 显示 { <span class=\"comment\">\"_id\"</span> : <span class=\"class\">ObjectId</span>(<span class=\"comment\">\"5381a71b30f9768d2d0a53e2\"</span>), <span class=\"comment\">\"name\"</span> : <span class=\"comment\">\"小赖\"</span>, <span class=\"comment\">\"age\"</span> : <span class=\"number\">18</span> }\n    // 成功！\n</code></pre>","source":"_posts/ubuntu下部署nodejs+mongodb.md","raw":"title: Ubuntu下部署nodejs+mongodb\n\ndate: 2014-05-25 15:46:36\n\ncategories: Node\n\ntags: [Node, Mongo, Ubuntu]\n\n---\n\n> 捣鼓阿里云上的VPS，入门Linux，记录一下部署 NodeJs+MongoDB 的过程\n\n1. [Ubuntu下安装NodeJS](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#ubuntu-mint-elementary-os)\n\n\t在 Ubuntu 12.04 ~ 13.04 中，默认安装的的 Node 版本是 0.6.x的\n\n\t\t$ sudo apt-get install nodejs\n\t\t$ sudo apt-get install npm\n\t\t$ node -v\n\t\t\n\t而在 Ubuntu 13.10 ~ 14.04 中则是 0.10.x 版本\n\t\n\t我的版本是旧版，所以需要使用这种方式来安装：\n\t\n\t\t$ sudo apt-get install software-properties-common\n\t\t$ sudo apt-get install python-software-properties\n\t\t// 安装以上两个包后才会有下面这个 add-apt-repository 命令：\n\t\t$ sudo add-apt-repository ppa:chris-lea/node.js\n\t\t$ sudo apt-get update\n\t\t$ sudo apt-get install python-software-properties python g++ make nodejs\n\t\t\n\n2. [Linux下安装MongoDB](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-linux/)\n\n<!-- more -->\n\n\t需要先导入mongodb.org的公钥到Ubuntu的包管理系统\n\t\n\t\t$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\n\t\n\t接着创建 /etc/apt/sources.list.d/mongodb.list 列表文件\n\t\n\t\t$ echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list\n\t\t\n\t然后先更新包管理系统\n\t\n\t\t$ sudp apt-get update\n\t\t\n\t更新完毕就可以安装 Mongodb-org 这个包了\n\t\n\t\t$ sudo apt-get install mongodb-org\n\t\n\t建立存放数据库的目录\n\t\t\n\t\t$ mkdir -p /data/db\n\t\n\t启动MongoDB\t\n\t\t\n\t\t$ sudo /usr/bin/mongod --dbpath /data/db\n\t\n\t启动 mongo shell \n\t\n\t\t$ /usr/bin/mongo\n\t\n\t\t// 建立一个新的数据库\n\t\t$ use newDb\n\t\t// 创建一个 users 集合并往集合中插入数据\n\t\t$ db.users.insert({name: '小赖', age: 18});\n\t\t// 查看是否插入成功\n\t\t$ db.users.find()\n\t\t// 显示 { \"_id\" : ObjectId(\"5381a71b30f9768d2d0a53e2\"), \"name\" : \"小赖\", \"age\" : 18 }\n\t\t// 成功！\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t\t\t\n","slug":"ubuntu下部署nodejs+mongodb","updated":1418908898000,"excerpt":"<blockquote>\n<p>捣鼓阿里云上的VPS，入门Linux，记录一下部署 NodeJs+MongoDB 的过程</p>\n</blockquote>\n<ol>\n<li><p><a href=\"https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#ubuntu-mint-elementary-os\" target=\"_blank\" rel=\"external\">Ubuntu下安装NodeJS</a></p>\n<p> 在 Ubuntu 12.04 ~ 13.04 中，默认安装的的 Node 版本是 0.6.x的</p>\n<pre><code> <span class=\"variable\">$ </span>sudo apt-get install nodejs\n <span class=\"variable\">$ </span>sudo apt-get install npm\n <span class=\"variable\">$ </span>node -v\n</code></pre><p> 而在 Ubuntu 13.10 ~ 14.04 中则是 0.10.x 版本</p>\n<p> 我的版本是旧版，所以需要使用这种方式来安装：</p>\n<pre><code> $ sudo apt-<span class=\"built_in\">get</span> install software-properties-common\n $ sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-software-properties\n // 安装以上两个包后才会有下面这个 <span class=\"built_in\">add</span>-apt-repository 命令：\n $ sudo <span class=\"built_in\">add</span>-apt-repository <span class=\"keyword\">pp</span><span class=\"variable\">a:chris</span>-lea/node.js\n $ sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span>\n $ sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-software-properties <span class=\"keyword\">python</span> <span class=\"keyword\">g</span>++ <span class=\"keyword\">make</span> nodejs\n</code></pre></li>\n</ol>\n<ol>\n<li><a href=\"http://docs.mongodb.org/manual/tutorial/install-mongodb-on-linux/\" target=\"_blank\" rel=\"external\">Linux下安装MongoDB</a></li>\n</ol>\n","_id":"ys1vflummj07en07","comments":true,"layout":"post","photos":[],"link":""},{"title":"web前端开发入门提高 js书籍","id":208,"categories":["be592wtznj5wcvwn"],"date":1353427198000,"tags":["lfo59y0zmr0yh0s3"],"content":"<div class=\"entry\" style=\"padding: 0px; margin: 0px; list-style: none; border: none; line-height: 28px; word-break: break-all; word-wrap: break-word; text-indent: 10px; color: #666666; font-family: tahoma, arial, 宋体; font-size: 12px; background-color: #f3f3f2;\">\n\n<p><strong><br>WEB前端研发工程师</strong>，在国内算是一个朝阳职业，这个领域没有学校的正规教育，大多数人都是靠自己自学成才。本文主要介绍一些<em>web开发</em>的书籍，目的是给想了解JavaScript或者是刚接触JavaScript的朋友，介绍如何通过循序渐进的看书来学习javascript。</p>\n<p>一. 入门级 ：就是有一定的基础(比如最常见的HTML标签及其属性、事件、方法;最常见的CSS属性;基础的JavaScript编程能力)，能够完成一些简单的WEB前端需求。</p>\n<p>　　推荐：《<em>JavaScript dom 编程艺术</em>》</p>\n<p>　　理由：此书绝对是入门的好书，本人也是在接触JS一段时间后才看的这本书。此书从JS的历史 – JS基础语法知识 – DOM介绍和简单的使用。</p>\n<p>　　评价：简洁，实用，详细，易懂，书不厚，相信很快就能看完。</p>\n<p>下载地址:<a href=\"http://www.kuaipan.cn/file/id_66867997939073035.html\" target=\"_blank\" rel=\"external\">http://www.kuaipan.cn/file/id_66867997939073035.html</a></p>\n<p>二.初级开发：不要苛责代码的对错严谨，毕竟每个程序员都有这样的一个过程，就是这个级别的特征。</p>\n<p>　　推荐：《javascript高级程序设计》(第二版)</p>\n<p>　　理由：这本书的作者是 Nicholas C.Zakas ,博客地址是 <a href=\"http://www.nczonline.net/\" target=\"_blank\" rel=\"external\">http://www.nczonline.net/</a> ,大家可以去多关注，雅虎的前端工程师，是YUI的代码贡献者，可想而知这本书得含金量，他出的书都广受好评。这本书已经出了第二版，而且与第一版相比内容更新很大，直接第二版就行。不要被书名的“高级”唬住，只要有JS基础语法知识和DOM基础知识就行，而且本书开始阶段还是介绍JS和DOM的语法知识。</p>\n<p>　　评论：重点推荐一下第五章(类型),第六章(OOP),第七章(匿名),多看几遍,至少要完全看明白，能为以后进阶打好基础，个人感觉这几章是本书的精华所在。这本书在入门的时候看节奏会快了一些，所以不建议初学者看，可是相对于我一会要介绍的书又算基础一点，所以建议先阅读完这本书，对浏览器兼容和语法知识有一定了解之后再往下阅读。</p>\n<p>下载地址:<a href=\"http://www.kuaipan.cn/file/id_66867997939073036.htm\" target=\"_blank\" rel=\"external\">http://www.kuaipan.cn/file/id_66867997939073036.htm</a></p>\n<p>　　推荐：《高性能 JavaScript》《JavaScript语言精粹》</p>\n<p>　　理由：先看的是《高性能JS》，这本书还是 Nicholas C.Zakas 所著，经典之作，书中大量举例了各种不同写法的JavaScript在浏览器中的性能情况，对规范JavaScript代码和提升性能有很好的帮助，最后提到了很多工具和性能测试的方法，都是灰常灰常有实际作用的，看得出作者很厚道(好吧,偶承认了,偶是他的粉丝)^_^,记忆最深的一句话:”如果 JavaScript 执行了几秒钟,那么很可能是你做错了什么”;；</p>\n<p>　　　　《语言精髓》和《高性能》有少部分关键知识都重复提到了，可是为什么要推荐这本书，因为本书对JS语言本质的描述太棒了，这是一本介绍JavaScript语言本质的权威书籍，从 “对象”，“函数”，“继承”，“数组”等等多个重要知识着手。我补一句话 – 本书需要反复阅读。</p>\n<p>　　评论：都是好书，都很薄，而且所说的内容只要有基础都不难。相信读完之后会对JS又有新的认识，且对以后的代码规范和浏览器差异性等高级问题有了新的认识，如果读完之后会有种被灌顶的感觉，那么恭喜你，你离中级不远了。</p>\n<p>下载地址:<a href=\"http://www.kuaipan.cn/file/id_66867997939073044.html\" target=\"_blank\" rel=\"external\">http://www.kuaipan.cn/file/id_66867997939073044.html</a></p>\n<p>三.中级开发：“中级开发人员的标志就是在高级开发或架构师较少的指导下高质量的完成工作，并对产品或项目有自己的想法与理解”。</p>\n<p>　　强烈推荐：《JavaScript DOM高级程序设计》</p>\n<p>　　理由：此书灰常犀利，本人一共看了近半年的时间，已反复阅读多次。说实话，这本书的翻译一般，代码也有少许错误，可是这不影响这本书的强大，通过学习本书，可以理解一个JS的库如何产生，自己动手写一个简单的自己的JS库，如果你打算研究其他的JS库或者正在研究其他的JS库，那么这本书会使你的理解达到新的高度，进阶高级必读，写库必读。</p>\n<p>　　评论：异常强大的一本JS巨作，此书不薄，强烈推荐。</p>\n<p>下载地址: 收集中</p>\n<p>　　强烈推荐：《JavaScript设计模式》</p>\n<p>　　理由：异常生猛的一本书，看书名带“设计模式”就知道，这本书想要读明白有点困难，本人自己感觉，只要某书一带“模式”这两字，反正就简单不了。本书对JS的“模仿接口”，“封装”，“继承”，“链式调用”，“工厂模式”等各种具体的设计模式及其在JavaScript 语言中的应用进行了详细的介绍，运用设计模式使代码更模块化、更高效并且更易维护。</p>\n<p>　　评论：书不厚，可真的是内容丰富且高深，强烈建议购买。</p>\n<p>下载地址:<a href=\"http://www.kuaipan.cn/file/id_66867997939073049.html\" target=\"_blank\" rel=\"external\">http://www.kuaipan.cn/file/id_66867997939073049.html</a></p>\n<p>　　推荐：《高性能网站建设指南》《高性能网站建设进阶指南》</p>\n<p>　　理由：在读完前几本书之后我们对前端的性能和自己的代码的效率已经达到相当的高度了，然后我们在接触一些前端工程师的一些精髓。本书对HTTP请求，CDN，内容缓存和一些web开发中常见问题进行讲解。</p>\n<p>　　评论：书都不厚，可是说的都是比较实用的东西，可是用不用的上还得看个人和项目需要了。</p>\n<p>　　以上就是整理WEB前端开发前辈们的一些JS相关书籍，朋友会问，为什么就只介绍的中级的，那么高级看的书在哪？有木有高级的书？进阶高级程序员之路又在哪？说下我自己的看法和对年轻朋友的建议吧，说的不好或不对请原谅，其实我也才真正工作两年多：</p>\n<p>　　　　1.主要是工作经验问题。达到一定程度以后真的合适的书很难找了，更多只有在工作中总结和积累。工作的越久碰到过的问题也就越多，^_^。所以一般说高级程序员一般都是至少都3年以上的工作经验，没办法，实践才出真理。</p>\n<p>　　　　2.我觉得高级web前端灰常有必要总结一个自己的JS库，不管大小，总归有一套自己的东西（嘿嘿，如果认真的实践过《JS DOM高级》的内容，估计有一套JS库的原型了）。</p>\n<p>　　　　3.前端有必要懂得和熟悉一本服务端语言，其实计算机语言很多语法大致都差不多，不同的就是内置的方法和属性，所以去熟悉一门语言并不难。</p>\n<p>　　　　4.许多年轻人都有眼高手低的毛病，我也一样，例如，有的人认为自己编起程序来很顺手，不用查手册，说写就写，很熟练，几乎什么程序都能编出来，就认为自己对这种语言很精通了。其实对于一门语言的掌握程度是不可深测的，对于语言掌握其实是一个无止尽的过程，没有终点。编写时间的长短和编写熟练程度，仅仅是精通语言表现的一个方面。更重要的是程序员要掌握这个语言的适用范围，整体构架，语法规则、功能分类等基础理论方面的知识，并能利用这方面的知识，用最科学的方法去解决现实中各种项目的各个问题。</p>\n<p></p></div><br>&nbsp;<p></p>\n<p><a href=\"http://www.jqueryba.com/826.html\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n","source":"_posts/web前端开发入门提高 js书籍.md","raw":"title: 'web前端开发入门提高 js书籍'\nid: 208\ncategories:\n  - Javascript\ndate: 2012-11-20 23:59:58\ntags: \n  - 前端\n\n---\n\n<div class=\"entry\" style=\"padding: 0px; margin: 0px; list-style: none; border: none; line-height: 28px; word-break: break-all; word-wrap: break-word; text-indent: 10px; color: #666666; font-family: tahoma, arial, 宋体; font-size: 12px; background-color: #f3f3f2;\">\n\n**\nWEB前端研发工程师**，在国内算是一个朝阳职业，这个领域没有学校的正规教育，大多数人都是靠自己自学成才。本文主要介绍一些_web开发_的书籍，目的是给想了解JavaScript或者是刚接触JavaScript的朋友，介绍如何通过循序渐进的看书来学习javascript。\n\n一. 入门级 ：就是有一定的基础(比如最常见的HTML标签及其属性、事件、方法;最常见的CSS属性;基础的JavaScript编程能力)，能够完成一些简单的WEB前端需求。\n\n　　推荐：《_JavaScript dom 编程艺术_》\n\n　　理由：此书绝对是入门的好书，本人也是在接触JS一段时间后才看的这本书。此书从JS的历史 – JS基础语法知识 – DOM介绍和简单的使用。\n\n　　评价：简洁，实用，详细，易懂，书不厚，相信很快就能看完。\n\n下载地址:http://www.kuaipan.cn/file/id_66867997939073035.html\n\n二.初级开发：不要苛责代码的对错严谨，毕竟每个程序员都有这样的一个过程，就是这个级别的特征。\n\n　　推荐：《javascript高级程序设计》(第二版)\n\n　　理由：这本书的作者是 Nicholas C.Zakas ,博客地址是 http://www.nczonline.net/ ,大家可以去多关注，雅虎的前端工程师，是YUI的代码贡献者，可想而知这本书得含金量，他出的书都广受好评。这本书已经出了第二版，而且与第一版相比内容更新很大，直接第二版就行。不要被书名的“高级”唬住，只要有JS基础语法知识和DOM基础知识就行，而且本书开始阶段还是介绍JS和DOM的语法知识。\n\n　　评论：重点推荐一下第五章(类型),第六章(OOP),第七章(匿名),多看几遍,至少要完全看明白，能为以后进阶打好基础，个人感觉这几章是本书的精华所在。这本书在入门的时候看节奏会快了一些，所以不建议初学者看，可是相对于我一会要介绍的书又算基础一点，所以建议先阅读完这本书，对浏览器兼容和语法知识有一定了解之后再往下阅读。\n\n下载地址:http://www.kuaipan.cn/file/id_66867997939073036.htm\n\n　　推荐：《高性能 JavaScript》《JavaScript语言精粹》\n\n　　理由：先看的是《高性能JS》，这本书还是 Nicholas C.Zakas 所著，经典之作，书中大量举例了各种不同写法的JavaScript在浏览器中的性能情况，对规范JavaScript代码和提升性能有很好的帮助，最后提到了很多工具和性能测试的方法，都是灰常灰常有实际作用的，看得出作者很厚道(好吧,偶承认了,偶是他的粉丝)^_^,记忆最深的一句话:”如果 JavaScript 执行了几秒钟,那么很可能是你做错了什么”;；\n\n　　　　《语言精髓》和《高性能》有少部分关键知识都重复提到了，可是为什么要推荐这本书，因为本书对JS语言本质的描述太棒了，这是一本介绍JavaScript语言本质的权威书籍，从 “对象”，“函数”，“继承”，“数组”等等多个重要知识着手。我补一句话 – 本书需要反复阅读。\n\n　　评论：都是好书，都很薄，而且所说的内容只要有基础都不难。相信读完之后会对JS又有新的认识，且对以后的代码规范和浏览器差异性等高级问题有了新的认识，如果读完之后会有种被灌顶的感觉，那么恭喜你，你离中级不远了。\n\n下载地址:http://www.kuaipan.cn/file/id_66867997939073044.html\n\n三.中级开发：“中级开发人员的标志就是在高级开发或架构师较少的指导下高质量的完成工作，并对产品或项目有自己的想法与理解”。\n\n　　强烈推荐：《JavaScript DOM高级程序设计》\n\n　　理由：此书灰常犀利，本人一共看了近半年的时间，已反复阅读多次。说实话，这本书的翻译一般，代码也有少许错误，可是这不影响这本书的强大，通过学习本书，可以理解一个JS的库如何产生，自己动手写一个简单的自己的JS库，如果你打算研究其他的JS库或者正在研究其他的JS库，那么这本书会使你的理解达到新的高度，进阶高级必读，写库必读。\n\n　　评论：异常强大的一本JS巨作，此书不薄，强烈推荐。\n\n下载地址: 收集中\n\n　　强烈推荐：《JavaScript设计模式》\n\n　　理由：异常生猛的一本书，看书名带“设计模式”就知道，这本书想要读明白有点困难，本人自己感觉，只要某书一带“模式”这两字，反正就简单不了。本书对JS的“模仿接口”，“封装”，“继承”，“链式调用”，“工厂模式”等各种具体的设计模式及其在JavaScript 语言中的应用进行了详细的介绍，运用设计模式使代码更模块化、更高效并且更易维护。\n\n　　评论：书不厚，可真的是内容丰富且高深，强烈建议购买。\n\n下载地址:http://www.kuaipan.cn/file/id_66867997939073049.html\n\n　　推荐：《高性能网站建设指南》《高性能网站建设进阶指南》\n\n　　理由：在读完前几本书之后我们对前端的性能和自己的代码的效率已经达到相当的高度了，然后我们在接触一些前端工程师的一些精髓。本书对HTTP请求，CDN，内容缓存和一些web开发中常见问题进行讲解。\n\n　　评论：书都不厚，可是说的都是比较实用的东西，可是用不用的上还得看个人和项目需要了。\n\n　　以上就是整理WEB前端开发前辈们的一些JS相关书籍，朋友会问，为什么就只介绍的中级的，那么高级看的书在哪？有木有高级的书？进阶高级程序员之路又在哪？说下我自己的看法和对年轻朋友的建议吧，说的不好或不对请原谅，其实我也才真正工作两年多：\n\n　　　　1.主要是工作经验问题。达到一定程度以后真的合适的书很难找了，更多只有在工作中总结和积累。工作的越久碰到过的问题也就越多，^_^。所以一般说高级程序员一般都是至少都3年以上的工作经验，没办法，实践才出真理。\n\n　　　　2.我觉得高级web前端灰常有必要总结一个自己的JS库，不管大小，总归有一套自己的东西（嘿嘿，如果认真的实践过《JS DOM高级》的内容，估计有一套JS库的原型了）。\n\n　　　　3.前端有必要懂得和熟悉一本服务端语言，其实计算机语言很多语法大致都差不多，不同的就是内置的方法和属性，所以去熟悉一门语言并不难。\n\n　　　　4.许多年轻人都有眼高手低的毛病，我也一样，例如，有的人认为自己编起程序来很顺手，不用查手册，说写就写，很熟练，几乎什么程序都能编出来，就认为自己对这种语言很精通了。其实对于一门语言的掌握程度是不可深测的，对于语言掌握其实是一个无止尽的过程，没有终点。编写时间的长短和编写熟练程度，仅仅是精通语言表现的一个方面。更重要的是程序员要掌握这个语言的适用范围，整体构架，语法规则、功能分类等基础理论方面的知识，并能利用这方面的知识，用最科学的方法去解决现实中各种项目的各个问题。\n\n</div>\n&nbsp;\n\n[原文链接](http://www.jqueryba.com/826.html)","slug":"web前端开发入门提高 js书籍","updated":1418908898000,"excerpt":"","_id":"xe832755ce1rfcyi","comments":true,"layout":"post","photos":[],"link":""},{"title":"wordpress for SAE 搬家心得","id":86,"categories":["s1fvmf8yl7edxxwd"],"date":1370398817000,"tags":["s16412qrcm7x4te5","59khkqtqiioef01l"],"content":"<p>原来<a href=\"http://www.laispace.com\" target=\"_blank\" rel=\"external\">laispace.com</a> 用的便宜香港空间，速度实在太慢忍受不了了！小赖尝试将wordpress从自己主机上搬迁到SAE上，提高访问速度，总结步骤如下：</p>\n<p>1.备份文章内容</p>\n<p>进入laispace【后台】-【工具】-【导出】，选择【所有内容】-【下载导出的文件】生成一个laispace.xml文件到本地</p>\n<p>2.备份数据库内容</p>\n<p>进入laispace phpMyAdmin 【数据库名】-【导出】，生成一个laispace.sql文件到本地</p>\n<a id=\"more\"></a>\n\n<p>3.SAE上安装wordpress</p>\n<p>SAE上安装worpress有很多权限问题，所以不能直接安装wordpress.org下载的安装包，需要在这里下载<a href=\"http://sae.sina.com.cn/?m=apps&amp;a=detail&amp;aid=1\" title=\"点击进入SAE下载wordpress\" target=\"_blank\" rel=\"external\">WordPress for SAE</a>安装</p>\n<p>4.SAE上导入文章等数据</p>\n<p>安装<a href=\"http://sae.sina.com.cn/?m=apps&amp;a=detail&amp;aid=1\" title=\"点击进入SAE下载wordpress\" target=\"_blank\" rel=\"external\">WordPress for SAE</a>成功后，进入sae wordpress【后台】-【工具】-【导入】，选择【Wordpress】将步骤2中的laipace.xml上传并导入，这一步可导入wordpress的文章内容等信息</p>\n<p>5.SAE上导入wordpress设置</p>\n<p>wordpress的很多设置是保存在数据库中的，单纯按步骤1备份只能备份文章的内容，要包括后台设置（如导航栏设置，用户信息）整站搬迁，需要进入SAE账户后台<a href=\"http://sae.sina.com.cn/\" target=\"_blank\" rel=\"external\">http://sae.sina.com.cn/</a> 【服务管理】-【MySQL】-【SQL管理】-【管理SQL】，将步骤2中的laispace.sql上传并导入，这一步可导入评论、链接、标签、用户信息等详细设置</p>\n<p>6.修改博客路径SiteUrl</p>\n<p>紧接着步骤5，在数据库中找到数据表wp_options，将siteurl从<a href=\"http://www.laispace.com\" target=\"_blank\" rel=\"external\">http://www.laispace.com</a> 修改为 <a href=\"http://xiaolai.sinaapp.com\" target=\"_blank\" rel=\"external\">http://xiaolai.sinaapp.com</a></p>\n<p>这一步可让博客里的相对链接跳转正确</p>\n<p>7.使用SVN上传插件、主题、附件</p>\n<p>前面说到，Wordpress for SAE限制了很多权限，无法直接在上面安装主题、插件等，需要自己备份laispace中的plugins、themes、uploads上传到SAE中，方法是使用SVN。先用FTP工具从laispace主机中将wp-content文件夹中的plugins、themes、uploads打包下载到本地，再使用SVN将这几个文件夹覆盖到Wordpress for SAE中，然后进入wordpress后台，启用主题、配置插件。注意，这里的uploads文件夹是使用laispace时上传的附件，将其上传到Wordpress for SAE后，才能在文章中正确显示那些附件（如图片）。PS：如此上传附件可能麻烦，可考虑SAE的Storge服务或者其他的云存储服务。</p>\n<p>经此折腾，我就把laispace.com整站搬迁到xiaolai.sinaapp.com啦！SAE好处多多，最大的亮点当然访问速度是比我使用收费的香港空间快多了（该死的校园网，还不能访问这个香港空间）！</p>\n<p>8.添加独立域名</p>\n<p>在SAE应用后台中进行【独立域名设置】，把www.laispace.com绑定到SAE的服务器中，这么一来输入www.laispace.com就可以跳转到托管到SAE上的wordpress但链接仍显示www.laispace.com了，但设置这个的时候发现，在我的域名设置中（万网域名），能将www.laispace.com或abc.laispace.com等域名CNAME到SAE服务器，但万网不提供给我的主域名laispace.com CNAME解析，即浏览器栏直接输入laispace.com将不能访问！这可是个致命的问题。</p>\n<p>9.修改DNS解析</p>\n<p>google了好久，发现dnspod的域名解析服务，于是在<a href=\"www.dnspod.cn\">dnspod官网</a>注册后，获得dnspod的域名DNS，然后到万网【域名管理】-【域名DNS修改】，将万网的DNS修改为dnspod的DNS，直接在dnspod中管理域名解析。将主域名laispace.com CNAME到SAE服务器上，这么一来，输入地址laispace.com就可以直接访问了！</p>\n<p>说明，写此文时小赖安装的Wordpress for SAE版本是 SAE 3.4.1 测试版</p>\n<p>附一些参考资料：</p>\n<p>SAE官网 <a href=\"http://sae.sina.com.cn/\" target=\"_blank\" rel=\"external\">http://sae.sina.com.cn</a></p>\n<p>Wordpress for SAE 官方 <a href=\"http://wp4sae.org/\" target=\"_blank\" rel=\"external\">http://wp4sae.org/</a></p>\n<p>SAE部署SVN指南 <a href=\"http://sae.sina.com.cn/?m=devcenter&amp;catId=212\" target=\"_blank\" rel=\"external\">http://sae.sina.com.cn/?m=devcenter&amp;catId=212</a></p>\n","source":"_posts/wordpress for SAE 搬家心得.md","raw":"title: wordpress for SAE 搬家心得\nid: 86\ncategories:\n  - Tools\ndate: 2013-06-05 10:20:17\ntags:\n  - wordpress\n  - SAE\n\t\n---\n\n原来[laispace.com](http://www.laispace.com) 用的便宜香港空间，速度实在太慢忍受不了了！小赖尝试将wordpress从自己主机上搬迁到SAE上，提高访问速度，总结步骤如下：\n\n1.备份文章内容\n\n进入laispace【后台】-【工具】-【导出】，选择【所有内容】-【下载导出的文件】生成一个laispace.xml文件到本地\n\n2.备份数据库内容\n\n进入laispace phpMyAdmin 【数据库名】-【导出】，生成一个laispace.sql文件到本地\n\n<!-- more -->\n\n3.SAE上安装wordpress\n\nSAE上安装worpress有很多权限问题，所以不能直接安装wordpress.org下载的安装包，需要在这里下载[WordPress for SAE](http://sae.sina.com.cn/?m=apps&amp;a=detail&amp;aid=1 \"点击进入SAE下载wordpress\")安装\n\n4.SAE上导入文章等数据\n\n安装[WordPress for SAE](http://sae.sina.com.cn/?m=apps&amp;a=detail&amp;aid=1 \"点击进入SAE下载wordpress\")成功后，进入sae wordpress【后台】-【工具】-【导入】，选择【Wordpress】将步骤2中的laipace.xml上传并导入，这一步可导入wordpress的文章内容等信息\n\n5.SAE上导入wordpress设置\n\nwordpress的很多设置是保存在数据库中的，单纯按步骤1备份只能备份文章的内容，要包括后台设置（如导航栏设置，用户信息）整站搬迁，需要进入SAE账户后台[http://sae.sina.com.cn/](http://sae.sina.com.cn/) 【服务管理】-【MySQL】-【SQL管理】-【管理SQL】，将步骤2中的laispace.sql上传并导入，这一步可导入评论、链接、标签、用户信息等详细设置\n\n6.修改博客路径SiteUrl\n\n紧接着步骤5，在数据库中找到数据表wp_options，将siteurl从http://www.laispace.com 修改为 http://xiaolai.sinaapp.com\n\n这一步可让博客里的相对链接跳转正确\n\n7.使用SVN上传插件、主题、附件\n\n前面说到，Wordpress for SAE限制了很多权限，无法直接在上面安装主题、插件等，需要自己备份laispace中的plugins、themes、uploads上传到SAE中，方法是使用SVN。先用FTP工具从laispace主机中将wp-content文件夹中的plugins、themes、uploads打包下载到本地，再使用SVN将这几个文件夹覆盖到Wordpress for SAE中，然后进入wordpress后台，启用主题、配置插件。注意，这里的uploads文件夹是使用laispace时上传的附件，将其上传到Wordpress for SAE后，才能在文章中正确显示那些附件（如图片）。PS：如此上传附件可能麻烦，可考虑SAE的Storge服务或者其他的云存储服务。\n\n经此折腾，我就把laispace.com整站搬迁到xiaolai.sinaapp.com啦！SAE好处多多，最大的亮点当然访问速度是比我使用收费的香港空间快多了（该死的校园网，还不能访问这个香港空间）！\n\n8.添加独立域名\n\n在SAE应用后台中进行【独立域名设置】，把www.laispace.com绑定到SAE的服务器中，这么一来输入www.laispace.com就可以跳转到托管到SAE上的wordpress但链接仍显示www.laispace.com了，但设置这个的时候发现，在我的域名设置中（万网域名），能将www.laispace.com或abc.laispace.com等域名CNAME到SAE服务器，但万网不提供给我的主域名laispace.com CNAME解析，即浏览器栏直接输入laispace.com将不能访问！这可是个致命的问题。\n\n9.修改DNS解析\n\ngoogle了好久，发现dnspod的域名解析服务，于是在[dnspod官网](www.dnspod.cn)注册后，获得dnspod的域名DNS，然后到万网【域名管理】-【域名DNS修改】，将万网的DNS修改为dnspod的DNS，直接在dnspod中管理域名解析。将主域名laispace.com CNAME到SAE服务器上，这么一来，输入地址laispace.com就可以直接访问了！\n\n说明，写此文时小赖安装的Wordpress for SAE版本是 SAE 3.4.1 测试版\n\n附一些参考资料：\n\nSAE官网 [http://sae.sina.com.cn](http://sae.sina.com.cn/)\n\nWordpress for SAE 官方 [http://wp4sae.org/](http://wp4sae.org/)\n\nSAE部署SVN指南 [http://sae.sina.com.cn/?m=devcenter&amp;catId=212](http://sae.sina.com.cn/?m=devcenter&amp;catId=212)","slug":"wordpress for SAE 搬家心得","updated":1418908898000,"excerpt":"<p>原来<a href=\"http://www.laispace.com\" target=\"_blank\" rel=\"external\">laispace.com</a> 用的便宜香港空间，速度实在太慢忍受不了了！小赖尝试将wordpress从自己主机上搬迁到SAE上，提高访问速度，总结步骤如下：</p>\n<p>1.备份文章内容</p>\n<p>进入laispace【后台】-【工具】-【导出】，选择【所有内容】-【下载导出的文件】生成一个laispace.xml文件到本地</p>\n<p>2.备份数据库内容</p>\n<p>进入laispace phpMyAdmin 【数据库名】-【导出】，生成一个laispace.sql文件到本地</p>\n","_id":"l2p31b8gehozjcl5","comments":true,"layout":"post","photos":[],"link":""},{"title":"《JavaScript精粹》笔记","id":86,"categories":["be592wtznj5wcvwn"],"date":1345912506000,"tags":[],"content":"<h1 id=\"2-1空白\">2.1空白</h1>\n<p>用空格来分隔字符序列,使代码美观</p>\n<p><pre class=\"brush:javascript\">var that = this;</pre><br>javascript的两种注释，注释一定要精确地描述代码。</p>\n<p>javascript中的/<em>注释</em>/对代码来说并不安全，故用//来代替。</p>\n<p>&nbsp;</p>\n<h1 id=\"2-2标示符\">2.2标示符</h1>\n<p>javascript不允许用保留字来命名变量、参数和属性。</p>\n<p>即标示符用于语句、变量、参数、属性名和标记。</p>\n<p>&nbsp;</p>\n<h1 id=\"2-3数字\">2.3数字</h1>\n<p>1.javascript只有单一的数字类型（64位的浮点数），避免了短整数溢出的问题和音数字类型导致的错误。</p>\n<p>NaN不等于任何值，可用函数isNaN(number)来检测。</p>\n<p>2.数字拥有方法。Math包含一套作用于数字的方法。</p>\n<p>&nbsp;</p>\n<h1 id=\"2-4字符串\">2.4字符串</h1>\n<p>1.javascript创建的字符都是16位的（Unicode字符集）。</p>\n<p>2.javascript没有字符类型，要显示一个字符，只需要创建一个仅包含字符的字符串。</p>\n<p>3.转义字符允许把正常情况下不被允许的字符插入到字符串中，如”\\u0041”代表十六进制的数字</p>\n<p>4.字符串是不可变的，一旦被创建就无法改变，但能通过 + 运算符去连接其他字符串而得到新的字符串</p>\n<p>‘c’ + ‘a’ + ‘t’ === ‘cat’是true（包含完全相同的字符且字符顺序相同）</p>\n<p>5.字符串存在一些方法，如：</p>\n<p><pre class=\"brush:javascript\">‘ cat ‘.toUpperCase() === ‘CAT’</pre><br>&nbsp;</p>\n<h1 id=\"2-5语句\">2.5语句</h1>\n<p>web浏览器缺少链接器，故javascript把语句抛入一个公共的全局名字空间中。</p>\n<p>1.var语句呗用在函数内部时，定义了这个函数的私有变量。</p>\n<p>2.switch、while、for和do语句允许有一个可选的前置标签（label），配合break使用</p>\n<p>3.javascript的代码块不会创建新的作用域，因此变量应该被定义在函数的顶端而不是代码块中</p>\n<p>4.以下值为假值（falsy）:</p>\n<p>false/null/undefined/空字符串 ‘ ‘ /数字 0 /数字 NaN</p>\n<p>其余所有值当做真值，包括true/“false”以及所有的对象</p>\n<h1 id=\"2-6表达式\">2.6表达式</h1>\n<p>&nbsp;</p>\n<h1 id=\"2-7字面量\">2.7字面量</h1>\n<p>&nbsp;</p>\n<h1 id=\"2-8函数\">2.8函数</h1>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<h1 id=\"3对象\">3对象</h1>\n<p>数字/字符串/布尔值拥有方法,但都是不可变的.</p>\n<p>javascript中的对象是可变的键控集合(keyed collections)</p>\n<p>javascript中的对象是无类别的(class-free),对新属性的名字和值没有约束.</p>\n<p>对象适合收集和管理数据,可包含其他对象,容易表示成树形或图形结构.</p>\n<p>javascript包括一个原型链特性,允许对象继承.正确使用它能减少对象初始化的时间和内存消耗.</p>\n<h1 id=\"3-1对象字面量\">3.1对象字面量</h1>\n<p>1.对象字面量就是包围在一对花括号中的 “ 名/值 “ 对.</p>\n<p>2.对象字面量中，若属性名是一个合法的标示符且不是保留字，并不强制要求用引号括住属性名。故用“first-name”是必须的，但是否括住first_name则是可选的。</p>\n<p>3.逗号用来分隔多个”名/值”对.</p>\n<p>4.属性的值可以从包括另一个对象字面量在内的任意表达式中获得，对象是可嵌套的：</p>\n<p><pre class=\"brush:javascript\">var flight = {</pre></p>\n<p>airline: “Oceanic”,</p>\n<p>number: 815,</p>\n<p>departure: {</p>\n<p>IATA: “SYD”,</p>\n<p>time: “2012-08-25 11:12”,</p>\n<p>city: “Guangzhou”</p>\n<p>},</p>\n<p>arrial: {</p>\n<p>IATA: “LAX”,</p>\n<p>time: “2012-08-25 23:24”,</p>\n<p>city: “Nanjing”</p>\n<p>}</p>\n<p>};<br>&nbsp;</p>\n<h1 id=\"3-2检索\">3.2检索</h1>\n<p>1.采用在[ ]后缀中括住一个字符串表达式的方式。</p>\n<p>2.优先考虑  . 表示法（更紧凑且可读性好）。</p>\n<p><pre class=\"brush:javascript\">stooges[“first-name”]</pre></p>\n<p>flight.departure.IATA<br>&nbsp;</p>\n<p>3.检索一个并不存在的成员元素的值，则返回undefined值。</p>\n<p>4.||运算符可用来填充默认值</p>\n<p><pre class=\"brush:javascript\">var middle = stooges[“middle-name”] || “(none)”;</pre></p>\n<p>var status = flight.status || “unknown”;<br>&nbsp;</p>\n<p>5.检索一个undefined值会导致TypeError异常，但可用 &amp;&amp; 运算符来避免错误</p>\n<p><div></div></p>\n<p><pre class=\"brush:other\">flight.equipment //undefined</pre></p>\n<p>flight.equipment.model  //throw “TypeError”</p>\n<p>flight.equipment &amp;&amp; flight.equipment.model  //undefined<br>&nbsp;</p>\n<p></p>\n<h1 id=\"3-3更新\">3.3更新</h1>\n<p>对象中的值通过赋值语句来更新。</p>\n<p>&nbsp;</p>\n<h1 id=\"3-4引用\">3.4引用</h1>\n<p>对象通过引用来传递，但永远不会被拷贝。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<h1 id=\"3-5原型\">3.5原型</h1>\n<p>1.所有通过对象字面量创建的对象都连接到Object.prototype这个对象。</p>\n<p>2.javascript提供的实现机制复杂而杂乱，但其实可以被明显地简化 。</p>\n<p>3.给Object增加一个beget方法，创建一个使用原对象作为其原型的新对象。</p>\n<p>4.原型连接在更新时是不起作用的，当对某个对象做出改变时，不会触及该对象的原型。</p>\n<p>5.原型连接只在检索值的时候才被用到。</p>\n<p>6.若想要的属性完全不存在于原型链中，结果就是undefined值，这个过程称为【委托】</p>\n<p>7.原型关系是动态的，若将新属性添加到原型中，该属性会立刻对所有基于该原型创建的对象可见。</p>\n<p>&nbsp;</p>\n<h1 id=\"3-6反射\">3.6反射</h1>\n<p>1.typeof操作确定属性的类型：</p>\n<p><div></div></p>\n<p><pre class=\"brush:other\">typeof flight.number // ‘ number ‘</pre></p>\n<p>typeof flight.status // ‘ string ‘</p>\n<p>typeof flight.arrival // ‘ object ‘</p>\n<p>typeof flight.manifest // ‘ undefined ‘<br>&nbsp;</p>\n<p><br>2.做反射的目标是数据，故应意识到一些值可能会是函数</p>\n<p>3.hasOwnProperty方法：若对象拥有独有的属性，将返回true。该方法不会检查原型链。</p>\n<p><div></div></p>\n<p><pre class=\"brush:other\">flight.hasOwnProperty( ‘number’ )  //true</pre></p>\n<p>flight.hasOwnProperty(‘constructor’) //false<br>&nbsp;</p>\n<p></p>\n<h1 id=\"3-7枚举\">3.7枚举</h1>\n<p>1.for in 语句用来遍历对象中的所有属性名。</p>\n<p>2.for in 语句会枚举所有属性，包括原型中的属性</p>\n<p>3.用hasOwnProperty方法做过滤器过滤掉不想要的值，用typeof来排除函数：</p>\n<p><pre class=\"brush:javascript\">var name;</pre></p>\n<p>for (name in another_stooge) {</p>\n<p>if (typeof another_stooge[name] !== ‘function’) {</p>\n<p>document.writeln(name + ‘: ‘ + another_stooge[name]);</p>\n<p>}</p>\n<p>}<br>&nbsp;</p>\n<p>4.属性名出线的顺序是不确定的，故要对任何可能出线的顺序有所准备。</p>\n<p>5.要以特定顺序出线，则避免使用for in 语句，而是创建一个数组，在其中以正确的顺序包含属性名：</p>\n<p><pre class=\"brush:javascript\">var i;</pre></p>\n<p>var properties = [‘first-name’,’middle-name’,’last-name’,’profession’];</p>\n<p>for (i=0;i&lt;properties.length; i +=1) {</p>\n<p>document.writeln(properties[i] + ‘: ‘ +another_stooge[properties[i]]);</p>\n<p>}<br>&nbsp;</p>\n<h1 id=\"3-8删除\">3.8删除</h1>\n<p>delete运算符用来删除对象的属性，移除对象中确定包含的属性，不会触及原型链中的任何对象。</p>\n<p>删除对象的属性可能会让来自原型链中的属性浮现出来:</p>\n<p><pre class=\"brush:javascript\">another_stooge.nickname //‘nickname1’</pre></p>\n<p>//删除another_stooge中的nickname属性，从而暴露出原型的nickname属性</p>\n<p>delete another_stooge.nickname;</p>\n<p>another_stooge.nickname //‘nickname0’<br>&nbsp;</p>\n<h1 id=\"3-9减少全局变量污染\">3.9减少全局变量污染</h1>\n<p>全局变量削弱的程序的灵活性，故应该避免。</p>\n<p>1.最小化使用全局变量的一个方法是在应用中值创建唯一一个全局变量：</p>\n<p><pre class=\"brush:javascript\">var MYAPP = {};</pre><br>&nbsp;</p>\n<p>该变量此时变成应用的容器，只要把多个全局变量都整理在一个名称空间下，将能降低一其他应用程序、组建或类库之间产生糟糕的相互影响。</p>\n<p>&nbsp;</p>\n<p>2.用闭包来进行信息隐藏的方式，是另一个减少全局污染的方法。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<h1 id=\"4\">4</h1>\n<h1 id=\"4-1函数对象\">4.1函数对象</h1>\n<p>1.对象是”名/值”对的集合并拥有一个连到原型对象的隐藏连接。</p>\n<p>2.对象字面量产生的对象连接到Object.prototype,函数对象连接到Function.prototype.</p>\n<p>3.每个函数在创建时附有两个隐藏属性：函数的上下文和实现函数行为的代码。</p>\n<p>4.每个函数对象创建时也附带有一个prorotype属性，它的值是一个拥有construction属性并且值为该函数的对象。</p>\n<p>5.注意函数是对象，拥有对象的一些性质如方法等。</p>\n<p>6.函数的与众不同之处在于它们可以被调用。javascript在创建一个函数对象时，会设置一个“调用”属性。</p>\n<p>&nbsp;</p>\n<h1 id=\"4-2函数字面量\">4.2函数字面量</h1>\n<p>1.通过函数字面量来创建函数对象：</p>\n<p><pre class=\"brush:javascript\">var add = function (a,b) {</pre></p>\n<p>return a + b;</p>\n<p>};//创建一个名为add得到变量并把两个数字相加的函数赋值给它。<br>&nbsp;</p>\n<p>2.通过函数字面量创建的函数对象包含一个连到外部上下文的连接，这称为闭包——javascript强大表现力的根基！</p>\n<p>&nbsp;</p>\n<h1 id=\"4-3调用\">4.3调用</h1>\n<p>1.调用一个函数将暂停当前函数的执行，传递控制权和参数给新函数。</p>\n<p>2.每个函数接受两个附加的参数：this 和 argument 。</p>\n<p>3.this 的四种调用模式：方法调用模式、函数调用模式、构造器调用模式和 apply 调用模式。</p>\n<p>4.当实参个数与形参个数不匹配时并不导致运行错误，而是忽略超出的实参或将缺失的实参替换为undefined。</p>\n<p>3.1)方法调用模式（函数是对象的一个属性时，即称为方法）</p>\n<p>1.当方法被调用时，this被绑定到该对象。</p>\n<p>2.方法可以使用this去访问对象，故它能从对象中取值或修改该对象。</p>\n<p>3.this到对象的绑定发生在调用的时候，使得函数可以对this高度复用。通过this可取得它们所属对象的上下文的方法称为【公共方法】。</p>\n<p>3.2）函数调用模式（函数并非一个对象的属性时，当做一个函数来调用）</p>\n<p>var sum = add (3,4);</p>\n<p>1.当函数以此模式调用时，this被绑定到全局对象。（这是语言设计上的一个错误）</p>\n<p>这个错误的后果是方法不能利用内部函数来帮助它工作。</p>\n<p>解决方案：该方法定义一个变量并赋值为this，则内部函数可以通过那个变量访问到this。</p>\n<p>&nbsp;</p>\n<p>3.3）构造器调用模式</p>\n<p>1.在一个函数前面带上new来调用，将创建一个隐藏连接到该函数的prototype成员的新对象，同时this将会绑定到那个新对象上。</p>\n<p>2.new前缀也会改变return语句的行为</p>\n<p>3.4）Apply调用模式</p>\n<p>1.javascript是一门函数式的面向对象编程语言，故函数可以拥有方法。</p>\n<p>2.apply方法让我们构建一个参数组并用其去调用函数，允许选择this的值。</p>\n<p>3.apply方法接收两个参数，第一个是将被绑定给this的值，第二个是一个参数数组：</p>\n<p>&nbsp;</p>\n<h1 id=\"4-4参数\">4.4参数</h1>\n<p>1.当函数被调用时，会得到一个附带参数，即argument数组。通过它函数可以访问所有被它调用时传递给它的参数列表，包括那么没有被分配给函数声明时定义的形式参数的多余参数。这使得可以编写一个无须指定参数个数的函数。</p>\n<p>&nbsp;</p>\n<p>2.arguments并不是一个真正的数组，只是一个类似数组（array-like）的对象，它拥有一个length的属性，但缺少所有的数组方法。</p>\n<p>&nbsp;</p>\n<h1 id=\"4-5返回\">4.5返回</h1>\n<p>1.return语句可使函数提前返回，return被执行时函数立即返回而不执行余下的语句。</p>\n<p>2.一个函数总会返回一个值，若没有指定返回的值，则返回undefined。</p>\n<p>3.若函数以在前面加上new前缀的方式来调用，且返回值不是一个对象，则返回this（该新对象）。</p>\n<p>&nbsp;</p>\n<h1 id=\"4-6异常\">4.6异常</h1>\n<p>&nbsp;</p>\n<p>throw语句中断函数的执行，抛出一个exception对象，该对象包含可识别异常类型的name属性和一个描述性的message属性。</p>\n<p>该exception对象将被传递到一个try语句的catch从句：</p>\n<p>&nbsp;</p>\n<p>try代码块中抛出异常，控制权就会跳转到catch从句。</p>\n<p>未完待续。。。</p>\n","source":"_posts/《JavaScript精粹》笔记.md","raw":"title: 《JavaScript精粹》笔记\nid: 86\ncategories:\n  - Javascript\ndate: 2012-08-26 00:35:06\ntags:\n---\n\n#2.1空白\n\n用空格来分隔字符序列,使代码美观\n<pre class=\"brush:javascript\">var that = this;</pre>\njavascript的两种注释，注释一定要精确地描述代码。\n\njavascript中的/*注释*/对代码来说并不安全，故用//来代替。\n\n&nbsp;\n\n#2.2标示符\n\njavascript不允许用保留字来命名变量、参数和属性。\n\n即标示符用于语句、变量、参数、属性名和标记。\n\n&nbsp;\n\n#2.3数字\n\n1.javascript只有单一的数字类型（64位的浮点数），避免了短整数溢出的问题和音数字类型导致的错误。\n\nNaN不等于任何值，可用函数isNaN(number)来检测。\n\n2.数字拥有方法。Math包含一套作用于数字的方法。\n\n&nbsp;\n\n#2.4字符串\n\n1.javascript创建的字符都是16位的（Unicode字符集）。\n\n2.javascript没有字符类型，要显示一个字符，只需要创建一个仅包含字符的字符串。\n\n3.转义字符允许把正常情况下不被允许的字符插入到字符串中，如\"\\u0041\"代表十六进制的数字\n\n4.字符串是不可变的，一旦被创建就无法改变，但能通过 + 运算符去连接其他字符串而得到新的字符串\n\n'c' + 'a' + 't' === 'cat'是true（包含完全相同的字符且字符顺序相同）\n\n5.字符串存在一些方法，如：\n<pre class=\"brush:javascript\">' cat '.toUpperCase() === 'CAT'</pre>\n&nbsp;\n\n#2.5语句\n\nweb浏览器缺少链接器，故javascript把语句抛入一个公共的全局名字空间中。\n\n1.var语句呗用在函数内部时，定义了这个函数的私有变量。\n\n2.switch、while、for和do语句允许有一个可选的前置标签（label），配合break使用\n\n3.javascript的代码块不会创建新的作用域，因此变量应该被定义在函数的顶端而不是代码块中\n\n4.以下值为假值（falsy）:\n\nfalse/null/undefined/空字符串 ' ' /数字 0 /数字 NaN\n\n其余所有值当做真值，包括true/\"false\"以及所有的对象\n\n#2.6表达式\n\n&nbsp;\n\n#2.7字面量\n\n&nbsp;\n\n#2.8函数\n\n&nbsp;\n\n&nbsp;\n\n#3对象\n\n数字/字符串/布尔值拥有方法,但都是不可变的.\n\njavascript中的对象是可变的键控集合(keyed collections)\n\njavascript中的对象是无类别的(class-free),对新属性的名字和值没有约束.\n\n对象适合收集和管理数据,可包含其他对象,容易表示成树形或图形结构.\n\njavascript包括一个原型链特性,允许对象继承.正确使用它能减少对象初始化的时间和内存消耗.\n\n#3.1对象字面量\n\n1.对象字面量就是包围在一对花括号中的 \" 名/值 \" 对.\n\n2.对象字面量中，若属性名是一个合法的标示符且不是保留字，并不强制要求用引号括住属性名。故用“first-name”是必须的，但是否括住first_name则是可选的。\n\n3.逗号用来分隔多个\"名/值\"对.\n\n4.属性的值可以从包括另一个对象字面量在内的任意表达式中获得，对象是可嵌套的：\n<pre class=\"brush:javascript\">var flight = {\n\nairline: \"Oceanic\",\n\nnumber: 815,\n\ndeparture: {\n\nIATA: \"SYD\",\n\ntime: \"2012-08-25 11:12\",\n\ncity: \"Guangzhou\"\n\n},\n\narrial: {\n\nIATA: \"LAX\",\n\ntime: \"2012-08-25 23:24\",\n\ncity: \"Nanjing\"\n\n}\n\n};</pre>\n&nbsp;\n\n#3.2检索\n\n1.采用在[ ]后缀中括住一个字符串表达式的方式。\n\n2.优先考虑  . 表示法（更紧凑且可读性好）。\n<pre class=\"brush:javascript\">stooges[\"first-name\"]\n\nflight.departure.IATA</pre>\n&nbsp;\n\n3.检索一个并不存在的成员元素的值，则返回undefined值。\n\n4.||运算符可用来填充默认值\n<pre class=\"brush:javascript\">var middle = stooges[\"middle-name\"] || \"(none)\";\n\nvar status = flight.status || \"unknown\";</pre>\n&nbsp;\n\n5.检索一个undefined值会导致TypeError异常，但可用 &amp;&amp; 运算符来避免错误\n<div>\n<pre class=\"brush:other\">flight.equipment //undefined\n\nflight.equipment.model  //throw \"TypeError\"\n\nflight.equipment &amp;&amp; flight.equipment.model  //undefined</pre>\n&nbsp;\n\n</div>\n#3.3更新\n\n对象中的值通过赋值语句来更新。\n\n&nbsp;\n\n#3.4引用\n\n对象通过引用来传递，但永远不会被拷贝。\n\n&nbsp;\n\n&nbsp;\n\n#3.5原型\n\n1.所有通过对象字面量创建的对象都连接到Object.prototype这个对象。\n\n2.javascript提供的实现机制复杂而杂乱，但其实可以被明显地简化 。\n\n3.给Object增加一个beget方法，创建一个使用原对象作为其原型的新对象。\n\n4.原型连接在更新时是不起作用的，当对某个对象做出改变时，不会触及该对象的原型。\n\n5.原型连接只在检索值的时候才被用到。\n\n6.若想要的属性完全不存在于原型链中，结果就是undefined值，这个过程称为【委托】\n\n7.原型关系是动态的，若将新属性添加到原型中，该属性会立刻对所有基于该原型创建的对象可见。\n\n&nbsp;\n\n#3.6反射\n\n1.typeof操作确定属性的类型：\n<div>\n<pre class=\"brush:other\">typeof flight.number // ' number '\n\ntypeof flight.status // ' string '\n\ntypeof flight.arrival // ' object '\n\ntypeof flight.manifest // ' undefined '</pre>\n&nbsp;\n\n</div>\n2.做反射的目标是数据，故应意识到一些值可能会是函数\n\n3.hasOwnProperty方法：若对象拥有独有的属性，将返回true。该方法不会检查原型链。\n<div>\n<pre class=\"brush:other\">flight.hasOwnProperty( 'number' )  //true\n\nflight.hasOwnProperty('constructor') //false</pre>\n&nbsp;\n\n</div>\n#3.7枚举\n\n1.for in 语句用来遍历对象中的所有属性名。\n\n2.for in 语句会枚举所有属性，包括原型中的属性\n\n3.用hasOwnProperty方法做过滤器过滤掉不想要的值，用typeof来排除函数：\n<pre class=\"brush:javascript\">var name;\n\nfor (name in another_stooge) {\n\nif (typeof another_stooge[name] !== 'function') {\n\ndocument.writeln(name + ': ' + another_stooge[name]);\n\n}\n\n}</pre>\n&nbsp;\n\n4.属性名出线的顺序是不确定的，故要对任何可能出线的顺序有所准备。\n\n5.要以特定顺序出线，则避免使用for in 语句，而是创建一个数组，在其中以正确的顺序包含属性名：\n<pre class=\"brush:javascript\">var i;\n\nvar properties = ['first-name','middle-name','last-name','profession'];\n\nfor (i=0;i&lt;properties.length; i +=1) {\n\ndocument.writeln(properties[i] + ': ' +another_stooge[properties[i]]);\n\n}</pre>\n&nbsp;\n\n#3.8删除\n\ndelete运算符用来删除对象的属性，移除对象中确定包含的属性，不会触及原型链中的任何对象。\n\n删除对象的属性可能会让来自原型链中的属性浮现出来:\n<pre class=\"brush:javascript\">another_stooge.nickname //'nickname1'\n\n//删除another_stooge中的nickname属性，从而暴露出原型的nickname属性\n\ndelete another_stooge.nickname;\n\nanother_stooge.nickname //'nickname0'</pre>\n&nbsp;\n\n#3.9减少全局变量污染\n\n全局变量削弱的程序的灵活性，故应该避免。\n\n1.最小化使用全局变量的一个方法是在应用中值创建唯一一个全局变量：\n<pre class=\"brush:javascript\">var MYAPP = {};</pre>\n&nbsp;\n\n该变量此时变成应用的容器，只要把多个全局变量都整理在一个名称空间下，将能降低一其他应用程序、组建或类库之间产生糟糕的相互影响。\n\n&nbsp;\n\n2.用闭包来进行信息隐藏的方式，是另一个减少全局污染的方法。\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n#4\n\n#4.1函数对象\n\n1.对象是\"名/值\"对的集合并拥有一个连到原型对象的隐藏连接。\n\n2.对象字面量产生的对象连接到Object.prototype,函数对象连接到Function.prototype.\n\n3.每个函数在创建时附有两个隐藏属性：函数的上下文和实现函数行为的代码。\n\n4.每个函数对象创建时也附带有一个prorotype属性，它的值是一个拥有construction属性并且值为该函数的对象。\n\n5.注意函数是对象，拥有对象的一些性质如方法等。\n\n6.函数的与众不同之处在于它们可以被调用。javascript在创建一个函数对象时，会设置一个“调用”属性。\n\n&nbsp;\n\n#4.2函数字面量\n\n1.通过函数字面量来创建函数对象：\n<pre class=\"brush:javascript\">var add = function (a,b) {\n\nreturn a + b;\n\n};//创建一个名为add得到变量并把两个数字相加的函数赋值给它。</pre>\n&nbsp;\n\n2.通过函数字面量创建的函数对象包含一个连到外部上下文的连接，这称为闭包----javascript强大表现力的根基！\n\n&nbsp;\n\n#4.3调用\n\n1.调用一个函数将暂停当前函数的执行，传递控制权和参数给新函数。\n\n2.每个函数接受两个附加的参数：this 和 argument 。\n\n3.this 的四种调用模式：方法调用模式、函数调用模式、构造器调用模式和 apply 调用模式。\n\n4.当实参个数与形参个数不匹配时并不导致运行错误，而是忽略超出的实参或将缺失的实参替换为undefined。\n\n3.1)方法调用模式（函数是对象的一个属性时，即称为方法）\n\n1.当方法被调用时，this被绑定到该对象。\n\n2.方法可以使用this去访问对象，故它能从对象中取值或修改该对象。\n\n3.this到对象的绑定发生在调用的时候，使得函数可以对this高度复用。通过this可取得它们所属对象的上下文的方法称为【公共方法】。\n\n3.2）函数调用模式（函数并非一个对象的属性时，当做一个函数来调用）\n\nvar sum = add (3,4);\n\n1.当函数以此模式调用时，this被绑定到全局对象。（这是语言设计上的一个错误）\n\n这个错误的后果是方法不能利用内部函数来帮助它工作。\n\n解决方案：该方法定义一个变量并赋值为this，则内部函数可以通过那个变量访问到this。\n\n&nbsp;\n\n3.3）构造器调用模式\n\n1.在一个函数前面带上new来调用，将创建一个隐藏连接到该函数的prototype成员的新对象，同时this将会绑定到那个新对象上。\n\n2.new前缀也会改变return语句的行为\n\n3.4）Apply调用模式\n\n1.javascript是一门函数式的面向对象编程语言，故函数可以拥有方法。\n\n2.apply方法让我们构建一个参数组并用其去调用函数，允许选择this的值。\n\n3.apply方法接收两个参数，第一个是将被绑定给this的值，第二个是一个参数数组：\n\n&nbsp;\n\n#4.4参数\n\n1.当函数被调用时，会得到一个附带参数，即argument数组。通过它函数可以访问所有被它调用时传递给它的参数列表，包括那么没有被分配给函数声明时定义的形式参数的多余参数。这使得可以编写一个无须指定参数个数的函数。\n\n&nbsp;\n\n2.arguments并不是一个真正的数组，只是一个类似数组（array-like）的对象，它拥有一个length的属性，但缺少所有的数组方法。\n\n&nbsp;\n\n#4.5返回\n\n1.return语句可使函数提前返回，return被执行时函数立即返回而不执行余下的语句。\n\n2.一个函数总会返回一个值，若没有指定返回的值，则返回undefined。\n\n3.若函数以在前面加上new前缀的方式来调用，且返回值不是一个对象，则返回this（该新对象）。\n\n&nbsp;\n\n#4.6异常\n\n&nbsp;\n\nthrow语句中断函数的执行，抛出一个exception对象，该对象包含可识别异常类型的name属性和一个描述性的message属性。\n\n该exception对象将被传递到一个try语句的catch从句：\n\n&nbsp;\n\ntry代码块中抛出异常，控制权就会跳转到catch从句。\n\n未完待续。。。","slug":"《JavaScript精粹》笔记","updated":1418908898000,"excerpt":"","_id":"bxfzndcu6tn8xe6f","comments":true,"layout":"post","photos":[],"link":""},{"title":"《锋利的JQuery》笔记","id":13,"categories":["be592wtznj5wcvwn"],"date":1342188716000,"tags":[],"content":"<div><span>  #1.2 JQ的特点<br></span>1.轻量级—压缩后只有30K（用Packer）、18K（用Gzip）2.强大的选择器—兼容CSS1到CSS3的选择器并可自定义选择器3.出色的DOM操作的封装<br><br>4.可靠的事件处理机制<br><br>5.完善的Ajax—所有Ajax操作封装到了函数$.ajax()里<br><br>6.不污染顶级变量—JQ只建立一个Jquery的对象，所有函数都在该对象下<br><br>7.出色的浏览器兼容性<br><br>8.链式操作方式—一组操作，可以直接连写而无重复获取对象<br><br>9.隐式迭代<br><br>10.行为层与结构层的分离—可用选择器选中元素直接添加事件；后期维护方便<br><br>11.丰富的插件支持<br><br>12.完善的文档<br><br>13.开源<br><div></div><br><div>#1.32 在JQ库中，$就是JQ一个简写形式，如$(“#foo”)就代表JQuery(“#foo”)</div>\n\n<p>$(document).ready(function(){</p>\n<p>//…</p>\n<p>});</p>\n<p>可简写为：</p>\n<p>$(function(){</p>\n<p>//…</p>\n<p>});</p>\n<p>&nbsp;</p>\n<h1 id=\"1-3-3统一代码风格，方便日后维护\">1.3.3统一代码风格，方便日后维护</h1>\n<p>1.链式操作风格</p>\n<p>1）对于同一个对象不超过三个操作的，直接写成一行。</p>\n<p>如$(“li”).show().unbind(“click”);</p>\n<p>2)对于同一个对象的较多操作，建议每行写一个操作。</p>\n<p>行数过多则可以功能块来换行</p>\n<p>3）对于多个对象的少量操作，可以每个对象写一行，若涉及子元素则适当缩进。</p>\n<p>4）对于多对象的较多操作，则结合第2、3条。</p>\n<p>2.给代码添加注释，否则很难看懂代码</p>\n<div></div><br><div>#1.4.1了解区分JQ和DOM对象的区别</div><br>1.DOM对象<br><br>每一份DOM都可以表示成一棵树。<br><br>DOM对象可以使用JS中的方法，通过getElementsByTagName或getElementById来获取元素节点（DOM对象）<br><br>2.JQ对象<br><br>JQ对象就是通过JQ包装DOM对象后产生的对象。<br><br>只有JQ对象才能使用JQ的方法。<br><br>在JQ对象中不能使用DOM对象的任何方法，反之亦然。<br><div></div><br><div>#1.4.2 JQ对象和DOM对象的相互转换</div><br>约定定义变量的风格是：获取的对象是JQ对象，则加前缀$.<br><br>获取的对象是DOM对象不加前缀$.<br><br>1.JQ对象转换成DOM对象<br><br>1）若JQ对象是一个数组对象，则通过[index]的方法得到相应的DOM对象<br><br>2）通过get(index)方法得到相应的DOM对象<br><br>2.DOM对象转换成JQ对象<br><br>用$()将DOM对象包装就可以获得相应的JQ对象<br><br>我们平时用到的JQ对象都是通过$()函数制造的。<br><div></div><br><div>#1.6  开发工具推荐</div>\n\n<p>1.DW</p>\n<p>支持提示JQ代码,在<a href=\"http://xtnd.us/dreamweaver/jquery下载插件Jquery...API.MXP\" target=\"_blank\" rel=\"external\">http://xtnd.us/dreamweaver/jquery下载插件Jquery...API.MXP</a></p>\n<p>2.Aptana</p>\n<p>是Ajax开发IDE</p>\n<p>3.JQueryWTP和Spket插件</p>\n<p>装在Eclipse上的插件</p>\n<p>4.Visual Studio 2008</p>\n<h1 id=\"1-7\">1.7</h1>\n<p>1）CSS选择器复习</p>\n<p>标签选择器</p>\n<p>E{</p>\n<p>CSS规则</p>\n<p>}</p>\n<p>ID选择器</p>\n<h1 id=\"ID{\">ID{</h1>\n<p>CSS规则</p>\n<p>}</p>\n<p>类选择器</p>\n<p>E.className{</p>\n<p>CSS规则</p>\n<p>}</p>\n<p>群组选择器</p>\n<p>E1，E2，E3{</p>\n<p>CSS规则</p>\n<p>}</p>\n<p>后代选择器</p>\n<p>E F{</p>\n<p>CSS规则</p>\n<p>}</p>\n<p>通配符</p>\n<p>*{</p>\n<p>CSS规则</p>\n<p>}</p>\n<p>其他选择器：伪类选择器</p>\n<p>E：Pseudo-Elements{</p>\n<p>CSS规则</p>\n<p>}</p>\n<pre><code> 子选择器\n</code></pre><p>E&gt;F{</p>\n<p>CSS规则</p>\n<p>}</p>\n<pre><code> 临近选择器\n</code></pre><p>E+F{</p>\n<p>CSS规则</p>\n<p>}</p>\n<pre><code> 属性选择器\n</code></pre><p>E[attr]{</p>\n<p>CSS规则</p>\n<p>}</p>\n<p>注意，目前并不是所有的浏览器都支持【其他选择器】</p>\n<div></div><br><div>2）学习JQ选择器</div><br>JQ中的选择器完全继承了CSS的风格<br><br>简洁写法：$()作为一个选择器函数<br><br>如$(“#ID”)代替了document.ElementsByTagName()<br><br>扩浏览器兼容：不像CSS，JQ选择器不用考虑浏览器是否支持这些选择器<br><div></div><br><div>JQ选择器的分类</div><br>1)基本选择器/<br><br>通过id/class/标签名来查找DOM元素<br><br>注意id只能使用一次<br><br>2）层次选择器/<br><br>3）过滤选择器/<br><br>以冒号（：）开头，分为基本过滤、内容过滤、可见性过滤、属性过滤、子元素过滤盒表单对象过滤<br><br>4）表单选择器<br><br>&nbsp;<br><br>#2.5.1 选择器中含有特殊符号的注意事项<br><br>1）.选择器中含有”.” “#” “(“ “]”等字符时,需要用转义字符”\\“(注意是两个反斜杠)<br><br>2).JQ1.3.1以后的版本都不能在属性名前加“@”<br><br>3)选择器中添加空格可能产生严重错误<br><div></div><br><div>#2.7其他选择器</div><br>1.JQ选择器是可以进一步拓展的<br><br>1）<a href=\"http://plugins%2cjquery.com/project/moreSelectors\" target=\"_blank\" rel=\"external\">MoreSelectors for jQuery</a> 这插件用于增加更多的选择器<br><br>2）<a href=\"http://plugins.jquery.com/project/xpath\" target=\"_blank\" rel=\"external\">Basic XPath</a>插件（使用人数不多且降低了选择器匹配的效率）<br><br>2.使用其他CSS选择器的方法<br><br>1）document.getElementsBySelector()—-通过选择器来获取文档元素<br><br>2）cssQuery()——-通过CSS选择器查找元素<br><div>3.querySelectorAll()也是用于实现通过CSS选择器来获取元素的（W3C在Selectors API中的方法）</div><br><div></div><br><div></div><br><div> #3.1 jquery中的DOM操作</div><br><span style=\"color: #333333;\">1.DOM core</span><br><br><span style=\"color: #333333;\">2.HTML_DOM</span><br><br><span style=\"color: #333333;\">获取某些对象、属性可用这两个来实现，但显然HTML_DOM比较简短，但只能用来处理WEB文档</span><br><br><span style=\"color: #333333;\">3.CSS_DOM用来获取和设置style对象的各种属性</span><br><br>jquery对DOM的各种操作都围绕DOM树展开<br><br><span style=\"color: #333333;\">1.查找元素节点</span><br><br>&nbsp;<br><br><span style=\"color: #333333;\">2.查找属性节点</span><br><br><span style=\"color: #333333;\">用attr()方法来获取各种属性的值</span><br><br><span style=\"color: #333333;\">创建节点</span><br><br><span style=\"color: #333333;\">1.创建节点，建议添加顺序为：元素-文本-属性</span><br><br><span style=\"color: #333333;\">var $li_1= $(“&lt;li title=”属性1”&gt;文本1&lt;/li&gt;”);</span><br><br><span style=\"color: #333333;\">var $li_2= $(“&lt;li title=”属性2”&gt;文本2&lt;/li&gt;”);</span><br><br><span style=\"color: #333333;\">   将新元素插入到节点ul中</span><br><br><span style=\"color: #333333;\">$(“ul”).append($li_1);</span><br><br><span style=\"color: #333333;\">$(“ul”).append($li_2);（或采用链式写法：$(“ul”).append($li_1).append($li_2);）</span><br><br><span style=\"color: #333333;\">  注意：1）动态创建的新元素节点需要使用方法才能插入文档中而不会自动添加</span><br><br><span style=\"color: #333333;\">    2）创建元素时，注意书写的规范性（注意闭合标签和使用标准的XHTML格式）</span><br><br><span style=\"color: #333333;\">2.插入节点</span><br><br><span style=\"color: #333333;\">几种插入节点的方法——-$(“节点”).方法(“元素”)</span><br><br><span style=\"color: #333333;\">1）append()</span><br><br><span style=\"color: #333333;\">向每个匹配的元素内部后置内容</span><br><br><span style=\"color: #333333;\">2）appendTo()</span><br><br><span style=\"color: #333333;\">后置追加到指定的元素中</span><br><br><span style=\"color: #333333;\">3）prepend()</span><br><br><span style=\"color: #333333;\">向每个匹配的元素内部前置内容</span><br><br><span style=\"color: #333333;\">4）prependTo()</span><br><br><span style=\"color: #333333;\">后置追加到指定的元素中</span><br><br><span style=\"color: #333333;\">5）after()</span><br><br><span style=\"color: #333333;\">在每个匹配的元素后插入内容</span><br><br><span style=\"color: #333333;\">6）insertAfter()</span><br><br><span style=\"color: #333333;\">将所有匹配的元素插入到指定元素的后面</span><br><br><span style=\"color: #333333;\">7）before()</span><br><br><span style=\"color: #333333;\">在每个匹配的元素之前插入内容</span><br><br><span style=\"color: #333333;\">8）insertBefore()</span><br><br><span style=\"color: #333333;\">将所有匹配的元素插入到指定的元素的前面</span><br><div></div><br><div>3.删除节点</div><br><span style=\"color: #333333;\">1）remove()</span><br><br><span style=\"color: #333333;\">从DOM中删除所有匹配的元素</span><br><br><span style=\"color: #333333;\"><br></span><br><br><span style=\"color: #333333;\">该方法返回的是一个指向已被删除的节点的引用，因而可以在以后使用这些元素</span><br><br><span style=\"color: #333333;\">2）empty()</span><br><br><span style=\"color: #333333;\">清空节点，清空元素的所有后代节点</span><br><div></div><br><div>4.复制节点</div><br>复制节点后，新元素并不具有任何行为<br><br><span style=\"color: #333333;\">注意：若传递true为参数，则表示复制元素的同时复制元素中所绑定的事件</span><br><br><span style=\"color: #333333;\">$(this).clone(true).appendTo(“body”);//注意参数true</span><br><div><span style=\"color: #333333;\"><br></span></div><br><div><span style=\"color: #333333;\">5.替换节点</span></div><br><span style=\"color: #333333;\">replaceWith()</span><br><br><span style=\"color: #333333;\">将所有匹配的元素都换成指定的HTML或DOM元素</span><br><br><span style=\"color: #333333;\">replaceAll()</span><br><br><span style=\"color: #333333;\">与replaceWith()作用相同但颠倒了操作</span><br><br>注意：如果在替换之前已经为元素绑定事件，替换后原先绑定的事件将会与被替换的元素一起消失，需要在新元素上重新绑定事件。<br><br><span style=\"color: #333333;\">6.包裹节点</span><br><br><span style=\"color: #333333;\">wrap()</span><br><br><span style=\"color: #333333;\">将某个节点用其他标记包裹起来，不破坏原始文档的语义</span><br><br><span style=\"color: #333333;\">wrapAll()</span><br><br><span style=\"color: #333333;\">将所有匹配的元素用一个元素来包裹</span><br><br>与wrap()不同，wrap()是将所有的元素进行单独的包裹<br><br><span style=\"color: #333333;\">wrapInner()</span><br><br><span style=\"color: #333333;\">将每一个匹配的元素的子内容（包括文本节点）用其他结构化的标记包裹起来</span><br><br>wrap是外包，wrapInner是内包<br><br>&nbsp;<br><br><span style=\"color: #333333;\">#3.2.8 属性操作</span><br><br><span style=\"color: #333333;\">在JQ中，用attr()方法来获取和设置元素属性，removeAttr()方法来删除元素属性</span><br><br><span style=\"color: #333333;\">1.获取属性和设置属性</span><br><div><span style=\"color: #333333;\">获取用attr()方法</span></div><br><div>也可以直接设置</div><br><span style=\"color: #333333;\">$(“p”).attr(“title”,”my  title”);</span><br><br><span style=\"color: #333333;\">同时设置多个属性</span><br><br><span style=\"color: #333333;\">$(“p”).attr({“title”:”my title”,”name”:”test”});</span><br><br><span style=\"color: #333333;\">2.删除属性</span><br><br><span style=\"color: #333333;\">用removeAttr()方法删除某个元素的特定属性</span><br><br><span style=\"color: #333333;\">$(“p”).removeAttr(“title”);</span><br><div><span style=\"color: #333333;\"><br></span></div><br><div><span style=\"color: #333333;\">#3.2.9  样式操作</span></div><br><span style=\"color: #333333;\">1.获取样式和设置样式</span><br><br><span style=\"color: #333333;\">获取</span><br><br><span style=\"color: #333333;\">var p_class$=$(“p”).attr(“class”);</span><br><br><span style=\"color: #333333;\">设置</span><br><br><span style=\"color: #333333;\">$(“p”).attr(“class”,”high”);</span><br><br><span style=\"color: #333333;\">2.追加样式</span><br><br><span style=\"color: #333333;\">用addClass()方法</span><br><br>区别：attr()设置样式会覆盖替换，而addClass()则是追加兼并<br><br>3.移除样式<br><br><span style=\"color: #333333;\">用removeClass()方法</span><br><br><span style=\"color: #333333;\">$(“p”).removeClass(“high”);//移除&lt;p&gt;元素中值为”high”的class</span><br><br><span style=\"color: #333333;\">若要删除多个class，则</span><br><br><span style=\"color: #333333;\">$(“p”).removeClass(“high another”);</span><br><br><span style=\"color: #333333;\">或者直接使用</span><br><br><span style=\"color: #333333;\">$(“p”).removeClass();//默认移除所有class</span><br><br><span style=\"color: #333333;\">4.切换样式</span><br><br><span style=\"color: #333333;\">toggle()</span><br><br><span style=\"color: #333333;\">交替执行代码③、④函数，控制行为上的重复切换</span><br><br>$toggleBtn.toggle(<br><br><span style=\"color: #333333;\">function(){</span><br><br><span style=\"color: #333333;\">//显示元素      代码③</span><br><br><span style=\"color: #333333;\">},</span><br><br><span style=\"color: #333333;\">function(){</span><br><br><span style=\"color: #333333;\">//显示元素       代码④</span><br><br><span style=\"color: #333333;\">}</span><br><br><span style=\"color: #333333;\">)</span><br><br><span style=\"color: #333333;\">toggleClass()</span><br><br><span style=\"color: #333333;\">如果类型存在则删除，否则添加。控制样式上的重复切换。</span><br><br><span style=\"color: #333333;\">5.判断是否含有某个样式</span><br><br><span style=\"color: #333333;\">hasClass()方法，若有则返回true，否则返回false</span><br><br><span style=\"color: #333333;\">$(“p”).hasClass(“another”);</span><br><br><span style=\"color: #333333;\">等价于：</span><br><br><span style=\"color: #333333;\">$(“p”).is(“.another”);</span><br><div><span style=\"color: #333333;\"><br></span></div><br><div><span style=\"color: #333333;\">#3.2.10 设置和获取HTML、文本和值</span></div><br><span style=\"color: #333333;\">1.html()</span><br><br><span style=\"color: #333333;\">读取或者设置某个元素中的HTML内容（与javascript中的innerHTML属性类似）</span><br><br><span style=\"color: #333333;\">2.text()</span><br><br><span style=\"color: #333333;\">读取或者设置某个元素中的文本内容（与javascript中的innerRext属性类似）</span><br><br><span style=\"color: #333333;\">3.val()</span><br><br><span style=\"color: #333333;\">读取或者设置元素的值(与javascript中的value属性类似)</span><br><br><span style=\"color: #333333;\">元素师文本框、下拉列表、单选框都能返回，若元素为多选，则返回包含所有选择的值的数组</span><br><br><span style=\"color: #333333;\">val()方法还能使select、checkbox、radio相应的选项被选中，在表单操作中会经常用到</span><br><div></div><br><div>#3.2.11 遍历节点</div><br><span style=\"color: #333333;\">1.children()</span><br><br><span style=\"color: #333333;\">取得匹配元素的子元素的集合</span><br><br><span style=\"color: #333333;\">2.next()</span><br><br><span style=\"color: #333333;\">取得匹配元素后面紧邻的同辈元素</span><br><br><span style=\"color: #333333;\">3.prev()</span><br><br><span style=\"color: #333333;\">取得匹配元素前面紧邻的同辈元素</span><br><br><span style=\"color: #333333;\">4.siblings()</span><br><br><span style=\"color: #333333;\">取得元素前后所有的同辈元素</span><br><br><span style=\"color: #333333;\">5.closest()</span><br><br><span style=\"color: #333333;\">取得最近的匹配元素</span><br><br><span style=\"color: #333333;\">6.其他方法</span><br><br><span style=\"color: #333333;\">find()/filter()/nextAll()/preAll()/parent()/parents()等</span><br><br><span style=\"color: #333333;\">#3.2.12 CSS-DOM操作</span><br><br><span style=\"color: #333333;\">css()</span><br><br><span style=\"color: #333333;\">获取元素的样式属性 </span><br><br>设置某个元素的样式<br><br><span style=\"color: #333333;\">$(“p”).css(“color”);     //获取&lt;p&gt;元素的样式颜色</span><br><br><span style=\"color: #333333;\">$(“p”).css(“color”,”red”);//设置&lt;p&gt;元素的样式颜色为红色</span><br><br><span style=\"color: #333333;\">$(“p”).css({“fontSize”:”30px”,”backgroundColor”:”#888888”});//同时设置字体颜色和背景色</span><br><br><span style=\"color: #333333;\">height()</span><br><br><span style=\"color: #333333;\">取得匹配元素当前计算的高度值</span><br><br><span style=\"color: #333333;\">$(“p”).height(100);//设置高度值为100px</span><br><br><span style=\"color: #333333;\">$(“p”).height(“10em”);//设置高度值为10em</span><br><br><span style=\"color: #333333;\">css()获得的高度值与样式的设置有关，可能得到“auto”“10px”之类的字符串，而height()方法获得的则是在页面中的实际高度，与样式设置无关且不带单位</span><br><br><span style=\"color: #333333;\">width()</span><br><br><span style=\"color: #333333;\">取得匹配元素的宽度值（px）</span><br><br><span style=\"color: #333333;\">$(“p”).width();//获取宽度值</span><br><br><span style=\"color: #333333;\">$(“p”).width(“40px”);设置宽度值</span><br><br><span style=\"color: #333333;\">几个常用方法</span><br><br><span style=\"color: #333333;\">1.offset()</span><br><br><span style=\"color: #333333;\">获取元素在当前视窗的相对位移，返回top和left属性，只对可见元素有效</span><br><br><span style=\"color: #333333;\">var offset=$(“p”).offset();//获取offset</span><br><br><span style=\"color: #333333;\">var left=offset.left;//获取左偏移</span><br><br><span style=\"color: #333333;\">var top=offset.top;//获取上偏移</span><br><br><span style=\"color: #333333;\">2.position()</span><br><br><span style=\"color: #333333;\">获取元素相对于最近一个position样式属性设置为relative或者absolute的祖父节点的相对位移，也返回top和left属性</span><br><br><span style=\"color: #333333;\">var position=$(“p”).position();//获取offset</span><br><br><span style=\"color: #333333;\">var left=position.left;//获取左偏移</span><br><br><span style=\"color: #333333;\">var top=position.top;//获取上偏移</span><br><br><span style=\"color: #333333;\">3.scrollTop()</span><br><br><span style=\"color: #333333;\"> scrollLeft()</span><br><br><span style=\"color: #333333;\">获取元素的滚动条距顶端和左侧的距离</span><br><br><span style=\"color: #333333;\">var $p=$(“p”);</span><br><br><span style=\"color: #333333;\">var scolltop=$p.scollTop();</span><br><br><span style=\"color: #333333;\">var scollleft=$p.scollLeft();</span><br><br><span style=\"color: #333333;\">另外，可指定参数让滚动条滚动到指定位置</span><br><br><span style=\"color: #333333;\">$(“textarea”).scollTop(300);//元素的垂直滚动条滚动到指定位置</span><br><br><span style=\"color: #333333;\">$(“textarea”).scollLeft(300);//元素的横向滚动条滚动到指定位置</span><br><br>&nbsp;<br><div></div><br>&nbsp;<br><br></div>","source":"_posts/《锋利的JQuery》笔记.md","raw":"title: 《锋利的JQuery》笔记\nid: 13\ncategories:\n  - Javascript\ndate: 2012-07-13 22:11:56\ntags:\n---\n\n<div><span>  #1.2 JQ的特点\n</span>1.轻量级--压缩后只有30K（用Packer）、18K（用Gzip）2.强大的选择器--兼容CSS1到CSS3的选择器并可自定义选择器3.出色的DOM操作的封装\n\n4.可靠的事件处理机制\n\n5.完善的Ajax--所有Ajax操作封装到了函数$.ajax()里\n\n6.不污染顶级变量--JQ只建立一个Jquery的对象，所有函数都在该对象下\n\n7.出色的浏览器兼容性\n\n8.链式操作方式--一组操作，可以直接连写而无重复获取对象\n\n9.隐式迭代\n\n10.行为层与结构层的分离--可用选择器选中元素直接添加事件；后期维护方便\n\n11.丰富的插件支持\n\n12.完善的文档\n\n13.开源\n<div></div>\n<div>#1.32 在JQ库中，$就是JQ一个简写形式，如$(\"#foo\")就代表JQuery(\"#foo\")</div>\n\n$(document).ready(function(){\n\n//...\n\n});\n\n可简写为：\n\n$(function(){\n\n//...\n\n});\n\n&nbsp;\n\n#1.3.3统一代码风格，方便日后维护\n\n1.链式操作风格\n\n1）对于同一个对象不超过三个操作的，直接写成一行。\n\n如$(\"li\").show().unbind(\"click\");\n\n2)对于同一个对象的较多操作，建议每行写一个操作。\n\n行数过多则可以功能块来换行\n\n3）对于多个对象的少量操作，可以每个对象写一行，若涉及子元素则适当缩进。\n\n4）对于多对象的较多操作，则结合第2、3条。\n\n2.给代码添加注释，否则很难看懂代码\n<div></div>\n<div>#1.4.1了解区分JQ和DOM对象的区别</div>\n1.DOM对象\n\n每一份DOM都可以表示成一棵树。\n\nDOM对象可以使用JS中的方法，通过getElementsByTagName或getElementById来获取元素节点（DOM对象）\n\n2.JQ对象\n\nJQ对象就是通过JQ包装DOM对象后产生的对象。\n\n只有JQ对象才能使用JQ的方法。\n\n在JQ对象中不能使用DOM对象的任何方法，反之亦然。\n<div></div>\n<div>#1.4.2 JQ对象和DOM对象的相互转换</div>\n约定定义变量的风格是：获取的对象是JQ对象，则加前缀$.\n\n获取的对象是DOM对象不加前缀$.\n\n1.JQ对象转换成DOM对象\n\n1）若JQ对象是一个数组对象，则通过[index]的方法得到相应的DOM对象\n\n2）通过get(index)方法得到相应的DOM对象\n\n2.DOM对象转换成JQ对象\n\n用$()将DOM对象包装就可以获得相应的JQ对象\n\n我们平时用到的JQ对象都是通过$()函数制造的。\n<div></div>\n<div>#1.6  开发工具推荐</div>\n\n1.DW\n\n支持提示JQ代码,在http://xtnd.us/dreamweaver/jquery下载插件Jquery...API.MXP\n\n2.Aptana\n\n是Ajax开发IDE\n\n3.JQueryWTP和Spket插件\n\n装在Eclipse上的插件\n\n4.Visual Studio 2008\n\n#1.7\n\n1）CSS选择器复习\n\n标签选择器\n\nE{\n\nCSS规则\n\n}\n\nID选择器\n\n#ID{\n\nCSS规则\n\n}\n\n类选择器\n\nE.className{\n\nCSS规则\n\n}\n\n群组选择器\n\nE1，E2，E3{\n\nCSS规则\n\n}\n\n后代选择器\n\nE F{\n\nCSS规则\n\n}\n\n通配符\n\n*{\n\nCSS规则\n\n}\n\n其他选择器：伪类选择器\n\nE：Pseudo-Elements{\n\nCSS规则\n\n}\n\n     子选择器\n\nE&gt;F{\n\nCSS规则\n\n}\n\n     临近选择器\n\nE+F{\n\nCSS规则\n\n}\n\n     属性选择器\n\nE[attr]{\n\nCSS规则\n\n}\n\n注意，目前并不是所有的浏览器都支持【其他选择器】\n<div></div>\n<div>2）学习JQ选择器</div>\nJQ中的选择器完全继承了CSS的风格\n\n简洁写法：$()作为一个选择器函数\n\n如$(\"#ID\")代替了document.ElementsByTagName()\n\n扩浏览器兼容：不像CSS，JQ选择器不用考虑浏览器是否支持这些选择器\n<div></div>\n<div>JQ选择器的分类</div>\n1)基本选择器/\n\n通过id/class/标签名来查找DOM元素\n\n注意id只能使用一次\n\n2）层次选择器/\n\n3）过滤选择器/\n\n以冒号（：）开头，分为基本过滤、内容过滤、可见性过滤、属性过滤、子元素过滤盒表单对象过滤\n\n4）表单选择器\n\n&nbsp;\n\n#2.5.1 选择器中含有特殊符号的注意事项\n\n1）.选择器中含有\".\" \"#\" \"(\" \"]\"等字符时,需要用转义字符\"\\\\\"(注意是两个反斜杠)\n\n2).JQ1.3.1以后的版本都不能在属性名前加“@”\n\n3)选择器中添加空格可能产生严重错误\n<div></div>\n<div>#2.7其他选择器</div>\n1.JQ选择器是可以进一步拓展的\n\n1）[MoreSelectors for jQuery](http://plugins%2cjquery.com/project/moreSelectors) 这插件用于增加更多的选择器\n\n2）[Basic XPath](http://plugins.jquery.com/project/xpath)插件（使用人数不多且降低了选择器匹配的效率）\n\n2.使用其他CSS选择器的方法\n\n1）document.getElementsBySelector()---通过选择器来获取文档元素\n\n2）cssQuery()-----通过CSS选择器查找元素\n<div>3.querySelectorAll()也是用于实现通过CSS选择器来获取元素的（W3C在Selectors API中的方法）</div>\n<div></div>\n<div></div>\n<div> #3.1 jquery中的DOM操作</div>\n<span style=\"color: #333333;\">1.DOM core</span>\n\n<span style=\"color: #333333;\">2.HTML_DOM</span>\n\n<span style=\"color: #333333;\">获取某些对象、属性可用这两个来实现，但显然HTML_DOM比较简短，但只能用来处理WEB文档</span>\n\n<span style=\"color: #333333;\">3.CSS_DOM用来获取和设置style对象的各种属性</span>\n\njquery对DOM的各种操作都围绕DOM树展开\n\n<span style=\"color: #333333;\">1.查找元素节点</span>\n\n&nbsp;\n\n<span style=\"color: #333333;\">2.查找属性节点</span>\n\n<span style=\"color: #333333;\">用attr()方法来获取各种属性的值</span>\n\n<span style=\"color: #333333;\">创建节点</span>\n\n<span style=\"color: #333333;\">1.创建节点，建议添加顺序为：元素-文本-属性</span>\n\n<span style=\"color: #333333;\">var $li_1= $(\"&lt;li title=\"属性1\"&gt;文本1&lt;/li&gt;\");</span>\n\n<span style=\"color: #333333;\">var $li_2= $(\"&lt;li title=\"属性2\"&gt;文本2&lt;/li&gt;\");</span>\n\n<span style=\"color: #333333;\">   将新元素插入到节点ul中</span>\n\n<span style=\"color: #333333;\">$(\"ul\").append($li_1);</span>\n\n<span style=\"color: #333333;\">$(\"ul\").append($li_2);（或采用链式写法：$(\"ul\").append($li_1).append($li_2);）</span>\n\n<span style=\"color: #333333;\">  注意：1）动态创建的新元素节点需要使用方法才能插入文档中而不会自动添加</span>\n\n<span style=\"color: #333333;\">    2）创建元素时，注意书写的规范性（注意闭合标签和使用标准的XHTML格式）</span>\n\n<span style=\"color: #333333;\">2.插入节点</span>\n\n<span style=\"color: #333333;\">几种插入节点的方法-----$(\"节点\").方法(\"元素\")</span>\n\n<span style=\"color: #333333;\">1）append()</span>\n\n<span style=\"color: #333333;\">向每个匹配的元素内部后置内容</span>\n\n<span style=\"color: #333333;\">2）appendTo()</span>\n\n<span style=\"color: #333333;\">后置追加到指定的元素中</span>\n\n<span style=\"color: #333333;\">3）prepend()</span>\n\n<span style=\"color: #333333;\">向每个匹配的元素内部前置内容</span>\n\n<span style=\"color: #333333;\">4）prependTo()</span>\n\n<span style=\"color: #333333;\">后置追加到指定的元素中</span>\n\n<span style=\"color: #333333;\">5）after()</span>\n\n<span style=\"color: #333333;\">在每个匹配的元素后插入内容</span>\n\n<span style=\"color: #333333;\">6）insertAfter()</span>\n\n<span style=\"color: #333333;\">将所有匹配的元素插入到指定元素的后面</span>\n\n<span style=\"color: #333333;\">7）before()</span>\n\n<span style=\"color: #333333;\">在每个匹配的元素之前插入内容</span>\n\n<span style=\"color: #333333;\">8）insertBefore()</span>\n\n<span style=\"color: #333333;\">将所有匹配的元素插入到指定的元素的前面</span>\n<div></div>\n<div>3.删除节点</div>\n<span style=\"color: #333333;\">1）remove()</span>\n\n<span style=\"color: #333333;\">从DOM中删除所有匹配的元素</span>\n\n<span style=\"color: #333333;\">\n</span>\n\n<span style=\"color: #333333;\">该方法返回的是一个指向已被删除的节点的引用，因而可以在以后使用这些元素</span>\n\n<span style=\"color: #333333;\">2）empty()</span>\n\n<span style=\"color: #333333;\">清空节点，清空元素的所有后代节点</span>\n<div></div>\n<div>4.复制节点</div>\n复制节点后，新元素并不具有任何行为\n\n<span style=\"color: #333333;\">注意：若传递true为参数，则表示复制元素的同时复制元素中所绑定的事件</span>\n\n<span style=\"color: #333333;\">$(this).clone(true).appendTo(\"body\");//注意参数true</span>\n<div><span style=\"color: #333333;\">\n</span></div>\n<div><span style=\"color: #333333;\">5.替换节点</span></div>\n<span style=\"color: #333333;\">replaceWith()</span>\n\n<span style=\"color: #333333;\">将所有匹配的元素都换成指定的HTML或DOM元素</span>\n\n<span style=\"color: #333333;\">replaceAll()</span>\n\n<span style=\"color: #333333;\">与replaceWith()作用相同但颠倒了操作</span>\n\n注意：如果在替换之前已经为元素绑定事件，替换后原先绑定的事件将会与被替换的元素一起消失，需要在新元素上重新绑定事件。\n\n<span style=\"color: #333333;\">6.包裹节点</span>\n\n<span style=\"color: #333333;\">wrap()</span>\n\n<span style=\"color: #333333;\">将某个节点用其他标记包裹起来，不破坏原始文档的语义</span>\n\n<span style=\"color: #333333;\">wrapAll()</span>\n\n<span style=\"color: #333333;\">将所有匹配的元素用一个元素来包裹</span>\n\n与wrap()不同，wrap()是将所有的元素进行单独的包裹\n\n<span style=\"color: #333333;\">wrapInner()</span>\n\n<span style=\"color: #333333;\">将每一个匹配的元素的子内容（包括文本节点）用其他结构化的标记包裹起来</span>\n\nwrap是外包，wrapInner是内包\n\n&nbsp;\n\n<span style=\"color: #333333;\">#3.2.8 属性操作</span>\n\n<span style=\"color: #333333;\">在JQ中，用attr()方法来获取和设置元素属性，removeAttr()方法来删除元素属性</span>\n\n<span style=\"color: #333333;\">1.获取属性和设置属性</span>\n<div><span style=\"color: #333333;\">获取用attr()方法</span></div>\n<div>也可以直接设置</div>\n<span style=\"color: #333333;\">$(\"p\").attr(\"title\",\"my  title\");</span>\n\n<span style=\"color: #333333;\">同时设置多个属性</span>\n\n<span style=\"color: #333333;\">$(\"p\").attr({\"title\":\"my title\",\"name\":\"test\"});</span>\n\n<span style=\"color: #333333;\">2.删除属性</span>\n\n<span style=\"color: #333333;\">用removeAttr()方法删除某个元素的特定属性</span>\n\n<span style=\"color: #333333;\">$(\"p\").removeAttr(\"title\");</span>\n<div><span style=\"color: #333333;\">\n</span></div>\n<div><span style=\"color: #333333;\">#3.2.9  样式操作</span></div>\n<span style=\"color: #333333;\">1.获取样式和设置样式</span>\n\n<span style=\"color: #333333;\">获取</span>\n\n<span style=\"color: #333333;\">var p_class$=$(\"p\").attr(\"class\");</span>\n\n<span style=\"color: #333333;\">设置</span>\n\n<span style=\"color: #333333;\">$(\"p\").attr(\"class\",\"high\");</span>\n\n<span style=\"color: #333333;\">2.追加样式</span>\n\n<span style=\"color: #333333;\">用addClass()方法</span>\n\n区别：attr()设置样式会覆盖替换，而addClass()则是追加兼并\n\n3.移除样式\n\n<span style=\"color: #333333;\">用removeClass()方法</span>\n\n<span style=\"color: #333333;\">$(\"p\").removeClass(\"high\");//移除&lt;p&gt;元素中值为\"high\"的class</span>\n\n<span style=\"color: #333333;\">若要删除多个class，则</span>\n\n<span style=\"color: #333333;\">$(\"p\").removeClass(\"high another\");</span>\n\n<span style=\"color: #333333;\">或者直接使用</span>\n\n<span style=\"color: #333333;\">$(\"p\").removeClass();//默认移除所有class</span>\n\n<span style=\"color: #333333;\">4.切换样式</span>\n\n<span style=\"color: #333333;\">toggle()</span>\n\n<span style=\"color: #333333;\">交替执行代码③、④函数，控制行为上的重复切换</span>\n\n$toggleBtn.toggle(\n\n<span style=\"color: #333333;\">function(){</span>\n\n<span style=\"color: #333333;\">//显示元素      代码③</span>\n\n<span style=\"color: #333333;\">},</span>\n\n<span style=\"color: #333333;\">function(){</span>\n\n<span style=\"color: #333333;\">//显示元素       代码④</span>\n\n<span style=\"color: #333333;\">}</span>\n\n<span style=\"color: #333333;\">)</span>\n\n<span style=\"color: #333333;\">toggleClass()</span>\n\n<span style=\"color: #333333;\">如果类型存在则删除，否则添加。控制样式上的重复切换。</span>\n\n<span style=\"color: #333333;\">5.判断是否含有某个样式</span>\n\n<span style=\"color: #333333;\">hasClass()方法，若有则返回true，否则返回false</span>\n\n<span style=\"color: #333333;\">$(\"p\").hasClass(\"another\");</span>\n\n<span style=\"color: #333333;\">等价于：</span>\n\n<span style=\"color: #333333;\">$(\"p\").is(\".another\");</span>\n<div><span style=\"color: #333333;\">\n</span></div>\n<div><span style=\"color: #333333;\">#3.2.10 设置和获取HTML、文本和值</span></div>\n<span style=\"color: #333333;\">1.html()</span>\n\n<span style=\"color: #333333;\">读取或者设置某个元素中的HTML内容（与javascript中的innerHTML属性类似）</span>\n\n<span style=\"color: #333333;\">2.text()</span>\n\n<span style=\"color: #333333;\">读取或者设置某个元素中的文本内容（与javascript中的innerRext属性类似）</span>\n\n<span style=\"color: #333333;\">3.val()</span>\n\n<span style=\"color: #333333;\">读取或者设置元素的值(与javascript中的value属性类似)</span>\n\n<span style=\"color: #333333;\">元素师文本框、下拉列表、单选框都能返回，若元素为多选，则返回包含所有选择的值的数组</span>\n\n<span style=\"color: #333333;\">val()方法还能使select、checkbox、radio相应的选项被选中，在表单操作中会经常用到</span>\n<div></div>\n<div>#3.2.11 遍历节点</div>\n<span style=\"color: #333333;\">1.children()</span>\n\n<span style=\"color: #333333;\">取得匹配元素的子元素的集合</span>\n\n<span style=\"color: #333333;\">2.next()</span>\n\n<span style=\"color: #333333;\">取得匹配元素后面紧邻的同辈元素</span>\n\n<span style=\"color: #333333;\">3.prev()</span>\n\n<span style=\"color: #333333;\">取得匹配元素前面紧邻的同辈元素</span>\n\n<span style=\"color: #333333;\">4.siblings()</span>\n\n<span style=\"color: #333333;\">取得元素前后所有的同辈元素</span>\n\n<span style=\"color: #333333;\">5.closest()</span>\n\n<span style=\"color: #333333;\">取得最近的匹配元素</span>\n\n<span style=\"color: #333333;\">6.其他方法</span>\n\n<span style=\"color: #333333;\">find()/filter()/nextAll()/preAll()/parent()/parents()等</span>\n\n<span style=\"color: #333333;\">#3.2.12 CSS-DOM操作</span>\n\n<span style=\"color: #333333;\">css()</span>\n\n<span style=\"color: #333333;\">获取元素的样式属性 </span>\n\n设置某个元素的样式\n\n<span style=\"color: #333333;\">$(\"p\").css(\"color\");     //获取&lt;p&gt;元素的样式颜色</span>\n\n<span style=\"color: #333333;\">$(\"p\").css(\"color\",\"red\");//设置&lt;p&gt;元素的样式颜色为红色</span>\n\n<span style=\"color: #333333;\">$(\"p\").css({\"fontSize\":\"30px\",\"backgroundColor\":\"#888888\"});//同时设置字体颜色和背景色</span>\n\n<span style=\"color: #333333;\">height()</span>\n\n<span style=\"color: #333333;\">取得匹配元素当前计算的高度值</span>\n\n<span style=\"color: #333333;\">$(\"p\").height(100);//设置高度值为100px</span>\n\n<span style=\"color: #333333;\">$(\"p\").height(\"10em\");//设置高度值为10em</span>\n\n<span style=\"color: #333333;\">css()获得的高度值与样式的设置有关，可能得到“auto”“10px”之类的字符串，而height()方法获得的则是在页面中的实际高度，与样式设置无关且不带单位</span>\n\n<span style=\"color: #333333;\">width()</span>\n\n<span style=\"color: #333333;\">取得匹配元素的宽度值（px）</span>\n\n<span style=\"color: #333333;\">$(\"p\").width();//获取宽度值</span>\n\n<span style=\"color: #333333;\">$(\"p\").width(\"40px\");设置宽度值</span>\n\n<span style=\"color: #333333;\">几个常用方法</span>\n\n<span style=\"color: #333333;\">1.offset()</span>\n\n<span style=\"color: #333333;\">获取元素在当前视窗的相对位移，返回top和left属性，只对可见元素有效</span>\n\n<span style=\"color: #333333;\">var offset=$(\"p\").offset();//获取offset</span>\n\n<span style=\"color: #333333;\">var left=offset.left;//获取左偏移</span>\n\n<span style=\"color: #333333;\">var top=offset.top;//获取上偏移</span>\n\n<span style=\"color: #333333;\">2.position()</span>\n\n<span style=\"color: #333333;\">获取元素相对于最近一个position样式属性设置为relative或者absolute的祖父节点的相对位移，也返回top和left属性</span>\n\n<span style=\"color: #333333;\">var position=$(\"p\").position();//获取offset</span>\n\n<span style=\"color: #333333;\">var left=position.left;//获取左偏移</span>\n\n<span style=\"color: #333333;\">var top=position.top;//获取上偏移</span>\n\n<span style=\"color: #333333;\">3.scrollTop()</span>\n\n<span style=\"color: #333333;\"> scrollLeft()</span>\n\n<span style=\"color: #333333;\">获取元素的滚动条距顶端和左侧的距离</span>\n\n<span style=\"color: #333333;\">var $p=$(\"p\");</span>\n\n<span style=\"color: #333333;\">var scolltop=$p.scollTop();</span>\n\n<span style=\"color: #333333;\">var scollleft=$p.scollLeft();</span>\n\n<span style=\"color: #333333;\">另外，可指定参数让滚动条滚动到指定位置</span>\n\n<span style=\"color: #333333;\">$(\"textarea\").scollTop(300);//元素的垂直滚动条滚动到指定位置</span>\n\n<span style=\"color: #333333;\">$(\"textarea\").scollLeft(300);//元素的横向滚动条滚动到指定位置</span>\n\n&nbsp;\n<div></div>\n&nbsp;\n\n</div>","slug":"《锋利的JQuery》笔记","updated":1418908898000,"excerpt":"","_id":"10gtd4mqpoexkrye","comments":true,"layout":"post","photos":[],"link":""},{"title":"【译】ES6 Generators（1）基础篇","categories":["5mkw9mventxlp5vo"],"date":1411814745000,"tags":["7sfn5fw7t2bpmxsr","0pxk3k3oh5k9vb6a"],"content":"<blockquote>\n<p>译注1：此文带着自己的理解，不完全按原文翻译。<a href=\"http://davidwalsh.name/es6-generators\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n<p>译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。</p>\n</blockquote>\n<p><em>generator</em> 即生成器，是 ES6 中众多特性中的一种，是一个新的函数类型。</p>\n<p>这篇文章旨在介绍 generator 的基础知识，以及告诉你在 JS 的未来，他们为何如此重要。</p>\n<h1 id=\"运行直到完成_(Run-To-Completion)\">运行直到完成 (Run-To-Completion)</h1>\n<p>为了理清这个新的函数类型和其他函数类型有何区别，我们首先需要了解 『run to completion』 的概念。</p>\n<p>我们知道 JS 是单线程的，所以一旦一个函数开始执行，排在队列后边的函数就必须等待这个函数执行完毕。</p>\n<p>举个栗子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">},<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// 注意: 永远不要使用这种超长的循环，这里只是为了演示方便</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;=<span class=\"number\">1E10</span>; i++) {</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"comment\">// 0..1E10</span></div><div class=\"line\"><span class=\"comment\">// \"Hello World\"</span></div></pre></td></tr></table></figure>\n\n<p>在这段代码中，我们先执行了 <code>foo()</code> 然后执行 <code>setTimeout</code>，而 <code>foo()</code> 中的 for 循环将花费超长的时间才能完成。</p>\n<p>只有等待这个漫长的循环结束后，<code>setTimeout</code> 中的 <code>console.log(&#39;Hello World&#39;)</code> 才能执行。</p>\n<p>如果 <code>foo()</code> 函数能够被中断会怎样呢？</p>\n<p>这是多线程编程语言的挑战，但我们并不需要考虑这个，因为 JS 是单线程的。</p>\n<h1 id=\"运行可被中止_(Run-Stop-Run)\">运行可被中止 (Run..Stop..Run)</h1>\n<p>使用 ES6 的生成器特性，我们有了一种新的函数类型：</p>\n<p>允许这个函数的执行被中断一次或多次，在中断的期间我们可以去做其他操作，完成后再回来恢复这个函数的执行。</p>\n<p>如果你了解过其他并发型或多线程的语言的话，你可能知道『协作(cooperative)』：</p>\n<p>在一个函数执行期间，允许执行中断，在中断期间与其他代码进行协作。</p>\n<p>ES6 生成器函数在并发行为中体现了这种『协作』的特性。</p>\n<p>在生成器函数体中，我们可以使用一个新的 <code>yield</code> 关键字在内部来中断函数的执行。</p>\n<p>需要注意的是，生成器并不能恢复自己中断的执行，我们需要一个额外的控制来恢复函数的执行。</p>\n<p>所以，一个生成器函数能够被中断和重启。那生成器函数中断自己的执行后，怎么才知道何时恢复执行呢？</p>\n<p>我们可以使用 <code>yield</code> 来对外发送中断的信号，当外部返回信号时再恢复函数的执行。</p>\n<h1 id=\"生成器的语法\">生成器的语法</h1>\n<p>我们可以这样声明一个生成器函数：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> *foo() {</div><div class=\"line\">    // <span class=\"keyword\">...</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>注意这里的星号(*)即声明了这个函数是属于生成器类型的函数。</p>\n<p>生成器函数大多数功能与普通函数没有区别，只有一部分新颖的语法需要学习。</p>\n<p>先介绍一个 <code>yield</code> 关键字：</p>\n<p><code>yield ___</code> 也叫做 『yield 表达式』，当我们重启生成器时，会向函数内部传值，这个值为对应的 <code>yield ___</code> 表达式的计算结果。</p>\n<p>举个栗子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">1</span> + (<span class=\"keyword\">yield</span> <span class=\"string\">\"foo\"</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>在这段代码中， <code>yield &quot;foo&quot;</code> 表达式将在函数中断时，向外部发送 “foo” 这个值，且当这个生成器重启时，外部传入的值将作为这个表达式的结果：</p>\n<p>在这里，外部传入的值将会与 <code>1</code> 进行相加操作，然后赋值给 <code>x</code>。</p>\n<p>看到双向通信的特点了么？我们在生成器内部向外发送 “foo” 然后中断函数执行，然后当生成器接收到外部传入一个值时，生成器将重启，函数将恢复执行。</p>\n<p>如果我们只是向中止函数而不对外传值时，只使用 <code>yield</code> 即可：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 注意: `foo(..)` 在这里并不是一个生成器</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">(x)</span> </span>{</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"x: \"</span> + x);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">bar</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">yield</span>; <span class=\"comment\">// 只是中断，而不向外传值</span></div><div class=\"line\">    foo( <span class=\"keyword\">yield</span> ); <span class=\"comment\">// 当外部传回一个值时，将执行 foo() 操作</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h1 id=\"生成器迭代器(Generator_Iterator)\">生成器迭代器(Generator Iterator)</h1>\n<p>迭代器是一种设计模式，定义了一种特殊的行为：</p>\n<p>我们通过 <code>next()</code> 来获取一组有序的值。</p>\n<p>举个栗子：我们有个数组为 [1, 2, 3, 4, 5]，第一次调用 <code>next()</code> 将返回 1，第二次调用 <code>next()</code> 将返回 2，以此类推，当数组内的值都返回完毕时，继续调用 <code>next()</code>将返回 null 或 false。</p>\n<p>为了从外部控制生成器函数，我们使用生成器迭代器(generator iterator)来实现，举个栗子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>我们先定义了一个生成器函数 <code>foo()</code>，接着我们调用它一次来生成一个迭代器：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">var it </span>=<span class=\"string\"> foo();</span></div></pre></td></tr></table></figure>\n\n<p>你可能会疑问为啥我们不是使用 <code>new</code> 关键字即 <code>var it = new foo()</code> 来生成迭代器？好吧，这语法背后比较复杂已经超出了我们的讨论范围了。</p>\n<p>接下来我们就可以使用这个迭代器了：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log( it.<span class=\"keyword\">next</span>() ); <span class=\"regexp\">//</span> { <span class=\"symbol\">value:</span> <span class=\"number\">1</span>, <span class=\"symbol\">done:</span> <span class=\"keyword\">false</span> }</div></pre></td></tr></table></figure>\n\n<p>这里的 <code>it.next()</code> 返回 <code>{ value: 1, done: false }</code>，其中的 <code>value: 1</code> 是 <code>yield 1</code> 返回的值，而 <code>done: false</code> 表示生成器函数还没有迭代完成。</p>\n<p>继续调用 <code>it.next()</code> 进行迭代：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log( it.<span class=\"keyword\">next</span>() ); <span class=\"regexp\">//</span> { <span class=\"symbol\">value:</span><span class=\"number\">2</span>, <span class=\"symbol\">done:</span><span class=\"keyword\">false</span> }</div><div class=\"line\">console.log( it.<span class=\"keyword\">next</span>() ); <span class=\"regexp\">//</span> { <span class=\"symbol\">value:</span><span class=\"number\">3</span>, <span class=\"symbol\">done:</span><span class=\"keyword\">false</span> }</div><div class=\"line\">console.log( it.<span class=\"keyword\">next</span>() ); <span class=\"regexp\">//</span> { <span class=\"symbol\">value:</span><span class=\"number\">4</span>, <span class=\"symbol\">done:</span><span class=\"keyword\">false</span> }</div><div class=\"line\">console.log( it.<span class=\"keyword\">next</span>() ); <span class=\"regexp\">//</span> { <span class=\"symbol\">value:</span><span class=\"number\">5</span>, <span class=\"symbol\">done:</span><span class=\"keyword\">false</span> }</div></pre></td></tr></table></figure>\n\n<p>注意我们迭代到值为 <code>5</code>时，<code>done</code> 还是为 <code>false</code>，是因为这时候生成器函数并未处于完成状态，我们再调用一次看看：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log( it.<span class=\"keyword\">next</span>() ); <span class=\"regexp\">//</span> { <span class=\"symbol\">value:</span>undefined, <span class=\"symbol\">done:</span><span class=\"keyword\">true</span> }</div></pre></td></tr></table></figure>\n\n<p>这时候我们已经执行完了所有的 <code>yield ___</code> 表达式，所以 <code>done</code> 已经为 <code>true</code>。</p>\n<p>你可能会好奇的是：如果我们在一个生成器函数中使用了 <code>return</code>，我们在外部还能获取到 <code>yield</code> 的值么？</p>\n<p><em>答案可以是：能</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> it = foo();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log( it.next() ); <span class=\"comment\">// { value:1, done:false }</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( it.next() ); <span class=\"comment\">// { value:2, done:true }</span></div></pre></td></tr></table></figure>\n\n<p>让我们看看当我们使用迭代器时，生成器怎么对外传值，以及怎么接收外部传入的值：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span><span class=\"params\">(x)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">2</span> * (<span class=\"keyword\">yield</span> (x + <span class=\"number\">1</span>));</div><div class=\"line\">    <span class=\"keyword\">var</span> z = <span class=\"keyword\">yield</span> (y / <span class=\"number\">3</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> (x + y + z);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> it = foo( <span class=\"number\">5</span> );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 注意：这里没有给 `it.next()` 传值</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( it.next() );       <span class=\"comment\">// { value:6, done:false }</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( it.next( <span class=\"number\">12</span> ) );   <span class=\"comment\">// { value:8, done:false }</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( it.next( <span class=\"number\">13</span> ) );   <span class=\"comment\">// { value:42, done:true }</span></div></pre></td></tr></table></figure>\n\n<p>我们传入参数 <code>5</code> 先初始化了一个迭代器。</p>\n<p>第一个 <code>next()</code> 中没有传递参数进去，因为这个生成器函数中没有对应的 <code>yield</code> 来接收参数，所以如果我们在第一个 <code>next()</code> 强制传参进去的话，什么都不会发生。<br>第一个 <code>yield (x+1)</code> 将返回 <code>value: 6</code> 到外部，此时生成器未迭代完毕，所以同时返回 <code>done: false</code> 。</p>\n<p>第二个 <code>next(12)</code> 中我们传递了参数 <code>12</code> 进去，则表达式 <code>yield(x+1)</code> 会被赋值为 12，相当于：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span> * <span class=\"number\">12</span>; <span class=\"comment\">// =&gt; 24</span></div></pre></td></tr></table></figure>\n\n<p>第二个 <code>yield (y/3)</code> 将返回 <code>value: 8</code> 到外部，此时生成器未迭代完毕，所以同时返回 <code>done: false</code> 。</p>\n<p>同理，在第三个 <code>next(13)</code> 中我们传递了参数 <code>13</code> 进去，则表达式 <code>yield(y/3)</code> 会被赋值为 13，相当于：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span></div><div class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">24</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> z = <span class=\"number\">13</span>;</div></pre></td></tr></table></figure>\n\n<p>第三个 <code>yield</code>并不存在，所以会 <code>return (x + y + z)</code> 即返回 <code>value: 42</code> 到外部，此时生成器已迭代完毕，所以同时返回 <code>done: true</code> 。</p>\n<p><em>答案也可以是：不能！</em></p>\n<p>依赖  <code>return</code> 从生成器中返回一个值并不好，因为当生成器遇见了 <code>for..of</code> 循环的时候，被返回的值将会被丢弃，举个栗子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> v of foo()) {</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( v );</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log( v ); <span class=\"comment\">// 仍然是 `5`, 而不是 `6`</span></div></pre></td></tr></table></figure>\n\n<p>看到了吧？由 <code>foo()</code> 创建的迭代器会被 <code>foo..of</code> 循环自动捕获，且会自动进行一个接一个的迭代，直到遇到 <code>done: true</code>，就结束了，并没有处理 <code>return</code> 的值。</p>\n<p>所以，<code>for..of</code> 循环会忽略被返回的 <code>6</code>，同时因为没有暴露出 <code>next()</code> 方法，<code>for..of</code> 循环就不能用于我们在中断生成器的期间，对生成器进行传值的场景。</p>\n<h1 id=\"总结\">总结</h1>\n<p>看了以上 ES6 Generators 的基础知识，很自然地就会想我们在什么场景下会用到这个新颖的生成器呢？</p>\n<p>当然有很多的场景能发挥生成器的这些特性了，这篇文章只是抛砖引玉，我们将继续深入挖掘生成器的魔力！</p>\n<p>当你在最新的 Chrome nightly 或 canary 版，或 Firefox nightly版，甚至在 v0.11+ 版本的 node （带 —harmony 开启 ES6 功能）中运行了以上这些代码片段后，我们可能会产生以下疑问：</p>\n<ol>\n<li>怎么进行错误处理呢？</li>\n<li>一个生成器怎么调用另一个生成器呢？</li>\n<li>怎么异步地使用生成器呢？</li>\n</ol>\n<p>别担心，请听下回分解：）</p>\n","source":"_posts/【译】ES6 Generators（1）基础篇.md","raw":"title: 【译】ES6 Generators（1）基础篇\ncategories:\n  - Translate\ndate: 2014-09-27 18:45:45\ntags:\n  - ES6\n  - generators\n---\n\n> 译注1：此文带着自己的理解，不完全按原文翻译。[原文地址](http://davidwalsh.name/es6-generators)\n\n> 译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。\n\n*generator* 即生成器，是 ES6 中众多特性中的一种，是一个新的函数类型。\n\n这篇文章旨在介绍 generator 的基础知识，以及告诉你在 JS 的未来，他们为何如此重要。\n\n# 运行直到完成 (Run-To-Completion)\n\n为了理清这个新的函数类型和其他函数类型有何区别，我们首先需要了解 『run to completion』 的概念。\n\n我们知道 JS 是单线程的，所以一旦一个函数开始执行，排在队列后边的函数就必须等待这个函数执行完毕。\n\n举个栗子：\n\n```\nsetTimeout(function(){\n    console.log(\"Hello World\");\n},1);\n\nfunction foo() {\n    // 注意: 永远不要使用这种超长的循环，这里只是为了演示方便\n    for (var i=0; i<=1E10; i++) {\n        console.log(i);\n    }\n}\n\nfoo();\n// 0..1E10\n// \"Hello World\"\n\n```\n\n在这段代码中，我们先执行了 `foo()` 然后执行 `setTimeout`，而 `foo()` 中的 for 循环将花费超长的时间才能完成。\n\n只有等待这个漫长的循环结束后，`setTimeout` 中的 `console.log('Hello World')` 才能执行。\n\n如果 `foo()` 函数能够被中断会怎样呢？\n\n这是多线程编程语言的挑战，但我们并不需要考虑这个，因为 JS 是单线程的。\n\n# 运行可被中止 (Run..Stop..Run)\n\n使用 ES6 的生成器特性，我们有了一种新的函数类型：\n\n允许这个函数的执行被中断一次或多次，在中断的期间我们可以去做其他操作，完成后再回来恢复这个函数的执行。\n\n如果你了解过其他并发型或多线程的语言的话，你可能知道『协作(cooperative)』：\n\n在一个函数执行期间，允许执行中断，在中断期间与其他代码进行协作。\n\nES6 生成器函数在并发行为中体现了这种『协作』的特性。\n\n在生成器函数体中，我们可以使用一个新的 `yield` 关键字在内部来中断函数的执行。\n\n需要注意的是，生成器并不能恢复自己中断的执行，我们需要一个额外的控制来恢复函数的执行。\n\n所以，一个生成器函数能够被中断和重启。那生成器函数中断自己的执行后，怎么才知道何时恢复执行呢？\n\n我们可以使用 `yield` 来对外发送中断的信号，当外部返回信号时再恢复函数的执行。\n\n# 生成器的语法\n\n我们可以这样声明一个生成器函数：\n\n```\nfunction *foo() {\n    // ...\n}\n```\n\n注意这里的星号(*)即声明了这个函数是属于生成器类型的函数。\n\n生成器函数大多数功能与普通函数没有区别，只有一部分新颖的语法需要学习。\n\n先介绍一个 `yield` 关键字：\n\n`yield ___` 也叫做 『yield 表达式』，当我们重启生成器时，会向函数内部传值，这个值为对应的 `yield ___` 表达式的计算结果。\n\n举个栗子：\n\n```\nfunction *foo() {\n    var x = 1 + (yield \"foo\");\n    console.log(x);\n}\n```\n\n在这段代码中， `yield \"foo\"` 表达式将在函数中断时，向外部发送 \"foo\" 这个值，且当这个生成器重启时，外部传入的值将作为这个表达式的结果：\n\n在这里，外部传入的值将会与 `1` 进行相加操作，然后赋值给 `x`。\n\n看到双向通信的特点了么？我们在生成器内部向外发送 \"foo\" 然后中断函数执行，然后当生成器接收到外部传入一个值时，生成器将重启，函数将恢复执行。\n\n如果我们只是向中止函数而不对外传值时，只使用 `yield` 即可：\n\n```\n// 注意: `foo(..)` 在这里并不是一个生成器\nfunction foo(x) {\n    console.log(\"x: \" + x);\n}\n\nfunction *bar() {\n    yield; // 只是中断，而不向外传值\n    foo( yield ); // 当外部传回一个值时，将执行 foo() 操作\n}\n```\n\n# 生成器迭代器(Generator Iterator)\n\n迭代器是一种设计模式，定义了一种特殊的行为：\n\n我们通过 `next()` 来获取一组有序的值。\n\n举个栗子：我们有个数组为 [1, 2, 3, 4, 5]，第一次调用 `next()` 将返回 1，第二次调用 `next()` 将返回 2，以此类推，当数组内的值都返回完毕时，继续调用 `next()`将返回 null 或 false。\n\n为了从外部控制生成器函数，我们使用生成器迭代器(generator iterator)来实现，举个栗子：\n\n```\nfunction *foo() {\n    yield 1;\n    yield 2;\n    yield 3;\n    yield 4;\n    yield 5;\n}\n```\n我们先定义了一个生成器函数 `foo()`，接着我们调用它一次来生成一个迭代器：\n\n```\nvar it = foo();\n```\n\n你可能会疑问为啥我们不是使用 `new` 关键字即 `var it = new foo()` 来生成迭代器？好吧，这语法背后比较复杂已经超出了我们的讨论范围了。\n\n接下来我们就可以使用这个迭代器了：\n\n```\nconsole.log( it.next() ); // { value: 1, done: false }\n```\n\n这里的 `it.next()` 返回 `{ value: 1, done: false }`，其中的 `value: 1` 是 `yield 1` 返回的值，而 `done: false` 表示生成器函数还没有迭代完成。\n\n继续调用 `it.next()` 进行迭代：\n\n```\nconsole.log( it.next() ); // { value:2, done:false }\nconsole.log( it.next() ); // { value:3, done:false }\nconsole.log( it.next() ); // { value:4, done:false }\nconsole.log( it.next() ); // { value:5, done:false }\n```\n\n注意我们迭代到值为 `5`时，`done` 还是为 `false`，是因为这时候生成器函数并未处于完成状态，我们再调用一次看看：\n\n```\nconsole.log( it.next() ); // { value:undefined, done:true }\n```\n\n这时候我们已经执行完了所有的 `yield ___` 表达式，所以 `done` 已经为 `true`。\n\n你可能会好奇的是：如果我们在一个生成器函数中使用了 `return`，我们在外部还能获取到 `yield` 的值么？\n\n*答案可以是：能*\n\n```\nfunction *foo() {\n    yield 1;\n    return 2;\n}\n\nvar it = foo();\n\nconsole.log( it.next() ); // { value:1, done:false }\nconsole.log( it.next() ); // { value:2, done:true }\n```\n\n让我们看看当我们使用迭代器时，生成器怎么对外传值，以及怎么接收外部传入的值：\n\n```\nfunction *foo(x) {\n    var y = 2 * (yield (x + 1));\n    var z = yield (y / 3);\n    return (x + y + z);\n}\n\nvar it = foo( 5 );\n\n// 注意：这里没有给 `it.next()` 传值\nconsole.log( it.next() );       // { value:6, done:false }\nconsole.log( it.next( 12 ) );   // { value:8, done:false }\nconsole.log( it.next( 13 ) );   // { value:42, done:true }\n```\n\n我们传入参数 `5` 先初始化了一个迭代器。\n\n第一个 `next()` 中没有传递参数进去，因为这个生成器函数中没有对应的 `yield` 来接收参数，所以如果我们在第一个 `next()` 强制传参进去的话，什么都不会发生。\n第一个 `yield (x+1)` 将返回 `value: 6` 到外部，此时生成器未迭代完毕，所以同时返回 `done: false` 。\n\n第二个 `next(12)` 中我们传递了参数 `12` 进去，则表达式 `yield(x+1)` 会被赋值为 12，相当于：\n\n```\nvar x = 5;\nvar y = 2 * 12; // => 24\n```\n\n第二个 `yield (y/3)` 将返回 `value: 8` 到外部，此时生成器未迭代完毕，所以同时返回 `done: false` 。\n\n同理，在第三个 `next(13)` 中我们传递了参数 `13` 进去，则表达式 `yield(y/3)` 会被赋值为 13，相当于：\n\n```\nvar x = 5\nvar y = 24;\nvar z = 13;\n```\n第三个 `yield`并不存在，所以会 `return (x + y + z)` 即返回 `value: 42` 到外部，此时生成器已迭代完毕，所以同时返回 `done: true` 。\n\n*答案也可以是：不能！*\n\n依赖  `return` 从生成器中返回一个值并不好，因为当生成器遇见了 `for..of` 循环的时候，被返回的值将会被丢弃，举个栗子：\n\n```\nfunction *foo() {\n    yield 1;\n    yield 2;\n    yield 3;\n    yield 4;\n    yield 5;\n    return 6;\n}\n\nfor (var v of foo()) {\n    console.log( v );\n}\n// 1 2 3 4 5\n\nconsole.log( v ); // 仍然是 `5`, 而不是 `6` \n```\n\n看到了吧？由 `foo()` 创建的迭代器会被 `foo..of` 循环自动捕获，且会自动进行一个接一个的迭代，直到遇到 `done: true`，就结束了，并没有处理 `return` 的值。\n\n所以，`for..of` 循环会忽略被返回的 `6`，同时因为没有暴露出 `next()` 方法，`for..of` 循环就不能用于我们在中断生成器的期间，对生成器进行传值的场景。\n\n# 总结\n\n看了以上 ES6 Generators 的基础知识，很自然地就会想我们在什么场景下会用到这个新颖的生成器呢？\n\n当然有很多的场景能发挥生成器的这些特性了，这篇文章只是抛砖引玉，我们将继续深入挖掘生成器的魔力！\n\n当你在最新的 Chrome nightly 或 canary 版，或 Firefox nightly版，甚至在 v0.11+ 版本的 node （带 --harmony 开启 ES6 功能）中运行了以上这些代码片段后，我们可能会产生以下疑问：\n\n1. 怎么进行错误处理呢？\n2. 一个生成器怎么调用另一个生成器呢？\n3. 怎么异步地使用生成器呢？\n\n别担心，请听下回分解：）","slug":"【译】ES6 Generators（1）基础篇","updated":1418908898000,"excerpt":"","_id":"78id1lhzpfaa8sqm","comments":true,"layout":"post","photos":[],"link":""},{"title":"【译】ES6 Generators（2）深入篇","categories":["5mkw9mventxlp5vo"],"date":1411901145000,"tags":["7sfn5fw7t2bpmxsr","0pxk3k3oh5k9vb6a"],"content":"<blockquote>\n<p>译注1：此文带着自己的理解，不完全按原文翻译。<a href=\"http://davidwalsh.name/es6-generators-dive\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n<p>译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。</p>\n</blockquote>\n<p>如果你仍然对 ES6 Generators 不熟悉的话，建议你先阅读并运行 <a href=\"\">【译】ES6 Generators 基础篇（1）</a> 中的代码片段，理解了生成器的基础知识后，就可以阅读这篇文章了解更多的细节啦。</p>\n<h1 id=\"错误处理\">错误处理</h1>\n<p>ES6 中生成器的其中一个强大的特点就是：函数内部的代码编写风格是同步的，即使外部的迭代控制过程可能是异步的。</p>\n<p>也就是说，我们可以简单地对错误进行处理，类似我们熟悉的 <code>try..catch</code> 语法，举个栗子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">try</span> {</div><div class=\"line\">        <span class=\"keyword\">var</span> x = <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">\"x: \"</span> + x ); <span class=\"comment\">// 如果出错，这里可能永远不会执行</span></div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">catch</span> (err) {</div><div class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">\"Error: \"</span> + err );</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>即使这个生成器可能会在 <code>yield 3</code> 处中断，当接收到外部传入的错误时，<code>try..catch</code> 将会捕获到。</p>\n<p>具体一个错误是怎样传入生成器的呢，举个栗子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> it = foo();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> res = it.next(); <span class=\"comment\">// { value:3, done:false }</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 我们在这里不调用 it.next() 传值进去，而是触发一个错误</span></div><div class=\"line\">it.<span class=\"keyword\">throw</span>( <span class=\"string\">\"Oops!\"</span> ); <span class=\"comment\">// Error: Oops!</span></div></pre></td></tr></table></figure>\n\n<p>我们可以使用 <code>throw()</code> 方法产生错误传进生成器中，那么在生成器中断的地方，即 <code>yield 3</code> 处会产生错误，然后被 <code>try..catch</code> 捕获。</p>\n<p>注意：如果我们使用 <code>throw()</code> 方法产生一个错误传进生成器中，但没有对应的 <code>try..catch</code> 对错误进行捕获的话，这个错误将会被传出去，外部如果不对错误进行捕获的话，则会抛出异常：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span><span class=\"params\">()</span> </span>{ }</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> it = foo();</div><div class=\"line\"><span class=\"comment\">// 在外部进行捕获</span></div><div class=\"line\"><span class=\"keyword\">try</span> {</div><div class=\"line\">    it.throw( <span class=\"string\">\"Oops!\"</span> );</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">catch</span> (err) {</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"Error: \"</span> + err ); <span class=\"comment\">// Error: Oops!</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>当然，我们也可以进行反方向的错误捕获：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = x.toUpperCase(); <span class=\"comment\">// 若 x 不是字符串的话，将抛出TypeError 错误</span></div><div class=\"line\">    <span class=\"keyword\">yield</span> y;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> it = foo();</div><div class=\"line\"></div><div class=\"line\">it.next(); <span class=\"comment\">// { value:3, done:false }</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> {</div><div class=\"line\">    it.next( <span class=\"number\">42</span> ); <span class=\"comment\">// `42` 是数字没有 `toUpperCase()` 方法，所以会出错</span></div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">catch</span> (err) {</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( err ); <span class=\"comment\">// 捕获到 TypeError 错误</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h1 id=\"生成器委托\">生成器委托</h1>\n<p>另一个我们想做的可能是在一个生成器中调用另一个生成器。</p>\n<p>我并不是指在一个生成器中初始化另一个生成器，而是说我们可以将一个生成器的迭代器控制交给另一个生成器。</p>\n<p>为了实现委托，我们需要用到 <code>yield</code> 关键字的另一种形式：<code>yield *</code>，举个栗子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">bar</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> *foo(); <span class=\"comment\">// `yield *` 将迭代器控制委托给了 `foo()`</span></div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> v of bar()) {</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( v );</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></div></pre></td></tr></table></figure>\n\n<p>以上这段代码应该通俗易懂：当生成器 <code>bar()</code> 迭代到 <code>yield 2</code> 时，先将控制权交给了另一个生成器 <code>foo()</code>迭代完后再将控制权收回，继续进行迭代。</p>\n<p>这里使用了 <code>for..of</code> 循环进行示例，正如在基础篇我们知道 <code>for..of</code> 循环中没有暴露出 <code>next()</code> 方法来传递值到生成器中，所以我们可以用手动的方式：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> z = <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> w = <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"z: \"</span> + z + <span class=\"string\">\", w: \"</span> + w );</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">bar</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> *foo(); <span class=\"comment\">// `yield *` 将迭代器控制委托给了 `foo()`</span></div><div class=\"line\">    <span class=\"keyword\">var</span> v = <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"x: \"</span> + x + <span class=\"string\">\", y: \"</span> + y + <span class=\"string\">\", v: \"</span> + v );</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> it = bar();</div><div class=\"line\"></div><div class=\"line\">it.next();      <span class=\"comment\">// { value:1, done:false }</span></div><div class=\"line\">it.next( <span class=\"string\">\"X\"</span> ); <span class=\"comment\">// { value:2, done:false }</span></div><div class=\"line\">it.next( <span class=\"string\">\"Y\"</span> ); <span class=\"comment\">// { value:3, done:false }</span></div><div class=\"line\">it.next( <span class=\"string\">\"Z\"</span> ); <span class=\"comment\">// { value:4, done:false }</span></div><div class=\"line\">it.next( <span class=\"string\">\"W\"</span> ); <span class=\"comment\">// { value:5, done:false }</span></div><div class=\"line\"><span class=\"comment\">// z: Z, w: W</span></div><div class=\"line\"></div><div class=\"line\">it.next( <span class=\"string\">\"V\"</span> ); <span class=\"comment\">// { value:undefined, done:true }</span></div><div class=\"line\"><span class=\"comment\">// x: X, y: Y, v: V</span></div></pre></td></tr></table></figure>\n\n<p>尽管我们在这里只展示了一层的委托关系，但具体场景中我们当然可以使用多层的嵌套。</p>\n<p>一个 <code>yield *</code> 技巧是，我们可以从被委托的生成器（比如示例中的 <code>foo()</code>） 获取到返回值，举个栗子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">function *foo() {</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"foo\"</span>; <span class=\"regexp\">//</span> 返回一个值给 `<span class=\"keyword\">yield</span>*` 表达式</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">function *bar() {</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">    var v = <span class=\"keyword\">yield</span> *foo();</div><div class=\"line\">    console.log( <span class=\"string\">\"v: \"</span> + v );</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">var it = bar();</div><div class=\"line\"></div><div class=\"line\">it.<span class=\"keyword\">next</span>(); <span class=\"regexp\">//</span> { <span class=\"symbol\">value:</span><span class=\"number\">1</span>, <span class=\"symbol\">done:</span><span class=\"keyword\">false</span> }</div><div class=\"line\">it.<span class=\"keyword\">next</span>(); <span class=\"regexp\">//</span> { <span class=\"symbol\">value:</span><span class=\"number\">2</span>, <span class=\"symbol\">done:</span><span class=\"keyword\">false</span> }</div><div class=\"line\">it.<span class=\"keyword\">next</span>(); <span class=\"regexp\">//</span> { <span class=\"symbol\">value:</span><span class=\"number\">3</span>, <span class=\"symbol\">done:</span><span class=\"keyword\">false</span> }</div><div class=\"line\">it.<span class=\"keyword\">next</span>(); <span class=\"regexp\">//</span> <span class=\"string\">\"v: foo\"</span>   { <span class=\"symbol\">value:</span><span class=\"number\">4</span>, <span class=\"symbol\">done:</span><span class=\"keyword\">false</span> } 注意：在这里获取到了返回的值</div><div class=\"line\">it.<span class=\"keyword\">next</span>(); <span class=\"regexp\">//</span> { <span class=\"symbol\">value:</span>undefined, <span class=\"symbol\">done:</span><span class=\"keyword\">true</span> }</div></pre></td></tr></table></figure>\n\n<p><code>yield *foo()</code> 得到了 <code>bar()</code> 的控制权，完成了自己的迭代操作后，返回了一个 <code>v: foo</code> 值 给<code>bar()</code> ，然后 <code>bar()</code> 再继续迭代下去。</p>\n<p><code>yield</code> 和 <code>yield *</code> 表达式的一个有趣的区别是：在 <code>yield</code> 中，返回值在 <code>next()</code> 中传入的，而在 <code>yield *</code> 中，返回值是在 <code>return</code> 中传入的。</p>\n<p>此外，我们也可以在委托的生成器中进行双向的错误绑定，举个栗子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">try</span> {</div><div class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">catch</span> (err) {</div><div class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">\"foo caught: \"</span> + err );</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">yield</span>; <span class=\"comment\">// 中断</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 现在抛出另一个错误</span></div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">\"Oops!\"</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">bar</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> {</div><div class=\"line\">        <span class=\"keyword\">yield</span> *foo();</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">catch</span> (err) {</div><div class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">\"bar caught: \"</span> + err );</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> it = bar();</div><div class=\"line\"></div><div class=\"line\">it.next(); <span class=\"comment\">// { value:1, done:false }</span></div><div class=\"line\">it.next(); <span class=\"comment\">// { value:2, done:false }</span></div><div class=\"line\"></div><div class=\"line\">it.throw( <span class=\"string\">\"Uh oh!\"</span> ); <span class=\"comment\">// 将会在 `foo()` 内部捕获</span></div><div class=\"line\"><span class=\"comment\">// foo caught: Uh oh!</span></div><div class=\"line\"></div><div class=\"line\">it.next(); <span class=\"comment\">// { value:undefined, done:true }  --&gt; 这里没有错误</span></div><div class=\"line\"><span class=\"comment\">// bar caught: Oops!</span></div></pre></td></tr></table></figure>\n\n<p><code>throw( &quot;Uh oh!&quot; )</code> 在代理给 <code>foo()</code> 的过程中，抛了个错误进去，所以错误在 <code>foo()</code> 中被捕获。</p>\n<p>同理，<code>throw &quot;Oops!&quot;</code>  在 <code>foo()</code> 内部抛出的错误，将会传回给 <code>bar()</code> 后，被 <code>bar()</code> 中的 <code>try..catch</code> 捕获到。</p>\n<h1 id=\"总结\">总结</h1>\n<p>生成器有着同步方式的编写语法，意味着我么可以使用 <code>try..catch</code> 在 <code>yield</code> 表达式中进行错误处理。</p>\n<p>生成器迭代器中也有一个 <code>throw()</code> 方法用于在中断期间向生成器内部传入一个错误，这个错误能被生成器内部的 <code>try..catch</code> 捕获。</p>\n<p><code>yield *</code> 允许我们将迭代器的控制权从当前的生成器中委托给另一个生成器。好处是 <code>yield *</code> 扮演了在生成器间传递消息和错误的角色。</p>\n<p>了解了这么多，还有一个很重要的问题没有解决：</p>\n<p>怎么异步地使用生成器呢？</p>\n<p>关键是要实现这么一个机制：在异步环境中，当迭代器的 <code>next()</code> 方法被调用，我们需要定位到生成器中断的地方重新启动。</p>\n<p>别担心，请听下回分解：）</p>\n","source":"_posts/【译】ES6 Generators（2）深入篇.md","raw":"title: 【译】ES6 Generators（2）深入篇\ncategories:\n  - Translate\ndate: 2014-09-28 18:45:45\ntags:\n  - ES6\n  - generators\n---\n\n> 译注1：此文带着自己的理解，不完全按原文翻译。[原文地址](http://davidwalsh.name/es6-generators-dive)\n\n> 译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。\n\n如果你仍然对 ES6 Generators 不熟悉的话，建议你先阅读并运行 [【译】ES6 Generators 基础篇（1）]() 中的代码片段，理解了生成器的基础知识后，就可以阅读这篇文章了解更多的细节啦。\n\n# 错误处理\n\nES6 中生成器的其中一个强大的特点就是：函数内部的代码编写风格是同步的，即使外部的迭代控制过程可能是异步的。\n\n也就是说，我们可以简单地对错误进行处理，类似我们熟悉的 `try..catch` 语法，举个栗子：\n\n```\nfunction *foo() {\n    try {\n        var x = yield 3;\n        console.log( \"x: \" + x ); // 如果出错，这里可能永远不会执行\n    }\n    catch (err) {\n        console.log( \"Error: \" + err );\n    }\n}\n```\n\n即使这个生成器可能会在 `yield 3` 处中断，当接收到外部传入的错误时，`try..catch` 将会捕获到。\n\n具体一个错误是怎样传入生成器的呢，举个栗子：\n\n```\nvar it = foo();\n\nvar res = it.next(); // { value:3, done:false }\n\n// 我们在这里不调用 it.next() 传值进去，而是触发一个错误\nit.throw( \"Oops!\" ); // Error: Oops!\n```\n\n我们可以使用 `throw()` 方法产生错误传进生成器中，那么在生成器中断的地方，即 `yield 3` 处会产生错误，然后被 `try..catch` 捕获。\n\n注意：如果我们使用 `throw()` 方法产生一个错误传进生成器中，但没有对应的 `try..catch` 对错误进行捕获的话，这个错误将会被传出去，外部如果不对错误进行捕获的话，则会抛出异常：\n\n```\n\nfunction *foo() { }\n\nvar it = foo();\n// 在外部进行捕获\ntry {\n    it.throw( \"Oops!\" );\n}\ncatch (err) {\n    console.log( \"Error: \" + err ); // Error: Oops!\n}\n```\n\n当然，我们也可以进行反方向的错误捕获：\n\n```\nfunction *foo() {\n    var x = yield 3;\n    var y = x.toUpperCase(); // 若 x 不是字符串的话，将抛出TypeError 错误\n    yield y;\n}\n\nvar it = foo();\n\nit.next(); // { value:3, done:false }\n\ntry {\n    it.next( 42 ); // `42` 是数字没有 `toUpperCase()` 方法，所以会出错\n}\ncatch (err) {\n    console.log( err ); // 捕获到 TypeError 错误\n}\n```\n\n# 生成器委托\n\n另一个我们想做的可能是在一个生成器中调用另一个生成器。\n\n我并不是指在一个生成器中初始化另一个生成器，而是说我们可以将一个生成器的迭代器控制交给另一个生成器。\n\n为了实现委托，我们需要用到 `yield` 关键字的另一种形式：`yield *`，举个栗子：\n\n```\nfunction *foo() {\n    yield 3;\n    yield 4;\n}\n\nfunction *bar() {\n    yield 1;\n    yield 2;\n    yield *foo(); // `yield *` 将迭代器控制委托给了 `foo()`\n    yield 5;\n}\n\nfor (var v of bar()) {\n    console.log( v );\n}\n// 1 2 3 4 5\n```\n\n以上这段代码应该通俗易懂：当生成器 `bar()` 迭代到 `yield 2` 时，先将控制权交给了另一个生成器 `foo()`迭代完后再将控制权收回，继续进行迭代。\n\n这里使用了 `for..of` 循环进行示例，正如在基础篇我们知道 `for..of` 循环中没有暴露出 `next()` 方法来传递值到生成器中，所以我们可以用手动的方式：\n\n```\nfunction *foo() {\n    var z = yield 3;\n    var w = yield 4;\n    console.log( \"z: \" + z + \", w: \" + w );\n}\n\nfunction *bar() {\n    var x = yield 1;\n    var y = yield 2;\n    yield *foo(); // `yield *` 将迭代器控制委托给了 `foo()`\n    var v = yield 5;\n    console.log( \"x: \" + x + \", y: \" + y + \", v: \" + v );\n}\n\nvar it = bar();\n\nit.next();      // { value:1, done:false }\nit.next( \"X\" ); // { value:2, done:false }\nit.next( \"Y\" ); // { value:3, done:false }\nit.next( \"Z\" ); // { value:4, done:false }\nit.next( \"W\" ); // { value:5, done:false }\n// z: Z, w: W\n\nit.next( \"V\" ); // { value:undefined, done:true }\n// x: X, y: Y, v: V\n```\n\n尽管我们在这里只展示了一层的委托关系，但具体场景中我们当然可以使用多层的嵌套。\n\n一个 `yield *` 技巧是，我们可以从被委托的生成器（比如示例中的 `foo()`） 获取到返回值，举个栗子：\n\n```\nfunction *foo() {\n    yield 2;\n    yield 3;\n    return \"foo\"; // 返回一个值给 `yield*` 表达式\n}\n\nfunction *bar() {\n    yield 1;\n    var v = yield *foo();\n    console.log( \"v: \" + v );\n    yield 4;\n}\n\nvar it = bar();\n\nit.next(); // { value:1, done:false }\nit.next(); // { value:2, done:false }\nit.next(); // { value:3, done:false }\nit.next(); // \"v: foo\"   { value:4, done:false } 注意：在这里获取到了返回的值\nit.next(); // { value:undefined, done:true }\n```\n\n`yield *foo()` 得到了 `bar()` 的控制权，完成了自己的迭代操作后，返回了一个 `v: foo` 值 给`bar()` ，然后 `bar()` 再继续迭代下去。\n\n`yield` 和 `yield *` 表达式的一个有趣的区别是：在 `yield` 中，返回值在 `next()` 中传入的，而在 `yield *` 中，返回值是在 `return` 中传入的。\n\n此外，我们也可以在委托的生成器中进行双向的错误绑定，举个栗子：\n\n```\nfunction *foo() {\n    try {\n        yield 2;\n    }\n    catch (err) {\n        console.log( \"foo caught: \" + err );\n    }\n\n    yield; // 中断\n\n    // 现在抛出另一个错误\n    throw \"Oops!\";\n}\n\nfunction *bar() {\n    yield 1;\n    try {\n        yield *foo();\n    }\n    catch (err) {\n        console.log( \"bar caught: \" + err );\n    }\n}\n\nvar it = bar();\n\nit.next(); // { value:1, done:false }\nit.next(); // { value:2, done:false }\n\nit.throw( \"Uh oh!\" ); // 将会在 `foo()` 内部捕获\n// foo caught: Uh oh!\n\nit.next(); // { value:undefined, done:true }  --> 这里没有错误\n// bar caught: Oops!\n```\n\n`throw( \"Uh oh!\" )` 在代理给 `foo()` 的过程中，抛了个错误进去，所以错误在 `foo()` 中被捕获。\n\n同理，`throw \"Oops!\"`  在 `foo()` 内部抛出的错误，将会传回给 `bar()` 后，被 `bar()` 中的 `try..catch` 捕获到。\n\n# 总结\n\n生成器有着同步方式的编写语法，意味着我么可以使用 `try..catch` 在 `yield` 表达式中进行错误处理。\n\n生成器迭代器中也有一个 `throw()` 方法用于在中断期间向生成器内部传入一个错误，这个错误能被生成器内部的 `try..catch` 捕获。\n\n`yield *` 允许我们将迭代器的控制权从当前的生成器中委托给另一个生成器。好处是 `yield *` 扮演了在生成器间传递消息和错误的角色。\n\n了解了这么多，还有一个很重要的问题没有解决：\n\n怎么异步地使用生成器呢？\n\n关键是要实现这么一个机制：在异步环境中，当迭代器的 `next()` 方法被调用，我们需要定位到生成器中断的地方重新启动。\n\n别担心，请听下回分解：）","slug":"【译】ES6 Generators（2）深入篇","updated":1418908898000,"excerpt":"","_id":"rq9o2jpliix1g95f","comments":true,"layout":"post","photos":[],"link":""},{"title":"【译】ES6 Generators（3）异步篇","categories":["5mkw9mventxlp5vo"],"date":1411987545000,"tags":["7sfn5fw7t2bpmxsr","0pxk3k3oh5k9vb6a"],"content":"<blockquote>\n<p>译注1：此文带着自己的理解，不完全按原文翻译。<a href=\"http://davidwalsh.name/async-generators\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n<p>译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。</p>\n</blockquote>\n<p>生成器提供了同步方式编写的代码风格，这就允许我们隐藏异步的实现细节。</p>\n<p>我们就可以用一种非常自然的方式来表达程序的执行流程，避免了同时处理异步代码的语法和陷阱。</p>\n<p>换句话说，我们利用生成器从内到外、从外到内双向传值的特点，将不同的值的处理交给了不同的生成器逻辑，只需要关心获取到特定的值进行某种操作，而无需关心特定的值如何产生（通过<code>netx()</code> 将值的产生逻辑委托出去）。</p>\n<p>这么一来，异步处理的优点以及易读的代码结合到一起，就加强了我们程序的可维护性。</p>\n<h1 id=\"最简单的异步\">最简单的异步</h1>\n<p>举个栗子，假定我们已经有了以下代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeAjaxCall</span><span class=\"params\">(url,cb)</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// 执行一个 ajax 请求</span></div><div class=\"line\">    <span class=\"comment\">// 请求完成后执行 `cb(result)` </span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">makeAjaxCall( <span class=\"string\">\"http://some.url.1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(result1)</span></span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse( result1 );</div><div class=\"line\"></div><div class=\"line\">    makeAjaxCall( <span class=\"string\">\"http://some.url.2/?id=\"</span> + data.id, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(result2)</span></span>{</div><div class=\"line\">        <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse( result2 );</div><div class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">\"我们请求到的数据是: \"</span> + resp.value );</div><div class=\"line\">    });</div><div class=\"line\">} );</div></pre></td></tr></table></figure>\n\n<p>使用简单的生成器来表达的话，就像这样：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span><span class=\"params\">(url)</span> </span>{</div><div class=\"line\">   <span class=\"comment\">// 调用这个普通函数来隐藏异步处理的细节</span></div><div class=\"line\">   <span class=\"comment\">// 使用 `it.next()` 来恢复调用这个普通函数的生成器函数的迭代器</span></div><div class=\"line\">    makeAjaxCall( url, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(response)</span></span>{</div><div class=\"line\">        <span class=\"comment\">// 异步获取到数据后，给生成器发送 `response` 信号</span></div><div class=\"line\">        it.next( response );</div><div class=\"line\">    } );</div><div class=\"line\">    <span class=\"comment\">// 注意: 这里没有返回值</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">main</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> result1 = <span class=\"keyword\">yield</span> request( <span class=\"string\">\"http://some.url.1\"</span> );</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse( result1 );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> result2 = <span class=\"keyword\">yield</span> request( <span class=\"string\">\"http://some.url.2?id=\"</span> + data.id );</div><div class=\"line\">    <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse( result2 );</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"The value you asked for: \"</span> + resp.value );</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> it = main();</div><div class=\"line\">it.next(); <span class=\"comment\">// 开始迭代</span></div></pre></td></tr></table></figure>\n\n<p><code>request()</code> 这个工具函数只是将我们的异步请求数据的代码进行了封装，需要注意的是在回调函数中调用了生成器的 <code>next()</code> 方法。</p>\n<p>当我们使用 <code>var it = main();</code> 创建了一个迭代器后，紧接着使用 <code>it.next();</code> 开始迭代，这时候遇到第一个 <code>yield</code> 中断了生成器，转而执行 <code>request( &quot;http://some.url.1&quot; )</code></p>\n<p>当 <code>request( &quot;http://some.url.1&quot; )</code> 异步获取到数据后，在回调函数中调用 <code>it.next(response)</code> 将 <code>response</code> 传回给生成器刚刚中断的地方，生成器将继续迭代。</p>\n<p>这里的亮点就是，我们在生成器中无需关心异步请求的数据如何获取，我们只知道调用了  <code>request()</code> 后，当需要的数据获取到了，就会通知生成器继续迭代。</p>\n<p>这么一来在生成器中我们使用同步方式的编写风格，其实我们获取到了异步数据！</p>\n<p>同理，当我们继续调用 <code>it.next()</code> 时，会遇到第二个 <code>yield</code> 中断迭代，发出第二个请求 <code>yield request( &quot;http://some.url.2?id=&quot; + data.id )</code> 异步获取到数据后再恢复迭代，我们依旧不用关心异步获取数据的细节了，多爽！</p>\n<p>以上这段代码中，<code>request()</code> 请求的是异步 AJAX 请求，但如果我们后续改变程序给 AJAX 设置了缓存了，获取数据会先从缓存中获取，这时候没有执行真正的 AJAX 请求就不能在回调函数中调用 <code>it.next(response)</code> 来恢复生成器的中断了啊！</p>\n<p>没关系，我们可以使用一个小技巧来解决这个问题，举个栗子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 给 AJAX 设置缓存</span></div><div class=\"line\"><span class=\"keyword\">var</span> cache = {};</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span><span class=\"params\">(url)</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// 请求已被缓存</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (cache[url]) {</div><div class=\"line\">        <span class=\"comment\">// 使用 setTimeout 来模拟异步操作</span></div><div class=\"line\">        setTimeout( <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">            it.next( cache[url] );</div><div class=\"line\">        }, <span class=\"number\">0</span> );</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"comment\">// 请求未被缓存，发出真正的请求</span></div><div class=\"line\">    <span class=\"keyword\">else</span> {</div><div class=\"line\">        makeAjaxCall( url, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(resp)</span></span>{</div><div class=\"line\">            cache[url] = resp;</div><div class=\"line\">            it.next( resp );</div><div class=\"line\">        } );</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>看，当我们给我们的程序添加了 AJAX 缓存机制甚至其他异步操作的优化时，我们只改变了  <code>request()</code> 这个工具函数的逻辑，而无需改动调用这个工具函数获取数据的生成器：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> result1 = <span class=\"keyword\">yield</span> request( <span class=\"string\">\"http://some.url.1\"</span> );</div><div class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse( result1 );</div><div class=\"line\">..</div></pre></td></tr></table></figure>\n\n<p>在生成器中，我们还是像以前一样调用 <code>request()</code> 就能获取到需要的异步数据，无需关心获取数据的细节实现！</p>\n<p>这就是将异步操作当做一个细节实现抽象出来后展现出的魔力了！</p>\n<h1 id=\"更好的异步\">更好的异步</h1>\n<p>上面介绍的异步方案对于简单的异步生成器来说工作良好，但用途有限，我们需要一个更强大的异步方案：使用 Promises.</p>\n<p>如果你对 ES6 Promises 有迷惑的话，我建议你先读 <a href=\"http://blog.getify.com/promises-part-1/\" target=\"_blank\" rel=\"external\">我写的介绍 Promises 的文章</a></p>\n<p>我们的代码目前有个严重的问题：回调多了会产生多重嵌套（即回调地狱）。</p>\n<p>此外，我们目前还缺乏的东西有：</p>\n<ol>\n<li><p>清晰的错误处理逻辑。我们使用 AJAX 的回调可能会检测到一个错误，然后使用 <code>it.throw()</code> 将错误传回给生成器，在生成器中则使用 <code>try..catch</code> 来捕获错误。<br> 一来我们需要猜测我们可能发生错误且手动添加对应的错误处理函数，二来我们的错误处理代码没法重复使用。</p>\n</li>\n<li><p>如果 <code>makeAjaxCall()</code> 函数不受我们控制，调用了多次回调的话，也会多次触发回调中的 <code>it.next()</code> ，生成器就会变得非常混乱。</p>\n<p> 处理和阻止这种问题需要大量的手动工作，也非常不方便。</p>\n</li>\n<li><p>有时候我们需要 『并行地』执行不只一个任务（比如同时触发两个 AJAX 请求）。而生成器中的 <code>yield</code> 并不支持两个或多个同时进行。</p>\n</li>\n</ol>\n<p>以上这些问题都可以用手动编写代码的方式来解决，但谁会想每次都重新编写类似的重复的代码呢？</p>\n<p>我们需要一个更好的可信任、可重复使用的方案来支持我们基于生成器编写异步的代码。</p>\n<p>怎么实现？使用 Promises ！</p>\n<p>我们将原来的代码加入 Promises 的特性：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span><span class=\"params\">(url)</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// 注意: 这里返回的是一个 promise</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Promise( <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(resolve,reject)</span></span>{</div><div class=\"line\">        makeAjaxCall( url, resolve );</div><div class=\"line\">    } );</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><code>request()</code> 函数中创建了一个 promise 实例，一旦 AJAX 请求完成，这个实例将会被 <code>resolved</code>。</p>\n<p>我们接着将这个实例返回，这样它就能够被 <code>yield</code> 了。</p>\n<p>接下来我们需要一个工具来控制我们生成器的迭代器，接收返回的 promise 实例，然后再通过 <code>next()</code> 来恢复生成器的中断：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 执行异步的生成器</span></div><div class=\"line\"><span class=\"comment\">// 注意: 这是简化的版本，没有处理错误</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runGenerator</span><span class=\"params\">(g)</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// 注意：我们使用 `g()` 自动初始化了迭代器</span></div><div class=\"line\">    <span class=\"keyword\">var</span> it = g(), ret;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 异步地迭代</span></div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterate</span><span class=\"params\">(val)</span></span>{</div><div class=\"line\">        ret = it.next( val );</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 迭代未完成</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ret.done) {</div><div class=\"line\">            <span class=\"comment\">// 判断是否为 promise 对象，如果没有 `then()` 方法则不是</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"then\"</span> <span class=\"keyword\">in</span> ret.value) {</div><div class=\"line\">                <span class=\"comment\">// 等待 promise 返回</span></div><div class=\"line\">                ret.value.then( iterate );</div><div class=\"line\">            }</div><div class=\"line\">            <span class=\"comment\">// 如果不是 promise 实例，则说明直接返回了一个值</span></div><div class=\"line\">            <span class=\"keyword\">else</span> {</div><div class=\"line\">                <span class=\"comment\">// 使用 `setTimeout` 模拟异步操作</span></div><div class=\"line\">                setTimeout( <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">                    iterate( ret.value );</div><div class=\"line\">                }, <span class=\"number\">0</span> );</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    })();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>注意：我们在 <code>runGenerator()</code> 中先生成了一个迭代器 <code>var it = g()</code>，然后我们会执行这个迭代器直到它完成(<code>done: true</code>)。</p>\n<p>接着我们就可以使用这个 <code>runGenerator()</code> 了：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">runGenerator( <span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">main</span><span class=\"params\">()</span></span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> result1 = <span class=\"keyword\">yield</span> request( <span class=\"string\">\"http://some.url.1\"</span> );</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse( result1 );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> result2 = <span class=\"keyword\">yield</span> request( <span class=\"string\">\"http://some.url.2?id=\"</span> + data.id );</div><div class=\"line\">    <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse( result2 );</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"你请求的数据是: \"</span> + resp.value );</div><div class=\"line\">} );</div></pre></td></tr></table></figure>\n\n<p>我们通过生成不同的 promise 实例，分别对这些实例进行 <code>yield</code>，不同的实例等待自己的 promise 被 <code>resolve</code> 后再执行对应的操作。</p>\n<p>这么一来，我们只需要同时生成不同的 promise 实例，就可以『并行地』执行不只一个任务（比如同时触发两个 AJAX 请求）了。</p>\n<p>既然我们使用了 promises 来管理生成器中处理异步的代码，我们就解决了只有在回调中才能实现的功能，这就避免了回调嵌套了。</p>\n<p>使用 Generotos + Promises 的优点是：</p>\n<ol>\n<li><p>我们可以使用内建的错误处理机制。虽然这没有在上面的代码片段中展示出来，但其实很简单：</p>\n<p> 监听 promise 中的错误，使用 <code>it.throw()</code> 把错误抛出，然后在生成器中使用 <code>try..catch</code> 进行捕获和处理即可。</p>\n</li>\n<li><p>我们可以使用到 Promises 提供的 <a href=\"http://blog.getify.com/promises-part-2/#uninversion\" target=\"_blank\" rel=\"external\">control/trustability</a> 特性。</p>\n</li>\n<li><p>Promises 提供了大量处理多并行且复杂的任务的特性。</p>\n<p> 举个栗子：<code>yield Promise.all([ .. ])</code> 方法接收一组 promise 组成的数组作为参数，然后 <code>yield</code> 一个 promise 提供给生成器处理，这个 promise 会等待数组里所有 promise 完成。当我们得到 <code>yield</code> 后的 promise 时，说明传进去的数组中的所有 promise 都已经完成，且是按照他们被传入的顺序完成的。</p>\n</li>\n</ol>\n<p>首先，我们体验一下错误处理：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 假设1: `makeAjaxCall(..)` 第一个参数判断是否有错误产生</span></div><div class=\"line\"><span class=\"comment\">// 假设2: `runGenerator(..)` 能捕获并处理错误</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span><span class=\"params\">(url)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Promise( <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(resolve,reject)</span></span>{</div><div class=\"line\">        makeAjaxCall( url, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err,text)</span></span>{</div><div class=\"line\">            <span class=\"comment\">// 如果出错，则 reject 这个 promise</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (err) reject( err );</div><div class=\"line\">            <span class=\"comment\">// 否则，resolve 这个 promise</span></div><div class=\"line\">            <span class=\"keyword\">else</span> resolve( text );</div><div class=\"line\">        } );</div><div class=\"line\">    } );</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">runGenerator( <span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">main</span><span class=\"params\">()</span></span>{</div><div class=\"line\">    <span class=\"comment\">// 捕获第一个请求的错误</span></div><div class=\"line\">    <span class=\"keyword\">try</span> {</div><div class=\"line\">        <span class=\"keyword\">var</span> result1 = <span class=\"keyword\">yield</span> request( <span class=\"string\">\"http://some.url.1\"</span> );</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">catch</span> (err) {</div><div class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">\"Error: \"</span> + err );</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse( result1 );</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 捕获第二个请求的错误</span></div><div class=\"line\">    <span class=\"keyword\">try</span> {</div><div class=\"line\">        <span class=\"keyword\">var</span> result2 = <span class=\"keyword\">yield</span> request( <span class=\"string\">\"http://some.url.2?id=\"</span> + data.id );</div><div class=\"line\">    } <span class=\"keyword\">catch</span> (err) {</div><div class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">\"Error: \"</span> + err );</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse( result2 );</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"你请求的数据是: \"</span> + resp.value );</div><div class=\"line\">} );</div></pre></td></tr></table></figure>\n\n<p>如果一个 promise 被 <code>reject</code> 或遇到其他错误的话，将使用 <code>it.throw()</code> (代码片段中没有展示出来)抛出一个生成器的错误，这个错误能被 <code>try..catch</code> 捕获。</p>\n<p>再举个使用 Promises 管理更复杂的异步操作的栗子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span><span class=\"params\">(url)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Promise( <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(resolve,reject)</span></span>{</div><div class=\"line\">        makeAjaxCall( url, resolve );</div><div class=\"line\">    } )</div><div class=\"line\">    <span class=\"comment\">// 对 promise 返回的字符串进行后处理操作</span></div><div class=\"line\">    .then( <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(text)</span></span>{</div><div class=\"line\">        <span class=\"comment\">// 是否为一个重定向链接</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"regexp\">/^https?:\\/\\/.+/</span>.test( text )) {</div><div class=\"line\">            <span class=\"comment\">// 是的话对向新链接发送请求</span></div><div class=\"line\">            <span class=\"keyword\">return</span> request( text );</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"comment\">// 否则，返回字符串</span></div><div class=\"line\">        <span class=\"keyword\">else</span> {</div><div class=\"line\">            <span class=\"keyword\">return</span> text;</div><div class=\"line\">        }</div><div class=\"line\">    } );</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">runGenerator( <span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">main</span><span class=\"params\">()</span></span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> search_terms = <span class=\"keyword\">yield</span> Promise.all( [</div><div class=\"line\">        request( <span class=\"string\">\"http://some.url.1\"</span> ),</div><div class=\"line\">        request( <span class=\"string\">\"http://some.url.2\"</span> ),</div><div class=\"line\">        request( <span class=\"string\">\"http://some.url.3\"</span> )</div><div class=\"line\">    ] );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> search_results = <span class=\"keyword\">yield</span> request(</div><div class=\"line\">        <span class=\"string\">\"http://some.url.4?search=\"</span> + search_terms.join( <span class=\"string\">\"+\"</span> )</div><div class=\"line\">    );</div><div class=\"line\">    <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse( search_results );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"Search results: \"</span> + resp.value );</div><div class=\"line\">} );</div></pre></td></tr></table></figure>\n\n<p><code>Promise.all([ .. ])</code> 构造了一个 promise ，等待数组中三个 promise 的完成，这个 promise 会被 <code>yield</code> 给 <code>runGenerator()</code> 生成器，然后这个生成器就可以恢复迭代。</p>\n<h1 id=\"使用其他的_Promise_类库\">使用其他的 Promise 类库</h1>\n<p>在上面的代码片段中，我们自己编写了 <code>runGenerator()</code> 函数来提供 Generators + Promises 的功能，其实我们也可以使用社区里优秀的类库，举几个栗子： <a href=\"https://github.com/kriskowal/q\" target=\"_blank\" rel=\"external\">Q</a> 、<a href=\"https://github.com/visionmedia/co\" target=\"_blank\" rel=\"external\">Co</a>、 <a href=\"https://github.com/getify/asynquence/tree/master/contrib#runner-plugin\" target=\"_blank\" rel=\"external\">asynquence</a> 等</p>\n<p>接下来我会简要地介绍下 <a href=\"http://github.com/getify/asynquence\" target=\"_blank\" rel=\"external\">asynquence</a> 中的 <a href=\"https://github.com/getify/asynquence/tree/master/contrib#runner-plugin\" target=\"_blank\" rel=\"external\">runner插件</a> 。如果你感兴趣的话，可以阅读我写的<a href=\"http://davidwalsh.name/asynquence-part-1/\" target=\"_blank\" rel=\"external\">两篇深入理解 asynquence 的博文</a>。</p>\n<p>首先，asynquence 提供了回调函数中错误为第一参数的编写风格(error-first style)，举个栗子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span><span class=\"params\">(url)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> ASQ( <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(done)</span></span>{</div><div class=\"line\">        <span class=\"comment\">// 传进一个以错误为第一参数的回调函数</span></div><div class=\"line\">        makeAjaxCall( url, done.errfcb );</div><div class=\"line\">    } );</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>接着，asynquence 的 runner 插件会接收一个生成器作为参数，这个生成器可以处理传入的数据处理后再传出来，而所有的的错误会自动地传递：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 我们使用 `getSomeValues()` 来产生一组 promise，并链式地进行异步操作</span></div><div class=\"line\">getSomeValues()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 现在使用一个生成器来处理接收到的数据</span></div><div class=\"line\">.runner( <span class=\"function\"><span class=\"keyword\">function</span>*<span class=\"params\">(token)</span></span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> value1 = token.messages[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">var</span> value2 = token.messages[<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"keyword\">var</span> value3 = token.messages[<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 并行地执行三个 AJAX 请求</span></div><div class=\"line\">    <span class=\"comment\">// 注意: `ASQ().all(..)` 就像之前提过的 `Promise.all(..)`</span></div><div class=\"line\">    <span class=\"keyword\">var</span> msgs = <span class=\"keyword\">yield</span> ASQ().all(</div><div class=\"line\">        request( <span class=\"string\">\"http://some.url.1?v=\"</span> + value1 ),</div><div class=\"line\">        request( <span class=\"string\">\"http://some.url.2?v=\"</span> + value2 ),</div><div class=\"line\">        request( <span class=\"string\">\"http://some.url.3?v=\"</span> + value3 )</div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 当三个请求都执行完毕后，进入下一步</span></div><div class=\"line\">    <span class=\"keyword\">yield</span> (msgs[<span class=\"number\">0</span>] + msgs[<span class=\"number\">1</span>] + msgs[<span class=\"number\">2</span>]);</div><div class=\"line\">} )</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 现在使用前面的生成器返回的值作为参数继续发送 AJAX 请求</span></div><div class=\"line\">.seq( <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(msg)</span></span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> request( <span class=\"string\">\"http://some.url.4?msg=\"</span> + msg );</div><div class=\"line\">} )</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 完成了一系列请求后，我们就获取到了想要的数据</span></div><div class=\"line\">.val( <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(result)</span></span>{</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( result ); <span class=\"comment\">// 获取数据成功!</span></div><div class=\"line\">} )</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果产生错误，则抛出</span></div><div class=\"line\">.or( <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err)</span> </span>{</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"Error: \"</span> + err );</div><div class=\"line\">} );</div></pre></td></tr></table></figure>\n\n<h1 id=\"ES7_async\">ES7 async</h1>\n<p>在 ES7 草案中有一个提议，建议采用另一种新的 <code>async</code> 函数类型。</p>\n<p>使用这种函数，我们可以向外部发出 promises，然后使用 <code>async</code> 函数自动地将这些 promises 连接起来，当 promises 完成的时候，就会恢复 <code>async</code> 函数自己的中断（不需要在繁杂的迭代器中手动恢复）。</p>\n<p>这个提议如果被采纳的话，可能会像这样：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">async <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> result1 = await request( <span class=\"string\">\"http://some.url.1\"</span> );</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse( result1 );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> result2 = await request( <span class=\"string\">\"http://some.url.2?id=\"</span> + data.id );</div><div class=\"line\">    <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse( result2 );</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"The value you asked for: \"</span> + resp.value );</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">main();</div></pre></td></tr></table></figure>\n\n<p>我们使用 <code>async</code> 声明了这种异步函数类型，然后使用 <code>main()</code> 直接调用这个函数，而不用像使用 <code>runGenerator()</code> 或 <code>ASQ().runner()</code> 一样进行包装。</p>\n<p>此外，我们没有使用 <code>yield</code> 关键字，而是使用了新的 <code>await</code> 关键字来声明等待 <code>await</code> 后面的 promise 的完成。</p>\n<h1 id=\"总结\">总结</h1>\n<p>一言以蔽之：Generators + Promises 的组合，强大且优雅地用同步编码风格实现了复杂的异步控制操作。</p>\n<p>使用一些简单的工具类库，比如上面提到的 <a href=\"https://github.com/kriskowal/q\" target=\"_blank\" rel=\"external\">Q</a> 、<a href=\"https://github.com/visionmedia/co\" target=\"_blank\" rel=\"external\">Co</a>、 <a href=\"https://github.com/getify/asynquence/tree/master/contrib#runner-plugin\" target=\"_blank\" rel=\"external\">asynquence</a> 等，我们可以更方便地实现这些操作。</p>\n<p>可以预见在不久的将来，当 ES7+ 发布的时候，我们使用 <code>async</code> 函数甚至可以无需使用一些类库支撑就可以实现原生的异步生成器了！</p>\n<p>(译注：本文是第三篇文章，其实还有最后一篇是讲述并发式生成器的实现思路，涉及到 CSP 的相关概念，原文中引用了比较多的东西，读起来比较晦涩难懂，怕翻译出来与原文作者想要表达的东西相差太远，就先放一边了，感兴趣的可以直接<a href=\"http://davidwalsh.name/concurrent-generators\" target=\"_blank\" rel=\"external\">查看原文</a>。<br>欢迎大牛接力)</p>\n","source":"_posts/【译】ES6 Generators（3）异步篇.md","raw":"title: 【译】ES6 Generators（3）异步篇\ncategories:\n  - Translate\ndate: 2014-09-29 18:45:45\ntags:\n  - ES6\n  - generators\n---\n\n> 译注1：此文带着自己的理解，不完全按原文翻译。[原文地址](http://davidwalsh.name/async-generators)\n\n> 译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。\n\n生成器提供了同步方式编写的代码风格，这就允许我们隐藏异步的实现细节。\n\n我们就可以用一种非常自然的方式来表达程序的执行流程，避免了同时处理异步代码的语法和陷阱。\n\n换句话说，我们利用生成器从内到外、从外到内双向传值的特点，将不同的值的处理交给了不同的生成器逻辑，只需要关心获取到特定的值进行某种操作，而无需关心特定的值如何产生（通过`netx()` 将值的产生逻辑委托出去）。\n\n这么一来，异步处理的优点以及易读的代码结合到一起，就加强了我们程序的可维护性。\n\n# 最简单的异步\n\n举个栗子，假定我们已经有了以下代码：\n\n```\nfunction makeAjaxCall(url,cb) {\n    // 执行一个 ajax 请求\n    // 请求完成后执行 `cb(result)` \n}\n\nmakeAjaxCall( \"http://some.url.1\", function(result1){\n    var data = JSON.parse( result1 );\n\n    makeAjaxCall( \"http://some.url.2/?id=\" + data.id, function(result2){\n        var resp = JSON.parse( result2 );\n        console.log( \"我们请求到的数据是: \" + resp.value );\n    });\n} );\n```\n\n使用简单的生成器来表达的话，就像这样：\n\n```\nfunction request(url) {\n   // 调用这个普通函数来隐藏异步处理的细节\n   // 使用 `it.next()` 来恢复调用这个普通函数的生成器函数的迭代器\n    makeAjaxCall( url, function(response){\n        // 异步获取到数据后，给生成器发送 `response` 信号\n        it.next( response );\n    } );\n    // 注意: 这里没有返回值\n}\n\nfunction *main() {\n    var result1 = yield request( \"http://some.url.1\" );\n    var data = JSON.parse( result1 );\n\n    var result2 = yield request( \"http://some.url.2?id=\" + data.id );\n    var resp = JSON.parse( result2 );\n    console.log( \"The value you asked for: \" + resp.value );\n}\n\nvar it = main();\nit.next(); // 开始迭代\n```\n\n`request()` 这个工具函数只是将我们的异步请求数据的代码进行了封装，需要注意的是在回调函数中调用了生成器的 `next()` 方法。\n\n当我们使用 `var it = main();` 创建了一个迭代器后，紧接着使用 `it.next();` 开始迭代，这时候遇到第一个 `yield` 中断了生成器，转而执行 `request( \"http://some.url.1\" )`\n\n当 `request( \"http://some.url.1\" )` 异步获取到数据后，在回调函数中调用 `it.next(response)` 将 `response` 传回给生成器刚刚中断的地方，生成器将继续迭代。\n\n这里的亮点就是，我们在生成器中无需关心异步请求的数据如何获取，我们只知道调用了  `request()` 后，当需要的数据获取到了，就会通知生成器继续迭代。\n\n这么一来在生成器中我们使用同步方式的编写风格，其实我们获取到了异步数据！\n\n同理，当我们继续调用 `it.next()` 时，会遇到第二个 `yield` 中断迭代，发出第二个请求 `yield request( \"http://some.url.2?id=\" + data.id )` 异步获取到数据后再恢复迭代，我们依旧不用关心异步获取数据的细节了，多爽！\n\n以上这段代码中，`request()` 请求的是异步 AJAX 请求，但如果我们后续改变程序给 AJAX 设置了缓存了，获取数据会先从缓存中获取，这时候没有执行真正的 AJAX 请求就不能在回调函数中调用 `it.next(response)` 来恢复生成器的中断了啊！\n\n没关系，我们可以使用一个小技巧来解决这个问题，举个栗子：\n\n```\n// 给 AJAX 设置缓存\nvar cache = {};\n\nfunction request(url) {\n    // 请求已被缓存\n    if (cache[url]) {\n        // 使用 setTimeout 来模拟异步操作\n        setTimeout( function(){\n            it.next( cache[url] );\n        }, 0 );\n    }\n    // 请求未被缓存，发出真正的请求\n    else {\n        makeAjaxCall( url, function(resp){\n            cache[url] = resp;\n            it.next( resp );\n        } );\n    }\n}\n```\n\n看，当我们给我们的程序添加了 AJAX 缓存机制甚至其他异步操作的优化时，我们只改变了  `request()` 这个工具函数的逻辑，而无需改动调用这个工具函数获取数据的生成器：\n```\nvar result1 = yield request( \"http://some.url.1\" );\nvar data = JSON.parse( result1 );\n..\n```\n在生成器中，我们还是像以前一样调用 `request()` 就能获取到需要的异步数据，无需关心获取数据的细节实现！\n\n这就是将异步操作当做一个细节实现抽象出来后展现出的魔力了！\n\n# 更好的异步\n\n上面介绍的异步方案对于简单的异步生成器来说工作良好，但用途有限，我们需要一个更强大的异步方案：使用 Promises.\n\n如果你对 ES6 Promises 有迷惑的话，我建议你先读 [我写的介绍 Promises 的文章](http://blog.getify.com/promises-part-1/)\n\n我们的代码目前有个严重的问题：回调多了会产生多重嵌套（即回调地狱）。\n\n此外，我们目前还缺乏的东西有：\n\n1. 清晰的错误处理逻辑。我们使用 AJAX 的回调可能会检测到一个错误，然后使用 `it.throw()` 将错误传回给生成器，在生成器中则使用 `try..catch` 来捕获错误。\n    一来我们需要猜测我们可能发生错误且手动添加对应的错误处理函数，二来我们的错误处理代码没法重复使用。\n\n2. 如果 `makeAjaxCall()` 函数不受我们控制，调用了多次回调的话，也会多次触发回调中的 `it.next()` ，生成器就会变得非常混乱。\n\n    处理和阻止这种问题需要大量的手动工作，也非常不方便。\n\n3. 有时候我们需要 『并行地』执行不只一个任务（比如同时触发两个 AJAX 请求）。而生成器中的 `yield` 并不支持两个或多个同时进行。\n    \n以上这些问题都可以用手动编写代码的方式来解决，但谁会想每次都重新编写类似的重复的代码呢？\n\n我们需要一个更好的可信任、可重复使用的方案来支持我们基于生成器编写异步的代码。\n\n怎么实现？使用 Promises ！\n\n我们将原来的代码加入 Promises 的特性：\n\n```\nfunction request(url) {\n    // 注意: 这里返回的是一个 promise\n    return new Promise( function(resolve,reject){\n        makeAjaxCall( url, resolve );\n    } );\n}\n```\n\n`request()` 函数中创建了一个 promise 实例，一旦 AJAX 请求完成，这个实例将会被 `resolved`。\n\n我们接着将这个实例返回，这样它就能够被 `yield` 了。\n\n接下来我们需要一个工具来控制我们生成器的迭代器，接收返回的 promise 实例，然后再通过 `next()` 来恢复生成器的中断：\n\n```\n// 执行异步的生成器\n// 注意: 这是简化的版本，没有处理错误\nfunction runGenerator(g) {\n    // 注意：我们使用 `g()` 自动初始化了迭代器\n    var it = g(), ret;\n\n    // 异步地迭代\n    (function iterate(val){\n        ret = it.next( val );\n\n        // 迭代未完成\n        if (!ret.done) {\n            // 判断是否为 promise 对象，如果没有 `then()` 方法则不是\n            if (\"then\" in ret.value) {\n                // 等待 promise 返回\n                ret.value.then( iterate );\n            }\n            // 如果不是 promise 实例，则说明直接返回了一个值\n            else {\n                // 使用 `setTimeout` 模拟异步操作\n                setTimeout( function(){\n                    iterate( ret.value );\n                }, 0 );\n            }\n        }\n    })();\n}\n```\n\n注意：我们在 `runGenerator()` 中先生成了一个迭代器 `var it = g()`，然后我们会执行这个迭代器直到它完成(`done: true`)。\n\n接着我们就可以使用这个 `runGenerator()` 了：\n\n```\nrunGenerator( function *main(){\n    var result1 = yield request( \"http://some.url.1\" );\n    var data = JSON.parse( result1 );\n\n    var result2 = yield request( \"http://some.url.2?id=\" + data.id );\n    var resp = JSON.parse( result2 );\n    console.log( \"你请求的数据是: \" + resp.value );\n} );\n```\n\n我们通过生成不同的 promise 实例，分别对这些实例进行 `yield`，不同的实例等待自己的 promise 被 `resolve` 后再执行对应的操作。\n\n这么一来，我们只需要同时生成不同的 promise 实例，就可以『并行地』执行不只一个任务（比如同时触发两个 AJAX 请求）了。\n\n既然我们使用了 promises 来管理生成器中处理异步的代码，我们就解决了只有在回调中才能实现的功能，这就避免了回调嵌套了。\n\n使用 Generotos + Promises 的优点是：\n\n1. 我们可以使用内建的错误处理机制。虽然这没有在上面的代码片段中展示出来，但其实很简单：\n\n    监听 promise 中的错误，使用 `it.throw()` 把错误抛出，然后在生成器中使用 `try..catch` 进行捕获和处理即可。\n\n2. 我们可以使用到 Promises 提供的 [control/trustability](http://blog.getify.com/promises-part-2/#uninversion) 特性。\n\n3. Promises 提供了大量处理多并行且复杂的任务的特性。\n    \n    举个栗子：`yield Promise.all([ .. ])` 方法接收一组 promise 组成的数组作为参数，然后 `yield` 一个 promise 提供给生成器处理，这个 promise 会等待数组里所有 promise 完成。当我们得到 `yield` 后的 promise 时，说明传进去的数组中的所有 promise 都已经完成，且是按照他们被传入的顺序完成的。\n\n首先，我们体验一下错误处理：\n\n```\n// 假设1: `makeAjaxCall(..)` 第一个参数判断是否有错误产生\n// 假设2: `runGenerator(..)` 能捕获并处理错误\n\nfunction request(url) {\n    return new Promise( function(resolve,reject){\n        makeAjaxCall( url, function(err,text){\n            // 如果出错，则 reject 这个 promise\n            if (err) reject( err );\n            // 否则，resolve 这个 promise\n            else resolve( text );\n        } );\n    } );\n}\n\nrunGenerator( function *main(){\n    // 捕获第一个请求的错误\n    try {\n        var result1 = yield request( \"http://some.url.1\" );\n    }\n    catch (err) {\n        console.log( \"Error: \" + err );\n        return;\n    }\n    var data = JSON.parse( result1 );\n    \n    // 捕获第二个请求的错误\n    try {\n        var result2 = yield request( \"http://some.url.2?id=\" + data.id );\n    } catch (err) {\n        console.log( \"Error: \" + err );\n        return;\n    }\n    var resp = JSON.parse( result2 );\n    console.log( \"你请求的数据是: \" + resp.value );\n} );\n```\n\n如果一个 promise 被 `reject` 或遇到其他错误的话，将使用 `it.throw()` (代码片段中没有展示出来)抛出一个生成器的错误，这个错误能被 `try..catch` 捕获。\n\n再举个使用 Promises 管理更复杂的异步操作的栗子：\n\n```\nfunction request(url) {\n    return new Promise( function(resolve,reject){\n        makeAjaxCall( url, resolve );\n    } )\n    // 对 promise 返回的字符串进行后处理操作\n    .then( function(text){\n        // 是否为一个重定向链接\n        if (/^https?:\\/\\/.+/.test( text )) {\n            // 是的话对向新链接发送请求\n            return request( text );\n        }\n        // 否则，返回字符串\n        else {\n            return text;\n        }\n    } );\n}\n\nrunGenerator( function *main(){\n    var search_terms = yield Promise.all( [\n        request( \"http://some.url.1\" ),\n        request( \"http://some.url.2\" ),\n        request( \"http://some.url.3\" )\n    ] );\n\n    var search_results = yield request(\n        \"http://some.url.4?search=\" + search_terms.join( \"+\" )\n    );\n    var resp = JSON.parse( search_results );\n\n    console.log( \"Search results: \" + resp.value );\n} );\n\n```\n\n`Promise.all([ .. ])` 构造了一个 promise ，等待数组中三个 promise 的完成，这个 promise 会被 `yield` 给 `runGenerator()` 生成器，然后这个生成器就可以恢复迭代。\n\n# 使用其他的 Promise 类库\n\n在上面的代码片段中，我们自己编写了 `runGenerator()` 函数来提供 Generators + Promises 的功能，其实我们也可以使用社区里优秀的类库，举几个栗子： [Q](https://github.com/kriskowal/q) 、[Co](https://github.com/visionmedia/co)、 [asynquence](https://github.com/getify/asynquence/tree/master/contrib#runner-plugin) 等\n\n接下来我会简要地介绍下 [asynquence](http://github.com/getify/asynquence) 中的 [runner插件](https://github.com/getify/asynquence/tree/master/contrib#runner-plugin) 。如果你感兴趣的话，可以阅读我写的[两篇深入理解 asynquence 的博文](http://davidwalsh.name/asynquence-part-1/)。\n\n首先，asynquence 提供了回调函数中错误为第一参数的编写风格(error-first style)，举个栗子：\n\n```\nfunction request(url) {\n    return ASQ( function(done){\n        // 传进一个以错误为第一参数的回调函数\n        makeAjaxCall( url, done.errfcb );\n    } );\n}\n```\n\n接着，asynquence 的 runner 插件会接收一个生成器作为参数，这个生成器可以处理传入的数据处理后再传出来，而所有的的错误会自动地传递：\n\n```\n// 我们使用 `getSomeValues()` 来产生一组 promise，并链式地进行异步操作\ngetSomeValues()\n\n// 现在使用一个生成器来处理接收到的数据\n.runner( function*(token){\n    var value1 = token.messages[0];\n    var value2 = token.messages[1];\n    var value3 = token.messages[2];\n\n    // 并行地执行三个 AJAX 请求\n    // 注意: `ASQ().all(..)` 就像之前提过的 `Promise.all(..)`\n    var msgs = yield ASQ().all(\n        request( \"http://some.url.1?v=\" + value1 ),\n        request( \"http://some.url.2?v=\" + value2 ),\n        request( \"http://some.url.3?v=\" + value3 )\n    );\n\n    // 当三个请求都执行完毕后，进入下一步\n    yield (msgs[0] + msgs[1] + msgs[2]);\n} )\n\n// 现在使用前面的生成器返回的值作为参数继续发送 AJAX 请求\n.seq( function(msg){\n    return request( \"http://some.url.4?msg=\" + msg );\n} )\n\n// 完成了一系列请求后，我们就获取到了想要的数据\n.val( function(result){\n    console.log( result ); // 获取数据成功!\n} )\n\n// 如果产生错误，则抛出\n.or( function(err) {\n    console.log( \"Error: \" + err );\n} );\n```\n\n# ES7 async\n\n在 ES7 草案中有一个提议，建议采用另一种新的 `async` 函数类型。\n\n使用这种函数，我们可以向外部发出 promises，然后使用 `async` 函数自动地将这些 promises 连接起来，当 promises 完成的时候，就会恢复 `async` 函数自己的中断（不需要在繁杂的迭代器中手动恢复）。\n\n这个提议如果被采纳的话，可能会像这样：\n\n```\nasync function main() {\n    var result1 = await request( \"http://some.url.1\" );\n    var data = JSON.parse( result1 );\n\n    var result2 = await request( \"http://some.url.2?id=\" + data.id );\n    var resp = JSON.parse( result2 );\n    console.log( \"The value you asked for: \" + resp.value );\n}\n\nmain();\n```\n\n我们使用 `async` 声明了这种异步函数类型，然后使用 `main()` 直接调用这个函数，而不用像使用 `runGenerator()` 或 `ASQ().runner()` 一样进行包装。\n\n此外，我们没有使用 `yield` 关键字，而是使用了新的 `await` 关键字来声明等待 `await` 后面的 promise 的完成。\n\n# 总结\n\n一言以蔽之：Generators + Promises 的组合，强大且优雅地用同步编码风格实现了复杂的异步控制操作。\n\n使用一些简单的工具类库，比如上面提到的 [Q](https://github.com/kriskowal/q) 、[Co](https://github.com/visionmedia/co)、 [asynquence](https://github.com/getify/asynquence/tree/master/contrib#runner-plugin) 等，我们可以更方便地实现这些操作。\n\n可以预见在不久的将来，当 ES7+ 发布的时候，我们使用 `async` 函数甚至可以无需使用一些类库支撑就可以实现原生的异步生成器了！\n\n\n(译注：本文是第三篇文章，其实还有最后一篇是讲述并发式生成器的实现思路，涉及到 CSP 的相关概念，原文中引用了比较多的东西，读起来比较晦涩难懂，怕翻译出来与原文作者想要表达的东西相差太远，就先放一边了，感兴趣的可以直接[查看原文](http://davidwalsh.name/concurrent-generators)。\n欢迎大牛接力)","slug":"【译】ES6 Generators（3）异步篇","updated":1418908898000,"excerpt":"","_id":"le0utyo4vy3m87dq","comments":true,"layout":"post","photos":[],"link":""},{"title":"【译】ES6 Generators（4）并发篇","categories":["5mkw9mventxlp5vo"],"date":1412073945000,"tags":["7sfn5fw7t2bpmxsr","0pxk3k3oh5k9vb6a"],"content":"<p>注意：这篇文章没翻译完，可以先看<a href=\"http://davidwalsh.name/async-generators\" target=\"_blank\" rel=\"external\">原文</a></p>\n<blockquote>\n<p>译注1：此文带着自己的理解，不完全按原文翻译。<a href=\"http://davidwalsh.name/concurrent-generators\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n<p>译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。</p>\n</blockquote>\n<p>我们最好的主题是探索前沿的东西，接下来的概念可能会听起来有点懵，但一想到在未来这些东西会大派用场，想想都有点小激动呢！</p>\n<p>这篇文章的主题受到 <a href=\"http://github.com/swannodette\" target=\"_blank\" rel=\"external\">David Nolen</a> <a href=\"http://twitter.com/swannodette\" target=\"_blank\" rel=\"external\">@swannodette</a> 的鼓舞，他写了介绍 CSP 的一些文章：</p>\n<ul>\n<li><a href=\"http://swannodette.github.io/2013/07/12/communicating-sequential-processes/\" target=\"_blank\" rel=\"external\">Communicating Sequential Processes</a></li>\n<li><a href=\"http://swannodette.github.io/2013/08/24/es6-generators-and-csp/\" target=\"_blank\" rel=\"external\">ES6 Generators Deliver Go Style Concurrency</a></li>\n<li><a href=\"http://swannodette.github.io/2013/07/31/extracting-processes/\" target=\"_blank\" rel=\"external\">Extracting Processes</a></li>\n</ul>\n<p>当然，你也可以继续阅读这篇文章，听我娓娓道来并发式生成器的介绍。</p>\n<p>我尝试了 Go 语言风格的 CSP API 的实现。当然比我更聪明的同行可能会看到我在这个探索中所遗漏的地方，我会持续不断地探索和尝试，并坚持和你们分享我所发现的东西。</p>\n<h1 id=\"了解_CSP_(Communicating_Sequential_Processes)\">了解 CSP (Communicating Sequential Processes)</h1>\n<p>CSP 这个概念来自 Tony Hoare的《<a href=\"http://www.usingcsp.com/\" target=\"_blank\" rel=\"external\">Communicating Sequential Processes</a>》一书。</p>\n<p>这是一个非常深的计算机理论，我并不打算以太多晦涩难懂的计算机专业术语，而是轻松地介绍它。</p>\n<h2 id=\"『sequential』_即顺序\">『sequential』 即顺序</h2>\n<p>这是描述 ES6 生成器中单线程行为和同步风格代码的另一种方式。</p>\n<p>还记得一个生成器的语法么？</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">main</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"keyword\">yield</span> x;</div><div class=\"line\">    <span class=\"keyword\">var</span> z = <span class=\"keyword\">yield</span> (y * <span class=\"number\">2</span>);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这里的每一个表达式是按序执行，<code>yield</code> 关键字虽然指明了生成器中断和恢复的地方，但并没有改变生成器函数中从上到下执行的顺序，对吧？</p>\n<h2 id=\"『Processes』_即进程\">『Processes』 即进程</h2>\n<p>每一个生成器表现得就像是一个虚拟的进程，它可以自己中断，向其他生成器(进程)传递信号，且能从其他生成器(进程)接收信号后，恢复自己的执行流程。</p>\n<p>如果生成器能够访问共享的内存空间的话（也就是能访问除自己内部的本地变量外的自由变量），它就不是那么独立了。</p>\n<p>假设我们有一个不访问外部变量的生成器函数，那么它在理论上就可以执行自己的进程。</p>\n<p>但我们通常同时有多个生成器(多进程)绑定在一起，需要彼此间协作以完成任务。</p>\n<p>那我们为什么要将生成器分离为多个，而不是合在一起呢？因为我们要做到 <em>功能与关注点的分离(separation of capabilities/concerns)</em> 。</p>\n<p>假定我们将 XYZ 任务分离为连续的子任务 X, Y, Z 分别实现，就增加了程序的维护性。举个栗子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 原来是这样</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">XYZ</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'x'</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'y'</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'z'</span>);</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">// 可以拆分为：</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">X</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'x'</span>);</div><div class=\"line\">    Y();</div><div class=\"line\">}</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Y</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'y'</span>);</div><div class=\"line\">    Z();</div><div class=\"line\">}</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Z</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'z'</span>);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>将功能进行模块化划分，增大了程序的可维护性。</p>\n<p>同理，对于多生成器(多进程)来说，我们也可以这么做。</p>\n<h2 id=\"『communicating』_即通信\">『communicating』 即通信</h2>\n<p>生成器(进程)之间互相协作，就需要一个通信频道(communication channel)来传递消息。</p>\n<p>实际上，我们并不一定需要在通信频道上传递消息来实现通信，我们可以通过移交控制权的方式来实现。</p>\n<p>为什么要通过移交控制权的方式呢？主要是因为 JS 是一个单线程的语言。</p>\n<p>单线程意味着同一时刻只能执行一个任务，其他任务排在队列里被挂起(或者说是中断)，等待队列前面的任务完成才能恢复自己的执行。</p>\n<p>多个独立的生成器(线程)能够协作和通信好像不是很现实，将多个生成器分离以实现松耦合的目标看似美好但好像不切实际。</p>\n<p>可能我是错的，但我并没有找到实现任意两个生成器绑定到一起实现 CSP 匹配的方法。要实现这种设计的话，两个生成器或许需要一个通信协议来支撑。</p>\n<h1 id=\"JS_中的_CSP\">JS 中的 CSP</h1>\n<p>这里有几个应用于 JS 的 CSP 理论探索。</p>\n<p>前面提到的 David Nolen 有几个有趣的项目，包括 <a href=\"https://github.com/swannodette/om\" target=\"_blank\" rel=\"external\">Om</a>、<a href=\"http://www.hakkalabs.co/articles/core-async-a -clojure-library/\" target=\"_blank\" rel=\"external\">core.async</a>。</p>\n<p><a href=\"http://koajs.com/\" target=\"_blank\" rel=\"external\">Koa</a> 也有一个有趣的实现，主要是通过它的 <code>use()</code> 方法。</p>\n<p>还有一个类似 core.async/Go CSP  API 实现的 <a href=\"https://github.com/ubolonton/js-csp\" target=\"_blank\" rel=\"external\">js-csp</a>。</p>\n<p>你可以去了解这几个项目用 JS 实现的不同的 CSP。</p>\n<h2 id=\"asynquence_中_CSP_的实现\">asynquence 中 CSP 的实现</h2>\n<p>我已经有 asynquence 的 runner() 插件来处理<a href=\"http://davidwalsh.name/async-generators/#rungenerator-library-utility\" target=\"_blank\" rel=\"external\">异步的生成器操作</a>，所以我在这里尝试实现了 CSP 功能。</p>\n<p>我需要解决的第一个问题是：我们怎么知道哪一个生成器即将接管控制权呢？</p>\n<p>我们可以让每一个生成器都有一些特定的属性如 ID 来告知其他生成器的话，这样做好像比较繁琐笨重。</p>\n<p>在经过各种实验后，我选择了一种循环调度的方法：如果我们要将 A, B, C 三个生成器连接起来，且 A 会得到控制权，接着 A 发出 <code>yield</code> 信号将控制权移交给 B, 再接着 B 发出 <code>yield</code> 信号将控制权移交给 C，最后 C 再把控制权移交给 A，形成一个循环。</p>\n<p>但我们怎么精确地实现控制呢？有明确的 API 么？同样，在经过很多实验后，我使用了一个巧妙的办法，与 <a href=\"http://koajs.com/#cascading\" target=\"_blank\" rel=\"external\">Koa 中实现的类似</a>：</p>\n<p>每一个生成器都有一个指向共享的令牌(token)，对这个令牌  <code>yield</code> 后就会发出一个移交控制的信号。</p>\n<p>未完待续。。。<a href=\"http://davidwalsh.name/concurrent-generators\" target=\"_blank\" rel=\"external\">http://davidwalsh.name/concurrent-generators</a></p>\n","source":"_posts/【译】ES6 Generators（4）并发篇.md","raw":"title: 【译】ES6 Generators（4）并发篇\ncategories:\n  - Translate\ndate: 2014-09-30 18:45:45\ntags:\n  - ES6\n  - generators\n---\n\n注意：这篇文章没翻译完，可以先看[原文](http://davidwalsh.name/async-generators)\n\n> 译注1：此文带着自己的理解，不完全按原文翻译。[原文地址](http://davidwalsh.name/concurrent-generators)\n\n> 译注2：原文晦涩难懂的地方，尽力做了注释或修饰，方便大家理解。错误之处欢迎各位校验指正。\n\n我们最好的主题是探索前沿的东西，接下来的概念可能会听起来有点懵，但一想到在未来这些东西会大派用场，想想都有点小激动呢！\n\n\n这篇文章的主题受到 [David Nolen](http://github.com/swannodette) [@swannodette](http://twitter.com/swannodette) 的鼓舞，他写了介绍 CSP 的一些文章：\n\n- [Communicating Sequential Processes](http://swannodette.github.io/2013/07/12/communicating-sequential-processes/)\n- [ES6 Generators Deliver Go Style Concurrency](http://swannodette.github.io/2013/08/24/es6-generators-and-csp/)\n- [Extracting Processes](http://swannodette.github.io/2013/07/31/extracting-processes/)\n\n当然，你也可以继续阅读这篇文章，听我娓娓道来并发式生成器的介绍。\n\n我尝试了 Go 语言风格的 CSP API 的实现。当然比我更聪明的同行可能会看到我在这个探索中所遗漏的地方，我会持续不断地探索和尝试，并坚持和你们分享我所发现的东西。\n\n# 了解 CSP (Communicating Sequential Processes)\n\nCSP 这个概念来自 Tony Hoare的《[Communicating Sequential Processes](http://www.usingcsp.com/)》一书。\n\n这是一个非常深的计算机理论，我并不打算以太多晦涩难懂的计算机专业术语，而是轻松地介绍它。\n\n## 『sequential』 即顺序\n\n这是描述 ES6 生成器中单线程行为和同步风格代码的另一种方式。\n\n还记得一个生成器的语法么？\n\n```\nfunction *main() {\n    var x = yield 1;\n    var y = yield x;\n    var z = yield (y * 2);\n}\n```\n\n这里的每一个表达式是按序执行，`yield` 关键字虽然指明了生成器中断和恢复的地方，但并没有改变生成器函数中从上到下执行的顺序，对吧？\n\n## 『Processes』 即进程\n\n每一个生成器表现得就像是一个虚拟的进程，它可以自己中断，向其他生成器(进程)传递信号，且能从其他生成器(进程)接收信号后，恢复自己的执行流程。\n\n如果生成器能够访问共享的内存空间的话（也就是能访问除自己内部的本地变量外的自由变量），它就不是那么独立了。\n\n假设我们有一个不访问外部变量的生成器函数，那么它在理论上就可以执行自己的进程。\n\n但我们通常同时有多个生成器(多进程)绑定在一起，需要彼此间协作以完成任务。\n\n那我们为什么要将生成器分离为多个，而不是合在一起呢？因为我们要做到 *功能与关注点的分离(separation of capabilities/concerns)* 。\n\n假定我们将 XYZ 任务分离为连续的子任务 X, Y, Z 分别实现，就增加了程序的维护性。举个栗子：\n\n```\n// 原来是这样\nfunction XYZ() {\n    console.log('x');\n    console.log('y');\n    console.log('z');\n}\n// 可以拆分为：\nfunction X() {\n    console.log('x');\n    Y();\n}\nfunction Y() {\n    console.log('y');\n    Z();\n}\nfunction Z() {\n    console.log('z');\n}\n```\n将功能进行模块化划分，增大了程序的可维护性。\n\n同理，对于多生成器(多进程)来说，我们也可以这么做。\n\n## 『communicating』 即通信\n\n生成器(进程)之间互相协作，就需要一个通信频道(communication channel)来传递消息。\n\n实际上，我们并不一定需要在通信频道上传递消息来实现通信，我们可以通过移交控制权的方式来实现。\n\n为什么要通过移交控制权的方式呢？主要是因为 JS 是一个单线程的语言。\n\n单线程意味着同一时刻只能执行一个任务，其他任务排在队列里被挂起(或者说是中断)，等待队列前面的任务完成才能恢复自己的执行。\n\n多个独立的生成器(线程)能够协作和通信好像不是很现实，将多个生成器分离以实现松耦合的目标看似美好但好像不切实际。\n\n可能我是错的，但我并没有找到实现任意两个生成器绑定到一起实现 CSP 匹配的方法。要实现这种设计的话，两个生成器或许需要一个通信协议来支撑。\n\n# JS 中的 CSP \n\n这里有几个应用于 JS 的 CSP 理论探索。\n\n前面提到的 David Nolen 有几个有趣的项目，包括 [Om](https://github.com/swannodette/om)、[core.async](http://www.hakkalabs.co/articles/core-async-a -clojure-library/)。\n\n[Koa](http://koajs.com/) 也有一个有趣的实现，主要是通过它的 `use()` 方法。\n\n还有一个类似 core.async/Go CSP  API 实现的 [js-csp](https://github.com/ubolonton/js-csp)。\n\n你可以去了解这几个项目用 JS 实现的不同的 CSP。\n\n## asynquence 中 CSP 的实现\n\n我已经有 asynquence 的 runner() 插件来处理[异步的生成器操作](http://davidwalsh.name/async-generators/#rungenerator-library-utility)，所以我在这里尝试实现了 CSP 功能。\n\n我需要解决的第一个问题是：我们怎么知道哪一个生成器即将接管控制权呢？\n\n我们可以让每一个生成器都有一些特定的属性如 ID 来告知其他生成器的话，这样做好像比较繁琐笨重。\n\n在经过各种实验后，我选择了一种循环调度的方法：如果我们要将 A, B, C 三个生成器连接起来，且 A 会得到控制权，接着 A 发出 `yield` 信号将控制权移交给 B, 再接着 B 发出 `yield` 信号将控制权移交给 C，最后 C 再把控制权移交给 A，形成一个循环。\n\n但我们怎么精确地实现控制呢？有明确的 API 么？同样，在经过很多实验后，我使用了一个巧妙的办法，与 [Koa 中实现的类似](http://koajs.com/#cascading)：\n\n每一个生成器都有一个指向共享的令牌(token)，对这个令牌  `yield` 后就会发出一个移交控制的信号。\n\n未完待续。。。http://davidwalsh.name/concurrent-generators\n\n\n\n\n\n","slug":"【译】ES6 Generators（4）并发篇","updated":1418908898000,"excerpt":"","_id":"5th0kei1kug0pll9","comments":true,"layout":"post","photos":[],"link":""},{"title":"【译】HTML5 prefetch","categories":["5mkw9mventxlp5vo"],"date":1407753945000,"tags":["6yokvvsaq2p5y620","6m2j6h1zzmuctz57"],"content":"<blockquote>\n<p>声明：此文带着自己的理解，不完全按原文翻译，<a href=\"https://medium.com/@luisvieira_gmr/html5-prefetch-1e54f6dda15d\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>\n<p>prefetch 即预加载，在用户需要前我们就将所需的资源加载完毕。</p>\n<h1 id=\"有了浏览器缓存，为何还需要预加载？\">有了浏览器缓存，为何还需要预加载？</h1>\n<ul>\n<li>用户可能是第一次访问网站，此时还无缓存</li>\n<li>用户可能清空了缓存</li>\n<li>缓存可能已经过期，资源将重新加载</li>\n<li>用户访问的缓存文件可能不是最新的，需要重新加载</li>\n</ul>\n<h1 id=\"Chrome_的预加载技术\">Chrome 的预加载技术</h1>\n<p>现在的 chrome 聪明到根据你的浏览记录，预测到你可能访问或搜索哪些网站，在你打开网站之前就加载好了一些资源了。<br>举个栗子，当你在搜索框输入 “amaz” 时，它猜测到你可能要访问 amazon.com，可能就帮你加载了这个网站的一些资源。<br>如果这个预测算法精准的话，就能大大地提高用户的浏览体验了。</p>\n<h1 id=\"DNS_prefetch\">DNS prefetch</h1>\n<p>我们知道，当我们访问一个网站如 www.amazon.com 时，需要将这个域名先转化为对应的 IP 地址，这是一个非常耗时的过程。</p>\n<p>DNS prefetch 分析这个页面需要的资源所在的域名，浏览器空闲时提前将这些域名转化为 IP 地址，真正请求资源时就避免了上述这个过程的时间。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">meta</span> <span class=\"attribute\">http-equiv</span>=<span class=\"value\">'x-dns-prefetch-control'</span> <span class=\"attribute\">content</span>=<span class=\"value\">'on'</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">'dns-prefetch'</span> <span class=\"attribute\">href</span>=<span class=\"value\">'http://g-ecx.images-amazon.com'</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">'dns-prefetch'</span> <span class=\"attribute\">href</span>=<span class=\"value\">'http://z-ecx.images-amazon.com'</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">'dns-prefetch'</span> <span class=\"attribute\">href</span>=<span class=\"value\">'http://ecx.images-amazon.com'</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">'dns-prefetch'</span> <span class=\"attribute\">href</span>=<span class=\"value\">'http://completion.amazon.com'</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">'dns-prefetch'</span> <span class=\"attribute\">href</span>=<span class=\"value\">'http://fls-na.amazon.com'</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>应用场景1：我们的资源存在在不同的 CDN 中，那提前声明好这些资源的域名，就可以节省请求发生时产生的域名解析的时间。<br>应用场景2：如果我们知道用户接下来的操作一定会发起一起资源的请求，那就可以将这个资源进行 DNS-Prefetch，加强用户体验。</p>\n<h1 id=\"Resource_prefetch\">Resource prefetch</h1>\n<p>在 Chrome 下，我们可以用 link标签声明特定文件的预加载：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">'subresource'</span> <span class=\"attribute\">href</span>=<span class=\"value\">'critical.js'</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">'subresource'</span> <span class=\"attribute\">href</span>=<span class=\"value\">'main.css'</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">'prefetch'</span> <span class=\"attribute\">href</span>=<span class=\"value\">'secondary.js'</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>在 Firefox 中或用 meta 标签声明：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta <span class=\"variable\">http-equiv=</span><span class=\"string\">\"Link\"</span> <span class=\"variable\">content=</span><span class=\"string\">\"&lt;critical.js&gt;; rel=prefetch\"</span>&gt;</div></pre></td></tr></table></figure>\n\n<p>rel=’subresource’ 表示当前页面必须加载的资源，应该放到页面最顶端先加载，有最高的优先级。</p>\n<p>rel=’prefetch’ 表示当 subresource 所有资源都加载完后，开始预加载这里指定的资源，有最低的优先级。</p>\n<p>注意：只有可缓存的资源才进行预加载，否则浪费资源！</p>\n<h1 id=\"Pre_render\">Pre render</h1>\n<p>前面说到的预解析DNS、预加载资源已经够强悍了有木有，可还有更厉害的预渲染（Pre-rendering）！</p>\n<p>预渲染意味着我们提前加载好用户即将访问的下一个页面，否则进行预渲染这个页面将浪费资源，慎用！</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel='prerender' href='http:<span class=\"comment\">//www.pagetoprerender.com'&gt;</span></div></pre></td></tr></table></figure>\n\n<p>rel=’prerender’ 表示浏览器会帮我们渲染但隐藏指定的页面，一旦我们访问这个页面，则秒开了！</p>\n<p>在 Firefox 中或用 rel=’next’ 来声明</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link <span class=\"variable\">rel=</span><span class=\"string\">\"next\"</span> <span class=\"variable\">href=</span><span class=\"string\">\"http://www.pagetoprerender.com\"</span>&gt;</div></pre></td></tr></table></figure>\n\n<h1 id=\"不是所有的资源都可以预加载\">不是所有的资源都可以预加载</h1>\n<p>当资源为以下列表中的资源时，将阻止预渲染操作：</p>\n<ul>\n<li>URL 中包含下载资源</li>\n<li>页面中包含音频、视频</li>\n<li>POST、PUT 和 DELETE 操作的 ajax 请求</li>\n<li>HTTP 认证(Authentication)</li>\n<li>HTTPS 页面</li>\n<li>含恶意软件的页面</li>\n<li>弹窗页面</li>\n<li>占用资源很多的页面</li>\n<li>打开了 chrome developer tools 开发工具</li>\n</ul>\n<h1 id=\"手动触发预渲染操作\">手动触发预渲染操作</h1>\n<p>在 head 中强势插入 link[rel=’prerender’] 即可：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var <span class=\"keyword\">hint</span> =document.createElement(<span class=\"string\">\"link\"</span>)</div><div class=\"line\"><span class=\"keyword\">hint</span>.setAttribute(“rel”,”prerender”)</div><div class=\"line\"><span class=\"keyword\">hint</span>.setAttribute(“href”,”next-page.html”)</div><div class=\"line\">document.getElementsByTagName(“head”)[<span class=\"number\">0</span>].appendChild(<span class=\"keyword\">hint</span>)</div></pre></td></tr></table></figure>\n\n<h1 id=\"兼容性\">兼容性</h1>\n<p>这么好用的特性，当然要考虑各浏览器的兼容程度了(哭：</p>\n<p>IE9 支持 DNS pre-fetching 但管它叫 prefetch。</p>\n<p>IE10+ 中 dns-prefetch 和 prefetch 是等价的。</p>\n<p>其他方面的测试，目前还没有很好的方案，暂且只能通过查看浏览器是否缓存来测试。 </p>\n<p>在 Chrome 中打开了 chrome developer tools 开发工具会阻止页面的预渲染，所以我们看不到这个过程，但可以在 chrome://cache/ 或 chrome://net-internals/#prerender 中查看。</p>\n<p>Firefox 可以在 about:cache 中查看。</p>\n<h1 id=\"警告\">警告</h1>\n<blockquote>\n<p>这些特定还是实验性质的，将来可能改变。</p>\n<p>权利越大，责任越大，不要滥用！</p>\n</blockquote>\n<h3 id=\"参考链接\">参考链接</h3>\n<ul>\n<li><p><a href=\"https://medium.com/@luisvieira_gmr/html5-prefetch-1e54f6dda15d\" target=\"_blank\" rel=\"external\">html5-prefetch</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Controlling_DNS_prefetching\" target=\"_blank\" rel=\"external\">MDN Controlling DNS prefetching</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ\" target=\"_blank\" rel=\"external\">MDN Link prefetching FAQ</a></p>\n</li>\n</ul>\n","source":"_posts/【译】HTML5-prefetch.md","raw":"title: 【译】HTML5 prefetch\ncategories:\n  - Translate\ndate: 2014-08-11 18:45:45\ntags:\n  - html5\n  - prefetch\n---\n\n> 声明：此文带着自己的理解，不完全按原文翻译，[原文地址](https://medium.com/@luisvieira_gmr/html5-prefetch-1e54f6dda15d)\n\nprefetch 即预加载，在用户需要前我们就将所需的资源加载完毕。\n\n# 有了浏览器缓存，为何还需要预加载？\n\n- 用户可能是第一次访问网站，此时还无缓存\n- 用户可能清空了缓存\n- 缓存可能已经过期，资源将重新加载\n- 用户访问的缓存文件可能不是最新的，需要重新加载\n\n# Chrome 的预加载技术\n\n现在的 chrome 聪明到根据你的浏览记录，预测到你可能访问或搜索哪些网站，在你打开网站之前就加载好了一些资源了。\n举个栗子，当你在搜索框输入 \"amaz\" 时，它猜测到你可能要访问 amazon.com，可能就帮你加载了这个网站的一些资源。\n如果这个预测算法精准的话，就能大大地提高用户的浏览体验了。\n\n# DNS prefetch\n\n我们知道，当我们访问一个网站如 www.amazon.com 时，需要将这个域名先转化为对应的 IP 地址，这是一个非常耗时的过程。\n\nDNS prefetch 分析这个页面需要的资源所在的域名，浏览器空闲时提前将这些域名转化为 IP 地址，真正请求资源时就避免了上述这个过程的时间。\n\n```\n<meta http-equiv='x-dns-prefetch-control' content='on'>\n<link rel='dns-prefetch' href='http://g-ecx.images-amazon.com'>\n<link rel='dns-prefetch' href='http://z-ecx.images-amazon.com'>\n<link rel='dns-prefetch' href='http://ecx.images-amazon.com'>\n<link rel='dns-prefetch' href='http://completion.amazon.com'>\n<link rel='dns-prefetch' href='http://fls-na.amazon.com'>\n```\n\n应用场景1：我们的资源存在在不同的 CDN 中，那提前声明好这些资源的域名，就可以节省请求发生时产生的域名解析的时间。\n应用场景2：如果我们知道用户接下来的操作一定会发起一起资源的请求，那就可以将这个资源进行 DNS-Prefetch，加强用户体验。\n\n# Resource prefetch\n\n在 Chrome 下，我们可以用 link标签声明特定文件的预加载：\n\n```\n<link rel='subresource' href='critical.js'>\n<link rel='subresource' href='main.css'>\n\n<link rel='prefetch' href='secondary.js'>\n```\n\n在 Firefox 中或用 meta 标签声明：\n\n```\n<meta http-equiv=\"Link\" content=\"<critical.js>; rel=prefetch\">\n```\n\nrel='subresource' 表示当前页面必须加载的资源，应该放到页面最顶端先加载，有最高的优先级。\n\nrel='prefetch' 表示当 subresource 所有资源都加载完后，开始预加载这里指定的资源，有最低的优先级。\n\n注意：只有可缓存的资源才进行预加载，否则浪费资源！\n\n# Pre render\n\n前面说到的预解析DNS、预加载资源已经够强悍了有木有，可还有更厉害的预渲染（Pre-rendering）！\n\n预渲染意味着我们提前加载好用户即将访问的下一个页面，否则进行预渲染这个页面将浪费资源，慎用！\n\n```\n<link rel='prerender' href='http://www.pagetoprerender.com'>\n```\n\nrel='prerender' 表示浏览器会帮我们渲染但隐藏指定的页面，一旦我们访问这个页面，则秒开了！\n\n在 Firefox 中或用 rel='next' 来声明\n\n```\n<link rel=\"next\" href=\"http://www.pagetoprerender.com\">\n```\n\n# 不是所有的资源都可以预加载\n\n当资源为以下列表中的资源时，将阻止预渲染操作：\n\n- URL 中包含下载资源\n- 页面中包含音频、视频\n- POST、PUT 和 DELETE 操作的 ajax 请求\n- HTTP 认证(Authentication)\n- HTTPS 页面\n- 含恶意软件的页面\n- 弹窗页面\n- 占用资源很多的页面\n- 打开了 chrome developer tools 开发工具\n\n# 手动触发预渲染操作\n\n在 head 中强势插入 link[rel='prerender'] 即可：\n\n```\nvar hint =document.createElement(\"link\")\nhint.setAttribute(“rel”,”prerender”)\nhint.setAttribute(“href”,”next-page.html”)\ndocument.getElementsByTagName(“head”)[0].appendChild(hint)\n```\n\n# 兼容性\n\n这么好用的特性，当然要考虑各浏览器的兼容程度了(哭：\n\nIE9 支持 DNS pre-fetching 但管它叫 prefetch。\n\nIE10+ 中 dns-prefetch 和 prefetch 是等价的。\n\n其他方面的测试，目前还没有很好的方案，暂且只能通过查看浏览器是否缓存来测试。 \n\n在 Chrome 中打开了 chrome developer tools 开发工具会阻止页面的预渲染，所以我们看不到这个过程，但可以在 chrome://cache/ 或 chrome://net-internals/#prerender 中查看。\n\nFirefox 可以在 about:cache 中查看。\n\n# 警告\n\n> 这些特定还是实验性质的，将来可能改变。\n> \n> 权利越大，责任越大，不要滥用！\n\n\n### 参考链接\n\n- [html5-prefetch](https://medium.com/@luisvieira_gmr/html5-prefetch-1e54f6dda15d)\n\n- [MDN Controlling DNS prefetching](https://developer.mozilla.org/en-US/docs/Web/HTTP/Controlling_DNS_prefetching)\n\n- [MDN Link prefetching FAQ](https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ)","slug":"【译】HTML5-prefetch","updated":1418908898000,"excerpt":"","_id":"k5rx1cc3w6vunyxv","comments":true,"layout":"post","photos":[],"link":""},{"title":"一通懒觉引发的心理革命","id":586,"categories":["9wpmord5537fjtil"],"date":1325007932000,"tags":[],"content":"<p>一通五点多睡到九点的懒觉，没有如往日一样的罪恶感。反反复复醒醒睡睡，也许，这么多天来的问题有了答案。写此日志，仅为日后提醒自己。</p>\n<p>&nbsp;</p>\n<p>★痴狂于“大学！” 迷茫以“大学？”</p>\n<p>高一的时候，“要是我能考上二本就好了。”</p>\n<p>高二的时候，“如果考上二本，同时又比二本的人多几十分不是很吃亏？”</p>\n<p>高三的时候，“明年六月，你会挽雕弓如满月！”</p>\n<p>一步步的追求，的确换来今日华园芬芳。</p>\n<p>可如今大一的时候，“读大学，究竟为了什么？”</p>\n<p>考后狂欢着，让一个单纯的自己憧憬精彩的大学，痴狂地以为能够指点江山。</p>\n<p>可，你错了！</p>\n<p>八月加入<span style=\"font-family: 'Times New Roman';\">CCPS</span> <span style=\"font-family: 宋体;\">的时候，一道问题是“你会因为自己是农村孩子而感到自卑或骄傲吗？”我重重地写下，“骄傲不可能，自卑不需要！”</span></p>\n<p>这实则是多么可笑？带着傲气野心，却又发现没有资本炫耀。这是自负，还是自卑？不，自负与自卑的共性在于，你没有对自己进行合理定位。</p>\n<p>你信誓旦旦地在日志里写下“从现在出发”后进军华园，却猛然发现你的雄心大志荡然无存。</p>\n<p>因为，人才济济，草根一个，你有何资本？</p>\n<p>因为，纷呈复杂，社会一个，你为何天真？</p>\n<p>★迷茫于“大学？” 尝试以“大学？！”</p>\n<p>☆关于坚持</p>\n<p>噢，你没有任何资本，如果你再不改变，你将被撕扯得面目全非。</p>\n<p>你有努力，尽管你知道，努力不一定会有成效。正如下午<span style=\"font-family: 'Times New Roman';\">C++</span> <span style=\"font-family: 宋体;\">突如其来的打击让你以为你根本就不是编程的料。</span></p>\n<p>可你还是安慰自己，不努力就一定没有成效。</p>\n<p>不可笑。</p>\n<p>☆关于幸福</p>\n<p>当你哭着没有新鞋子穿的时候，却发现其实别人没有脚。</p>\n<p>你承认你对大学的憧憬被击得支离破碎，你无法原谅自己，因而特立独行了一个学期，尽管你知道，这不是你一贯的风格。</p>\n<p>可静，却给了你另一个世界。</p>\n<p>你可以惬意地逛逛大学城，或骑车，或慢跑；</p>\n<p>你可以大声地叫师傅“打四两！”，然后又将慢慢把一份汤喝个精光；</p>\n<p>你可以舒坦地泡上一整天的图书馆，或抱着一本书，或打开了电脑；</p>\n<p>静谧、思索，紧密联系。</p>\n<p>有伴同行是幸福，因喧闹，欢笑；无伴独行是幸福，因安静，思考。</p>\n<p>渐渐发现，你既喜欢一群人的狂欢，狂欢里的歇斯底里，又喜欢一个人的孤单，孤单中的自我满足。</p>\n<p>渐渐发现，从小到大没看过任何小说的自己，爱上了宅在图书馆某个角落捧一缕《密色阳光》在《平凡的世界里》品读人生中的《傲慢与偏见》；</p>\n<p>渐渐发现，从未认真关注过这个社会的自己，会时常打开网页去窥探这个难以形容的世界，或感动于某个故事，或愤慨于某社会不公，更甚为<span style=\"font-family: 'Times New Roman';\">WK</span> <span style=\"font-family: 宋体;\">村民感到担忧；</span></p>\n<p>渐渐发现，你喜欢上了这个世界，出于内心的喜爱，于是你有了携单反出游的小梦想。</p>\n<p>☆关于理想</p>\n<p>理想很丰满，现实很骨感。</p>\n<p>雄心大志的荡然无存是历史必然，因为你意识到这是对自己的不合理安排。</p>\n<p>某师兄说：“大学，就是不断尝试，直到找到自己的生存方式。”尝试是美好的，因为你永远不知道下一颗巧克力是什么味道。可代价是惨痛的，你永远不知道尝试后你会失去什么。</p>\n<p>所以，当你尝试后，你坚定了自己的方向，然后告诉自己，你的道路可以被毁灭，但你的理想不会剥夺！</p>\n<p>你不想乖乖地读完大学，就业，结婚，生子，养老。你有一个脱离现实束缚的追求，尽管你知道可能性更大的残酷结果会让你一无所有。可理想，你甚至自己都无权利剥夺！</p>\n<p>于是，你安慰自己，只要在老年回首时，不会因碌碌无为而悔恨就可。（“为而无果亦是为”，不是么？”）</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>☆关于思考</p>\n<p>与其诅咒黑暗，不如点亮蜡烛。</p>\n<p>还记得你曾经肆无忌惮地谴责这浮躁的社会吗？</p>\n<p>噢，对，你发现浮躁的其实是自己。</p>\n<p>不是风动，不是幡动，而是心动了吧？</p>\n<p>你需要静静地思考。</p>\n<p>不，你不能用“思考”这神圣的词！</p>\n<p>因为，你口口声声地说“独立之思想，自由之精神。”“学习就是在别人思想的指导下建立起自己的思想”，可你却没有做到。</p>\n<p>你会“旁征博引”？你会“长篇大论”？</p>\n<p>其实，你这是在高谈阔论，你只会信口雌黄！</p>\n<p>所以，你修养还不厚，你还需阅读，思索，沉淀。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>★尝试于“大学？！” 坚定以信念</p>\n<p>伴随着这两天“该死”的期末考试，一个学期就将结束。你基本荒废了你这学期的学业，可你又获得了进步。（提出此矛盾命题，因人是矛盾体，对否？）</p>\n<p>你到现在还不会编程，你一直拥有挂科的风险；</p>\n<p>你一直用定式思维去学习，无法变通，所以你始终没有获得学习进步；</p>\n<p>你没有积极主动地融入你的班级，没有促进班集体建设；</p>\n<p>可，你就学会了用心去体验生活，关注社会。你可以以此来搪塞、安慰自己。</p>\n<p>&nbsp;</p>\n<p>☆提点坚持</p>\n<p>坚持你喜欢的，你认为对的。读大学，就不该为了学分绩点而读千篇一律的课程，<span style=\"font-family: 'Times New Roman';\">C++</span> <span style=\"font-family: 宋体;\">和工图挂就挂嘛！</span></p>\n<p>坚持你阅读的，兴趣使然的。过日子，就该随性而为不是嘛！</p>\n<p>坚持攒钱，买个单反。高三你不是攒钱买上手机了嘛！现在还行！</p>\n<p>坚持运动，额，两天没跑内环愧疚下先。这体质，一耽搁可就一生不变了。</p>\n<p>一言以蔽之，“取舍得当，坚持该坚持的”。</p>\n<p><div></div><br>后记—</p>\n<p>谢谢华园静谧的图书馆给我提供了场所可以天天舒适地懒睡。此文有意写之，原无意公布，可又有点分享的私心。不为展示，只为日后回览提醒愚昧的自己。</p>\n","source":"_posts/一通懒觉引发的心理革命.md","raw":"title: 一通懒觉引发的心理革命\nid: 586\ncategories:\n  - 来思碑记\ndate: 2011-12-28 01:45:32\ntags:\n---\n\n一通五点多睡到九点的懒觉，没有如往日一样的罪恶感。反反复复醒醒睡睡，也许，这么多天来的问题有了答案。写此日志，仅为日后提醒自己。\n\n&nbsp;\n\n★痴狂于“大学！” 迷茫以“大学？”\n\n高一的时候，“要是我能考上二本就好了。”\n\n高二的时候，“如果考上二本，同时又比二本的人多几十分不是很吃亏？”\n\n高三的时候，“明年六月，你会挽雕弓如满月！”\n\n一步步的追求，的确换来今日华园芬芳。\n\n可如今大一的时候，“读大学，究竟为了什么？”\n\n考后狂欢着，让一个单纯的自己憧憬精彩的大学，痴狂地以为能够指点江山。\n\n可，你错了！\n\n八月加入<span style=\"font-family: 'Times New Roman';\">CCPS</span> <span style=\"font-family: 宋体;\">的时候，一道问题是“你会因为自己是农村孩子而感到自卑或骄傲吗？”我重重地写下，“骄傲不可能，自卑不需要！”</span>\n\n这实则是多么可笑？带着傲气野心，却又发现没有资本炫耀。这是自负，还是自卑？不，自负与自卑的共性在于，你没有对自己进行合理定位。\n\n你信誓旦旦地在日志里写下“从现在出发”后进军华园，却猛然发现你的雄心大志荡然无存。\n\n因为，人才济济，草根一个，你有何资本？\n\n因为，纷呈复杂，社会一个，你为何天真？\n\n★迷茫于“大学？” 尝试以“大学？！”\n\n☆关于坚持\n\n噢，你没有任何资本，如果你再不改变，你将被撕扯得面目全非。\n\n你有努力，尽管你知道，努力不一定会有成效。正如下午<span style=\"font-family: 'Times New Roman';\">C++</span> <span style=\"font-family: 宋体;\">突如其来的打击让你以为你根本就不是编程的料。</span>\n\n可你还是安慰自己，不努力就一定没有成效。\n\n不可笑。\n\n☆关于幸福\n\n当你哭着没有新鞋子穿的时候，却发现其实别人没有脚。\n\n你承认你对大学的憧憬被击得支离破碎，你无法原谅自己，因而特立独行了一个学期，尽管你知道，这不是你一贯的风格。\n\n可静，却给了你另一个世界。\n\n你可以惬意地逛逛大学城，或骑车，或慢跑；\n\n你可以大声地叫师傅“打四两！”，然后又将慢慢把一份汤喝个精光；\n\n你可以舒坦地泡上一整天的图书馆，或抱着一本书，或打开了电脑；\n\n静谧、思索，紧密联系。\n\n有伴同行是幸福，因喧闹，欢笑；无伴独行是幸福，因安静，思考。\n\n渐渐发现，你既喜欢一群人的狂欢，狂欢里的歇斯底里，又喜欢一个人的孤单，孤单中的自我满足。\n\n渐渐发现，从小到大没看过任何小说的自己，爱上了宅在图书馆某个角落捧一缕《密色阳光》在《平凡的世界里》品读人生中的《傲慢与偏见》；\n\n渐渐发现，从未认真关注过这个社会的自己，会时常打开网页去窥探这个难以形容的世界，或感动于某个故事，或愤慨于某社会不公，更甚为<span style=\"font-family: 'Times New Roman';\">WK</span> <span style=\"font-family: 宋体;\">村民感到担忧；</span>\n\n渐渐发现，你喜欢上了这个世界，出于内心的喜爱，于是你有了携单反出游的小梦想。\n\n☆关于理想\n\n理想很丰满，现实很骨感。\n\n雄心大志的荡然无存是历史必然，因为你意识到这是对自己的不合理安排。\n\n某师兄说：“大学，就是不断尝试，直到找到自己的生存方式。”尝试是美好的，因为你永远不知道下一颗巧克力是什么味道。可代价是惨痛的，你永远不知道尝试后你会失去什么。\n\n所以，当你尝试后，你坚定了自己的方向，然后告诉自己，你的道路可以被毁灭，但你的理想不会剥夺！\n\n你不想乖乖地读完大学，就业，结婚，生子，养老。你有一个脱离现实束缚的追求，尽管你知道可能性更大的残酷结果会让你一无所有。可理想，你甚至自己都无权利剥夺！\n\n于是，你安慰自己，只要在老年回首时，不会因碌碌无为而悔恨就可。（“为而无果亦是为”，不是么？”）\n\n&nbsp;\n\n&nbsp;\n\n☆关于思考\n\n与其诅咒黑暗，不如点亮蜡烛。\n\n还记得你曾经肆无忌惮地谴责这浮躁的社会吗？\n\n噢，对，你发现浮躁的其实是自己。\n\n不是风动，不是幡动，而是心动了吧？\n\n你需要静静地思考。\n\n不，你不能用“思考”这神圣的词！\n\n因为，你口口声声地说“独立之思想，自由之精神。”“学习就是在别人思想的指导下建立起自己的思想”，可你却没有做到。\n\n你会“旁征博引”？你会“长篇大论”？\n\n其实，你这是在高谈阔论，你只会信口雌黄！\n\n所以，你修养还不厚，你还需阅读，思索，沉淀。\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n★尝试于“大学？！” 坚定以信念\n\n伴随着这两天“该死”的期末考试，一个学期就将结束。你基本荒废了你这学期的学业，可你又获得了进步。（提出此矛盾命题，因人是矛盾体，对否？）\n\n你到现在还不会编程，你一直拥有挂科的风险；\n\n你一直用定式思维去学习，无法变通，所以你始终没有获得学习进步；\n\n你没有积极主动地融入你的班级，没有促进班集体建设；\n\n可，你就学会了用心去体验生活，关注社会。你可以以此来搪塞、安慰自己。\n\n&nbsp;\n\n☆提点坚持\n\n坚持你喜欢的，你认为对的。读大学，就不该为了学分绩点而读千篇一律的课程，<span style=\"font-family: 'Times New Roman';\">C++</span> <span style=\"font-family: 宋体;\">和工图挂就挂嘛！</span>\n\n坚持你阅读的，兴趣使然的。过日子，就该随性而为不是嘛！\n\n坚持攒钱，买个单反。高三你不是攒钱买上手机了嘛！现在还行！\n\n坚持运动，额，两天没跑内环愧疚下先。这体质，一耽搁可就一生不变了。\n\n一言以蔽之，“取舍得当，坚持该坚持的”。\n<div></div>\n后记--\n\n谢谢华园静谧的图书馆给我提供了场所可以天天舒适地懒睡。此文有意写之，原无意公布，可又有点分享的私心。不为展示，只为日后回览提醒愚昧的自己。","slug":"一通懒觉引发的心理革命","updated":1418908898000,"excerpt":"","_id":"9nymc97zho7q1ghj","comments":true,"layout":"post","photos":[],"link":""},{"title":"人在囧途","id":258,"categories":["9wpmord5537fjtil"],"date":1356191612000,"tags":[],"content":"<p>笑了一场荒诞，荒诞地笑。</p>\n<p>看完《<a href=\"http://movie.douban.com/subject/10574622/\" target=\"_blank\" rel=\"external\">人在囧途</a>2》，忽的想起三年前看的《<a href=\"http://movie.douban.com/subject/4237879/\" target=\"_blank\" rel=\"external\">人在囧途</a>1》。</p>\n<p>&nbsp;</p>\n<p>三年前-那时我未满十八岁，我笑了一场荒诞。捧腹于李成功（徐铮饰演）与牛耿（王宝强饰演）一路回家的囧，我想这只不过是一出喜庆片罢了，不可能在生活上演。耿直憨厚的牛耿一只乌鸦嘴，伴随被情人逼迫回家与老婆摊牌的李成功，在回家路上上演了一场荒诞的戏。</p>\n<p>对，2010的我认为这是荒诞的，不可能在现实上演。殊不知，我只是离现实太远。</p>\n<p>&nbsp;</p>\n<p>三年后-此刻我弱冠之年，我荒诞地笑了。依旧捧腹于徐朗（徐峥饰演）与王宝（王宝强饰演）寻扎 Mr周 的泰囧之路，故事依旧荒诞离奇，我开始想，这不会仅仅是一出贺岁片了，很可能就在生活重演。一路曲折之后，徐朗回到原点。</p>\n<p>对，2012的我认为这并不离奇，甚至在生活重现。</p>\n<p>&nbsp;</p>\n<p>三年的囧途，我似乎回到了原点。</p>\n<p>要是我能跟王宝一样有多好：去泰国看人妖，却不知道人妖原来是男的；去泰国看泰姬陵，却不知道泰姬陵在印度。可他知道，谁也不可以伤害他的家人，要给家人种上一棵健康树。</p>\n<p>只有他，真正懂得生活，因为他不曾想太多，只是那么活。</p>\n<p>简单地活。</p>\n<p>不，这只是一出戏。</p>\n<p>不，这不是一出戏。</p>\n<p>&nbsp;</p>\n","source":"_posts/人在囧途.md","raw":"title: 人在囧途\nid: 258\ncategories:\n  - 来思碑记\ndate: 2012-12-22 23:53:32\ntags:\n---\n\n笑了一场荒诞，荒诞地笑。\n\n看完《[人在囧途](http://movie.douban.com/subject/10574622/)2》，忽的想起三年前看的《[人在囧途](http://movie.douban.com/subject/4237879/)1》。\n\n&nbsp;\n\n三年前-那时我未满十八岁，我笑了一场荒诞。捧腹于李成功（徐铮饰演）与牛耿（王宝强饰演）一路回家的囧，我想这只不过是一出喜庆片罢了，不可能在生活上演。耿直憨厚的牛耿一只乌鸦嘴，伴随被情人逼迫回家与老婆摊牌的李成功，在回家路上上演了一场荒诞的戏。\n\n对，2010的我认为这是荒诞的，不可能在现实上演。殊不知，我只是离现实太远。\n\n&nbsp;\n\n三年后-此刻我弱冠之年，我荒诞地笑了。依旧捧腹于徐朗（徐峥饰演）与王宝（王宝强饰演）寻扎 Mr周 的泰囧之路，故事依旧荒诞离奇，我开始想，这不会仅仅是一出贺岁片了，很可能就在生活重演。一路曲折之后，徐朗回到原点。\n\n对，2012的我认为这并不离奇，甚至在生活重现。\n\n&nbsp;\n\n三年的囧途，我似乎回到了原点。\n\n要是我能跟王宝一样有多好：去泰国看人妖，却不知道人妖原来是男的；去泰国看泰姬陵，却不知道泰姬陵在印度。可他知道，谁也不可以伤害他的家人，要给家人种上一棵健康树。\n\n只有他，真正懂得生活，因为他不曾想太多，只是那么活。\n\n简单地活。\n\n不，这只是一出戏。\n\n不，这不是一出戏。\n\n&nbsp;","slug":"人在囧途","updated":1418908898000,"excerpt":"","_id":"i9lddeeysor8sg8s","comments":true,"layout":"post","photos":[],"link":""},{"title":"使用 workspace 和 source map 功能在 chrome 中修改并保存文件","categories":["s1fvmf8yl7edxxwd"],"date":1409556812000,"tags":["3gdfok9h1ey5soks","dh78xkz3qs1h2evl"],"content":"<ol>\n<li><p>创建测试文件</p>\n<p>创建 test/test.html，引入 test/test.css </p>\n</li>\n<li><p>打开本地服务器</p>\n<p> 这时候审查 test.html 的页面元素修改其 css 属性并不会生效。</p>\n</li>\n<li><p>建立本地和服务器的文件映射</p>\n<ol>\n<li>打开 chrome dev tools</li>\n<li>设置 Workspace，添加文件夹 test/</li>\n<li><p>双击这个新增的文件夹，增加映射</p>\n<p> URL prefix 填写浏览器地址栏对应的服务器根目录</p>\n<p> Folder path 填写本地文件夹的路径</p>\n</li>\n</ol>\n</li>\n<li><p>审查元素，修改 test.html 中的元素的 css 属性</p>\n<p> 用编辑器打开 test.css 就会发现修改保存到了文件中了。</p>\n</li>\n</ol>\n<ol>\n<li><p>使用 Sass 更进一步</p>\n<p> 上述方法能直接将我们在浏览器中对 css 的修改保存到本地文件中，</p>\n<p> 但我们可能不是直接编写 css 文件，而是使用了 Sass/Less 等预编译工具，这时候 source map 功能就派上用场了。</p>\n</li>\n<li><p>配置 source map 让 chrome 支持 Sass </p>\n<p> 小赖使用的是 Webstorm 的 Sass 插件，其能监听 scss 文件的改变，自动生成新的 css 文件。</p>\n<p> 但默认一个 scss 文件只会生成对应的 css 文件，我们按以上的方法在浏览器中只能修改 css 文件，而不能修改源 scss 文件。</p>\n<p> 解决方法是：</p>\n<pre><code> 1. 修改 webstorm 的 sass 插件配置\n\n         -<span class=\"ruby\">-no-cache --update <span class=\"variable\">$FileName</span><span class=\"variable\">$:</span><span class=\"variable\">$FileNameWithoutExtension</span><span class=\"variable\">$.</span>css\n</span>\n     修改为：\n\n         -<span class=\"ruby\">-sourcemap --no-cache --update <span class=\"variable\">$FileName</span><span class=\"variable\">$:</span><span class=\"variable\">$FileNameWithoutExtension</span><span class=\"variable\">$.</span>css\n</span>\n     这时候 test.scss 在自动编译时不仅会生成 test.css 文件，还会生成 test.css.map 文件\n\n 2. 开启 chrome 的 source map 功能\n\n         打开 dev tools 后，勾选 General-&gt;Enable CSS source maps \n</code></pre><p> 这时候，我们审查 test.html 中的元素，则会看到对应的 test.scss 文件</p>\n<p> 但在浏览器中修改 css 属性时，实际上修改的是 test.scss 编译生成的 test.css 文件。</p>\n<p> 我们希望直接修改的是 test.scss 文件，这时候点击 dev tools 中的 Source，找到对应的 test.scss 文件修改后 cmd + s 保存即可。</p>\n</li>\n<li><p>第6点其实有点鸡肋</p>\n<p> 目前 source map 能让我们在浏览器中修改 css 属性后保存到对应的 css 文件中。</p>\n<p> 而要修改 Sass 文件只能借 Workspace 功能在 Source 面板中修改后保存，但这时候修改的 Sass 文件并不会自动编译为对应的 css 文件。</p>\n<p> 在浏览器中修改 Sass 文件保存到本地后，浏览器中的 css 并没有即时改变。</p>\n</li>\n</ol>\n","source":"_posts/使用-workspace-和-source-map-功能在-chrome-中修改并保存文件.md","raw":"title: 使用 workspace 和 source map 功能在 chrome 中修改并保存文件\ncategories:\n  - Tools\ndate: 2014-09-01 15:33:32\ntags:\n  - workplace\n  - sourcemap\n \n---\n\n1. 创建测试文件\n\n   创建 test/test.html，引入 test/test.css \n\n2. 打开本地服务器\n    \n    这时候审查 test.html 的页面元素修改其 css 属性并不会生效。\n\n3. 建立本地和服务器的文件映射\n\n    1. 打开 chrome dev tools\n    2. 设置 Workspace，添加文件夹 test/\n    3. 双击这个新增的文件夹，增加映射\n        \n        URL prefix 填写浏览器地址栏对应的服务器根目录\n\n        Folder path 填写本地文件夹的路径\n\n4. 审查元素，修改 test.html 中的元素的 css 属性\n\n    用编辑器打开 test.css 就会发现修改保存到了文件中了。\n\n\n5. 使用 Sass 更进一步\n    \n    上述方法能直接将我们在浏览器中对 css 的修改保存到本地文件中，\n\n    但我们可能不是直接编写 css 文件，而是使用了 Sass/Less 等预编译工具，这时候 source map 功能就派上用场了。\n\n6. 配置 source map 让 chrome 支持 Sass \n\n    小赖使用的是 Webstorm 的 Sass 插件，其能监听 scss 文件的改变，自动生成新的 css 文件。\n\n    但默认一个 scss 文件只会生成对应的 css 文件，我们按以上的方法在浏览器中只能修改 css 文件，而不能修改源 scss 文件。\n\n    解决方法是：\n\n        1. 修改 webstorm 的 sass 插件配置\n            \n                --no-cache --update $FileName$:$FileNameWithoutExtension$.css\n            \n            修改为：\n\n                --sourcemap --no-cache --update $FileName$:$FileNameWithoutExtension$.css\n            \n            这时候 test.scss 在自动编译时不仅会生成 test.css 文件，还会生成 test.css.map 文件\n\n        2. 开启 chrome 的 source map 功能\n\n                打开 dev tools 后，勾选 General->Enable CSS source maps \n\n    这时候，我们审查 test.html 中的元素，则会看到对应的 test.scss 文件\n    \n    但在浏览器中修改 css 属性时，实际上修改的是 test.scss 编译生成的 test.css 文件。\n\n    我们希望直接修改的是 test.scss 文件，这时候点击 dev tools 中的 Source，找到对应的 test.scss 文件修改后 cmd + s 保存即可。\n\n7. 第6点其实有点鸡肋\n\n    目前 source map 能让我们在浏览器中修改 css 属性后保存到对应的 css 文件中。\n\n    而要修改 Sass 文件只能借 Workspace 功能在 Source 面板中修改后保存，但这时候修改的 Sass 文件并不会自动编译为对应的 css 文件。\n\n    在浏览器中修改 Sass 文件保存到本地后，浏览器中的 css 并没有即时改变。\n\n\n\n\n\n\n    \n","slug":"使用-workspace-和-source-map-功能在-chrome-中修改并保存文件","updated":1418908898000,"excerpt":"","_id":"pd18ykc82c0445au","comments":true,"layout":"post","photos":[],"link":""},{"title":"使用 CSS3 实现模糊效果","categories":["tavxphreei8q4tj6"],"date":1406286379000,"tags":["6jngiezovkx8oyi2","b5luls91j9prayi1"],"content":"<p>使用一个filter属性就可以实现很赞的模糊效果。</p>\n<pre><code><span class=\"attribute\">filter</span><span class=\"value\">: <span class=\"function\">blur</span>(<span class=\"number\">3px</span>);</span>\n</code></pre><p>这在制作一些弹出框的背景效果时非常有用，加以动画效果则更佳：）</p>\n<a id=\"more\"></a>\n\n<iframe width=\"100%\" height=\"600\" src=\"http://jsfiddle.net/laiqs2011/BKdzX/2/embedded/result,html,css,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>","source":"_posts/使用CSS3的filter属性实现模糊效果.md","raw":"title: 使用 CSS3 实现模糊效果\ncategories:\n  - CSS\ndate: 2014-07-25 19:06:19\ntags:\n  - filter\n  - blur\n \n---\n\n使用一个filter属性就可以实现很赞的模糊效果。\n\t\n\tfilter: blur(3px);\n\n这在制作一些弹出框的背景效果时非常有用，加以动画效果则更佳：）\n\n<!-- more -->\n\n<iframe width=\"100%\" height=\"600\" src=\"http://jsfiddle.net/laiqs2011/BKdzX/2/embedded/result,html,css,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>","slug":"使用CSS3的filter属性实现模糊效果","updated":1418908898000,"excerpt":"<p>使用一个filter属性就可以实现很赞的模糊效果。</p>\n<pre><code><span class=\"attribute\">filter</span><span class=\"value\">: <span class=\"function\">blur</span>(<span class=\"number\">3px</span>);</span>\n</code></pre><p>这在制作一些弹出框的背景效果时非常有用，加以动画效果则更佳：）</p>\n","_id":"38mznzbw3ejfso7n","comments":true,"layout":"post","photos":[],"link":""},{"title":"使用 FormData 模拟表单控件","date":1399641582000,"categories":["bzketmbod14nx67f"],"tags":["pehrqf4p66bfyhyp"],"content":"<ul>\n<li><p>创建一个新的 FormData 对象，然后使用 append() 添加字段：</p>\n<pre><code>  <span class=\"keyword\">var</span> form = <span class=\"built_in\">new</span> FormData();\n  form.<span class=\"built_in\">append</span>(<span class=\"string\">'name'</span>, <span class=\"string\">'xiaolai'</span>);\n  form.<span class=\"built_in\">append</span>(<span class=\"string\">'age'</span>,<span class=\"number\"> 18</span>);\n  <span class=\"comment\">// 使用 ajax 发送</span>\n  <span class=\"keyword\">var</span> req = <span class=\"built_in\">new</span> XMLHttpRequest();\n  req.open(<span class=\"string\">'POST'</span>, <span class=\"string\">'http://laispace.com/test'</span>);\n  req.send(form);\n</code></pre><p>  FormData.append(key, value)中 value 可以是string/Blob对象/File对象</p>\n</li>\n<li><p>利用已有的 form 创建 FormData 对象进行格式化</p>\n<pre><code>  <span class=\"keyword\">var</span> myForm = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myForm'</span>);\n  <span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> FormData(myForm);\n</code></pre><p>  继续使用 FormData.append() 添加字段，或使用 ajax 发送表单</p>\n</li>\n<li><p>异步上传文件</p>\n<p>  若 myForm 中有用户选择的文件，要进行异步上传：</p>\n<pre><code>  <span class=\"keyword\">var</span> req = <span class=\"keyword\">new</span> XMLHttpRequest();\n  req.open(<span class=\"string\">'POST'</span>, <span class=\"string\">'http://laispace.com/test'</span>, <span class=\"literal\">true</span>);\n  req.onload = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(e)</span> </span>{\n      <span class=\"keyword\">if</span> (req.status === <span class=\"number\">200</span>) {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件已成功上传！'</span>)\n      } <span class=\"keyword\">else</span> {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'啊噢~ 文件上传失败！'</span>)\n      }\n  }    \n</code></pre></li>\n</ul>\n<a id=\"more\"></a>\n\n\n\n\n\n\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/DOM/XMLHttpRequest/FormData/Using_FormData_Objects\" target=\"_blank\" rel=\"external\">参考资料</a></p>\n","source":"_posts/使用_formdata_模拟表单控件.md","raw":"title: 使用 FormData 模拟表单控件\n\ndate: 2014-05-09 21:19:42\n\ncategories: HTML\n\ntags: [FormData] \n\n---\n\n\n- 创建一个新的 FormData 对象，然后使用 append() 添加字段：\n\n\t\tvar form = new FormData();\n\t\tform.append('name', 'xiaolai');\n\t\tform.append('age', 18);\n\t\t// 使用 ajax 发送\n\t\tvar req = new XMLHttpRequest();\n\t\treq.open('POST', 'http://laispace.com/test');\n\t\treq.send(form);\n\n\tFormData.append(key, value)中 value 可以是string/Blob对象/File对象\n\t\n- 利用已有的 form 创建 FormData 对象进行格式化\n\n\t\tvar myForm = document.getElementById('myForm');\n\t\tvar form = new FormData(myForm);\n\n\t继续使用 FormData.append() 添加字段，或使用 ajax 发送表单\n\t\n- 异步上传文件\n\n\t若 myForm 中有用户选择的文件，要进行异步上传：\n\t\n\t\tvar req = new XMLHttpRequest();\n\t\treq.open('POST', 'http://laispace.com/test', true);\n\t\treq.onload = function (e) {\n\t\t\tif (req.status === 200) {\n\t\t\t\tconsole.log('文件已成功上传！')\n\t\t\t} else {\n\t\t\t\tconsole.log('啊噢~ 文件上传失败！')\n\t\t\t}\n\t\t}\t\n\t\t\n<!-- more -->\n\n\n\t\n\t\n\t\n\t\n[参考资料](https://developer.mozilla.org/zh-CN/docs/DOM/XMLHttpRequest/FormData/Using_FormData_Objects)\n\n","slug":"使用_formdata_模拟表单控件","updated":1418908898000,"excerpt":"<ul>\n<li><p>创建一个新的 FormData 对象，然后使用 append() 添加字段：</p>\n<pre><code>  <span class=\"keyword\">var</span> form = <span class=\"built_in\">new</span> FormData();\n  form.<span class=\"built_in\">append</span>(<span class=\"string\">'name'</span>, <span class=\"string\">'xiaolai'</span>);\n  form.<span class=\"built_in\">append</span>(<span class=\"string\">'age'</span>,<span class=\"number\"> 18</span>);\n  <span class=\"comment\">// 使用 ajax 发送</span>\n  <span class=\"keyword\">var</span> req = <span class=\"built_in\">new</span> XMLHttpRequest();\n  req.open(<span class=\"string\">'POST'</span>, <span class=\"string\">'http://laispace.com/test'</span>);\n  req.send(form);\n</code></pre><p>  FormData.append(key, value)中 value 可以是string/Blob对象/File对象</p>\n</li>\n<li><p>利用已有的 form 创建 FormData 对象进行格式化</p>\n<pre><code>  <span class=\"keyword\">var</span> myForm = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myForm'</span>);\n  <span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> FormData(myForm);\n</code></pre><p>  继续使用 FormData.append() 添加字段，或使用 ajax 发送表单</p>\n</li>\n<li><p>异步上传文件</p>\n<p>  若 myForm 中有用户选择的文件，要进行异步上传：</p>\n<pre><code>  <span class=\"keyword\">var</span> req = <span class=\"keyword\">new</span> XMLHttpRequest();\n  req.open(<span class=\"string\">'POST'</span>, <span class=\"string\">'http://laispace.com/test'</span>, <span class=\"literal\">true</span>);\n  req.onload = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(e)</span> </span>{\n      <span class=\"keyword\">if</span> (req.status === <span class=\"number\">200</span>) {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'文件已成功上传！'</span>)\n      } <span class=\"keyword\">else</span> {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'啊噢~ 文件上传失败！'</span>)\n      }\n  }    \n</code></pre></li>\n</ul>\n","_id":"8jlageesnyq9rf09","comments":true,"layout":"post","photos":[],"link":""},{"title":"使用net模块创建TCP服务器","date":1399783400000,"categories":["f1q8dl6bbauvoh8x"],"tags":["g6walf4r9fxkcvnn","yyyaezl5wdv095zn"],"content":"<ul>\n<li><p>创建TCP服务器</p>\n<pre><code>  <span class=\"keyword\">var</span> server = net.createServer([options], [connectionListener])\n  <span class=\"comment\">// 相当于: </span>\n  <span class=\"comment\">// var server = net.createServer([options]);</span>\n  <span class=\"comment\">// server.on('connection', connectionListener);</span>\n</code></pre><p>  方法1：        </p>\n<pre><code>  <span class=\"comment\">// 监听端口</span>\n  <span class=\"comment\">// port 若为0则分配随机端口号</span>\n  <span class=\"comment\">// host 缺省则监听来自任何ipv4地址的客户端连接</span>\n  <span class=\"comment\">// backlog 默认为511，设定等待队列中最大的连接数，超过则拒绝</span>\n  server<span class=\"class\">.listen</span>(port, <span class=\"attr_selector\">[host]</span>, <span class=\"attr_selector\">[backlog]</span>, <span class=\"attr_selector\">[callback]</span>)\n</code></pre><p>  方法2：    </p>\n<pre><code>  <span class=\"comment\">// 监听指定路径</span>\n  server.listen(path, [<span class=\"keyword\">callback</span>])\n</code></pre><p>  方法3：</p>\n<pre><code>  <span class=\"comment\">// 监听socket句柄</span>\n  server.listen(handle, [<span class=\"keyword\">callback</span>])\n</code></pre><p>  以上三种方法的 callback 可改写为：</p>\n<pre><code>  server.on(<span class=\"string\">'listening'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n      <span class=\"comment\">// callback code here</span>\n  })    \n</code></pre></li>\n</ul>\n<a id=\"more\"></a>\n\n<pre><code>示例：\n\n    <span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);\n    <span class=\"keyword\">var</span> server = net.createServer(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(socket)</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'客户端与服务器的连接已建立'</span>);\n\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'socket信息是：'</span>, socket.address())\n\n        <span class=\"comment\">// 获取客户端与服务器的连接数</span>\n        server.getConnections(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err, count)</span> </span>{\n            <span class=\"built_in\">console</span>.log(<span class=\"string\">'当前连接数为：'</span>, count);\n            <span class=\"comment\">// 设置最大连接数，超过这个连接数后，客户端将无法得到响应</span>\n            server.maxConnections = <span class=\"number\">2</span>;\n            <span class=\"built_in\">console</span>.log(<span class=\"string\">'最大连接数为：'</span>, server.maxConnections);\n        })\n\n        <span class=\"comment\">// 关闭服务器，不再接收所有连接</span>\n        <span class=\"comment\">// server.close(function() {</span>\n        <span class=\"comment\">//    console.log('服务器已关闭');</span>\n        <span class=\"comment\">// })</span>\n\n    });\n    server.listen(<span class=\"number\">1234</span>, <span class=\"string\">'localhost'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'正在监听端口1234'</span>);\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'server信息是：'</span>, server.address())\n    });\n    server.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span> </span>{\n        <span class=\"comment\">// 端口被占用</span>\n        <span class=\"keyword\">if</span> (e.code == <span class=\"string\">'EADDRINUSE'</span>) {\n            <span class=\"built_in\">console</span>.log(<span class=\"string\">'error: 端口已被占用'</span>);\n        }\n\n    })\n\n\n处理socket连接\n\n    <span class=\"keyword\">var</span> net =<span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);\n    <span class=\"keyword\">var</span> server = net.createServer();\n    server.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(socket)</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'socket信息是：'</span>, socket.address());\n\n        <span class=\"comment\">// 监听socket连接</span>\n        socket.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data)</span> </span>{\n            <span class=\"built_in\">console</span>.log(<span class=\"string\">'共接收到%d字节的数据：'</span>, socket.bytesRead);\n            <span class=\"comment\">// data 默认是 buffer 流</span>\n            <span class=\"comment\">// 设定编码</span>\n            <span class=\"comment\">// socket.setEncoding('utf8');</span>\n            <span class=\"comment\">// 或使用 data.toString()</span>\n            <span class=\"built_in\">console</span>.log(data.toString());\n        });\n\n        <span class=\"comment\">// 监听关闭连接</span>\n        socket.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n            <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接被客户端关闭！'</span>);\n        })\n        <span class=\"comment\">//向客户端发送数据</span>\n        socket.write(<span class=\"string\">'哈喽！这是来自服务器的数据！'</span>)\n    });\n\n    server.listen(<span class=\"number\">1234</span>, <span class=\"string\">'localhost'</span>);\n\n\n将这段脚本存到 server.js 启动这段脚本 \n\n    $ node server.js\n\n运行telnet并输入任意数据试试：\n\n    telnet localhost <span class=\"number\">1234</span>\n</code></pre><ul>\n<li>创建TCP客户端</li>\n</ul>\n<pre><code>    <span class=\"keyword\">var</span> socket = <span class=\"keyword\">new</span> net.Socket([options])\n    <span class=\"comment\">// options.fd 文佳描述符</span>\n    <span class=\"comment\">// options.type 可选tcp4/tcp6/unix 指定协议</span>\n\n\n方法<span class=\"number\">1</span>：\n\n    socket.on(<span class=\"string\">'connect'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n        <span class=\"comment\">// callback code here.</span>\n    })\n\n方法<span class=\"number\">2</span>：        \n\n    sockec.connect(path, [connectionListener])\n\n    socket.remoteAddress 远程地址\n    socket.remotePort 远程端口\n    socket.localAddress 本地地址\n    localPort 本地端口\n\n写入数据：\n\n    socket.write(data, [encoding], [callback])\n\n示例：\n\n\n    <span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);\n    <span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> net.Socket();\n    client.setEncoding(<span class=\"string\">'utf8'</span>);\n\n    client.connect(<span class=\"number\">1234</span>, <span class=\"string\">'localhost'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'客户端已连接到服务器'</span>);\n        <span class=\"comment\">// 向服务器发送数据</span>\n        client.write(<span class=\"string\">'你好，我是来自客户端的消息！'</span>);\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'已发送%d字节的数据'</span>, client.bytesWritten);\n        <span class=\"comment\">// 关闭连接</span>\n        <span class=\"comment\">// client.end([data], [encoding])</span>\n        <span class=\"comment\">// client.end('客户端已关闭连接！')</span>\n    });\n\n    <span class=\"comment\">// 监听数据接收</span>\n    client.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'客户端接收到来自服务器的数据：'</span>, data);\n    });\n\n    <span class=\"comment\">// 监听错误</span>\n    client.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(e)</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'error: '</span>, e);\n        <span class=\"comment\">// 销毁这个错误的socket，确保不会被使用</span>\n        client.destroy();\n    })\n\n\n将这段代码另存为 client.js\n\n先启动上面的 server.js\n\n    $ node server.js\n\n再新建终端窗口启动 client.js 进行通信\n\n    $ node client.js\n</code></pre><ul>\n<li><p>net模块判断IP地址</p>\n<pre><code>  <span class=\"comment\">// 判断输入是否为IP</span>\n  <span class=\"keyword\">var</span> type = net.isIP(ip);    \n  <span class=\"keyword\">switch</span> (type) {\n      <span class=\"keyword\">case</span> <span class=\"number\">0</span>: \n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'不是一个IP'</span>);\n          <span class=\"keyword\">break</span>;\n      <span class=\"keyword\">case</span> <span class=\"number\">4</span>: \n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'是一个IPV4地址'</span>);\n          <span class=\"keyword\">break</span>;\n      <span class=\"keyword\">case</span> <span class=\"number\">6</span>: \n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'是一个IPV6地址'</span>);\n  }\n\n  <span class=\"comment\">// 判断是否为 IPV4地址</span>\n  net.isIPV4(ip)\n\n  <span class=\"comment\">// 判断是否为 IPV6地址</span>\n  net.isIPV6(ip)\n</code></pre></li>\n<li><p>dgram 模块实现UDP通信</p>\n<p>  服务器代码 udpServer.js ：</p>\n<pre><code>      <span class=\"keyword\">var</span> dgram = <span class=\"built_in\">require</span>(<span class=\"string\">'dgram'</span>);\n      <span class=\"keyword\">var</span> server = dgram.createSocket(<span class=\"string\">'udp4'</span>);\n      server.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(msg, info)</span> </span>{\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'收到客户端信息：'</span>, msg);\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'客户端地址信息：'</span>, info);\n          <span class=\"comment\">// 往客户端发送信息</span>\n          <span class=\"keyword\">var</span> buff = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'已收到这条信息：'</span>, msg);\n          server.send(buf, <span class=\"number\">0</span>, buf.length, info.port, info.address);\n      })    \n      <span class=\"comment\">// 监听</span>\n      server.on(<span class=\"string\">'listening'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'正在监听：'</span>, server.address());\n      });\n      <span class=\"comment\">// 绑定端口</span>\n      server.bind(<span class=\"number\">12345</span>, <span class=\"string\">'localhost'</span>);\n</code></pre><p>  客户端代码 udpClient.js：</p>\n<pre><code>      <span class=\"keyword\">var</span> dgram = <span class=\"built_in\">require</span>(<span class=\"string\">'dgram'</span>);\n      <span class=\"keyword\">var</span> message = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'哈喽！这是来自客户端的消息，我是小赖呦'</span>);\n      <span class=\"keyword\">var</span> client = dgram.createSocket(<span class=\"string\">'udp4'</span>);\n      <span class=\"comment\">// 发送消息</span>\n      client.send(message, <span class=\"number\">0</span>, message.length, <span class=\"number\">12345</span>, <span class=\"string\">'localhost'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, bytes)</span> </span>{\n          <span class=\"keyword\">if</span> (err) {\n              <span class=\"built_in\">console</span>.log(<span class=\"string\">'发送失败'</span>);\n          }\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'已发送%d字节的数据'</span>, butes);\n      });            \n      <span class=\"comment\">// 监听</span>\n      client.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(msg, info)</span> </span>{\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'收到服务器信息：'</span>, msg);\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器地址信息：'</span>, info);\n      })\n</code></pre></li>\n</ul>\n","source":"_posts/使用net模块创建tcp服务器.md","raw":"title: 使用net模块创建TCP服务器\n\ndate: 2014-05-11 12:43:20\n\ncategories: Node\n\ntags: [net, tcp] \n\n---\n\n- 创建TCP服务器\n\n\t\tvar server = net.createServer([options], [connectionListener])\n\t\t// 相当于: \n\t\t// var server = net.createServer([options]);\n\t\t// server.on('connection', connectionListener);\n\t\n\t方法1：\t\t\n\t\n\t\t// 监听端口\n\t\t// port 若为0则分配随机端口号\n\t\t// host 缺省则监听来自任何ipv4地址的客户端连接\n\t\t// backlog 默认为511，设定等待队列中最大的连接数，超过则拒绝\n\t\tserver.listen(port, [host], [backlog], [callback])\n\t\t\n\t方法2：\t\n\t\t\n\t\t// 监听指定路径\n\t\tserver.listen(path, [callback])\n\t\t\n\t方法3：\n\t\n\t\t// 监听socket句柄\n\t\tserver.listen(handle, [callback])\n\t\t\n\t以上三种方法的 callback 可改写为：\n\t\n\t\tserver.on('listening', function () {\n\t\t\t// callback code here\n\t\t})\t\n\t\t\t\t\n<!--more-->\n\t\t\n\t示例：\n\t\n\t\tvar net = require('net');\n\t\tvar server = net.createServer(function(socket) {\n\t\t\tconsole.log('客户端与服务器的连接已建立');\n\t\t\t\n\t\t\tconsole.log('socket信息是：', socket.address())\n\t\t\t\n\t\t\t// 获取客户端与服务器的连接数\n\t\t\tserver.getConnections(function(err, count) {\n\t\t\t\tconsole.log('当前连接数为：', count);\n\t\t\t\t// 设置最大连接数，超过这个连接数后，客户端将无法得到响应\n\t\t\t\tserver.maxConnections = 2;\n\t\t\t\tconsole.log('最大连接数为：', server.maxConnections);\n\t\t\t})\n\t\t\t\n\t\t\t// 关闭服务器，不再接收所有连接\n\t\t\t// server.close(function() {\n\t\t\t//\tconsole.log('服务器已关闭');\n\t\t\t// })\n\t\t\t\n\t\t});\n\t\tserver.listen(1234, 'localhost', function() {\n\t\t\tconsole.log('正在监听端口1234');\n\t\t\tconsole.log('server信息是：', server.address())\n\t\t});\n\t\tserver.on('error', function(e) {\n\t\t\t// 端口被占用\n\t\t\tif (e.code == 'EADDRINUSE') {\n\t\t\t\tconsole.log('error: 端口已被占用');\n\t\t\t}\n\t\t\t\n\t\t})\n\t\t\n\t\n\t处理socket连接\n\n\t\tvar net =require('net');\n\t\tvar server = net.createServer();\n\t\tserver.on('connection', function(socket) {\n\t\t\tconsole.log('socket信息是：', socket.address());\n\n\t\t\t// 监听socket连接\n\t\t\tsocket.on('data', function(data) {\n\t\t\t\tconsole.log('共接收到%d字节的数据：', socket.bytesRead);\n\t\t\t\t// data 默认是 buffer 流\n\t\t\t\t// 设定编码\n\t\t\t\t// socket.setEncoding('utf8');\n\t\t\t\t// 或使用 data.toString()\n\t\t\t\tconsole.log(data.toString());\n\t\t\t});\n\n\t\t\t// 监听关闭连接\n\t\t\tsocket.on('end', function () {\n\t\t\t\tconsole.log('连接被客户端关闭！');\n\t\t\t})\n\t\t\t//向客户端发送数据\n\t\t\tsocket.write('哈喽！这是来自服务器的数据！')\n\t\t});\n\n\t\tserver.listen(1234, 'localhost');\n\n\n\t将这段脚本存到 server.js 启动这段脚本 \n\t\n\t\t$ node server.js\n\t\n\t运行telnet并输入任意数据试试：\n\t\t\n\t\ttelnet localhost 1234\n\n\t\t\n\n- 创建TCP客户端\n\n\t\t\n\t\tvar socket = new net.Socket([options])\n\t\t// options.fd 文佳描述符\n\t\t// options.type 可选tcp4/tcp6/unix 指定协议\n\t\t\n\n\t方法1：\n\t\n\t\tsocket.on('connect', function(){\n\t\t\t// callback code here.\n\t\t})\n\n\t方法2：\t\t\n\n\t\tsockec.connect(path, [connectionListener])\n\t\t\n\t\tsocket.remoteAddress 远程地址\n\t\tsocket.remotePort 远程端口\n\t\tsocket.localAddress 本地地址\n\t\tlocalPort 本地端口\n\t\t\n\t写入数据：\n\t\n\t\tsocket.write(data, [encoding], [callback])\n\t\t\n\t示例：\n\t\n\n\t\tvar net = require('net');\n\t\tvar client = new net.Socket();\n\t\tclient.setEncoding('utf8');\n\n\t\tclient.connect(1234, 'localhost', function(){\n\t\t\tconsole.log('客户端已连接到服务器');\n\t\t\t// 向服务器发送数据\n\t\t\tclient.write('你好，我是来自客户端的消息！');\n\t\t\tconsole.log('已发送%d字节的数据', client.bytesWritten);\n\t\t\t// 关闭连接\n\t\t\t// client.end([data], [encoding])\n\t\t\t// client.end('客户端已关闭连接！')\n\t\t});\n\n\t\t// 监听数据接收\n\t\tclient.on('data', function (data) {\n\t\t\tconsole.log('客户端接收到来自服务器的数据：', data);\n\t\t});\n\n\t\t// 监听错误\n\t\tclient.on('error', function (e) {\n\t\t\tconsole.log('error: ', e);\n\t\t\t// 销毁这个错误的socket，确保不会被使用\n\t\t\tclient.destroy();\n\t\t})\n\n\t\n\t将这段代码另存为 client.js\n\t\n\t先启动上面的 server.js\n\t\n\t\t$ node server.js\n\t\t\n\t再新建终端窗口启动 client.js 进行通信\n\t\t\n\t\t$ node client.js\n\t\t\n\t\t\n- net模块判断IP地址\n\n\t\t// 判断输入是否为IP\n\t\tvar type = net.isIP(ip);\t\n\t\tswitch (type) {\n\t\t\tcase 0: \n\t\t\t\tconsole.log('不是一个IP');\n\t\t\t\tbreak;\n\t\t\tcase 4: \n\t\t\t\tconsole.log('是一个IPV4地址');\n\t\t\t\tbreak;\n\t\t\tcase 6: \n\t\t\t\tconsole.log('是一个IPV6地址');\n\t\t}\n\t\t\n\t\t// 判断是否为 IPV4地址\n\t\tnet.isIPV4(ip)\n\t\t\n\t\t// 判断是否为 IPV6地址\n\t\tnet.isIPV6(ip)\n\t\t\n- dgram 模块实现UDP通信\n\n\t服务器代码 udpServer.js ：\n\t\n\t\t\tvar dgram = require('dgram');\n\t\t\tvar server = dgram.createSocket('udp4');\n\t\t\tserver.on('message', function (msg, info) {\n\t\t\t\tconsole.log('收到客户端信息：', msg);\n\t\t\t\tconsole.log('客户端地址信息：', info);\n\t\t\t\t// 往客户端发送信息\n\t\t\t\tvar buff = new Buffer('已收到这条信息：', msg);\n\t\t\t\tserver.send(buf, 0, buf.length, info.port, info.address);\n\t\t\t})\t\n\t\t\t// 监听\n\t\t\tserver.on('listening', function () {\n\t\t\t\tconsole.log('正在监听：', server.address());\n\t\t\t});\n\t\t\t// 绑定端口\n\t\t\tserver.bind(12345, 'localhost');\n\t\t\t\n\t客户端代码 udpClient.js：\n\t\n\t\t\tvar dgram = require('dgram');\n\t\t\tvar message = new Buffer('哈喽！这是来自客户端的消息，我是小赖呦');\n\t\t\tvar client = dgram.createSocket('udp4');\n\t\t\t// 发送消息\n\t\t\tclient.send(message, 0, message.length, 12345, 'localhost', function (err, bytes) {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log('发送失败');\n\t\t\t\t}\n\t\t\t\tconsole.log('已发送%d字节的数据', butes);\n\t\t\t});\t\t\t\n\t\t\t// 监听\n\t\t\tclient.on('message', function (msg, info) {\n\t\t\t\tconsole.log('收到服务器信息：', msg);\n\t\t\t\tconsole.log('服务器地址信息：', info);\n\t\t\t})\n\t\t\t\n\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t","slug":"使用net模块创建tcp服务器","updated":1418908898000,"excerpt":"<ul>\n<li><p>创建TCP服务器</p>\n<pre><code>  <span class=\"keyword\">var</span> server = net.createServer([options], [connectionListener])\n  <span class=\"comment\">// 相当于: </span>\n  <span class=\"comment\">// var server = net.createServer([options]);</span>\n  <span class=\"comment\">// server.on('connection', connectionListener);</span>\n</code></pre><p>  方法1：        </p>\n<pre><code>  <span class=\"comment\">// 监听端口</span>\n  <span class=\"comment\">// port 若为0则分配随机端口号</span>\n  <span class=\"comment\">// host 缺省则监听来自任何ipv4地址的客户端连接</span>\n  <span class=\"comment\">// backlog 默认为511，设定等待队列中最大的连接数，超过则拒绝</span>\n  server<span class=\"class\">.listen</span>(port, <span class=\"attr_selector\">[host]</span>, <span class=\"attr_selector\">[backlog]</span>, <span class=\"attr_selector\">[callback]</span>)\n</code></pre><p>  方法2：    </p>\n<pre><code>  <span class=\"comment\">// 监听指定路径</span>\n  server.listen(path, [<span class=\"keyword\">callback</span>])\n</code></pre><p>  方法3：</p>\n<pre><code>  <span class=\"comment\">// 监听socket句柄</span>\n  server.listen(handle, [<span class=\"keyword\">callback</span>])\n</code></pre><p>  以上三种方法的 callback 可改写为：</p>\n<pre><code>  server.on(<span class=\"string\">'listening'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n      <span class=\"comment\">// callback code here</span>\n  })    \n</code></pre></li>\n</ul>\n","_id":"avfnohbv9270xm9m","comments":true,"layout":"post","photos":[],"link":""},{"title":"写在2012暑假","id":23,"categories":["9wpmord5537fjtil"],"date":1342537454000,"tags":[],"content":"<p>竟然有六天没写日记了。今天比较烦躁，今晚也不想看书，那就做个流水账放在来思碑吧。</p>\n<p>1.暑假当家</p>\n<p>2号考完试3号下午奔回家，4号去了医院，一直呆到8号奶奶出院，期间在医院病床边寸步不离，再一次感受到了健康的珍贵。</p>\n<p>这半个月以来，包揽家务，负责三餐（厨艺见长了哈哈）。白天基本是忙碌的，晚上闲下来看点书玩点电脑打个盹也就过去了。</p>\n<p>第一次深深感受到爷爷奶奶当家带大我们的艰辛。</p>\n<p>害怕的是【树欲静而风不止，子欲养而亲不待。】但愿二老安好，等到我立业的那天，用我挣的钱享福。</p>\n<p>2.CCPS&amp;&amp;UC</p>\n<p>a）前天收到燕妮姐的邮件，叫我重新考虑宣传组组长一职，我竟然当即回复：接受挑战，尽力做好。</p>\n<p>之前之所以推脱，是因为刚加入新创办的UC俱乐部担任宣传部副部长，恐不能两头兼顾，担当不起。</p>\n<p>但其实就像当初犹豫再三才申请加入俱乐部一样，【与其后悔，不如遗憾。】</p>\n<p>也正如结果—成为UC的成员参与俱乐部创办初期的建设，【机会是自己把握的。】</p>\n<p>身兼二职，也就是说暑假回去，将会有很多事得承担。但希望自己的尽心投入，能收获汇报。</p>\n<p>【不逼自己一把，就不知道自己有多优秀。】对吧？</p>\n<p>我不能很自信我能做好，但我一定不能退缩不去尝试。</p>\n<p>所以，干吧！</p>\n<p>b）<a href=\"http://v.youku.com/v_show/id_XNDI3MTkzNzM2.html\" title=\"中华文教促进会宣传视频\" target=\"_blank\" rel=\"external\">文教夏令营</a>在即，但联络校方确定营会时间的事迟迟未定，让人着急。</p>\n<p>想起去年八月才加入文教，而今年却已经成为活动的负责人了。没有太多资深义工的帮助，校方联络、学生挑选面试、营会开展的工作由我们全</p>\n<p>权负责 的确是一个巨大的挑战，但也只能硬着头皮去完成了。</p>\n<p>谁知道我的成长少了这步，会有多么残缺呢？希望明后两天搞定校方的事，就全力开展工作。</p>\n<p>绝不能退缩，绝不能把活动搞砸，绝不能让文教失望！</p>\n<p>3.前端||网络</p>\n<p>打开Evernote的《2012暑假计划》，一一列举了期末写好计划在暑假完成的事项，明显感觉力不从心了。</p>\n<p>大一下没有专心学课内的东西，一天到晚净面对着电脑，查阅了很多资料、刷了很多的知乎、浏览了很多的招聘网站，试着去规划自己的职业方</p>\n<p>向。花了时间尝试了NA、前端，终于发现了自己喜欢的东西。但在这二者之间选择，却又有很多的东西需要去权衡。</p>\n<p>【喜欢一件事，心里总会惦记着。】期末面临挂科的风险，却还想把复习的时间拿来学习前端。现在回想起来，也许这就是与职业理想相关的内心渴望吧。</p>\n<p>在忙家务的间隙里，坚持多看书吧—争取暑假学完前端基础，多多实践。争取开学前完成自己的个人网站并坚持长期维护。</p>\n<p>HTML5，我来了！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n","source":"_posts/写在2012暑假.md","raw":"title: 写在2012暑假\nid: 23\ncategories:\n  - 来思碑记\ndate: 2012-07-17 23:04:14\ntags:\n---\n\n竟然有六天没写日记了。今天比较烦躁，今晚也不想看书，那就做个流水账放在来思碑吧。\n\n1.暑假当家\n\n2号考完试3号下午奔回家，4号去了医院，一直呆到8号奶奶出院，期间在医院病床边寸步不离，再一次感受到了健康的珍贵。\n\n这半个月以来，包揽家务，负责三餐（厨艺见长了哈哈）。白天基本是忙碌的，晚上闲下来看点书玩点电脑打个盹也就过去了。\n\n第一次深深感受到爷爷奶奶当家带大我们的艰辛。\n\n害怕的是【树欲静而风不止，子欲养而亲不待。】但愿二老安好，等到我立业的那天，用我挣的钱享福。\n\n2.CCPS&amp;&amp;UC\n\na）前天收到燕妮姐的邮件，叫我重新考虑宣传组组长一职，我竟然当即回复：接受挑战，尽力做好。\n\n之前之所以推脱，是因为刚加入新创办的UC俱乐部担任宣传部副部长，恐不能两头兼顾，担当不起。\n\n但其实就像当初犹豫再三才申请加入俱乐部一样，【与其后悔，不如遗憾。】\n\n也正如结果--成为UC的成员参与俱乐部创办初期的建设，【机会是自己把握的。】\n\n身兼二职，也就是说暑假回去，将会有很多事得承担。但希望自己的尽心投入，能收获汇报。\n\n【不逼自己一把，就不知道自己有多优秀。】对吧？\n\n我不能很自信我能做好，但我一定不能退缩不去尝试。\n\n所以，干吧！\n\nb）[文教夏令营](http://v.youku.com/v_show/id_XNDI3MTkzNzM2.html \"中华文教促进会宣传视频\")在即，但联络校方确定营会时间的事迟迟未定，让人着急。\n\n想起去年八月才加入文教，而今年却已经成为活动的负责人了。没有太多资深义工的帮助，校方联络、学生挑选面试、营会开展的工作由我们全\n\n权负责 的确是一个巨大的挑战，但也只能硬着头皮去完成了。\n\n谁知道我的成长少了这步，会有多么残缺呢？希望明后两天搞定校方的事，就全力开展工作。\n\n绝不能退缩，绝不能把活动搞砸，绝不能让文教失望！\n\n3.前端||网络\n\n打开Evernote的《2012暑假计划》，一一列举了期末写好计划在暑假完成的事项，明显感觉力不从心了。\n\n大一下没有专心学课内的东西，一天到晚净面对着电脑，查阅了很多资料、刷了很多的知乎、浏览了很多的招聘网站，试着去规划自己的职业方\n\n向。花了时间尝试了NA、前端，终于发现了自己喜欢的东西。但在这二者之间选择，却又有很多的东西需要去权衡。\n\n【喜欢一件事，心里总会惦记着。】期末面临挂科的风险，却还想把复习的时间拿来学习前端。现在回想起来，也许这就是与职业理想相关的内心渴望吧。\n\n在忙家务的间隙里，坚持多看书吧--争取暑假学完前端基础，多多实践。争取开学前完成自己的个人网站并坚持长期维护。\n\nHTML5，我来了！\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;","slug":"写在2012暑假","updated":1418908898000,"excerpt":"","_id":"c9imm8cdifk5b1mp","comments":true,"layout":"post","photos":[],"link":""},{"title":"创建HTTP/HTTPS服务器与客户端","date":1399858605000,"categories":["f1q8dl6bbauvoh8x"],"tags":["izgm9cajg7ji9rjr","exv23uev1cc6cki6"],"content":"<ul>\n<li><p>创建HTTP服务器</p>\n<p>  方法1：</p>\n<pre><code>  <span class=\"keyword\">var</span> server = http.createServer([requestListener])\n  <span class=\"comment\">// requestListener = function (request, response) {</span>\n      <span class=\"comment\">// request 是一个 http.IncomingMessage对象</span>\n      <span class=\"comment\">// response 是一个 http.ServerResponse对象</span>\n  <span class=\"comment\">// }</span>\n</code></pre><p>  方法2：</p>\n<pre><code>  <span class=\"keyword\">var</span> server = http.createServer();\n  <span class=\"comment\">// 监听请求</span>\n  server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(request, response)</span> </span>{\n      <span class=\"comment\">// callback code here.</span>\n  })        \n  <span class=\"comment\">// 监听端口</span>\n  <span class=\"comment\">// port 若为0则分配随机端口号</span>\n  <span class=\"comment\">// host 缺省则监听来自任何ipv4地址的客户端连接</span>\n  <span class=\"comment\">// backlog 默认为511，设定等待队列中最大的连接数，超过则拒绝</span>\n  server.listen(port, [host], [backlog], [<span class=\"keyword\">callback</span>])\n\n  <span class=\"comment\">// 或</span>\n  server.on(<span class=\"string\">'listening'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(request, response)</span> </span>{\n      <span class=\"comment\">// callback code here.</span>\n  })\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>\n\n<pre><code>示例：\n\n    <span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);\n    <span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res)</span> </span>{\n        <span class=\"comment\">// console.log('客户端请求信息为：', req);</span>\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'客户端请求方法为：'</span>, req.method);\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'客户端请求url为：'</span>, req.url);\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'客户端请求头为：'</span>, req.headers);\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'客户端请求HTTP版本为：'</span>, req.httpVersion);\n\n        <span class=\"comment\">// 监听客户端发来的数据</span>\n        req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> </span>{\n            <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器接收到数据：'</span>, data);\n        });\n        req.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n            <span class=\"built_in\">console</span>.log(                <span class=\"string\">'服务器接收数据完毕'</span>);\n        })\n\n        <span class=\"comment\">// 设置超时</span>\n        res.setTimeout(<span class=\"number\">1000</span>);\n        res.on(<span class=\"string\">'timeout'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n            <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器响应超时'</span>);\n        })\n        <span class=\"comment\">// 监听关闭</span>\n        res.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n            <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接被中断'</span>);\n        })\n\n\n        <span class=\"comment\">// 发送服务器端的响应数据</span>\n        <span class=\"comment\">// res.writeHead(statusCode, [reasonPhase], [headers])</span>\n        <span class=\"comment\">// starusCode 为HTTP状态码</span>\n        <span class=\"comment\">// reasonPhase 为状态码的描述信息</span>\n        <span class=\"comment\">// headers 指定响应头对象，或使用 res.setHeader(name, value) 单独设置</span>\n        res.writeHead(<span class=\"number\">200</span>, {<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>});\n        res.write(<span class=\"string\">'hello 赖小赖！\\n'</span>);\n        res.write(<span class=\"string\">'hello 我是继续写入的赖小赖！\\n'</span>);\n        res.write(<span class=\"string\">'hello 我是调皮的赖小赖！\\n'</span>);\n        <span class=\"comment\">// 必须使用 end() 结束响应</span>\n        res.end(<span class=\"string\">'好吧，我不玩了，掰掰！'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n            <span class=\"comment\">// console.log('已结束响应');</span>\n        });\n    });\n    <span class=\"comment\">// 监听端口</span>\n    server.listen(<span class=\"number\">1234</span>, <span class=\"string\">'localhost'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器正在监听端口1234'</span>);\n\n        <span class=\"comment\">// 关闭服务器</span>\n        <span class=\"comment\">// server.close();</span>\n    });\n    <span class=\"comment\">// 设置超时, 默认为2分钟，这里设定为1分钟</span>\n    server.setTimeout(<span class=\"number\">60</span>*<span class=\"number\">1000</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(socket)</span> </span>{\n        <span class=\"comment\">// 超时后执行回调</span>\n        <span class=\"comment\">// console.log('服务器超时：', socket);</span>\n    })\n\n    <span class=\"comment\">// 监听连接</span>\n    server.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(socket)</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'客户端连接已建立'</span>);\n    })\n\n\n    <span class=\"comment\">// 监听关闭</span>\n    server.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器已被关闭'</span>);\n    });\n    <span class=\"comment\">// 监听错误</span>\n    server.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span> </span>{\n        <span class=\"comment\">// 端口被占用</span>\n        <span class=\"keyword\">if</span> (e.code == <span class=\"string\">'EADDRINUSE'</span>) {\n            <span class=\"built_in\">console</span>.log(<span class=\"string\">'error: 端口已被占用'</span>);\n        }\n    });\n\n\n使用 querystring模块 处理查询字符串\n\n    - querystring.parse() 处理查询字符串\n\n    <span class=\"comment\">// str为查询字符串</span>\n    <span class=\"comment\">// sep 设定查询字符串中的分隔符，默认为 &amp;</span>\n    <span class=\"comment\">// eq 设定查询字符串中的分配符，默认为 = </span>\n    <span class=\"comment\">// querystring.parse(str, [sep], [eq], [options])</span>\n    <span class=\"keyword\">var</span> str = <span class=\"string\">'name=xiaolai&amp;age=18&amp;sex=male'</span>;\n    querystring.parse(str);\n    <span class=\"comment\">// 将输出 {</span>\n    <span class=\"comment\">//    name: 'xiaolai',</span>\n    <span class=\"comment\">//    age: 18,</span>\n    <span class=\"comment\">//    sex: 'male'</span>\n    <span class=\"comment\">// }</span>\n\n    - querystring.stringify() 转换对象为查询字符串\n    <span class=\"comment\">// querystring.stringify(obj, [sep], [eq])</span>\n    <span class=\"keyword\">var</span> obj = {\n        name: <span class=\"string\">'xiaolai'</span>,\n        age: <span class=\"number\">18</span>,    <span class=\"comment\">// 好吧 就让我再年轻一次！！！</span>\n        sex: <span class=\"string\">'male'</span>\n    };\n    <span class=\"keyword\">var</span> str = querystring.stringify(obj);\n    <span class=\"comment\">// 将输出 name=xiaolai&amp;age=18&amp;sex=male</span>\n\n使用 url模块 处理完整的URL字符串\n\n    - url.parse() 处理字符串\n\n    <span class=\"comment\">// parseQueryString 默认为false, 为true时，将字符串中的查询字符串转化为对象</span>\n    <span class=\"comment\">// url.parse(str, [parseQueryString])</span>\n    <span class=\"keyword\">var</span> str = <span class=\"string\">'http://user:pwd@laispace.com:80/user/xiaolai?age=18&amp;sex=male#section1'</span>;\n    <span class=\"keyword\">var</span> strObj1 = url.parse(str);\n    <span class=\"keyword\">var</span> strObj2 = url.parse(str, <span class=\"literal\">true</span>);\n    <span class=\"built_in\">console</span>.log(strObj1, strObj2);\n    <span class=\"comment\">// strObj1.query 为 'age=18&amp;sex=male'</span>\n    <span class=\"comment\">// strObj2.query 为 {age: '18', sex: 'male'}</span>\n\n    - url.format() 转换对象为字符串\n\n    <span class=\"keyword\">var</span> str = url.format(strObj1);\n    <span class=\"built_in\">console</span>.log(str);\n\n    - url.resolve() 合并路径\n\n    <span class=\"comment\">// url.resolve(form, to);</span>\n    <span class=\"keyword\">var</span> str = url.resolve(<span class=\"string\">'http://laispace.com'</span>, <span class=\"string\">'user/xiaolai'</span>)\n    <span class=\"built_in\">console</span>.log(str)/ =&gt;<span class=\"string\">'http://laispace.com/user/xiaolai'</span>\n</code></pre><ul>\n<li><p>创建HTTP客户端</p>\n<pre><code>  <span class=\"comment\">// options 为对象，若为地址字符串则自动parse为对象</span>\n  <span class=\"comment\">// options.host 指定IP地址，默认为 localhost</span>\n  <span class=\"comment\">// options.hostname 默认为 localhost</span>\n  <span class=\"comment\">// options.port 指定端口</span>\n  <span class=\"comment\">// localAddress 指定专用于网络连接的本地端口</span>\n  <span class=\"comment\">// socketPath 指定目标Unix域端口</span>\n  <span class=\"comment\">// method 指定HTTP请求方法，默认为 GET</span>\n  <span class=\"comment\">// path 指定请求路径和查询字符串</span>\n  <span class=\"comment\">// headers 指定请求头对象</span>\n  <span class=\"comment\">// auth 指定认证信息，如 \"user: password\"</span>\n  <span class=\"comment\">// agent 指定代理，是一个 http.Agent对象    </span>\n\n  <span class=\"keyword\">var</span> req = http.request(options, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(response)</span> </span>{\n      <span class=\"comment\">// response code here.</span>\n  })    \n  <span class=\"comment\">// 发送数据</span>\n  req.write(chunk, [encoding]);\n  <span class=\"comment\">// 结束请求</span>\n  req.end([chunk], [encoding]);\n</code></pre><p>  示例：</p>\n<pre><code>  <span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);\n  <span class=\"keyword\">var</span> options = {\n      hostname: <span class=\"string\">'www.laispace.com'</span>,\n      post: <span class=\"number\">80</span>,\n      path: <span class=\"string\">'/'</span>,\n      method: <span class=\"string\">'GET'</span>\n  };\n  <span class=\"keyword\">var</span> req = http.request(options, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(res)</span> </span>{\n      <span class=\"comment\">// console.log('响应信息：', res);</span>\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'响应状态码：'</span>, res.statusCode);\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'响应头：'</span>);\n      <span class=\"comment\">// 设定编码</span>\n      res.setEncoding(<span class=\"string\">'utf8'</span>);\n      <span class=\"keyword\">var</span> body = <span class=\"string\">''</span>;\n      <span class=\"comment\">// 监听响应数据</span>\n      res.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(chunk)</span> </span>{\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'接收到响应数据：'</span>, chunk);\n          body += chunk;\n      })\n      res.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n          <span class=\"comment\">// console.log('响应数据已全部接受：', body);</span>\n      })\n  })\n  <span class=\"comment\">// 写入请求数据</span>\n  <span class=\"comment\">// req.write('Hello 我是小赖');</span>\n  <span class=\"comment\">// 发起请求</span>\n  req.end();\n\n  <span class=\"comment\">// 监听错误，如访问一个不存在的地址时</span>\n  req.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n      <span class=\"keyword\">if</span> (err.code === <span class=\"string\">'ECONNRESET'</span>) {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'socket 端口超时'</span>)\n      } <span class=\"keyword\">else</span> {\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'请求发生错误：'</span>, err);\n      }\n\n  });\n  <span class=\"comment\">// 设定超时</span>\n  req.setTimeout(<span class=\"number\">1000</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n      <span class=\"comment\">// 终止请求</span>\n      <span class=\"comment\">// req.abort()        </span>\n  })    \n</code></pre><p>  除了使用 http.request(options, callback) 外，</p>\n<p>  也可以使用简化的 http.get(options, callback) ，</p>\n<p>  其默认使用 GET 并会自动调用 end() 方法发起请求</p>\n</li>\n</ul>\n<ul>\n<li><p>创建HTTP代理服务器    </p>\n<pre><code>  <span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);\n  <span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);\n  <span class=\"comment\">// 建立代理服务器</span>\n  <span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(clientReq, clientRes)</span> </span>{\n      <span class=\"keyword\">var</span> url_parts = url.parse(clientReq.url);\n      <span class=\"keyword\">var</span> options = {\n          host: <span class=\"string\">'www.laispace.com'</span>, <span class=\"comment\">// =&gt;真正访问的网站host</span>\n          port: <span class=\"number\">80</span>,\n          path: url_parts.pathname,\n          headers: clientReq.headers\n      };\n      <span class=\"comment\">// 服务器代理客户端发起请求</span>\n      <span class=\"keyword\">var</span> serverReq = http.get(options, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(serverRes)</span> </span>{\n          <span class=\"comment\">// 代理服务器得到的响应返回给客户端</span>\n          clientRes.writeHead(serverRes.statusCode, serverRes.headers);\n          <span class=\"comment\">// 代理服务器请求到的数据返回给客户端</span>\n          serverRes.pipe(clientRes);\n      });            \n      <span class=\"comment\">// 将客户端请求</span>\n      clientReq.pipe(serverReq);\n  });\n  server.listen(<span class=\"number\">1234</span>, <span class=\"string\">'localhost'</span>);\n</code></pre><p>  保存这段代码到 test.js</p>\n<p>  执行 $ node test.js</p>\n<p>  浏览器访问 <a href=\"http://localhost:1234\" target=\"_blank\" rel=\"external\">http://localhost:1234</a> 则会访问到 www.laispace.com </p>\n</li>\n<li><p>创建HTTPS服务器    </p>\n<p>  HTTPS 相比于 HTTP：</p>\n<pre><code>  -<span class=\"ruby\"> <span class=\"constant\">HTTPS</span>服务器向<span class=\"constant\">CA</span>申请证书\n</span>\n  -<span class=\"ruby\"> <span class=\"constant\">HTTPS</span>传输的是经过<span class=\"constant\">SSL</span>加密后的数据\n</span>\n  -<span class=\"ruby\"> <span class=\"constant\">HTTPS</span>常用<span class=\"number\">443</span>端口，而<span class=\"constant\">HTTP</span>常用<span class=\"number\">80</span>端口</span>\n</code></pre><p>  SSL简单介绍：</p>\n<pre><code>  -<span class=\"ruby\"> 私钥和公钥保存在服务器\n</span>\n  -<span class=\"ruby\"> 公钥发送到客户端，客户端端发送 消息msg1 给服务器\n</span>\n  -<span class=\"ruby\"> 服务器将 消息msg1 进行哈希运算得到 hash1字符串 并用私钥加密后发送 消息msg2 传回客户端\n</span>\n  -<span class=\"ruby\"> 客户端使用公钥解密 消息msg2 ，将 消息msg1 进行哈希运算得到 hash2字符串，与hash1字符串 进行比较\n</span>\n  -<span class=\"ruby\"> 若 hash1 与 hash2 相等则握手成功\n</span>\n  -<span class=\"ruby\"> 客户端选择加密算法和相应密钥，用公钥加密后发送给服务器\n</span>\n  -<span class=\"ruby\"> 服务器收到加密算法和响应密钥，开始与客户端传输数据        </span>\n</code></pre><ol>\n<li><p>创建私钥：</p>\n<pre><code> $ openssl genrsa -<span class=\"keyword\">out</span> privatekey.pem <span class=\"number\">1024</span>\n</code></pre></li>\n<li><p>创建证书签名请求(Certificate Signing Request)文件：</p>\n<pre><code> $ openssl req -<span class=\"keyword\">new</span> -key privatekey.pem -<span class=\"keyword\">out</span> certrequest.csr\n</code></pre></li>\n<li><p>获取证书：（这里是使用 openssl 创建的测试用的证书-访问网站会被警告，真正的证书要向CA申请）</p>\n<pre><code> $ openssl x509 -req -<span class=\"keyword\">in</span> certrequest.csr -signkey privatekey.pem -<span class=\"keyword\">out</span> certificate.pem\n</code></pre></li>\n<li><p>创建pfx文件（为存储私钥、公钥和证书的一种格式）：</p>\n<pre><code> $ openssl pkcs12 -<span class=\"keyword\">export</span> -<span class=\"keyword\">in</span> certificate.pem -inkey privatekey.pem -<span class=\"keyword\">out</span> certificate.pfx\n</code></pre><p>具备以上条件后，使用 https.createServer(options, [requestListener]) 创建HTTPS服务器：</p>\n<p> var https = require(‘https’);<br> var fs = require(‘fs’);</p>\n<p> var pk = fs.readFileSync(‘./privatekey.pem’);<br> var pc = fs.readFileSync(‘./certificate.pem’);</p>\n<p> var options = {</p>\n<pre><code> <span class=\"attribute\">key</span>: <span class=\"string\">pk,</span>\n <span class=\"attribute\">cert</span>: <span class=\"string\">pc</span>\n</code></pre><p> };<br> var server = https.createServer(options, function (req, res) {</p>\n<pre><code> <span class=\"keyword\">res</span>.<span class=\"keyword\">write</span>(<span class=\"string\">'Hello 赖小赖！'</span>);\n <span class=\"keyword\">res</span>.end();\n</code></pre><p> });<br> server.listen(1234, ‘localhost’, function () {</p>\n<pre><code> console.<span class=\"built_in\">log</span>(<span class=\"string\">'HTTPS服务器已开启，正在监听端口1234'</span>);\n</code></pre><p> })</p>\n</li>\n</ol>\n</li>\n<li><p>创建HTTPS客户端</p>\n<pre><code>  <span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);\n\n  <span class=\"keyword\">var</span> options = {\n      hostname: <span class=\"string\">'npmjs.org'</span>,\n      port: <span class=\"number\">443</span>,\n      path: <span class=\"string\">'/'</span>,\n      method: <span class=\"string\">'GET'</span>,\n      agent: <span class=\"literal\">false</span> <span class=\"comment\">// 设置为false表示自动选择代理</span>\n  };\n  <span class=\"keyword\">var</span> req = https.request(options, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(res)</span> </span>{\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'响应状态码：'</span>, res.statusCode);\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'响应头：'</span>, res.headers);\n      <span class=\"comment\">// 接收数据</span>\n      res.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(chunk)</span> </span>{\n          <span class=\"built_in\">console</span>.log(<span class=\"string\">'响应内容：'</span>, chunk.toString());\n      });\n  });\n  <span class=\"comment\">// 发送请求</span>\n  req.end();\n  <span class=\"comment\">// 设置超时</span>\n  req.setTimeout(<span class=\"number\">1000</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接超时'</span>);\n      <span class=\"comment\">// 终止请求</span>\n      req.abort();\n  })\n  req.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> </span>{\n      <span class=\"built_in\">console</span>.log(<span class=\"string\">'出错啦！'</span>)\n  })\n</code></pre><p>  除以上提出的区别外，HTTPS服务器的编写（如错误监听、设置超时、关闭服务器等）与HTTP服务器的编写方法基本相同，详见官方文档。        </p>\n<p>  默认是GET方法时，也可以使用 https.get(options, callback)，自动调用 end() 方法发起请求，这时HTTPS服务器编写也与HTTP服务器的编写方式相同，参见上文。</p>\n</li>\n</ul>\n<h3 id=\"参考资料：\">参考资料：</h3>\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"external\">SSL/TLS协议运行机制的概述</a></li>\n</ol>\n","source":"_posts/创建http:https服务器与客户端.md","raw":"title: 创建HTTP/HTTPS服务器与客户端\n\ndate: 2014-05-12 09:36:45\n\ncategories: Node\n\ntags: [HTTP, HTTPS] \n\n---\n\n- 创建HTTP服务器\n\n\t方法1：\n\t\n\t\tvar server = http.createServer([requestListener])\n\t\t// requestListener = function (request, response) {\n\t\t\t// request 是一个 http.IncomingMessage对象\n\t\t\t// response 是一个 http.ServerResponse对象\n\t\t// }\n\t\n\t方法2：\n\t\n\t\tvar server = http.createServer();\n\t\t// 监听请求\n\t\tserver.on('request', function (request, response) {\n\t\t\t// callback code here.\n\t\t})\t\t\n\t\t// 监听端口\n\t\t// port 若为0则分配随机端口号\n\t\t// host 缺省则监听来自任何ipv4地址的客户端连接\n\t\t// backlog 默认为511，设定等待队列中最大的连接数，超过则拒绝\n\t\tserver.listen(port, [host], [backlog], [callback])\n\t\t\n\t\t// 或\n\t\tserver.on('listening', function (request, response) {\n\t\t\t// callback code here.\n\t\t})\n\t\t\n<!--more-->\n\t\t\n\t示例：\n\t\n\t\tvar http = require('http');\n\t\tvar server = http.createServer(function (req, res) {\n\t\t\t// console.log('客户端请求信息为：', req);\n\t\t\tconsole.log('客户端请求方法为：', req.method);\n\t\t\tconsole.log('客户端请求url为：', req.url);\n\t\t\tconsole.log('客户端请求头为：', req.headers);\n\t\t\tconsole.log('客户端请求HTTP版本为：', req.httpVersion);\n\t\t\t\n\t\t\t// 监听客户端发来的数据\n\t\t\treq.on('data', function (data) {\n\t\t\t\tconsole.log('服务器接收到数据：', data);\n\t\t\t});\n\t\t\treq.on('end', function () {\n\t\t\t\tconsole.log(\t\t\t\t'服务器接收数据完毕');\n\t\t\t})\n\t\t\t\n\t\t\t// 设置超时\n\t\t\tres.setTimeout(1000);\n\t\t\tres.on('timeout', function () {\n\t\t\t\tconsole.log('服务器响应超时');\n\t\t\t})\n\t\t\t// 监听关闭\n\t\t\tres.on('close', function () {\n\t\t\t\tconsole.log('连接被中断');\n\t\t\t})\n\t\t\t\n\t\t\t\n\t\t\t// 发送服务器端的响应数据\n\t\t\t// res.writeHead(statusCode, [reasonPhase], [headers])\n\t\t\t// starusCode 为HTTP状态码\n\t\t\t// reasonPhase 为状态码的描述信息\n\t\t\t// headers 指定响应头对象，或使用 res.setHeader(name, value) 单独设置\n\t\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\t\tres.write('hello 赖小赖！\\n');\n\t\t\tres.write('hello 我是继续写入的赖小赖！\\n');\n\t\t\tres.write('hello 我是调皮的赖小赖！\\n');\n\t\t\t// 必须使用 end() 结束响应\n\t\t\tres.end('好吧，我不玩了，掰掰！', function () {\n\t\t\t\t// console.log('已结束响应');\n\t\t\t});\n\t\t});\n\t\t// 监听端口\n\t\tserver.listen(1234, 'localhost', function () {\n\t\t\tconsole.log('服务器正在监听端口1234');\n\t\n\t\t\t// 关闭服务器\n\t\t\t// server.close();\n\t\t});\n\t\t// 设置超时, 默认为2分钟，这里设定为1分钟\n\t\tserver.setTimeout(60*1000, function (socket) {\n\t\t\t// 超时后执行回调\n\t\t\t// console.log('服务器超时：', socket);\n\t\t})\n\t\t\n\t\t// 监听连接\n\t\tserver.on('connection', function (socket) {\n\t\t\tconsole.log('客户端连接已建立');\n\t\t})\n\t\t\n\t\t\n\t\t// 监听关闭\n\t\tserver.on('close', function () {\n\t\t\tconsole.log('服务器已被关闭');\n\t\t});\n\t\t// 监听错误\n\t\tserver.on('error', function(e) {\n\t\t\t// 端口被占用\n\t\t\tif (e.code == 'EADDRINUSE') {\n\t\t\t\tconsole.log('error: 端口已被占用');\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t使用 querystring模块 处理查询字符串\n\n\t\t- querystring.parse() 处理查询字符串\n\t\n\t\t// str为查询字符串\n\t\t// sep 设定查询字符串中的分隔符，默认为 &\n\t\t// eq 设定查询字符串中的分配符，默认为 = \n\t\t// querystring.parse(str, [sep], [eq], [options])\n\t\tvar str = 'name=xiaolai&age=18&sex=male';\n\t\tquerystring.parse(str);\n\t\t// 将输出 {\n\t\t//\tname: 'xiaolai',\n\t\t//\tage: 18,\n\t\t//\tsex: 'male'\n\t\t// }\n\t\t\n\t\t- querystring.stringify() 转换对象为查询字符串\n\t\t// querystring.stringify(obj, [sep], [eq])\n\t\tvar obj = {\n\t\t\tname: 'xiaolai',\n\t\t\tage: 18,\t// 好吧 就让我再年轻一次！！！\n\t\t\tsex: 'male'\n\t\t};\n\t\tvar str = querystring.stringify(obj);\n\t\t// 将输出 name=xiaolai&age=18&sex=male\n\t\t\n\t使用 url模块 处理完整的URL字符串\n\t\t\n\t\t- url.parse() 处理字符串\n\t\t\n\t\t// parseQueryString 默认为false, 为true时，将字符串中的查询字符串转化为对象\n\t\t// url.parse(str, [parseQueryString])\n\t\tvar str = 'http://user:pwd@laispace.com:80/user/xiaolai?age=18&sex=male#section1';\n\t\tvar strObj1 = url.parse(str);\n\t\tvar strObj2 = url.parse(str, true);\n\t\tconsole.log(strObj1, strObj2);\n\t\t// strObj1.query 为 'age=18&sex=male'\n\t\t// strObj2.query 为 {age: '18', sex: 'male'}\n\t\t\n\t\t- url.format() 转换对象为字符串\n\t\t\n\t\tvar str = url.format(strObj1);\n\t\tconsole.log(str);\n\t\t\n\t\t- url.resolve() 合并路径\n\n\t\t// url.resolve(form, to);\n\t\tvar str = url.resolve('http://laispace.com', 'user/xiaolai')\n\t\tconsole.log(str)/ =>'http://laispace.com/user/xiaolai'\n\t\t\n\n- 创建HTTP客户端\n\n\t\t// options 为对象，若为地址字符串则自动parse为对象\n\t\t// options.host 指定IP地址，默认为 localhost\n\t\t// options.hostname 默认为 localhost\n\t\t// options.port 指定端口\n\t\t// localAddress 指定专用于网络连接的本地端口\n\t\t// socketPath 指定目标Unix域端口\n\t\t// method 指定HTTP请求方法，默认为 GET\n\t\t// path 指定请求路径和查询字符串\n\t\t// headers 指定请求头对象\n\t\t// auth 指定认证信息，如 \"user: password\"\n\t\t// agent 指定代理，是一个 http.Agent对象\t\n\n\t\tvar req = http.request(options, function (response) {\n\t\t\t// response code here.\n\t\t})\t\n\t\t// 发送数据\n\t\treq.write(chunk, [encoding]);\n\t\t// 结束请求\n\t\treq.end([chunk], [encoding]);\n\t\t\n\t示例：\n\t\n\t\tvar http = require('http');\n\t\tvar options = {\n\t\t\thostname: 'www.laispace.com',\n\t\t\tpost: 80,\n\t\t\tpath: '/',\n\t\t\tmethod: 'GET'\n\t\t};\n\t\tvar req = http.request(options, function (res) {\n\t\t\t// console.log('响应信息：', res);\n\t\t\tconsole.log('响应状态码：', res.statusCode);\n\t\t\tconsole.log('响应头：');\n\t\t\t// 设定编码\n\t\t\tres.setEncoding('utf8');\n\t\t\tvar body = '';\n\t\t\t// 监听响应数据\n\t\t\tres.on('data', function (chunk) {\n\t\t\t\tconsole.log('接收到响应数据：', chunk);\n\t\t\t\tbody += chunk;\n\t\t\t})\n\t\t\tres.on('end', function () {\n\t\t\t\t// console.log('响应数据已全部接受：', body);\n\t\t\t})\n\t\t})\n\t\t// 写入请求数据\n\t\t// req.write('Hello 我是小赖');\n\t\t// 发起请求\n\t\treq.end();\n\t\t\n\t\t// 监听错误，如访问一个不存在的地址时\n\t\treq.on('error', function (err) {\n\t\t\tif (err.code === 'ECONNRESET') {\n\t\t\t\tconsole.log('socket 端口超时')\n\t\t\t} else {\n\t\t\t\tconsole.log('请求发生错误：', err);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t// 设定超时\n\t\treq.setTimeout(1000, function () {\n\t\t\t// 终止请求\n\t\t\t// req.abort()\t\t\n\t\t})\t\n\t\n\t除了使用 http.request(options, callback) 外，\n\t\n\t也可以使用简化的 http.get(options, callback) ，\n\t\n\t其默认使用 GET 并会自动调用 end() 方法发起请求\n\t\n\n- 创建HTTP代理服务器\t\n\n\t\tvar http = require('http');\n\t\tvar url = require('url');\n\t\t// 建立代理服务器\n\t\tvar server = http.createServer(function (clientReq, clientRes) {\n\t\t\tvar url_parts = url.parse(clientReq.url);\n\t\t\tvar options = {\n\t\t\t\thost: 'www.laispace.com', // =>真正访问的网站host\n\t\t\t\tport: 80,\n\t\t\t\tpath: url_parts.pathname,\n\t\t\t\theaders: clientReq.headers\n\t\t\t};\n\t\t\t// 服务器代理客户端发起请求\n\t\t\tvar serverReq = http.get(options, function (serverRes) {\n\t\t\t\t// 代理服务器得到的响应返回给客户端\n\t\t\t\tclientRes.writeHead(serverRes.statusCode, serverRes.headers);\n\t\t\t\t// 代理服务器请求到的数据返回给客户端\n\t\t\t\tserverRes.pipe(clientRes);\n\t\t\t});\t\t\t\n\t\t\t// 将客户端请求\n\t\t\tclientReq.pipe(serverReq);\n\t\t});\n\t\tserver.listen(1234, 'localhost');\n\t\t\n\t保存这段代码到 test.js\n\t\n\t执行 $ node test.js\n\t\n\t浏览器访问 http://localhost:1234 则会访问到 www.laispace.com \n\t\n- 创建HTTPS服务器\t\n\n\tHTTPS 相比于 HTTP：\n\t\t\n\t\t- HTTPS服务器向CA申请证书\n\t\t\n\t\t- HTTPS传输的是经过SSL加密后的数据\n\t\t\n\t\t- HTTPS常用443端口，而HTTP常用80端口\n\t\t\n\tSSL简单介绍：\n\t\t\n\t\t- 私钥和公钥保存在服务器\n\t\t\n\t\t- 公钥发送到客户端，客户端端发送 消息msg1 给服务器\n\t\t\n\t\t- 服务器将 消息msg1 进行哈希运算得到 hash1字符串 并用私钥加密后发送 消息msg2 传回客户端\n\t\t\n\t\t- 客户端使用公钥解密 消息msg2 ，将 消息msg1 进行哈希运算得到 hash2字符串，与hash1字符串 进行比较\n\t\t\n\t\t- 若 hash1 与 hash2 相等则握手成功\n\t\t\n\t\t- 客户端选择加密算法和相应密钥，用公钥加密后发送给服务器\n\t\t\n\t\t- 服务器收到加密算法和响应密钥，开始与客户端传输数据\t\t\n\t1. 创建私钥：\n\t\n\t\t\t$ openssl genrsa -out privatekey.pem 1024\n\t\n\t2. 创建证书签名请求(Certificate Signing Request)文件：\n\t\n\t\t\t$ openssl req -new -key privatekey.pem -out certrequest.csr\n\n\t3. 获取证书：（这里是使用 openssl 创建的测试用的证书-访问网站会被警告，真正的证书要向CA申请）\n\t\t\n\t\t\t$ openssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem\n\t\n\t4. 创建pfx文件（为存储私钥、公钥和证书的一种格式）：\n\t\n\t\t\t$ openssl pkcs12 -export -in certificate.pem -inkey privatekey.pem -out certificate.pfx\n\t\t\t\n\t具备以上条件后，使用 https.createServer(options, [requestListener]) 创建HTTPS服务器：\n\t\n\t\tvar https = require('https');\n\t\tvar fs = require('fs');\n\n\t\tvar pk = fs.readFileSync('./privatekey.pem');\n\t\tvar pc = fs.readFileSync('./certificate.pem');\n\n\t\tvar options = {\n\t\t\tkey: pk,\n\t\t\tcert: pc\n\t\t};\n\t\tvar server = https.createServer(options, function (req, res) {\n\t\t\tres.write('Hello 赖小赖！');\n\t\t\tres.end();\n\t\t});\n\t\tserver.listen(1234, 'localhost', function () {\n\t\t\tconsole.log('HTTPS服务器已开启，正在监听端口1234');\n\t\t})\n\n- 创建HTTPS客户端\n\n\t\tvar https = require('https');\n\n\t\tvar options = {\n\t\t\thostname: 'npmjs.org',\n\t\t\tport: 443,\n\t\t\tpath: '/',\n\t\t\tmethod: 'GET',\n\t\t\tagent: false // 设置为false表示自动选择代理\n\t\t};\n\t\tvar req = https.request(options, function (res) {\n\t\t\tconsole.log('响应状态码：', res.statusCode);\n\t\t\tconsole.log('响应头：', res.headers);\n\t\t\t// 接收数据\n\t\t\tres.on('data', function (chunk) {\n\t\t\t\tconsole.log('响应内容：', chunk.toString());\n\t\t\t});\n\t\t});\n\t\t// 发送请求\n\t\treq.end();\n\t\t// 设置超时\n\t\treq.setTimeout(1000, function () {\n\t\t\tconsole.log('连接超时');\n\t\t\t// 终止请求\n\t\t\treq.abort();\n\t\t})\n\t\treq.on('error', function (err) {\n\t\t\tconsole.log('出错啦！')\n\t\t})\n\n\t除以上提出的区别外，HTTPS服务器的编写（如错误监听、设置超时、关闭服务器等）与HTTP服务器的编写方法基本相同，详见官方文档。\t\t\n\t\n\t默认是GET方法时，也可以使用 https.get(options, callback)，自动调用 end() 方法发起请求，这时HTTPS服务器编写也与HTTP服务器的编写方式相同，参见上文。\n\n\t\t\t\t\t\t\n\t\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\n### 参考资料：\n\n1. [SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n\n\t\t\n\t\n\t\t\n\t\t\n\t\t\n\t\n\t\t\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\n\t\t\t\t\t","slug":"创建http:https服务器与客户端","updated":1418908898000,"excerpt":"<ul>\n<li><p>创建HTTP服务器</p>\n<p>  方法1：</p>\n<pre><code>  <span class=\"keyword\">var</span> server = http.createServer([requestListener])\n  <span class=\"comment\">// requestListener = function (request, response) {</span>\n      <span class=\"comment\">// request 是一个 http.IncomingMessage对象</span>\n      <span class=\"comment\">// response 是一个 http.ServerResponse对象</span>\n  <span class=\"comment\">// }</span>\n</code></pre><p>  方法2：</p>\n<pre><code>  <span class=\"keyword\">var</span> server = http.createServer();\n  <span class=\"comment\">// 监听请求</span>\n  server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(request, response)</span> </span>{\n      <span class=\"comment\">// callback code here.</span>\n  })        \n  <span class=\"comment\">// 监听端口</span>\n  <span class=\"comment\">// port 若为0则分配随机端口号</span>\n  <span class=\"comment\">// host 缺省则监听来自任何ipv4地址的客户端连接</span>\n  <span class=\"comment\">// backlog 默认为511，设定等待队列中最大的连接数，超过则拒绝</span>\n  server.listen(port, [host], [backlog], [<span class=\"keyword\">callback</span>])\n\n  <span class=\"comment\">// 或</span>\n  server.on(<span class=\"string\">'listening'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(request, response)</span> </span>{\n      <span class=\"comment\">// callback code here.</span>\n  })\n</code></pre></li>\n</ul>\n","_id":"xwlizw8d7078999t","comments":true,"layout":"post","photos":[],"link":""},{"title":"初探Javascript的Device API","id":677,"categories":["bzketmbod14nx67f"],"date":1395246696000,"tags":[],"content":"<p>写这篇文时以下非常有用的device api并未被所有浏览器（特别是mobile browser）实现，期待各种新版本的新实现。</p>\n<p>需要用时，在 caniuse.com 查阅就知道当前这个api是否可用。</p>\n<p>&nbsp;</p>\n<a id=\"more\"></a>\n\n<p>[javascript]</p>\n<p>// # 获取地理位置<br> if (navigator.geolocation.getCurrentPosition) {<br> navigator.geolocation.getCurrentPosition(function (position) {<br> // 获取经纬度<br> var lat = position.coords.latitude;<br> var log = position.coords.longitude;</p>\n<p>alert(‘经纬度信息：’, lat, ‘, ‘, log);<br> });<br> } else {<br> console.log(‘啊噢~不支持 navigator.geolocation.getCurrentPosition 方法’)<br> }<br> // # 监听设备旋转<br> if (window.DeviceOrientationEvent) {<br> // 添加监听<br> window.addEventListener(‘deviceorientation’, function (event) {<br> // 获取从左到右的tilt<br> var tiltLR = event.gamma;<br> // 获取从前到后的tilt<br> var tiltFB = event.beta;<br> // 获取设备方向<br> var direction = event.alpha;<br> // console.log(‘设备方向信息：’, tiltLR, tiltFB, direction);<br> });<br> } else {<br> console.log(‘啊噢~ 不支持 window.DeviceOrientationEvent 方法’);<br> }<br> // # 调用摄像头<br> if (navigator.getUserMedia) {<br> navigator.getUserMedia({<br> video: true<br> // 成功<br> }, function (localMediaStream) {<br> // 获取页面中的容器<br> var vid = document.getElementById(‘camera-video’);<br> // 创建 URL对象<br> vid.src = window.URL.createObjectURL(localMediaStream);<br> // 失败<br> }, function (err) {<br> console.log(‘啊噢~调用摄像头失败：’, err);<br> });<br> } else {<br> console.log(‘啊噢~不支持 navigator.getUserMedia 方法’)<br> }</p>\n<p>// # 设置振动<br> if (navigator.vibrate) {<br> // 振动一秒<br> navigator.vibrate(1000);</p>\n<p>// 振动几次<br> navigator.vibrate([500, 250, 500]);<br> } else {<br> console.log(‘啊噢~ 不支持 navigator.vibrate 方法’)<br> }</p>\n<p>// # 感应环境亮度<br> window.addEventListener(‘devicelight’, function (event) {<br> // 单位是 lux<br> var lightLevel = event.value;<br> console.log(‘环境亮度值是：’, lightLevel);<br> });</p>\n<p>// # 查看电源状态<br> if (navigator.battery) {<br> // 电量<br> var level = navigator.battery.level;<br> // 是否在充电<br> var isCharging = navigator.battery.charging;<br> // 还需多久才能充满电<br> var chargingTime = navigator.battery.chargingTime;<br> // 电源还能坚持多久<br> var dischargingTime = navigator.battery.dischargingTime;</p>\n<p>console.log(‘电池状态：’, level, isCharging, chargingTime, dischargingTime);<br> } else {<br> console.log(‘啊噢~ 不支持 navigator.battery 方法’)<br> }</p>\n<p>[/javascript]</p>\n","source":"_posts/初探Javascript的Device API.md","raw":"title: '初探Javascript的Device API'\nid: 677\ncategories:\n  - HTML\ndate: 2014-03-20 00:31:36\ntags:\n---\n\n写这篇文时以下非常有用的device api并未被所有浏览器（特别是mobile browser）实现，期待各种新版本的新实现。\n\n需要用时，在 caniuse.com 查阅就知道当前这个api是否可用。\n\n&nbsp;\n\n<!-- more -->\n\n[javascript]\n\n// # 获取地理位置\n if (navigator.geolocation.getCurrentPosition) {\n navigator.geolocation.getCurrentPosition(function (position) {\n // 获取经纬度\n var lat = position.coords.latitude;\n var log = position.coords.longitude;\n\nalert('经纬度信息：', lat, ', ', log);\n });\n } else {\n console.log('啊噢~不支持 navigator.geolocation.getCurrentPosition 方法')\n }\n // # 监听设备旋转\n if (window.DeviceOrientationEvent) {\n // 添加监听\n window.addEventListener('deviceorientation', function (event) {\n // 获取从左到右的tilt\n var tiltLR = event.gamma;\n // 获取从前到后的tilt\n var tiltFB = event.beta;\n // 获取设备方向\n var direction = event.alpha;\n // console.log('设备方向信息：', tiltLR, tiltFB, direction);\n });\n } else {\n console.log('啊噢~ 不支持 window.DeviceOrientationEvent 方法');\n }\n // # 调用摄像头\n if (navigator.getUserMedia) {\n navigator.getUserMedia({\n video: true\n // 成功\n }, function (localMediaStream) {\n // 获取页面中的容器\n var vid = document.getElementById('camera-video');\n // 创建 URL对象\n vid.src = window.URL.createObjectURL(localMediaStream);\n // 失败\n }, function (err) {\n console.log('啊噢~调用摄像头失败：', err);\n });\n } else {\n console.log('啊噢~不支持 navigator.getUserMedia 方法')\n }\n\n// # 设置振动\n if (navigator.vibrate) {\n // 振动一秒\n navigator.vibrate(1000);\n\n// 振动几次\n navigator.vibrate([500, 250, 500]);\n } else {\n console.log('啊噢~ 不支持 navigator.vibrate 方法')\n }\n\n// # 感应环境亮度\n window.addEventListener('devicelight', function (event) {\n // 单位是 lux\n var lightLevel = event.value;\n console.log('环境亮度值是：', lightLevel);\n });\n\n// # 查看电源状态\n if (navigator.battery) {\n // 电量\n var level = navigator.battery.level;\n // 是否在充电\n var isCharging = navigator.battery.charging;\n // 还需多久才能充满电\n var chargingTime = navigator.battery.chargingTime;\n // 电源还能坚持多久\n var dischargingTime = navigator.battery.dischargingTime;\n\nconsole.log('电池状态：', level, isCharging, chargingTime, dischargingTime);\n } else {\n console.log('啊噢~ 不支持 navigator.battery 方法')\n }\n\n[/javascript]","slug":"初探Javascript的Device API","updated":1418908898000,"excerpt":"<p>写这篇文时以下非常有用的device api并未被所有浏览器（特别是mobile browser）实现，期待各种新版本的新实现。</p>\n<p>需要用时，在 caniuse.com 查阅就知道当前这个api是否可用。</p>\n<p>&nbsp;</p>\n","_id":"rqz1jcjls20icycj","comments":true,"layout":"post","photos":[],"link":""},{"title":"前端工具收集","date":1400937755000,"categories":["f1q8dl6bbauvoh8x"],"tags":["s3hiqm9wbr2k03ig","czf234glkhn8iaux"],"content":"<blockquote>\n<p>这里整理一些我自己用过且觉得好用的工具、类库的玩意~</p>\n<p>欢迎推荐更多好玩的给我：）</p>\n</blockquote>\n<h1 id=\"CSS_类\">CSS 类</h1>\n<ul>\n<li>fontAwesome 海量可伸缩的字体图标</li>\n</ul>\n<p>示例：</p>\n<pre><code>    <span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"//netdna.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css\"</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"stylesheet\"</span>&gt;</span>\n    <span class=\"comment\">&lt;!-- 显示不同尺寸的照相机(camera)图标 --&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">i</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"fa fa-camera-retro fa-lg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">i</span>&gt;</span> fa-lg\n    <span class=\"tag\">&lt;<span class=\"title\">i</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"fa fa-camera-retro fa-2x\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">i</span>&gt;</span> fa-2x\n    <span class=\"tag\">&lt;<span class=\"title\">i</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"fa fa-camera-retro fa-3x\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">i</span>&gt;</span> fa-3x\n    <span class=\"tag\">&lt;<span class=\"title\">i</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"fa fa-camera-retro fa-4x\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">i</span>&gt;</span> fa-4x\n    <span class=\"tag\">&lt;<span class=\"title\">i</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"fa fa-camera-retro fa-5x\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">i</span>&gt;</span> fa-5x\n</code></pre><p>链接：</p>\n<ol>\n<li><a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"external\">http://fontawesome.io/</a></li>\n<li><a href=\"https://github.com/FortAwesome/Font-Awesome\" target=\"_blank\" rel=\"external\">Github</a>        </li>\n</ol>\n<h1 id=\"工具类\">工具类</h1>\n<ul>\n<li>component 快速安装第三方类库</li>\n</ul>\n<p>示例：</p>\n<pre><code>1. 安装 component\n\n    $ npm install -g component\n\n2. 创建配置文件 component.json\n\n    {\n      \"name\": \"getting-started-with-component\",\n      \"dependencies\": {\n        \"necolas/normalize.css\": \"^3.0.0\"  // 依赖normalize.css类库\n      },\n      \"scripts\": [\"index.js\"],    // 引入自定义的js\n      \"styles\": [\"index.css\"]    // 引入自定义的css\n    }\n\n2. 创建 index.html\n\n    // index.html 注意这里只有 build/build.css 和 build/build.js 文件\n    <span class=\"doctype\">&lt;!DOCTYPE html&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">html</span>&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">title</span>&gt;</span>Getting Started with Component<span class=\"tag\">&lt;/<span class=\"title\">title</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"stylesheet\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"build/build.css\"</span>&gt;</span>\n      <span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Getting Started with Component<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"blink\"</span>&gt;</span>Woo!<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"build/build.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n      <span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span>    \n\n3. 创建 index.css\n    * {\n          box-sizing: border-box;\n    }\n\n4. 创建 index.js\n\n    console.log('Hello component！')\n\n5. 使用 build 命令进行构建\n\n    $ component build\n\n6. 打开 index.html 看看吧：）\n</code></pre><p>链接：</p>\n<ol>\n<li><a href=\"http://component.io/\" target=\"_blank\" rel=\"external\">http://component.io/</a></li>\n<li><a href=\"https://github.com/component/guide/blob/master/component/getting-started.md\" target=\"_blank\" rel=\"external\">Guide</a></li>\n</ol>\n","source":"_posts/前端工具收集.md","raw":"title: 前端工具收集\n\ndate: 2014-05-24 21:22:35\n\ncategories: Node\n\ntags: [Tools, Notes]\n\n---\n\n> 这里整理一些我自己用过且觉得好用的工具、类库的玩意~\n\n> 欢迎推荐更多好玩的给我：）\n\n# CSS 类\n\n- fontAwesome 海量可伸缩的字体图标\n\n示例：\n\n\t\t<link href=\"//netdna.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n\t\t<!-- 显示不同尺寸的照相机(camera)图标 -->\n\t\t<i class=\"fa fa-camera-retro fa-lg\"></i> fa-lg\n\t\t<i class=\"fa fa-camera-retro fa-2x\"></i> fa-2x\n\t\t<i class=\"fa fa-camera-retro fa-3x\"></i> fa-3x\n\t\t<i class=\"fa fa-camera-retro fa-4x\"></i> fa-4x\n\t\t<i class=\"fa fa-camera-retro fa-5x\"></i> fa-5x\n\n链接：\n\n1. [http://fontawesome.io/](http://fontawesome.io/)\n2. [Github](https://github.com/FortAwesome/Font-Awesome)\t\t\n\t\t\n\n# 工具类\n\n- component 快速安装第三方类库\n\n示例：\n\n\t1. 安装 component\n\t\t\n\t\t$ npm install -g component\n\t\t\n\t2. 创建配置文件 component.json\n\t\t\n\t\t{\n\t\t  \"name\": \"getting-started-with-component\",\n\t\t  \"dependencies\": {\n\t\t    \"necolas/normalize.css\": \"^3.0.0\"  // 依赖normalize.css类库\n\t\t  },\n\t\t  \"scripts\": [\"index.js\"],\t// 引入自定义的js\n\t\t  \"styles\": [\"index.css\"]\t// 引入自定义的css\n\t\t}\n\t\t\n\t2. 创建 index.html\n\t\n\t\t// index.html 注意这里只有 build/build.css 和 build/build.js 文件\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t  <head>\n\t\t    <title>Getting Started with Component</title>\n\t\t    <link rel=\"stylesheet\" href=\"build/build.css\">\n\t\t  </head>\n\t\t  <body>\n\t\t    <h1>Getting Started with Component</h1>\n\t\t    <p class=\"blink\">Woo!</p>\n\t\t    <script src=\"build/build.js\"></script>\n\t\t  </body>\n\t\t</html>\t\n\t\t\n\t3. 创建 index.css\n\t\t* {\n \t\t\t box-sizing: border-box;\n\t\t}\n\t\t\n\t4. 创建 index.js\n\t\n\t\tconsole.log('Hello component！')\n\t\t\n\t5. 使用 build 命令进行构建\n\t\t\n\t\t$ component build\n\n\t6. 打开 index.html 看看吧：）\n\n\n链接：\n\n1. [http://component.io/](http://component.io/)\n2. [Guide](https://github.com/component/guide/blob/master/component/getting-started.md)\n\n\n\n\n\n\n\n","slug":"前端工具收集","updated":1418908898000,"excerpt":"","_id":"1r52i15q8w1k3rwf","comments":true,"layout":"post","photos":[],"link":""},{"title":"图片预加载和判断图片是否加载完成","tags":[],"id":526,"categories":["be592wtznj5wcvwn"],"date":1384342627000,"content":"<h2 id=\"使用Image()对象预加载图片：\">使用Image()对象预加载图片：</h2>\n<p>var imgsSrcArray = [src1, src2, src3, src4, src5];<br>需要预加载这些图片，以便点击上一张或下一张按钮的时候，能显示对应的图片。<br>使用JS自带的 Image对象 实现图片预加载：<br>[javascript]<br> var images= [];<br> var len = imgsSrcArray.length;<br> for(var i = 0; i &lt; len; i++) {<br>           var img = new Image();<br>                 img.src = imgsScrArray[i];<br>           images.push(img)<br> }<br> [/javascript]</p>\n<p>这样就实现了将多个图片进行了预加载，缓存到了images数组里。</p>\n<h2 id=\"使用img-onload，当图片加载完成时执行操作：\">使用img.onload，当图片加载完成时执行操作：</h2>\n<p>[javascript]<br> img.onload = function(){<br>      // console.log(‘图片加载完成’)<br> };<br> [/javascript]</p>\n<h2 id=\"判断图片是否已经加载完成则：需要判断_img-complete属性是否为true：\">判断图片是否已经加载完成则：需要判断 img.complete属性是否为true：</h2>\n<p>if (img.complete) {<br>// 执行操作<br>}</p>\n<h2 id=\"优化刚刚的预加载函数，封装一个预加载非固定数目图片的函数\">优化刚刚的预加载函数，封装一个预加载非固定数目图片的函数</h2>\n<p>[javascript]<br> var images = [];<br> function preloadImgs() {<br> // 利用arguments参数判断需要加载的图片数目<br>      var len = preloadImgs.arguments.length;<br>      for (var i=0; i&lt;len; i++) {<br>           images[i] = new Image();<br>           images[i].src = preloadImgs.arguments[i];<br>      }<br> }<br> [/javascript]</p>\n<p>// 或传入数组<br>[javascript]<br> var images = [];<br> function preloadImgs(srcArray) {<br> // 利用arguments参数判断需要加载的图片数目<br>      var len = preloadImgs.arguments.length;<br>      for (var i=0; i&lt;len; i++) {<br>           images[i] = new Image();<br>           images[i].src = srcArray[i];<br>      }<br> }<br> [/javascript]</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Image对象的其他方法：\">Image对象的其他方法：</h2>\n<p>img.onabort() 图片加载被中断时执行<br>img.onload()  图片加载成功时执行<br>img.onerror() 图片加载失败时执行</p>\n<p>Image对象的其他属性可见参考资料：<br><a href=\"span style=&quot;text-decoration: underline;&quot;&gt;https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement&lt;/span\">参考资料</a><br><a href=\"span style=&quot;text-decoration: underline;&quot;&gt;http://www.zhihu.com/question/19871135&lt;/span\">参考资料</a><br><a href=\"span style=&quot;text-decoration: underline;&quot;&gt;http://www.csdn.net/article/2013-10-15/2817187-3-ways-preload-images-css-javascript-ajax&lt;/span\">参考资料</a></p>\n","source":"_posts/图片预加载和判断图片是否加载完成.md","raw":"title: 图片预加载和判断图片是否加载完成\ntags:\nid: 526\ncategories:\n  - Javascript\ndate: 2013-11-13 19:37:07\n---\n\n## 使用Image()对象预加载图片：\nvar imgsSrcArray = [src1, src2, src3, src4, src5];\n需要预加载这些图片，以便点击上一张或下一张按钮的时候，能显示对应的图片。\n使用JS自带的 Image对象 实现图片预加载：\n[javascript]\n var images= [];\n var len = imgsSrcArray.length;\n for(var i = 0; i &lt; len; i++) {\n           var img = new Image();\n                 img.src = imgsScrArray[i];\n           images.push(img)\n }\n [/javascript]\n\n这样就实现了将多个图片进行了预加载，缓存到了images数组里。\n\n## 使用img.onload，当图片加载完成时执行操作：\n[javascript]\n img.onload = function(){\n      // console.log(‘图片加载完成')\n };\n [/javascript]\n\n## 判断图片是否已经加载完成则：需要判断 img.complete属性是否为true：\nif (img.complete) {\n// 执行操作\n}\n\n## 优化刚刚的预加载函数，封装一个预加载非固定数目图片的函数\n[javascript]\n var images = [];\n function preloadImgs() {\n // 利用arguments参数判断需要加载的图片数目\n      var len = preloadImgs.arguments.length;\n      for (var i=0; i&lt;len; i++) {\n           images[i] = new Image();\n           images[i].src = preloadImgs.arguments[i];\n      }\n }\n [/javascript]\n\n// 或传入数组\n[javascript]\n var images = [];\n function preloadImgs(srcArray) {\n // 利用arguments参数判断需要加载的图片数目\n      var len = preloadImgs.arguments.length;\n      for (var i=0; i&lt;len; i++) {\n           images[i] = new Image();\n           images[i].src = srcArray[i];\n      }\n }\n [/javascript]\n\n<!-- more -->\n\n## Image对象的其他方法：\nimg.onabort() 图片加载被中断时执行\nimg.onload()  图片加载成功时执行\nimg.onerror() 图片加载失败时执行\n\nImage对象的其他属性可见参考资料：\n[参考资料](<span style=\"text-decoration: underline;\">https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement</span> )\n[参考资料](<span style=\"text-decoration: underline;\">http://www.zhihu.com/question/19871135</span> )\n[参考资料](<span style=\"text-decoration: underline;\">http://www.csdn.net/article/2013-10-15/2817187-3-ways-preload-images-css-javascript-ajax</span> )","slug":"图片预加载和判断图片是否加载完成","updated":1418908898000,"excerpt":"<h2 id=\"使用Image()对象预加载图片：\">使用Image()对象预加载图片：</h2>\n<p>var imgsSrcArray = [src1, src2, src3, src4, src5];<br>需要预加载这些图片，以便点击上一张或下一张按钮的时候，能显示对应的图片。<br>使用JS自带的 Image对象 实现图片预加载：<br>[javascript]<br> var images= [];<br> var len = imgsSrcArray.length;<br> for(var i = 0; i &lt; len; i++) {<br>           var img = new Image();<br>                 img.src = imgsScrArray[i];<br>           images.push(img)<br> }<br> [/javascript]</p>\n<p>这样就实现了将多个图片进行了预加载，缓存到了images数组里。</p>\n<h2 id=\"使用img-onload，当图片加载完成时执行操作：\">使用img.onload，当图片加载完成时执行操作：</h2>\n<p>[javascript]<br> img.onload = function(){<br>      // console.log(‘图片加载完成’)<br> };<br> [/javascript]</p>\n<h2 id=\"判断图片是否已经加载完成则：需要判断_img-complete属性是否为true：\">判断图片是否已经加载完成则：需要判断 img.complete属性是否为true：</h2>\n<p>if (img.complete) {<br>// 执行操作<br>}</p>\n<h2 id=\"优化刚刚的预加载函数，封装一个预加载非固定数目图片的函数\">优化刚刚的预加载函数，封装一个预加载非固定数目图片的函数</h2>\n<p>[javascript]<br> var images = [];<br> function preloadImgs() {<br> // 利用arguments参数判断需要加载的图片数目<br>      var len = preloadImgs.arguments.length;<br>      for (var i=0; i&lt;len; i++) {<br>           images[i] = new Image();<br>           images[i].src = preloadImgs.arguments[i];<br>      }<br> }<br> [/javascript]</p>\n<p>// 或传入数组<br>[javascript]<br> var images = [];<br> function preloadImgs(srcArray) {<br> // 利用arguments参数判断需要加载的图片数目<br>      var len = preloadImgs.arguments.length;<br>      for (var i=0; i&lt;len; i++) {<br>           images[i] = new Image();<br>           images[i].src = srcArray[i];<br>      }<br> }<br> [/javascript]</p>\n","_id":"cb4jfl64br2crlws","comments":true,"layout":"post","photos":[],"link":""},{"title":"圣诞贺卡-世界末日-冬至-想家","tags":[],"id":255,"categories":["9wpmord5537fjtil"],"date":1356095824000,"content":"<p>花了几天时间，代表文教制作了一个圣诞贺卡送个热心的外国友人，向他们展示我们文教一年的成果和对他们表示感谢。</p>\n<p>对我而言，这算是一个“小项目”吧。</p>\n<p>涉水前端时间不长，没什么经验，写这些代码都是摸着石头过河，一步一步调兼容做出来的。</p>\n<p>Lucy给的需求，相当于客户甲方了。也就是说，这是在客户提供需求的情况下，我自行设计制作出来的一份网站（虽然只是简单的静态页面，不涉及后台交互）。</p>\n<p>不清楚那些接受贺卡的人用什么浏览器，没敢多用H5的特性，并且对该死的低版本IE没有做很好的兼容，希望不会搞砸。</p>\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/12/2012-12-21_210840.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/12/2012-12-21_210840.jpg\" alt=\"\" title=\"2012-12-21_210840\"></a></p>\n<p>嗯，上<a href=\"http://www.chinepro.org/christmas2012/\" target=\"_blank\" rel=\"external\">demo</a>, <a href=\"http://www.chinepro.org/christmas2012/\" target=\"_blank\" rel=\"external\">http://www.chinepro.org/christmas2012/</a></p>\n<p>&nbsp;</p>\n<p>嗯，很明显，我的美感还是很欠佳，需要不断地弥补。</p>\n<p>今天是世界末日也是冬至，给爷爷打了电话，他说家里的汤圆好吃。今晚班里组织在三个宿舍打边炉吃汤圆，我没有去。</p>\n<p>&nbsp;</p>\n<p>树欲静而风不止，子欲养而亲不待。二老八十高龄，身体不好。</p>\n<p>我只想着家。</p>\n<p>呵呵，跑题了。</p>\n<p>&nbsp;</p>\n","source":"_posts/圣诞贺卡-世界末日-冬至-想家.md","raw":"title: 圣诞贺卡-世界末日-冬至-想家\ntags:\nid: 255\ncategories:\n  - 来思碑记\ndate: 2012-12-21 21:17:04\n---\n\n花了几天时间，代表文教制作了一个圣诞贺卡送个热心的外国友人，向他们展示我们文教一年的成果和对他们表示感谢。\n\n对我而言，这算是一个“小项目”吧。\n\n涉水前端时间不长，没什么经验，写这些代码都是摸着石头过河，一步一步调兼容做出来的。\n\nLucy给的需求，相当于客户甲方了。也就是说，这是在客户提供需求的情况下，我自行设计制作出来的一份网站（虽然只是简单的静态页面，不涉及后台交互）。\n\n不清楚那些接受贺卡的人用什么浏览器，没敢多用H5的特性，并且对该死的低版本IE没有做很好的兼容，希望不会搞砸。\n\n[![](http://www.laispace.com/wp-content/uploads/2012/12/2012-12-21_210840.jpg \"2012-12-21_210840\")](http://www.laispace.com/wp-content/uploads/2012/12/2012-12-21_210840.jpg)\n\n嗯，上[demo](http://www.chinepro.org/christmas2012/), [http://www.chinepro.org/christmas2012/](http://www.chinepro.org/christmas2012/)\n\n&nbsp;\n\n嗯，很明显，我的美感还是很欠佳，需要不断地弥补。\n\n今天是世界末日也是冬至，给爷爷打了电话，他说家里的汤圆好吃。今晚班里组织在三个宿舍打边炉吃汤圆，我没有去。\n\n&nbsp;\n\n树欲静而风不止，子欲养而亲不待。二老八十高龄，身体不好。\n\n我只想着家。\n\n呵呵，跑题了。\n\n&nbsp;","slug":"圣诞贺卡-世界末日-冬至-想家","updated":1418908898000,"excerpt":"","_id":"hvio09xu5mn51jtb","comments":true,"layout":"post","photos":[],"link":""},{"title":"坎坷大学路-大三下","id":682,"categories":["9wpmord5537fjtil"],"date":1395925496000,"tags":[],"content":"<h1 id=\"前言1\">前言1</h1>\n<p>上一份鸡汤写的是自己的《<span style=\"text-decoration: underline;\">坎坷大学路</span>》，写在大三上学期。<br>刚回去看了一下，感觉这份鸡汤对自己还是挺补的。<br>如果你也喜欢这碗汤的话，别忘了我没有给你汤勺。</p>\n<p>每个人都应该拥有自己的汤勺，如果你没有，那就赶紧为自己打造一个。</p>\n<h1 id=\"前言2\">前言2</h1>\n<p>昨天拿到阿里的实习生offer，部门老大说一般实习生进来就是个B类（Normal）但觉得你OK，为你申请了一个A类（即Top类），<br>本来说今天还会有个高级技术官对我加多一轮审核，但意外的是今天下午部门老大又告诉我已经在审批我的入职了，只需要等hr来个电话确认一下。</p>\n<p>顿时欣喜若狂。<br>原以为找个实习会挺艰辛的，所以我搜集了那么多面试题打算开刷。<br>可没料到还没来得及准备，简历都还没完善，百度的前辈就给我发了offer，谈好了待遇。<br>更幸运的是，等待很久的阿里终于来了二面，并在两天内就给我发了offer，喜出望外。</p>\n<p>来不及准备，就已经结束了。<br>现在才发现，我其实一直在准备。<br>而且还发现，我多了好几个选择。<br>真是幸运。</p>\n<p>部门老大说：<br>『放心，做了那么多年校招，我还没看偏过。』<br>『是你自己的能力决定的啊。』</p>\n<p>我最喜欢的感觉莫过于受到前辈的肯定了。<br>继续加油。</p>\n<h1 id=\"前言3\">前言3</h1>\n<p>按我写日志的频率，半年会有一篇鸡汤文，当然这篇也不例外了。<br>以下算是我对自己大学提前结束的一个总结，也算是给半年后的自己做个铺垫吧。</p>\n<p>不过，好像不懂得怎么写文章了，就用对几个关键字的解释作为佐料吧：）</p>\n<h1 id=\"信仰\">信仰</h1>\n<p>『  嗨，小赖，你要知道：<br>不设限，不止步，不屈服。』<br>这对我而言，是真理，不论我处于什么行业。</p>\n<h1 id=\"兴趣\">兴趣</h1>\n<p>兴趣是最好的老师，菜鸟可以带着兴趣先飞，虽苦尤乐，乐此不疲。</p>\n<p>我一直坚信那句话：</p>\n<p>『大学就是不断尝试，直到找到自己的生存方式。』</p>\n<p>我对这句话的理解就是，在多种可能的探索下，找到结合自身性格、兴趣、甚至是职业发展的结合点。</p>\n<p>没有兴趣的驱动，我想我也不会对自己的职业发展有一个较好的把握了。</p>\n<h1 id=\"专业\">专业</h1>\n<p>这是高能线，我只知道大多数人都不会专业对口就业。</p>\n<p>理解这点，拓展视野就是不涉限了。</p>\n<h1 id=\"成绩\">成绩</h1>\n<p>这也是高能线，说多无用，我只知道你得明白自己成绩为什么好或差。</p>\n<p>并且，除了成绩，你还得知道你还拥有什么或缺少什么。</p>\n<p>在当下中国，只有成绩的人一抓一大把，谁会稀罕你。</p>\n<p>除非你有亮点。</p>\n<h1 id=\"职业\">职业</h1>\n<p>『大学就是不断尝试，直到找到自己的生存方式。』</p>\n<p>这句话存在一个误区，即尝试太多后，若没有找到自己的定位，会不会因此对自己丧失信心呢？</p>\n<p>会，如果你不断尝试打手游还是打网游还是打单机还是打边炉，或者不断尝试泡各种妹子XD</p>\n<p>或者不会，如果你不断尝试探索自己的兴趣、专长，或者树立自己对自身所处行业的理解的话。</p>\n<p>你早点认识自己，理解你所在的行业的话，你就先飞起来吧，你飞高了谁会知道你其实是个笨鸟呢？</p>\n<p>嗨！我就是这只幸运的笨鸟。</p>\n<p>『一个人如果没有思想的话，那跟咸鱼有什么区别？』</p>\n<p>当然啦，有思想就能让咸鱼翻身啦：）</p>\n<p>笨鸟如果能学习到飞翔的方法，多扑腾扑腾翅膀就行了，比起那些不努力的人，根本轮不到他们拼天赋轮不到你心生自卑。</p>\n<h1 id=\"生活\">生活</h1>\n<p>不设限于视野，不止步于进步，不屈服于当下生活。</p>\n<p>前阵子看到 L·X 童鞋发的一个说说是这么写的：</p>\n<p>『当你月薪五千后 你就会觉得那些用iPhone土豪金的人没有装逼 当你月薪破万后 你就会觉得那些拿着单反的人也没有装逼 当你一年能赚50万后 你就会觉得那些奔驰宝马飙车党们也没有装逼 只是自己没能力。』</p>\n<p>卧槽！这是装逼后给大家的最好解释了。</p>\n<p>嫌别人装逼的话，就提高自己的水平，咱也装呗。</p>\n<p>自己在装逼的话，就提高自己的水平，提升逼格。</p>\n<h1 id=\"超越\">超越</h1>\n<p>永远要知道自己可以超越你心目中的牛人，永远相信只要努力，你就可以快一步达到这个目标。</p>\n<p>打败了你心目中的牛人，再找个不能望其项背的新神话，然后继续去尝试打败吧。</p>\n<p>Yes, you can.</p>\n<p>感谢自己，感谢我的小伙伴，感谢赏识我的前辈。</p>\n<p>期待下个半年的自己又会有一个新的进步。</p>\n","source":"_posts/坎坷大学路-大三下.md","raw":"title: 坎坷大学路-大三下\nid: 682\ncategories:\n  - 来思碑记\ndate: 2014-03-27 21:04:56\ntags:\n---\n\n# 前言1\n\n上一份鸡汤写的是自己的《<span style=\"text-decoration: underline;\">坎坷大学路</span>》，写在大三上学期。\n刚回去看了一下，感觉这份鸡汤对自己还是挺补的。\n如果你也喜欢这碗汤的话，别忘了我没有给你汤勺。\n\n每个人都应该拥有自己的汤勺，如果你没有，那就赶紧为自己打造一个。\n\n# 前言2\n\n昨天拿到阿里的实习生offer，部门老大说一般实习生进来就是个B类（Normal）但觉得你OK，为你申请了一个A类（即Top类），\n本来说今天还会有个高级技术官对我加多一轮审核，但意外的是今天下午部门老大又告诉我已经在审批我的入职了，只需要等hr来个电话确认一下。\n\n顿时欣喜若狂。\n原以为找个实习会挺艰辛的，所以我搜集了那么多面试题打算开刷。\n可没料到还没来得及准备，简历都还没完善，百度的前辈就给我发了offer，谈好了待遇。\n更幸运的是，等待很久的阿里终于来了二面，并在两天内就给我发了offer，喜出望外。\n\n来不及准备，就已经结束了。\n现在才发现，我其实一直在准备。\n而且还发现，我多了好几个选择。\n真是幸运。\n\n部门老大说：\n『放心，做了那么多年校招，我还没看偏过。』\n『是你自己的能力决定的啊。』\n\n我最喜欢的感觉莫过于受到前辈的肯定了。\n继续加油。\n\n# 前言3\n\n按我写日志的频率，半年会有一篇鸡汤文，当然这篇也不例外了。\n以下算是我对自己大学提前结束的一个总结，也算是给半年后的自己做个铺垫吧。\n\n不过，好像不懂得怎么写文章了，就用对几个关键字的解释作为佐料吧：）\n\n# 信仰\n\n『  嗨，小赖，你要知道：\n不设限，不止步，不屈服。』\n这对我而言，是真理，不论我处于什么行业。\n\n# 兴趣\n\n兴趣是最好的老师，菜鸟可以带着兴趣先飞，虽苦尤乐，乐此不疲。\n\n我一直坚信那句话：\n\n『大学就是不断尝试，直到找到自己的生存方式。』\n\n我对这句话的理解就是，在多种可能的探索下，找到结合自身性格、兴趣、甚至是职业发展的结合点。\n\n没有兴趣的驱动，我想我也不会对自己的职业发展有一个较好的把握了。\n\n# 专业\n\n这是高能线，我只知道大多数人都不会专业对口就业。\n\n理解这点，拓展视野就是不涉限了。\n\n# 成绩\n\n这也是高能线，说多无用，我只知道你得明白自己成绩为什么好或差。\n\n并且，除了成绩，你还得知道你还拥有什么或缺少什么。\n\n在当下中国，只有成绩的人一抓一大把，谁会稀罕你。\n\n除非你有亮点。\n\n# 职业\n\n『大学就是不断尝试，直到找到自己的生存方式。』\n\n这句话存在一个误区，即尝试太多后，若没有找到自己的定位，会不会因此对自己丧失信心呢？\n\n会，如果你不断尝试打手游还是打网游还是打单机还是打边炉，或者不断尝试泡各种妹子XD\n\n或者不会，如果你不断尝试探索自己的兴趣、专长，或者树立自己对自身所处行业的理解的话。\n\n你早点认识自己，理解你所在的行业的话，你就先飞起来吧，你飞高了谁会知道你其实是个笨鸟呢？\n\n嗨！我就是这只幸运的笨鸟。\n\n『一个人如果没有思想的话，那跟咸鱼有什么区别？』\n\n当然啦，有思想就能让咸鱼翻身啦：）\n\n笨鸟如果能学习到飞翔的方法，多扑腾扑腾翅膀就行了，比起那些不努力的人，根本轮不到他们拼天赋轮不到你心生自卑。\n\n# 生活\n\n不设限于视野，不止步于进步，不屈服于当下生活。\n\n前阵子看到 L·X 童鞋发的一个说说是这么写的：\n\n『当你月薪五千后 你就会觉得那些用iPhone土豪金的人没有装逼 当你月薪破万后 你就会觉得那些拿着单反的人也没有装逼 当你一年能赚50万后 你就会觉得那些奔驰宝马飙车党们也没有装逼 只是自己没能力。』\n\n卧槽！这是装逼后给大家的最好解释了。\n\n嫌别人装逼的话，就提高自己的水平，咱也装呗。\n\n自己在装逼的话，就提高自己的水平，提升逼格。\n\n# 超越\n\n永远要知道自己可以超越你心目中的牛人，永远相信只要努力，你就可以快一步达到这个目标。\n\n打败了你心目中的牛人，再找个不能望其项背的新神话，然后继续去尝试打败吧。\n\nYes, you can.\n\n感谢自己，感谢我的小伙伴，感谢赏识我的前辈。\n\n期待下个半年的自己又会有一个新的进步。","slug":"坎坷大学路-大三下","updated":1418908898000,"excerpt":"","_id":"aiqfhb8qv5s26r68","comments":true,"layout":"post","photos":[],"link":""},{"title":"坎坷大学路","id":523,"categories":["9wpmord5537fjtil"],"date":1383492029000,"tags":[],"content":"<p>今天晚上UC俱乐部开了个分享会，难得停下来倾听别人的成长，几分感触。<br>WT 分享了ACM竞赛的经验，现在保送到新加坡国立大学硕博连读5年，真是艳羡，不能望其项背。<br>SZ  分享了Android的开发的体会，而我则给大家介绍了『前端』这个新词汇。</p>\n<p>说长也不长，说短亦不短，转眼现在已经大三。<br>好像一直在瞎忙，忙得忘记停下来回头看看自己遇到了哪些坎，忘记停下来总结总结自己的教训。</p>\n<p>这篇文，就算是给自己一个安慰吧。<br><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/11/Screen-Shot-2013-11-03-at-11.16.04-PM.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/11/Screen-Shot-2013-11-03-at-11.16.04-PM.png\" alt=\"\" title=\"Screen Shot 2013-11-03 at 11.16.04 PM\"></a><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/11/Screen-Shot-2013-11-03-at-11.16.04-PM.png\" target=\"_blank\" rel=\"external\">\n</a><br><strong># 教训</strong></p>\n<p>&gt; 教训1：大学生谓之『大』，异于『小』学生，异于『中』学生。<br>大学生该有『大』的风范，该有高等教育背景下的专业素养，比如：你应该用你的专业视觉去剖析社会现象，而非做盲目从众的五毛党。</p>\n<p>&gt; 教训2：大学生谓之『学生』，同于『小』学生，同于『中』学生。大学生的本质仍在于『学习』，可以用不同的学习方式来帮助自己成长，但不能离其宗-你得不断在学习。</p>\n<p>按《原本大学》的说法，大学之道，在明明德，在亲民，在止于至善。知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得。这『大学』不一定指代我们在读的『大学』，但作为一个成年人，就该有这方面的担当吧。<br>按胡适先生的说话，我们要有独立之思想，自由之精神。<br>唉，作为一个自私又功利的个体大学生，我其实没有没有那么高尚，我对自己大学的定义是：<br>认识自己，认识朋友，认识世界。<br>这真是一个无比艰难的过程。<br><strong># 经验</strong></p>\n<p>&gt; 经验1：认识自己在于你如何给自己定位，是想做A，还是做B。<br>我不比别人聪明，这个智商是硬伤，那就该结合自身，发挥特长，将这仅有的一丁点智商用到极致。<br>靠几分努力，加几分坚持，慢慢发现你总能打败那些毫不上进的人。而面对那些不能望其项背的牛人，你则必须非常努力，才有可能迎头赶上。</p>\n<p>&gt; 经验2：兴趣还真是个最好的老师。<br>人生短暂仅有几十年，怎么个过法，我可不想听天由命。毕业后，三分之一的时间在职场，三分之一的时间在家庭，还三分之一的时间在————-做梦。我假定我原来很悲哀，只有后面三分之二是快乐的（够自卑了吧）。但如果，我能在职场上做一份感兴趣的工作，那么就可以提高这个快乐值啊，好像人生又会多个三分之一。有兴趣还不够，你还得坚持。</p>\n<p>&gt; 经验3：预则立，不预则废。<br>一直缠绕我的无非就是拖延症了，有时候事一多，情绪上就会闹例假，啥都不想干。<br>但在死亡Deadline降临之时，我就必须咬紧牙关应付任务。这时候诸葛亮地想一想，这事早点做认真做其实可以做得更好一些。<br>真是事前猪一样啊。<br>事多不代表会做的不好（尽管这可能是残酷的结果），你必须根据权重来执行任务，才不会累坏身体搞坏心情。<br>&gt; 经验4：静心才能成事，多思才能致远。<br>能安静做一件事情，其实就是在享受一种奢侈。要学会制造、享受这种奢侈。<br>多思就有多个可能多个方案，不给自己设限，才能给自己留下更多空间。</p>\n<p>&gt;经验4：不重要的东西不代表可以不学习。<br>鬼知道你学的这点皮毛哪一天就真正用上了呢？<br>这体现在当我以一个比较Open的心态去学习的时候，发现了一个真理:<br>『The more you know, the more you know you don’s know.』<br>而恰恰遇上这种未知的可能时，你得逼自己一把去尝试学会新的知识或者工具。<br>『When you don’t know how to do it, just do it as if you know how to do it.』</p>\n<p>唉，机会失去太多。<br>但，仍有很多可能。</p>\n<p>今天终于可以静下来，给自己灌鸡汤打鸡血，满血复活好好干。</p>\n<p>你要相信，牛人的高度不是企及。<br>是你从一开始就放弃了自己。<br>你知道吗，那些牛人嘲笑你的不是你的水平菜，而是你的态度低。<br>凭大多数人的努力程度之低，根本轮不到你拼天赋。<br>你必须非常努力，才能在别人眼里看上去毫不费力。</p>\n<p>要不试试？想想如果你一不小心在一个领域坚持了十年，可能你会发现：<br>1. 那群智商有余但定力不足的人们，玩了几年就坚持不下去了；<br>2. 前一波的前辈们不是退休了，就是挂了（ - - 我真缺德）。<br>3. 你一不小心坚持了下来，哎呀妈啊，你智商都没用上就实现屌丝逆袭了，这得多励志啊 XD 。』</p>\n<p>嗨，小赖，你要知道：<br>不设限，不止步，不屈服。</p>\n","source":"_posts/坎坷大学路.md","raw":"title: 坎坷大学路\nid: 523\ncategories:\n  - 来思碑记\ndate: 2013-11-03 23:20:29\ntags:\n---\n\n今天晚上UC俱乐部开了个分享会，难得停下来倾听别人的成长，几分感触。\nWT 分享了ACM竞赛的经验，现在保送到新加坡国立大学硕博连读5年，真是艳羡，不能望其项背。\nSZ  分享了Android的开发的体会，而我则给大家介绍了『前端』这个新词汇。\n\n说长也不长，说短亦不短，转眼现在已经大三。\n好像一直在瞎忙，忙得忘记停下来回头看看自己遇到了哪些坎，忘记停下来总结总结自己的教训。\n\n这篇文，就算是给自己一个安慰吧。\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/11/Screen-Shot-2013-11-03-at-11.16.04-PM.png \"Screen Shot 2013-11-03 at 11.16.04 PM\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/11/Screen-Shot-2013-11-03-at-11.16.04-PM.png)[\n](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/11/Screen-Shot-2013-11-03-at-11.16.04-PM.png)\n**# 教训**\n\n&gt; 教训1：大学生谓之『大』，异于『小』学生，异于『中』学生。\n大学生该有『大』的风范，该有高等教育背景下的专业素养，比如：你应该用你的专业视觉去剖析社会现象，而非做盲目从众的五毛党。\n\n&gt; 教训2：大学生谓之『学生』，同于『小』学生，同于『中』学生。大学生的本质仍在于『学习』，可以用不同的学习方式来帮助自己成长，但不能离其宗-你得不断在学习。\n\n按《原本大学》的说法，大学之道，在明明德，在亲民，在止于至善。知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得。这『大学』不一定指代我们在读的『大学』，但作为一个成年人，就该有这方面的担当吧。\n按胡适先生的说话，我们要有独立之思想，自由之精神。\n唉，作为一个自私又功利的个体大学生，我其实没有没有那么高尚，我对自己大学的定义是：\n认识自己，认识朋友，认识世界。\n这真是一个无比艰难的过程。\n**# 经验**\n\n&gt; 经验1：认识自己在于你如何给自己定位，是想做A，还是做B。\n我不比别人聪明，这个智商是硬伤，那就该结合自身，发挥特长，将这仅有的一丁点智商用到极致。\n靠几分努力，加几分坚持，慢慢发现你总能打败那些毫不上进的人。而面对那些不能望其项背的牛人，你则必须非常努力，才有可能迎头赶上。\n\n&gt; 经验2：兴趣还真是个最好的老师。\n人生短暂仅有几十年，怎么个过法，我可不想听天由命。毕业后，三分之一的时间在职场，三分之一的时间在家庭，还三分之一的时间在---------做梦。我假定我原来很悲哀，只有后面三分之二是快乐的（够自卑了吧）。但如果，我能在职场上做一份感兴趣的工作，那么就可以提高这个快乐值啊，好像人生又会多个三分之一。有兴趣还不够，你还得坚持。\n\n&gt; 经验3：预则立，不预则废。\n一直缠绕我的无非就是拖延症了，有时候事一多，情绪上就会闹例假，啥都不想干。\n但在死亡Deadline降临之时，我就必须咬紧牙关应付任务。这时候诸葛亮地想一想，这事早点做认真做其实可以做得更好一些。\n真是事前猪一样啊。\n事多不代表会做的不好（尽管这可能是残酷的结果），你必须根据权重来执行任务，才不会累坏身体搞坏心情。\n&gt; 经验4：静心才能成事，多思才能致远。\n能安静做一件事情，其实就是在享受一种奢侈。要学会制造、享受这种奢侈。\n多思就有多个可能多个方案，不给自己设限，才能给自己留下更多空间。\n\n&gt;经验4：不重要的东西不代表可以不学习。\n鬼知道你学的这点皮毛哪一天就真正用上了呢？\n这体现在当我以一个比较Open的心态去学习的时候，发现了一个真理:\n『The more you know, the more you know you don’s know.』\n而恰恰遇上这种未知的可能时，你得逼自己一把去尝试学会新的知识或者工具。\n『When you don’t know how to do it, just do it as if you know how to do it.』\n\n唉，机会失去太多。\n但，仍有很多可能。\n\n今天终于可以静下来，给自己灌鸡汤打鸡血，满血复活好好干。\n\n你要相信，牛人的高度不是企及。\n是你从一开始就放弃了自己。\n你知道吗，那些牛人嘲笑你的不是你的水平菜，而是你的态度低。\n凭大多数人的努力程度之低，根本轮不到你拼天赋。\n你必须非常努力，才能在别人眼里看上去毫不费力。\n\n要不试试？想想如果你一不小心在一个领域坚持了十年，可能你会发现：\n1\\. 那群智商有余但定力不足的人们，玩了几年就坚持不下去了；\n2\\. 前一波的前辈们不是退休了，就是挂了（ - - 我真缺德）。\n3\\. 你一不小心坚持了下来，哎呀妈啊，你智商都没用上就实现屌丝逆袭了，这得多励志啊 XD 。』\n\n嗨，小赖，你要知道：\n不设限，不止步，不屈服。","slug":"坎坷大学路","updated":1418908898000,"excerpt":"","_id":"83ql16a25odysdoo","comments":true,"layout":"post","photos":[],"link":""},{"title":"天酬勤·笨先飞","tags":[],"id":371,"categories":["9wpmord5537fjtil"],"date":1367684539000,"content":"<p><a href=\"http://www.laispace.com/wp-content/uploads/2013/05/images.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/05/images.jpg\" alt=\"\" title=\"images\"></a></p>\n<p>&nbsp;</p>\n<p>天道酬勤，一直坚信这个道理。</p>\n<p>笨鸟先飞，一直坚持这个姿态。</p>\n<p>我一直在模仿理想中的自己，却从未超越过。</p>\n<p>也许，这就是动力。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>我二十一了。</p>\n<p>昨天凌晨零点，@大花 一句准时的「生日快乐」把我吓到，因为我真忘了。</p>\n<p>弱冠已过，责任更多。我不想阐述自己的家境去获取支持，只想尽快获得一股力量，在日后能维护这篇支离破碎。</p>\n<p>希望不再增悲。</p>\n<p>&nbsp;</p>\n<p>我二十一了。</p>\n<p>今天晚上十点，我刚从北校回到宿舍，收到几条生日祝福的短信，想想，就这么过了。</p>\n<p>青春将逝，年华不悔。我真希望自己的努力付出能早日获得回报，让我有份信心能承起一些担当。</p>\n<p>希望如愿以偿。</p>\n<p>&nbsp;</p>\n<p>我二十一了。</p>\n<p>我还一无所有，我仍一无所获，我仍一无所知，我仍是一直笨鸟。</p>\n<p>但，我一直在坚持，坚持一个信仰。</p>\n<p>等我羽翼丰满，我再亮英姿。</p>\n<p><a href=\"http://www.laispace.com/wp-content/uploads/2013/05/1260ef9e6a7g215.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/05/1260ef9e6a7g215.jpg\" alt=\"\" title=\"1260ef9e6a7g215\"></a></p>\n","source":"_posts/天酬勤·笨先飞.md","raw":"title: 天酬勤·笨先飞\ntags:\nid: 371\ncategories:\n  - 来思碑记\ndate: 2013-05-05 00:22:19\n---\n\n[![](http://www.laispace.com/wp-content/uploads/2013/05/images.jpg \"images\")](http://www.laispace.com/wp-content/uploads/2013/05/images.jpg)\n\n&nbsp;\n\n天道酬勤，一直坚信这个道理。\n\n笨鸟先飞，一直坚持这个姿态。\n\n我一直在模仿理想中的自己，却从未超越过。\n\n也许，这就是动力。\n\n&nbsp;\n\n&nbsp;\n\n我二十一了。\n\n昨天凌晨零点，@大花 一句准时的「生日快乐」把我吓到，因为我真忘了。\n\n弱冠已过，责任更多。我不想阐述自己的家境去获取支持，只想尽快获得一股力量，在日后能维护这篇支离破碎。\n\n希望不再增悲。\n\n&nbsp;\n\n我二十一了。\n\n今天晚上十点，我刚从北校回到宿舍，收到几条生日祝福的短信，想想，就这么过了。\n\n青春将逝，年华不悔。我真希望自己的努力付出能早日获得回报，让我有份信心能承起一些担当。\n\n希望如愿以偿。\n\n&nbsp;\n\n我二十一了。\n\n我还一无所有，我仍一无所获，我仍一无所知，我仍是一直笨鸟。\n\n但，我一直在坚持，坚持一个信仰。\n\n等我羽翼丰满，我再亮英姿。\n\n[![](http://www.laispace.com/wp-content/uploads/2013/05/1260ef9e6a7g215.jpg \"1260ef9e6a7g215\")](http://www.laispace.com/wp-content/uploads/2013/05/1260ef9e6a7g215.jpg)","slug":"天酬勤·笨先飞","updated":1418908898000,"excerpt":"","_id":"elw5j550669yytha","comments":true,"layout":"post","photos":[],"link":""},{"title":"小赖的职业生涯规划书","tags":["dl6zq55rwsmcdx77"],"id":231,"categories":["9wpmord5537fjtil"],"date":1355140345000,"content":"<p><a href=\"http://www.laispace.com/wp-content/uploads/2012/12/200x200.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2012/12/200x200.jpg\" alt=\"\" title=\"200x200\"></a></p>\n<p>真实姓名：<strong>XXX</strong></p>\n<p>昵    称：赖小赖</p>\n<p>就读学校：SCUT</p>\n<p>E - m a i l：545183877@qq.com</p>\n<p>新浪微博：@<a href=\"http://weibo.com/laiqingsheng\" target=\"_blank\" rel=\"external\">赖小赖小赖</a></p>\n<p>个人网站：<a href=\"http://www.laispace.com/\" target=\"_blank\" rel=\"external\">laispace.com </a></p>\n<p><strong>引言</strong></p>\n<p>个人拙见：深深痛恨于形式主义，不写花俏的词汇凑字数，发自内心写此职业规划书。</p>\n<p><strong>第一章**</strong> <strong>**认识自我</strong></p>\n<p><strong>1.**</strong>个人基本情况**</p>\n<p>我来自广东某山区偏远农村，考上SCUT可非易事，踏入华园，深感“人才济济，我是草根”，但坚信“我不能改变世界，但能改变自己。”，从大一便开始了对自身理解的探索。</p>\n<p>我坚持认为大学是培养学生三观的摇篮和确定职业方向的象牙塔，大学更该注重于通识教育的发展，而非沿袭应试教育的弊端，对于教导，该因材施材，此为大环境。</p>\n<p>对我而言，我没有读研的计划，我认为我该尽早积极探索自身兴趣、主动学习完善知识体系并最终建立职业规划。以下为职业探索。</p>\n<p><strong>2.**</strong>职业探索**</p>\n<p>2.1<strong>大一上</strong>：</p>\n<p>泡馆、上网阅览书籍、资讯，得知自己不适合做科学研究，无读研计划；</p>\n<p>2.2<strong>大一下</strong>：</p>\n<p>发现对网络工程师感兴趣，自学网络知识，遇到瓶颈失去兴趣；</p>\n<p>2.3<strong>大二上</strong>：</p>\n<p>发现对Web前端有浓厚兴趣，自行摸索相关技术，激发了热情甚至是职业向往。</p>\n<p><strong>3.**</strong>职业定位**</p>\n<p>十几年的教育我接受了填鸭式学习，读小学为了读初中、读初中为了上高中、读高中为了考大学，考上大学不知做什么。所以有了前文谈到“人才济济，我是草根”的心态。</p>\n<p>直到考上大学，拥有了充裕的时间去思考自己，拥有了自由去探索各方面的兴趣，最终我初步确定了自己的人生规划，而<span style=\"text-decoration: underline;\">职业规划只能算是人生规划的子集</span>，但囿于此文重心为职业生涯规划，还是着重谈自己对职业规划的理解罢。</p>\n<p>3.1 坚持摄影的兴趣，因为累了倦了出去走一走拍一拍感叹感叹，对于我是一种极其有效的放松方式；</p>\n<p>3.2 坚持打网球以及长跑，功利地说“运动是为了学习”，而对我而言这是生命不可或缺，对职业发展而言，高强度的工作亟需硬朗的身体作为本钱（接下来我会谈到我所选行业的水很深）；</p>\n<p>3.3 坚持摸索Web前端技术，在学好专业知识的前提下，提早获取该行业的资讯，根据发展趋势、工作要求来确定自己学习的方向。</p>\n<p>也就是说，目前<strong>我的职业定位为：**</strong>Web<strong>**前端工程师</strong>。3.3中之所以说是“摸索”前端，是因为我觉得对于我这种乳臭未干的弱冠90后，深不知复杂社会与安稳校园的鸿沟，深不知在不断的尝试之后又会产生怎么的兴趣（这兴趣兴许会让自己产生新的职业定位呢？），<span style=\"text-decoration: underline;\">大学毕业之前，该对自己有一份清醒的认识，但到现在为止，我还没有，所以还需要探索、尝试。</span></p>\n<hr>\n<hr>\n<p><strong>第二章**</strong> <strong>**职业生涯条件分析</strong></p>\n<p><strong>1.**</strong>职业描述**</p>\n<pre><code>   我所说的Web前端，对大多数人而言定是陌生的，因为事实上这个职业在中国兴起的时间并没有超过五年，也就是说它的发展前景不可小觑。\n\n   引用百度百科对Web前端工程师的描述：\n\n   Web[<span class=\"link_label\">前端开发工程师</span>](<span class=\"link_url\">http://baike.baidu.com/view/4227693.htm</span>)是一个很新的职业，在国内乃至国际上真正开始受到重视的时间不超过5年。Web前端开发是从网页制作演变而来的，名称上有很明显的时代特征···\n</code></pre><p>随着<a href=\"http://baike.baidu.com/view/8240.htm\" target=\"_blank\" rel=\"external\">Web 2.0</a>概念的普及和W3C组织的推广，网站重构的影响力正以惊人的速度增长。XHTML+CSS布局、DHTML和Ajax像一阵旋风，铺天盖地席卷而来，包括<span style=\"text-decoration: underline;\">新浪、搜狐、网易、腾讯、淘宝等在内的各种规模的</span><span style=\"text-decoration: underline;\">IT</span><span style=\"text-decoration: underline;\">企业都对自己的网站进行了重构···</span></p>\n<p>随着人们对用户体验的要求越来越高，前端开发的技术难度越来越大，Web<a href=\"http://baike.baidu.com/view/4227693.htm\" target=\"_blank\" rel=\"external\">前端开发工程师</a>这一职业终于从设计和制作不分的局面中独立出来。</p>\n<p>在技能方面，豆瓣工程师张克军前辈认为前端工程师该掌握的技能如图：</p>\n<p>该图涉及计算机领域的专业词汇较多，我一言以蔽之：</p>\n<p><strong>Web**</strong>前端行业，所需掌握的技能非常之多且复杂。**</p>\n<p>国内大公司感叹于招不到好的前端，也说明这个职业的人才缺口之大。</p>\n<hr>\n<p><strong>2.**</strong>职业兴趣**</p>\n<p>除了前端行业具有很大的发展前景以外，更重要的是我在这个领域内发现了浓厚的兴趣。与其说职业定位，不如说是兴趣的挖掘。建立在兴趣基础上的职业，其乐无穷。</p>\n<p>前端工程师可谓是设计师中的工程师，工程师中的设计师。从大公司渴求前端人才的情况来看，Web前端开发的水可谓是很深，但对我而言，我喜欢新奇更喜欢挑战。</p>\n<p><strong>3.**</strong>个人特质与职业价值观**</p>\n<p><strong>3.1**</strong>个人特质**</p>\n<p>我性格外向、喜欢户外运动并自信沟通能力强，这正符合前端工程师前要与交互设计师沟通，后要和后台工程师沟通的要求，除前端技能外，沟通能力同样重要；</p>\n<p>我喜爱互联网、对新技术有热情，这正符合前端工程师需要有极强的应变能力，快速学习新出现的技术，持续创新；</p>\n<p><strong>3.2 **</strong>职业价值观**</p>\n<p>我谈不上职业价值观，因为我还没有真正涉足这个行业，没有参与一个产品的开发，但坚信的一点是：<strong>Web**</strong>前端需要程序员的严谨、设计师的眼光。**这成为我在学习过程中该注重培养的素养。</p>\n<p>引用豆瓣资深前端工程师张克军前辈的描述：</p>\n<p>web产品交互越来越复杂，用户使用体验和网站前端性能优化，这些都需要专业的前端工程师来解决。另外，在项目中还要弥补设计师在交互设计上的不足，前端工程师在开发过程中起着重要的承上启下的作用。一两个前端工程师就可以让整个开发并行起来，让设计到实现的转换更顺利。明智的公司应该贮备前端工程师资源。</p>\n<p><strong>我对这个职业价值观的理解是：掌握技术，并处在用户体验的最前沿。</strong></p>\n<p><strong>4.**</strong>家庭、学校、社会、职业环境分析**</p>\n<p><strong>4.1**</strong>家庭环境**</p>\n<p>父母是农民，家庭里没有从事互联网相关职业的人，仅此。</p>\n<p><strong>4.2 **</strong>学校环境**</p>\n<p>根据调查，目前没有中国高校开设了前端开发相关的课程，大学生要学相关技术，纯属自行摸索自学，也就是说，若自学有道学有所成，将非常具备竞争力。</p>\n<p><strong>4.3 **</strong>社会环境**</p>\n<p>社会上的IT公司对新兴技术（如HTML5/CSS3）的追捧，意味着前端工程师难求的局面</p>\n<p><strong>4.4 **</strong>职业环境**</p>\n<p>如4.2所言，目前高校没有开设相关课程，相关行业内的前端工程师多为转行的技术人员，但如前文所言，前端工程师需要具备编写代码的能力同时需要一定的审美观，这是大多数转型做前端的程序员所不具备的，也正是大公司很难找到好前端的原因之一。</p>\n<p><strong>第三章**</strong> <strong>**职业目标的定位和分解组合</strong></p>\n<p>我的职业目标定位为前端工程师，但这不是一蹴而就的事情，需要不断地摸索和付出。</p>\n<p>为了实现毕业能进理想的IT公司深造，我计划如下：</p>\n<p><strong>1.**</strong>大一**：购买自己的域名，上线自己的独立博客，记录前端学习的轨迹，如<a href=\"http://www.laispace.com/\" target=\"_blank\" rel=\"external\">来思碑</a></p>\n<p>（前端面试的加分项之一为被面试者拥有记录前端技术并时常维护的独立博客）；</p>\n<p><strong>2.**</strong>大二**：不断把握最新资讯，学习并记录一些前端练习在博客上；</p>\n<p><strong>3.**</strong>大三**：进一步学习并形成知识体系，找团队做完整的项目，给<a href=\"laispace.github.io/resume.html\" title=\"小赖的简历\">简历</a>添色；</p>\n<p><strong>4.**</strong>大四**：做好简历，找实习进行实践，提高技能；</p>\n<p><strong>第四章**</strong> <strong>**具体执行计划</strong></p>\n<p>职业定位后执行计划的大致步骤如第三章，具体细化到每一天，无非就是利用闲暇时间多看书，多练习：</p>\n<p><strong>1.**</strong>看书**<del></del></p>\n<p><strong>2.**</strong>练习**，不断实践，在实践中加强对理论的理解，记录在 <a href=\"http://www.laispace.com/\" target=\"_blank\" rel=\"external\">来思碑博客</a>；</p>\n<p><strong>3.**</strong>借鉴**，跟进行业资讯，订阅牛人博客，在他人经验的基础上多家模仿以增加自己的经验，将好的书单好的建议收藏加以学习，记录在个人 <a href=\"http://evernote.com/intl/zh-cn/\" target=\"_blank\" rel=\"external\">笔记本Evernote</a> 上</p>\n<p><strong>第五章**</strong> <strong>**评估调整</strong></p>\n<p>对于评估调整，我的做法是，我会将这篇文章发布在<a href=\"http://www.laispace.com/\" target=\"_blank\" rel=\"external\">我的博客</a>上，时刻鞭策自己执行计划，敦促自己不断学习。</p>\n<p><strong>结束语</strong></p>\n<pre><code>   这是职业生涯规划课上的一次作业，旨在让我们学生根据自身情况写一份规划书，我百度了一下，发现大部分规划书都写得工工整整各种排版很花俏，目录也很严肃，但最后我想，这种规划书是拿来交作业而不是拿来执行的吧？\n</code></pre><p><strong>变化不在计划中，真正需要的是不断地学习进而总结经验以知晓下一步的学习方向。视野广了，学什么都知道有哪些套路了。</strong></p>\n<p>拿我自己做例子，一开始写个简单的网页都要半天，但如今看了不少的博客不少的文章，知晓了前端开发这行业的发展情况，对自己有了大体的规划，就没必要浮躁了，只需要静下心来，按着笔记本里的书单，一本一本地看，看完不断练习，接着搜集各种公司关于该行业的面试题，对着面试题目不断地查缺补漏，然后，美美的写个网页版的简历，投了！</p>\n<p>呵呵，看似简单，实则道路曲折行路难啊，我需要不断地纠正学习轨迹，不断地发奋学习才是。</p>\n","source":"_posts/小赖的职业生涯规划书.md","raw":"title: 小赖的职业生涯规划书\ntags:\n  - 职业规划\nid: 231\ncategories:\n  - 来思碑记\ndate: 2012-12-10 19:52:25\n---\n\n[![](http://www.laispace.com/wp-content/uploads/2012/12/200x200.jpg \"200x200\")](http://www.laispace.com/wp-content/uploads/2012/12/200x200.jpg)\n\n真实姓名：**XXX**\n\n昵    称：赖小赖\n\n就读学校：SCUT\n\nE - m a i l：545183877@qq.com\n\n新浪微博：@[赖小赖小赖](http://weibo.com/laiqingsheng)\n\n个人网站：[laispace.com ](http://www.laispace.com/)\n\n**引言**\n\n个人拙见：深深痛恨于形式主义，不写花俏的词汇凑字数，发自内心写此职业规划书。\n\n**第一章**** ****认识自我**\n\n**1.****个人基本情况**\n\n我来自广东某山区偏远农村，考上SCUT可非易事，踏入华园，深感“人才济济，我是草根”，但坚信“我不能改变世界，但能改变自己。”，从大一便开始了对自身理解的探索。\n\n我坚持认为大学是培养学生三观的摇篮和确定职业方向的象牙塔，大学更该注重于通识教育的发展，而非沿袭应试教育的弊端，对于教导，该因材施材，此为大环境。\n\n对我而言，我没有读研的计划，我认为我该尽早积极探索自身兴趣、主动学习完善知识体系并最终建立职业规划。以下为职业探索。\n\n**2.****职业探索**\n\n2.1**大一上**：\n\n泡馆、上网阅览书籍、资讯，得知自己不适合做科学研究，无读研计划；\n\n2.2**大一下**：\n\n发现对网络工程师感兴趣，自学网络知识，遇到瓶颈失去兴趣；\n\n2.3**大二上**：\n\n发现对Web前端有浓厚兴趣，自行摸索相关技术，激发了热情甚至是职业向往。\n\n**3.****职业定位**\n\n十几年的教育我接受了填鸭式学习，读小学为了读初中、读初中为了上高中、读高中为了考大学，考上大学不知做什么。所以有了前文谈到“人才济济，我是草根”的心态。\n\n直到考上大学，拥有了充裕的时间去思考自己，拥有了自由去探索各方面的兴趣，最终我初步确定了自己的人生规划，而<span style=\"text-decoration: underline;\">职业规划只能算是人生规划的子集</span>，但囿于此文重心为职业生涯规划，还是着重谈自己对职业规划的理解罢。\n\n3.1 坚持摄影的兴趣，因为累了倦了出去走一走拍一拍感叹感叹，对于我是一种极其有效的放松方式；\n\n3.2 坚持打网球以及长跑，功利地说“运动是为了学习”，而对我而言这是生命不可或缺，对职业发展而言，高强度的工作亟需硬朗的身体作为本钱（接下来我会谈到我所选行业的水很深）；\n\n3.3 坚持摸索Web前端技术，在学好专业知识的前提下，提早获取该行业的资讯，根据发展趋势、工作要求来确定自己学习的方向。\n\n也就是说，目前**我的职业定位为：****Web****前端工程师**。3.3中之所以说是“摸索”前端，是因为我觉得对于我这种乳臭未干的弱冠90后，深不知复杂社会与安稳校园的鸿沟，深不知在不断的尝试之后又会产生怎么的兴趣（这兴趣兴许会让自己产生新的职业定位呢？），<span style=\"text-decoration: underline;\">大学毕业之前，该对自己有一份清醒的认识，但到现在为止，我还没有，所以还需要探索、尝试。</span>\n\n** **\n\n** **\n\n**第二章**** ****职业生涯条件分析**\n\n**1.****职业描述**\n\n       我所说的Web前端，对大多数人而言定是陌生的，因为事实上这个职业在中国兴起的时间并没有超过五年，也就是说它的发展前景不可小觑。\n\n       引用百度百科对Web前端工程师的描述：\n\n       Web[前端开发工程师](http://baike.baidu.com/view/4227693.htm)是一个很新的职业，在国内乃至国际上真正开始受到重视的时间不超过5年。Web前端开发是从网页制作演变而来的，名称上有很明显的时代特征···\n\n随着[Web 2.0](http://baike.baidu.com/view/8240.htm)概念的普及和W3C组织的推广，网站重构的影响力正以惊人的速度增长。XHTML+CSS布局、DHTML和Ajax像一阵旋风，铺天盖地席卷而来，包括<span style=\"text-decoration: underline;\">新浪、搜狐、网易、腾讯、淘宝等在内的各种规模的</span><span style=\"text-decoration: underline;\">IT</span><span style=\"text-decoration: underline;\">企业都对自己的网站进行了重构···</span>\n\n随着人们对用户体验的要求越来越高，前端开发的技术难度越来越大，Web[前端开发工程师](http://baike.baidu.com/view/4227693.htm)这一职业终于从设计和制作不分的局面中独立出来。\n\n在技能方面，豆瓣工程师张克军前辈认为前端工程师该掌握的技能如图：\n\n该图涉及计算机领域的专业词汇较多，我一言以蔽之：\n\n**Web****前端行业，所需掌握的技能非常之多且复杂。**\n\n国内大公司感叹于招不到好的前端，也说明这个职业的人才缺口之大。\n\n** **\n\n**2.****职业兴趣**\n\n除了前端行业具有很大的发展前景以外，更重要的是我在这个领域内发现了浓厚的兴趣。与其说职业定位，不如说是兴趣的挖掘。建立在兴趣基础上的职业，其乐无穷。\n\n前端工程师可谓是设计师中的工程师，工程师中的设计师。从大公司渴求前端人才的情况来看，Web前端开发的水可谓是很深，但对我而言，我喜欢新奇更喜欢挑战。\n\n**3.****个人特质与职业价值观**\n\n**3.1****个人特质**\n\n我性格外向、喜欢户外运动并自信沟通能力强，这正符合前端工程师前要与交互设计师沟通，后要和后台工程师沟通的要求，除前端技能外，沟通能力同样重要；\n\n我喜爱互联网、对新技术有热情，这正符合前端工程师需要有极强的应变能力，快速学习新出现的技术，持续创新；\n\n**3.2 ****职业价值观**\n\n我谈不上职业价值观，因为我还没有真正涉足这个行业，没有参与一个产品的开发，但坚信的一点是：**Web****前端需要程序员的严谨、设计师的眼光。**这成为我在学习过程中该注重培养的素养。\n\n引用豆瓣资深前端工程师张克军前辈的描述：\n\nweb产品交互越来越复杂，用户使用体验和网站前端性能优化，这些都需要专业的前端工程师来解决。另外，在项目中还要弥补设计师在交互设计上的不足，前端工程师在开发过程中起着重要的承上启下的作用。一两个前端工程师就可以让整个开发并行起来，让设计到实现的转换更顺利。明智的公司应该贮备前端工程师资源。\n\n**我对这个职业价值观的理解是：掌握技术，并处在用户体验的最前沿。**\n\n**4.****家庭、学校、社会、职业环境分析**\n\n**4.1****家庭环境**\n\n父母是农民，家庭里没有从事互联网相关职业的人，仅此。\n\n**4.2 ****学校环境**\n\n根据调查，目前没有中国高校开设了前端开发相关的课程，大学生要学相关技术，纯属自行摸索自学，也就是说，若自学有道学有所成，将非常具备竞争力。\n\n**4.3 ****社会环境**\n\n社会上的IT公司对新兴技术（如HTML5/CSS3）的追捧，意味着前端工程师难求的局面\n\n**4.4 ****职业环境**\n\n如4.2所言，目前高校没有开设相关课程，相关行业内的前端工程师多为转行的技术人员，但如前文所言，前端工程师需要具备编写代码的能力同时需要一定的审美观，这是大多数转型做前端的程序员所不具备的，也正是大公司很难找到好前端的原因之一。\n\n**第三章**** ****职业目标的定位和分解组合**\n\n我的职业目标定位为前端工程师，但这不是一蹴而就的事情，需要不断地摸索和付出。\n\n为了实现毕业能进理想的IT公司深造，我计划如下：\n\n**1.****大一**：购买自己的域名，上线自己的独立博客，记录前端学习的轨迹，如[来思碑](http://www.laispace.com/)\n\n（前端面试的加分项之一为被面试者拥有记录前端技术并时常维护的独立博客）；\n\n**2.****大二**：不断把握最新资讯，学习并记录一些前端练习在博客上；\n\n**3.****大三**：进一步学习并形成知识体系，找团队做完整的项目，给[简历](laispace.github.io/resume.html \"小赖的简历\")添色；\n\n**4.****大四**：做好简历，找实习进行实践，提高技能；\n\n**第四章**** ****具体执行计划**\n\n职业定位后执行计划的大致步骤如第三章，具体细化到每一天，无非就是利用闲暇时间多看书，多练习：\n\n**1.****看书**<del></del>\n\n**2.****练习**，不断实践，在实践中加强对理论的理解，记录在 [来思碑博客](http://www.laispace.com/)；\n\n**3.****借鉴**，跟进行业资讯，订阅牛人博客，在他人经验的基础上多家模仿以增加自己的经验，将好的书单好的建议收藏加以学习，记录在个人 [笔记本Evernote](http://evernote.com/intl/zh-cn/) 上\n\n**第五章**** ****评估调整**\n\n对于评估调整，我的做法是，我会将这篇文章发布在[我的博客](http://www.laispace.com/)上，时刻鞭策自己执行计划，敦促自己不断学习。\n\n**结束语**\n\n       这是职业生涯规划课上的一次作业，旨在让我们学生根据自身情况写一份规划书，我百度了一下，发现大部分规划书都写得工工整整各种排版很花俏，目录也很严肃，但最后我想，这种规划书是拿来交作业而不是拿来执行的吧？\n\n**变化不在计划中，真正需要的是不断地学习进而总结经验以知晓下一步的学习方向。视野广了，学什么都知道有哪些套路了。**\n\n拿我自己做例子，一开始写个简单的网页都要半天，但如今看了不少的博客不少的文章，知晓了前端开发这行业的发展情况，对自己有了大体的规划，就没必要浮躁了，只需要静下心来，按着笔记本里的书单，一本一本地看，看完不断练习，接着搜集各种公司关于该行业的面试题，对着面试题目不断地查缺补漏，然后，美美的写个网页版的简历，投了！\n\n呵呵，看似简单，实则道路曲折行路难啊，我需要不断地纠正学习轨迹，不断地发奋学习才是。","slug":"小赖的职业生涯规划书","updated":1418908898000,"excerpt":"","_id":"olehtsnx7o84ywc2","comments":true,"layout":"post","photos":[],"link":""},{"title":"常用字符集和编码格式","categories":["s1fvmf8yl7edxxwd"],"date":1417231542000,"tags":[],"content":"<h1 id=\"常用字符集和编码\">常用字符集和编码</h1>\n<ul>\n<li>ASCII 美国信息交换标准代码</li>\n</ul>\n<p>编码规则： 7位表示一个字符，共128个字符</p>\n<p>缺点：只能显示26个拉丁字母、阿拉伯数字和英文标点符号</p>\n<ul>\n<li>EASCII 欧洲扩展字符集</li>\n</ul>\n<p>编码规则：8位表示一个字符，共256个字符</p>\n<p>缺点：虽解决了部分西欧语言的字符显示问题，但对其他更多的语言依然无力</p>\n<ul>\n<li>GB2312/GB2312-80 等中文字符集</li>\n</ul>\n<p>编码规则：把127号的字符取消掉（即EASCII），两个大于128的字符连在一起表示一个汉字，高字节从 0xA1 到 0xF7, 低字节从 0xA1 到 0xFE</p>\n<ul>\n<li>GBK 中文字符集</li>\n</ul>\n<p>微软对 GB2312-80 进行扩充后制定了 GBK 编码。</p>\n<ul>\n<li>Unicode 统一字符集</li>\n</ul>\n<p>包含超过十万个字符，让电脑能够解析世界上数十种语言。</p>\n<p>编码规则：使用4个字节的数字来表达字母、符号、文字。</p>\n<p>Unicode 指的是字符集，而 UTF-32, UTF-16, UTF-8 则说的是编码方案。</p>\n<ul>\n<li>UTF-32 </li>\n</ul>\n<p>编码规则：用上述 Unicode 的4字节的数字来表达字母、符号、文字</p>\n<ul>\n<li>UTF-16</li>\n</ul>\n<p>编码规则：</p>\n<pre><code>若字符编码 U 小于 0x10000, 也就是小于十进制的 65535，则使用2个字节表示；\n\n若字符编码 U 大于 0x10000, 也就是大于十进制的 65535，则使用4个字节表示。\n</code></pre><ul>\n<li>UTF-8 </li>\n</ul>\n<p>是针对对 Unicode 的可变长度字符编码，可表示 Unicode 中任何字符，且编码中第一个字节与 ASCII 兼容。</p>\n<p>编码规则是使用1到4个字节为每个字符编码：</p>\n<pre><code><span class=\"number\">128</span>个 US-ASCII 字符只需用<span class=\"number\">1</span>个字节编码，从 U+<span class=\"number\">0000</span> 到 U+<span class=\"number\">007F</span>\n\n带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文等，则使用第<span class=\"number\">2</span>个字节编码，从 U+<span class=\"number\">0080</span> 到 U+<span class=\"number\">07F</span>F\n\n其他基本多文中平面中的字符则使用<span class=\"number\">3</span>个字节编码\n\n其他极少辅助平面中的字符则使用<span class=\"number\">4</span>个字节编码\n</code></pre>","source":"_posts/常用字符集和编码格式.md","raw":"title: 常用字符集和编码格式\ncategories:\n  - Tools\ndate: 2014-11-29 11:25:42\ntags:\n---\n\n\n# 常用字符集和编码\n\n-  ASCII 美国信息交换标准代码\n\n编码规则： 7位表示一个字符，共128个字符\n\n缺点：只能显示26个拉丁字母、阿拉伯数字和英文标点符号\n\n- EASCII 欧洲扩展字符集\n\n编码规则：8位表示一个字符，共256个字符\n\n缺点：虽解决了部分西欧语言的字符显示问题，但对其他更多的语言依然无力\n\n- GB2312/GB2312-80 等中文字符集\n\n编码规则：把127号的字符取消掉（即EASCII），两个大于128的字符连在一起表示一个汉字，高字节从 0xA1 到 0xF7, 低字节从 0xA1 到 0xFE\n\n- GBK 中文字符集\n\n微软对 GB2312-80 进行扩充后制定了 GBK 编码。\n\n- Unicode 统一字符集\n\n包含超过十万个字符，让电脑能够解析世界上数十种语言。\n\n编码规则：使用4个字节的数字来表达字母、符号、文字。\n\nUnicode 指的是字符集，而 UTF-32, UTF-16, UTF-8 则说的是编码方案。\n\n- UTF-32 \n\n编码规则：用上述 Unicode 的4字节的数字来表达字母、符号、文字\n\n- UTF-16\n\n编码规则：\n\t\n\t若字符编码 U 小于 0x10000, 也就是小于十进制的 65535，则使用2个字节表示；\n \t\n\t若字符编码 U 大于 0x10000, 也就是大于十进制的 65535，则使用4个字节表示。\n\n- UTF-8 \n\n是针对对 Unicode 的可变长度字符编码，可表示 Unicode 中任何字符，且编码中第一个字节与 ASCII 兼容。\n\n编码规则是使用1到4个字节为每个字符编码：\n\t\n\t128个 US-ASCII 字符只需用1个字节编码，从 U+0000 到 U+007F\n\t\n\t带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文等，则使用第2个字节编码，从 U+0080 到 U+07FF\n\n\t其他基本多文中平面中的字符则使用3个字节编码\n\n\t其他极少辅助平面中的字符则使用4个字节编码\n\n\n\n\n","slug":"常用字符集和编码格式","updated":1418908898000,"excerpt":"","_id":"3payigcpe21j0e8n","comments":true,"layout":"post","photos":[],"link":""},{"title":"慎用text-indent的负值","categories":["tavxphreei8q4tj6"],"date":1411629302000,"tags":[],"content":"<p>为了语义化，我们可能会利用图片替换文字的方式来给我们的站点增色，举个栗子：</p>\n<pre><code>        &lt;p&gt;文字文字&lt;/p&gt;\n\n        p {\n            text-indent: -<span class=\"number\">2500</span>px;        <span class=\"comment\">// 小，在高分辨率宽屏下文字隐藏失败</span>\n            <span class=\"comment\">//text-indent: -99999px;     // 大，但可能存在性能问题，甚至被搜索引擎屏蔽</span>\n            background: url(logo.png);\n        }\n</code></pre><p>  这段代码中我们希望隐藏文字，提升 SEO，所以使用 logo.png 这个图片进行替换，这时会对文字设置一个负缩进值。</p>\n<p>  这里的 -2500px 在以前基本可以解决隐藏文字的问题，但目前发现高分辨率浏览器下这个值已经在浏览器可视范围内了，造成文字隐藏失败的问题。</p>\n<p>  而如果将这个值设置为更大，如 -99999px 时，又会造成浏览器的性能问题：浏览器需要生成一个宽度为 99999px 的盒模型，所以也要限制这个值的大小。</p>\n<p>  还有人指出，不少人滥用这个属性为了提升 SEO ，而搜索引擎可能会反过来屏蔽这里的文字。</p>\n<p>  除此之外，在从右到左读的语言环境中，这个负值可能会造成很长的横向滚动条，所以可以添加 direction 规则来避免：</p>\n<pre><code>         <span class=\"tag\">p</span> {\n            <span class=\"attribute\">text-indent</span><span class=\"value\">: -<span class=\"number\">9999px</span>;</span> <span class=\"comment\">// 万一日后用户屏幕宽度达到1万肿么办？（这好像不可能。。。）</span>\n            <span class=\"attribute\">background</span><span class=\"value\">: <span class=\"function\">url</span>(logo.png);</span>\n            <span class=\"attribute\">direction</span><span class=\"value\">: ltr;</span> <span class=\"comment\">// 设置为从左到右读的方向，避免 rtl 语言环境下出现横向滚动条</span>\n        }\n</code></pre><p> 一个比较好的可选方案：</p>\n<pre><code>        <span class=\"tag\">p</span> <span class=\"rules\">{ \n            <span class=\"rule\"><span class=\"attribute\">text-indent</span>:<span class=\"value\"> <span class=\"number\">100%</span></span></span>; \n            <span class=\"rule\"><span class=\"attribute\">white-space</span>:<span class=\"value\"> nowrap</span></span>; \n            <span class=\"rule\"><span class=\"attribute\">overflow</span>:<span class=\"value\"> hidden</span></span>; \n            <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"function\">url</span>(logo.png)</span></span>;\n        <span class=\"rule\">}</span></span>\n</code></pre><p> 参考链接：</p>\n<ul>\n<li><a href=\"https://github.com/CSSLint/csslint/wiki/disallow-negative-text-indent\" target=\"_blank\" rel=\"external\">Disallow negative text indent</a></li>\n<li><a href=\"http://luigimontanez.com/2010/stop-using-text-indent-css-trick/\" target=\"_blank\" rel=\"external\">Stop Using the text-indent:-9999px CSS Trick</a></li>\n<li><a href=\"http://css-tricks.com/examples/ImageReplacement/\" target=\"_blank\" rel=\"external\">CSS Image Replacement</a></li>\n</ul>\n","source":"_posts/慎用text-indent的负值.md","raw":"title: 慎用text-indent的负值\ncategories:\n  - CSS\ndate: 2014-09-25 15:15:02\ntags:\n\n---\n\n为了语义化，我们可能会利用图片替换文字的方式来给我们的站点增色，举个栗子：\n            \n            <p>文字文字</p>\n\n            p {\n                text-indent: -2500px;        // 小，在高分辨率宽屏下文字隐藏失败\n                //text-indent: -99999px;     // 大，但可能存在性能问题，甚至被搜索引擎屏蔽\n                background: url(logo.png);\n            }\n            \n  这段代码中我们希望隐藏文字，提升 SEO，所以使用 logo.png 这个图片进行替换，这时会对文字设置一个负缩进值。\n  \n  这里的 -2500px 在以前基本可以解决隐藏文字的问题，但目前发现高分辨率浏览器下这个值已经在浏览器可视范围内了，造成文字隐藏失败的问题。\n  \n  而如果将这个值设置为更大，如 -99999px 时，又会造成浏览器的性能问题：浏览器需要生成一个宽度为 99999px 的盒模型，所以也要限制这个值的大小。\n  \n  还有人指出，不少人滥用这个属性为了提升 SEO ，而搜索引擎可能会反过来屏蔽这里的文字。\n  \n  除此之外，在从右到左读的语言环境中，这个负值可能会造成很长的横向滚动条，所以可以添加 direction 规则来避免：\n\n             p {\n                text-indent: -9999px; // 万一日后用户屏幕宽度达到1万肿么办？（这好像不可能。。。）\n                background: url(logo.png);\n                direction: ltr; // 设置为从左到右读的方向，避免 rtl 语言环境下出现横向滚动条\n            }\n                        \n 一个比较好的可选方案：\n\n            p { \n                text-indent: 100%; \n                white-space: nowrap; \n                overflow: hidden; \n                background: url(logo.png);\n            }\n\n 参考链接：\n \n - [Disallow negative text indent](https://github.com/CSSLint/csslint/wiki/disallow-negative-text-indent)\n - [Stop Using the text-indent:-9999px CSS Trick](http://luigimontanez.com/2010/stop-using-text-indent-css-trick/)\n - [CSS Image Replacement](http://css-tricks.com/examples/ImageReplacement/)","slug":"慎用text-indent的负值","updated":1418908898000,"excerpt":"","_id":"p52r81x7wzc1ra4r","comments":true,"layout":"post","photos":[],"link":""},{"title":"正则表达式","categories":["f1q8dl6bbauvoh8x"],"date":1405607728000,"tags":[],"content":"<p>先来几个栗子：</p>\n<pre><code>    <span class=\"comment\">// \\b 表示匹配一个位置：单词开头或结尾</span>\n    \\bhi\\b        <span class=\"comment\">//=&gt; hi</span>\n\n    <span class=\"comment\">// . 匹配除换行符以外的任意字符</span>\n    <span class=\"comment\">// * 匹配多次</span>\n    <span class=\"comment\">// .* 匹配任意数量的不包含换行的字符</span>\n    \\bhi\\b.*\\bLucy\\b    <span class=\"comment\">//=&gt; hi i love you Lucy        </span>\n\n    <span class=\"comment\">// \\d 匹配一位数字</span>\n    <span class=\"comment\">// {2} 匹配2次</span>\n    <span class=\"number\">0</span>\\d{<span class=\"number\">2</span>}-\\d{<span class=\"number\">8</span>}   <span class=\"comment\">//=&gt; 086-13800138000</span>\n\n    <span class=\"comment\">// \\s 匹配任意的空白符，包括空格、制表符、换行符、中文全角空格</span>\n    <span class=\"comment\">// \\w 匹配字母或数字或下划线或汉字</span>\n    \\ba\\w*\\b    <span class=\"comment\">//=&gt; ahdh256hvc</span>\n\n    <span class=\"comment\">// + 匹配一次或多次，注意与 * 的区别（匹配多次）</span>\n    <span class=\"comment\">// \\d+ 匹配1个或多个连续的数字</span>\n    \\d+        <span class=\"comment\">//=&gt; 4 或 465435</span>\n    \\d*        <span class=\"comment\">//=&gt; 465435</span>\n\n    <span class=\"comment\">// ^ 匹配字符串的开始</span>\n    <span class=\"comment\">// $ 匹配字符串的结束</span>\n    ^\\d{<span class=\"number\">5</span>,<span class=\"number\">12</span>}$         <span class=\"comment\">//=&gt; 匹配5-12位的数字</span>\n\n    <span class=\"comment\">// [] 匹配里边的值</span>\n    [aeiou]     <span class=\"comment\">//=&gt; 匹配 a e i o u</span>\n    [<span class=\"number\">0</span>-<span class=\"number\">9</span>]        <span class=\"comment\">//=&gt; 与 \\d 同义</span>\n\n    <span class=\"comment\">// | 表示分支</span>\n    <span class=\"number\">0</span>\\d{<span class=\"number\">2</span>}-\\d{}<span class=\"number\">8</span>|<span class=\"number\">0</span>\\d{<span class=\"number\">3</span>}-\\d{<span class=\"number\">7</span>}    =&gt; 匹配 <span class=\"number\">010</span>-<span class=\"number\">12345678</span> 或 <span class=\"number\">0102</span>-<span class=\"number\">1234567</span>\n\n    <span class=\"comment\">// () 表示分组</span>\n    (\\d{<span class=\"number\">1</span>,<span class=\"number\">3</span>}\\.){<span class=\"number\">3</span>}\\d{<span class=\"number\">1</span>,<span class=\"number\">3</span>}    <span class=\"comment\">//=&gt; 匹配一个IP，如 12.345.67.89</span>\n    <span class=\"comment\">// 以上会匹配不合法的IP，如 256.777.888.999</span>\n\n    <span class=\"comment\">// 大写字母 或 [^xxxx] 表示反义</span>\n    \\S+            <span class=\"comment\">//=&gt; 匹配不包含空白符的字符串</span>\n    &lt;lai[^&gt;]+&gt;    <span class=\"comment\">//=&gt; 匹配 &lt;laispace&gt;</span>\n\n    <span class=\"comment\">// (?=exp) 零宽度正预测先行断言，即自身出现的位置后面能匹配 exp</span>\n    \\b\\w+(?=ing\\b) <span class=\"comment\">//=&gt; 查找 I'm reading a book 时匹配 read</span>\n\n    <span class=\"comment\">// (?&lt;=exp)零宽度正回顾后发断言，即自身出现的位置前面能匹配 exp</span>\n    (?&lt;=\\bre)\\w+ <span class=\"comment\">//=&gt; 查找 I'm reading a book 时匹配 ading</span>\n\n    <span class=\"comment\">// (?!exp)负向零宽断言，即此位置的后面不能匹配 exp</span>\n    \\d{<span class=\"number\">3</span>}(?!\\d)        <span class=\"comment\">//=&gt; 匹配三个数字，但这三个数字后不能是数字，如 123abcd</span>\n\n    <span class=\"comment\">// (?&lt;!exp)零宽度负回顾后发断言，即此位置的前面不能匹配 exp</span>\n    (?&lt;![a-z])\\d{<span class=\"number\">7</span>}        <span class=\"comment\">//=&gt; 匹配前面不是小写字母的七位数字</span>\n</code></pre><a id=\"more\"></a>        \n\n\n<p>元字符</p>\n<pre><code>.        匹配除换行符以外的任意字符\n<span class=\"command\">\\w</span>        匹配字母或数字或下划线或汉字\n<span class=\"command\">\\s</span>        匹配任意的空白符\n<span class=\"command\">\\d</span>        匹配数字\n<span class=\"command\">\\b</span>        匹配单词的开始或结束\n^        匹配字符串的开始\n<span class=\"formula\">$        匹配字符串的结束</span>\n</code></pre><p>反义</p>\n<pre><code><span class=\"command\">\\W</span>    匹配任意不是字母，数字，下划线，汉字的字符\n<span class=\"command\">\\S</span>    匹配任意不是空白符的字符\n<span class=\"command\">\\D</span>    匹配任意非数字的字符\n<span class=\"command\">\\B</span>    匹配不是单词开头或结束的位置\n<span class=\"special\">[</span>^x<span class=\"special\">]</span>    匹配除了x以外的任意字符\n<span class=\"special\">[</span>^aeiou<span class=\"special\">]</span>    匹配除了aeiou这几个字母以外的任意字符    \n</code></pre><p>重复    </p>\n<pre><code>*        重复零次或更多次\n+        重复一次或更多次\n?        重复零次或一次\n<span class=\"list\">{n}</span>        重复n次\n<span class=\"list\">{n,}</span>    重复n次或更多次\n<span class=\"list\">{n,m}</span>    重复n到m次    \n</code></pre><p>懒惰</p>\n<pre><code>*?    重复任意次，但尽可能少重复\n+?    重复<span class=\"number\">1</span>次或更多次，但尽可能少重复\n??    重复<span class=\"number\">0</span>次或<span class=\"number\">1</span>次，但尽可能少重复\n<span class=\"list\">{n,m}</span>?    重复n到m次，但尽可能少重复\n<span class=\"list\">{n,}</span>?    重复n次以上，但尽可能少重复    \n</code></pre><h3 id=\"参考链接\">参考链接</h3>\n<ul>\n<li><p><a href=\"http://deerchao.net/tutorials/regex/regex.htm#mission\" target=\"_blank\" rel=\"external\">正则表达式30分钟入门教程</a></p>\n</li>\n<li><p><a href=\"http://www.regular-expressions.info/quickstart.html\" target=\"_blank\" rel=\"external\">Regular Expressions Quick Start</a>        </p>\n</li>\n</ul>\n","source":"_posts/正则表达式.md","raw":"title: 正则表达式\ncategories:\n  - Node\ndate: 2014-07-17 22:35:28\ntags:\n---\n\n先来几个栗子：\n\t\t\t\t\n\t\t// \\b 表示匹配一个位置：单词开头或结尾\n\t\t\\bhi\\b\t\t//=> hi\n\n\t\t// . 匹配除换行符以外的任意字符\n\t\t// * 匹配多次\n\t\t// .* 匹配任意数量的不包含换行的字符\n\t\t\\bhi\\b.*\\bLucy\\b\t//=> hi i love you Lucy\t\t\n\t\n\t\t// \\d 匹配一位数字\n\t\t// {2} 匹配2次\n\t\t0\\d{2}-\\d{8}   //=> 086-13800138000\n\t\t\n\t\t// \\s 匹配任意的空白符，包括空格、制表符、换行符、中文全角空格\n\t\t// \\w 匹配字母或数字或下划线或汉字\n\t\t\\ba\\w*\\b\t//=> ahdh256hvc\n\t\t\n\t\t// + 匹配一次或多次，注意与 * 的区别（匹配多次）\n\t\t// \\d+ 匹配1个或多个连续的数字\n\t\t\\d+\t\t//=> 4 或 465435\n\t\t\\d*\t\t//=> 465435\n\t\t\n\t\t// ^ 匹配字符串的开始\n\t\t// $ 匹配字符串的结束\n\t\t^\\d{5,12}$ \t\t//=> 匹配5-12位的数字\n\t\t\n\t\t// [] 匹配里边的值\n\t\t[aeiou] \t//=> 匹配 a e i o u\n\t\t[0-9]\t\t//=> 与 \\d 同义\n\t\t\n\t\t// | 表示分支\n\t\t0\\d{2}-\\d{}8|0\\d{3}-\\d{7}\t=> 匹配 010-12345678 或 0102-1234567\n\t\t\n\t\t// () 表示分组\n\t\t(\\d{1,3}\\.){3}\\d{1,3}\t//=> 匹配一个IP，如 12.345.67.89\n\t\t// 以上会匹配不合法的IP，如 256.777.888.999\n\t\t\n\t\t// 大写字母 或 [^xxxx] 表示反义\n\t\t\\S+\t\t\t//=> 匹配不包含空白符的字符串\n\t\t<lai[^>]+>\t//=> 匹配 <laispace>\n\t\t\n\t\t// (?=exp) 零宽度正预测先行断言，即自身出现的位置后面能匹配 exp\n\t\t\\b\\w+(?=ing\\b) //=> 查找 I'm reading a book 时匹配 read\n\t\t\n\t\t// (?<=exp)零宽度正回顾后发断言，即自身出现的位置前面能匹配 exp\n\t\t(?<=\\bre)\\w+ //=> 查找 I'm reading a book 时匹配 ading\n\t\t\n\t\t// (?!exp)负向零宽断言，即此位置的后面不能匹配 exp\n\t\t\\d{3}(?!\\d)\t\t//=> 匹配三个数字，但这三个数字后不能是数字，如 123abcd\n\t\t\n\t\t// (?<!exp)零宽度负回顾后发断言，即此位置的前面不能匹配 exp\n\t\t(?<![a-z])\\d{7}\t\t//=> 匹配前面不是小写字母的七位数字\n\n<!-- more -->\t\t\n\n\n元字符\n\t\n\t.\t\t匹配除换行符以外的任意字符\n\t\\w\t\t匹配字母或数字或下划线或汉字\n\t\\s\t\t匹配任意的空白符\n\t\\d\t\t匹配数字\n\t\\b\t\t匹配单词的开始或结束\n\t^\t\t匹配字符串的开始\n\t$\t\t匹配字符串的结束\n\n反义\n\n\t\\W\t匹配任意不是字母，数字，下划线，汉字的字符\n\t\\S\t匹配任意不是空白符的字符\n\t\\D\t匹配任意非数字的字符\n\t\\B\t匹配不是单词开头或结束的位置\n\t[^x]\t匹配除了x以外的任意字符\n\t[^aeiou]\t匹配除了aeiou这几个字母以外的任意字符\t\n\n重复\t\n\t\n\t*\t\t重复零次或更多次\n\t+\t\t重复一次或更多次\n\t?\t\t重复零次或一次\n\t{n}\t\t重复n次\n\t{n,}\t重复n次或更多次\n\t{n,m}\t重复n到m次\t\n\n懒惰\n\n\t*?\t重复任意次，但尽可能少重复\n\t+?\t重复1次或更多次，但尽可能少重复\n\t??\t重复0次或1次，但尽可能少重复\n\t{n,m}?\t重复n到m次，但尽可能少重复\n\t{n,}?\t重复n次以上，但尽可能少重复\t\n\n\t\n\t\n### 参考链接\n\n- [正则表达式30分钟入门教程](http://deerchao.net/tutorials/regex/regex.htm#mission)\n\n- [Regular Expressions Quick Start](http://www.regular-expressions.info/quickstart.html)\t\t\n\n\t\t\n\t\t","slug":"正则表达式","updated":1418908898000,"excerpt":"<p>先来几个栗子：</p>\n<pre><code>    <span class=\"comment\">// \\b 表示匹配一个位置：单词开头或结尾</span>\n    \\bhi\\b        <span class=\"comment\">//=&gt; hi</span>\n\n    <span class=\"comment\">// . 匹配除换行符以外的任意字符</span>\n    <span class=\"comment\">// * 匹配多次</span>\n    <span class=\"comment\">// .* 匹配任意数量的不包含换行的字符</span>\n    \\bhi\\b.*\\bLucy\\b    <span class=\"comment\">//=&gt; hi i love you Lucy        </span>\n\n    <span class=\"comment\">// \\d 匹配一位数字</span>\n    <span class=\"comment\">// {2} 匹配2次</span>\n    <span class=\"number\">0</span>\\d{<span class=\"number\">2</span>}-\\d{<span class=\"number\">8</span>}   <span class=\"comment\">//=&gt; 086-13800138000</span>\n\n    <span class=\"comment\">// \\s 匹配任意的空白符，包括空格、制表符、换行符、中文全角空格</span>\n    <span class=\"comment\">// \\w 匹配字母或数字或下划线或汉字</span>\n    \\ba\\w*\\b    <span class=\"comment\">//=&gt; ahdh256hvc</span>\n\n    <span class=\"comment\">// + 匹配一次或多次，注意与 * 的区别（匹配多次）</span>\n    <span class=\"comment\">// \\d+ 匹配1个或多个连续的数字</span>\n    \\d+        <span class=\"comment\">//=&gt; 4 或 465435</span>\n    \\d*        <span class=\"comment\">//=&gt; 465435</span>\n\n    <span class=\"comment\">// ^ 匹配字符串的开始</span>\n    <span class=\"comment\">// $ 匹配字符串的结束</span>\n    ^\\d{<span class=\"number\">5</span>,<span class=\"number\">12</span>}$         <span class=\"comment\">//=&gt; 匹配5-12位的数字</span>\n\n    <span class=\"comment\">// [] 匹配里边的值</span>\n    [aeiou]     <span class=\"comment\">//=&gt; 匹配 a e i o u</span>\n    [<span class=\"number\">0</span>-<span class=\"number\">9</span>]        <span class=\"comment\">//=&gt; 与 \\d 同义</span>\n\n    <span class=\"comment\">// | 表示分支</span>\n    <span class=\"number\">0</span>\\d{<span class=\"number\">2</span>}-\\d{}<span class=\"number\">8</span>|<span class=\"number\">0</span>\\d{<span class=\"number\">3</span>}-\\d{<span class=\"number\">7</span>}    =&gt; 匹配 <span class=\"number\">010</span>-<span class=\"number\">12345678</span> 或 <span class=\"number\">0102</span>-<span class=\"number\">1234567</span>\n\n    <span class=\"comment\">// () 表示分组</span>\n    (\\d{<span class=\"number\">1</span>,<span class=\"number\">3</span>}\\.){<span class=\"number\">3</span>}\\d{<span class=\"number\">1</span>,<span class=\"number\">3</span>}    <span class=\"comment\">//=&gt; 匹配一个IP，如 12.345.67.89</span>\n    <span class=\"comment\">// 以上会匹配不合法的IP，如 256.777.888.999</span>\n\n    <span class=\"comment\">// 大写字母 或 [^xxxx] 表示反义</span>\n    \\S+            <span class=\"comment\">//=&gt; 匹配不包含空白符的字符串</span>\n    &lt;lai[^&gt;]+&gt;    <span class=\"comment\">//=&gt; 匹配 &lt;laispace&gt;</span>\n\n    <span class=\"comment\">// (?=exp) 零宽度正预测先行断言，即自身出现的位置后面能匹配 exp</span>\n    \\b\\w+(?=ing\\b) <span class=\"comment\">//=&gt; 查找 I'm reading a book 时匹配 read</span>\n\n    <span class=\"comment\">// (?&lt;=exp)零宽度正回顾后发断言，即自身出现的位置前面能匹配 exp</span>\n    (?&lt;=\\bre)\\w+ <span class=\"comment\">//=&gt; 查找 I'm reading a book 时匹配 ading</span>\n\n    <span class=\"comment\">// (?!exp)负向零宽断言，即此位置的后面不能匹配 exp</span>\n    \\d{<span class=\"number\">3</span>}(?!\\d)        <span class=\"comment\">//=&gt; 匹配三个数字，但这三个数字后不能是数字，如 123abcd</span>\n\n    <span class=\"comment\">// (?&lt;!exp)零宽度负回顾后发断言，即此位置的前面不能匹配 exp</span>\n    (?&lt;![a-z])\\d{<span class=\"number\">7</span>}        <span class=\"comment\">//=&gt; 匹配前面不是小写字母的七位数字</span>\n</code></pre>","_id":"76plflyicutx1rwm","comments":true,"layout":"post","photos":[],"link":""},{"title":"用MySQLdb包连接数据库","tags":["4g3dew5br4i0eqww","fv6qpbjl890a18tr"],"id":489,"categories":["xj8ghuavw6jblfpw"],"date":1380265900000,"content":"<p>捣鼓捣鼓，跨过好多坑终于在Mac上配置好了开发环境，开始学Python啦！<br>今天学习的是Python连接数据库，安装了python-mysql包后，使用它自带的一些方法就可以连接了：<br>[python]</p>\n<h1 id=\"!/usr/bin/python\">!/usr/bin/python</h1>\n<h1 id=\"-_coding:_utf-8_-\">-<em>- coding: utf-8 -</em>-</h1>\n<p>import sys<br>import MySQLdb</p>\n<p>db = None</p>\n<p>try:</p>\n<pre><code># 连接数据库\ndb=MySQLdb.connect(host=&amp;quot;localhost&amp;quot;,\n                 user=&amp;quot;root&amp;quot;,passwd=&amp;quot;&amp;quot;,\n                 db=&amp;quot;wegroup&amp;quot;,\n                 charset = &amp;quot;utf8&amp;quot;,\n                 unix_socket=&amp;quot;/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock&amp;quot;)\n                 # unix_socket \ncursor = db.cursor()\n\n# 执行一个查询\ncursor.execute(&amp;quot;<span class=\"operator\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">VERSION</span>()&amp;quot;</span>)\ndata = cursor.fetchone()\n# 显示数据库的版本\nprint &amp;quot;Database version: %s&amp;quot; % data\n\n# 创建表user(id,name) 并插入数据\ncursor.execute(&amp;quot;<span class=\"operator\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> <span class=\"keyword\">user</span>(id <span class=\"built_in\">INT</span> <span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> AUTO_INCREMENT, name <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>))&amp;quot;</span>)\ncursor.execute(&amp;quot;<span class=\"operator\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">user</span>(name) <span class=\"keyword\">VALUES</span>(<span class=\"string\">'user1'</span>)&amp;quot;</span>)\ncursor.execute(&amp;quot;<span class=\"operator\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">user</span>(name) <span class=\"keyword\">VALUES</span>(<span class=\"string\">'user2'</span>)&amp;quot;</span>)\n# <span class=\"operator\"><span class=\"keyword\">commit</span> 后数据才会真正添加到数据表中！\ndb.<span class=\"keyword\">commit</span>()\n\n# 更新数据\n<span class=\"keyword\">cursor</span>.<span class=\"keyword\">execute</span>(&amp;quot;</span><span class=\"operator\"><span class=\"keyword\">UPDATE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">SET</span> name = %s <span class=\"keyword\">WHERE</span> id = %s&amp;quot;</span>,(&amp;quot;xiaolai&amp;quot; , 2));\n\n# 获取数据并遍历\ncursor.execute(&amp;quot;<span class=\"operator\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span>&amp;quot;</span>);\n# 获取描述信息\ndesc = cursor.description\nprint &amp;quot;描述信息：&amp;quot;, desc\n# 打印表头\nprint &amp;quot;%s %s&amp;quot; % (desc[0][0],desc[1][0])\n\n# 获取结果数\ncount = cursor.rowcount\nfor i in range(count):\n    row = cursor.fetchone()\n    # 每一个都是一个元组\n    print row[0], row[1]\n</code></pre><p>finally:</p>\n<pre><code># 记得要关闭！\n<span class=\"keyword\">if</span> <span class=\"keyword\">d</span><span class=\"variable\">b:</span>\n    db.<span class=\"keyword\">close</span>()\n</code></pre><p>[/python]<br><a href=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/屏幕快照-2013-09-27-下午3.08.46.png\" target=\"_blank\" rel=\"external\"><img src=\"http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/屏幕快照-2013-09-27-下午3.08.46.png\" alt=\"\" title=\"屏幕快照 2013-09-27 下午3.08.46\"></a></p>\n","source":"_posts/用MySQLdb包连接数据库.md","raw":"title: 用MySQLdb包连接数据库\ntags:\n  - mysql\n  - python\nid: 489\ncategories:\n  - 后台编程\ndate: 2013-09-27 15:11:40\n---\n\n捣鼓捣鼓，跨过好多坑终于在Mac上配置好了开发环境，开始学Python啦！\n今天学习的是Python连接数据库，安装了python-mysql包后，使用它自带的一些方法就可以连接了：\n[python]\n#!/usr/bin/python\n# -*- coding: utf-8 -*- \nimport sys\nimport MySQLdb\n\ndb = None\n\ntry:\n    # 连接数据库\n    db=MySQLdb.connect(host=&quot;localhost&quot;,\n                     user=&quot;root&quot;,passwd=&quot;&quot;,\n                     db=&quot;wegroup&quot;,\n                     charset = &quot;utf8&quot;,\n                     unix_socket=&quot;/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock&quot;)\n                     # unix_socket \n    cursor = db.cursor()\n\n    # 执行一个查询\n    cursor.execute(&quot;SELECT VERSION()&quot;)\n    data = cursor.fetchone()\n    # 显示数据库的版本\n    print &quot;Database version: %s&quot; % data\n\n    # 创建表user(id,name) 并插入数据\n    cursor.execute(&quot;CREATE TABLE IF NOT EXISTS user(id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(30))&quot;)\n    cursor.execute(&quot;INSERT INTO user(name) VALUES('user1')&quot;)\n    cursor.execute(&quot;INSERT INTO user(name) VALUES('user2')&quot;)\n    # commit 后数据才会真正添加到数据表中！\n    db.commit()\n\n    # 更新数据\n    cursor.execute(&quot;UPDATE user SET name = %s WHERE id = %s&quot;,(&quot;xiaolai&quot; , 2));\n\n    # 获取数据并遍历\n    cursor.execute(&quot;SELECT * FROM user&quot;);\n    # 获取描述信息\n    desc = cursor.description\n    print &quot;描述信息：&quot;, desc\n    # 打印表头\n    print &quot;%s %s&quot; % (desc[0][0],desc[1][0])\n\n    # 获取结果数\n    count = cursor.rowcount\n    for i in range(count):\n        row = cursor.fetchone()\n        # 每一个都是一个元组\n        print row[0], row[1]\n\nfinally:\n    # 记得要关闭！\n    if db:\n        db.close()\n[/python]\n[![](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/屏幕快照-2013-09-27-下午3.08.46.png \"屏幕快照 2013-09-27 下午3.08.46\")](http://xiaolai-wordpress.stor.sinaapp.com/uploads/2013/09/屏幕快照-2013-09-27-下午3.08.46.png)","slug":"用MySQLdb包连接数据库","updated":1418908898000,"excerpt":"","_id":"ycqvbf3sibvg30a2","comments":true,"layout":"post","photos":[],"link":""},{"title":"移动 Web 开发技巧","categories":["6hh7z5eshfa189mb"],"tags":["hr98uj109s1e24iz"],"date":1418884162000,"content":"<h2 id=\"Fiddler_篇\">Fiddler 篇</h2>\n<ul>\n<li>使用Fiddler 快速 bugfix 的办法</li>\n</ul>\n<p>线上出一个小问题时, 定位到具体某一个文件比如 online.js<br>使用 Fiddler 将这个文件保存为 offline.js 到本地, 并设置 AutoResponder 将这个线上文件 online.js 的请求映射到 offline.js<br>接着就开始改动, 这样还没拉代码就先定位并解决问题了, 轻快~</p>\n<ul>\n<li>调试 iOS 端真机环境页面</li>\n</ul>\n<p>用 Chrome 模拟器并不能百分百模拟真机.</p>\n<p>用 Fiddler 只能进行抓包调试, 对 UI 调试比较无力吧.</p>\n<p>用 Weinre 远程调试在 PC 上成功, 但映射到 iOS 上时毫无反应,<br>不知道是不是因为同时启用了 Weinre 代理服务器和 Fiddler 代理服务器.</p>\n<p>想自用一个在外网的机子搭建 Weinre 代理服务器(这样就不需要 PC 和 iOS 都在同一个局域网下), 但是内网 ssh 连接不上…内网这么多限制, 真是麻烦.</p>\n<p>用 Fiddler 开启代理, iOS 接入 PC 所在的网络并设置代理为 Fiddler 服务器, 用 Mac 连接 iPhone, 使用 Safari 调试. 这个目前看来, 是最爽的了.</p>\n","source":"_posts/移动 Web 开发技巧.md","raw":"title: '移动 Web 开发技巧'\r\ncategories: Tips\r\ntags:\r\n  - 移动开发\r\ndate: 2014-12-18 14:29:22\r\n---\r\n\r\n\r\n## Fiddler 篇\r\n-  使用Fiddler 快速 bugfix 的办法\r\n\r\n线上出一个小问题时, 定位到具体某一个文件比如 online.js\r\n使用 Fiddler 将这个文件保存为 offline.js 到本地, 并设置 AutoResponder 将这个线上文件 online.js 的请求映射到 offline.js\r\n接着就开始改动, 这样还没拉代码就先定位并解决问题了, 轻快~\r\n\r\n- 调试 iOS 端真机环境页面\r\n\r\n用 Chrome 模拟器并不能百分百模拟真机.\r\n\r\n用 Fiddler 只能进行抓包调试, 对 UI 调试比较无力吧.\r\n\r\n用 Weinre 远程调试在 PC 上成功, 但映射到 iOS 上时毫无反应, \r\n不知道是不是因为同时启用了 Weinre 代理服务器和 Fiddler 代理服务器.\r\n\r\n想自用一个在外网的机子搭建 Weinre 代理服务器(这样就不需要 PC 和 iOS 都在同一个局域网下), 但是内网 ssh 连接不上…内网这么多限制, 真是麻烦.\r\n\r\n用 Fiddler 开启代理, iOS 接入 PC 所在的网络并设置代理为 Fiddler 服务器, 用 Mac 连接 iPhone, 使用 Safari 调试. 这个目前看来, 是最爽的了.\r\n","slug":"移动 Web 开发技巧","updated":1418908898000,"excerpt":"","_id":"o9urrtoys1sxk9z8","comments":true,"layout":"post","photos":[],"link":""},{"title":"第二通懒觉引发的心里革命","id":589,"categories":["9wpmord5537fjtil"],"date":1338450073000,"tags":[],"content":"<p>现在是下午两点，人在图书馆五楼，小憩刚醒。</p>\n<div>       翻开上学期的日志，发现自己已判若两人。<br>…此处省略几百字埋怨的话语…<br>我想做自己喜欢做的事，去读自己喜欢读的书，但却不想被禁锢在如此我不喜欢的体制内。而对于我这么一个只能呐喊之后又卑微地服从的人而言，在这，不说活的光彩，但得保证生存。这意味着我起码得花一半的时间去做我不想做的事—尽管我不知道做完之后能获得什么，然后花一半的时间去追求自己想要的。但想我太过于贪婪，也就远追赶不上能力高于自己并花上所有时间去做这些事的人—-我不敢冒着风险下这赌注，因为我不能自私地只考虑自己的生活。<br>大一上学期循规蹈矩学习课程知识，却苦于不能提高。后来问了自己，要么延续高中以来墨守成规地学习方式，要么脱离限制，做自己想做的事。果然，在下学期我试图改变自己的行为方式，断然放弃自己不想学的东西。像《只有偏执狂才能生存》一样，以固执己见的方式度过了这个学期，此刻回首，倾向于极端了吧？<br>遗憾的是，临近期末我得奋不顾身地拾起我的高等数学线性代数大学物理等等等的书本，以应付即将到来的期末考试—处于我以前鄙视的一种状态—“以不挂科为目标”。<br>但，我却可以告诉自己，取舍之间利弊权衡，我可能走上了不归路，但不后悔，因为起码我没有虚度这半年。<br>这学期落下了课程的学习，但学到了很多关于网络和前端的知识，入门了还没深入且苦于周围没有志趣相投的人，但只要坚持下去，找个好团队，就是一个大好的机会。<br>我决定不读研（尽管有时会萌发研读心理学、营销学的想法），所以我会有更多的时间去接触新鲜的玩意。<br>回想下来，除了不爱课堂学习，我爱上了华工的图书馆，爱上了大学城。我喜爱一有时间就泡在图书馆看点杂七杂八的闲书，起码让自己觉得可以装文艺了。<br>偶然触碰到《走吧，张小砚》，我毅然决然拿出自己自高考以来的存款，凑上下个月的伙食，买了个破单反，然后会流连于广州的某个角落，粗糙地玩弄它。构图混乱也好，模糊不清也罢，但简简单单的照片在快门按下时记录下的心情，能让自己真切地感受。<br>偶然混上了网球课，并连续摸索几个星期后，又发现爱上了这项运动。尽管技术很差，规则不懂，但球场上每一次的酣畅淋漓，却又是一种释放。<br>没有球打的时候（在这个苦逼的工科学院，找个喜爱网球的人还真是难额），夜晚拉上一两个好友，跑上一圈内环也是享受。闲聊也好，探讨也罢，在告诉别人自己想法的同时，可以坚定自己的选择。未来，其实是可以吹出来的。<br>…此处省去几百字奇妙的体验描述…<br>这学期过得没什么计划，自然导致“每个月总有那么几天”的迷茫。<br>爱上了阅读，爱上了摄影，爱上了运动，同时不专一地爱上了网络和前端。<br>然后，我有了大学规划（保密），我有了职业向往（保密），我还有了自己所谓的人生哲学（保密）。<br>接着，我只想告诉全世界一件事：我在策划在毕业前的一次大旅行——带上一本破书，一个破笔记本，一个破相机，然后提前进行人体 验。把体验放到我的网站上，或者写本书再装装B？不装B的人生是不完美的人生。<br>最后，我要开始学习高等数学了，等到四点半开饭就去买完汤犒劳一下四两小赖。</div>","source":"_posts/第二通懒觉引发的心里革命.md","raw":"title: 第二通懒觉引发的心里革命\nid: 589\ncategories:\n  - 来思碑记\ndate: 2012-05-31 15:41:13\ntags:\n---\n\n现在是下午两点，人在图书馆五楼，小憩刚醒。\n<div>       翻开上学期的日志，发现自己已判若两人。\n...此处省略几百字埋怨的话语...\n我想做自己喜欢做的事，去读自己喜欢读的书，但却不想被禁锢在如此我不喜欢的体制内。而对于我这么一个只能呐喊之后又卑微地服从的人而言，在这，不说活的光彩，但得保证生存。这意味着我起码得花一半的时间去做我不想做的事--尽管我不知道做完之后能获得什么，然后花一半的时间去追求自己想要的。但想我太过于贪婪，也就远追赶不上能力高于自己并花上所有时间去做这些事的人---我不敢冒着风险下这赌注，因为我不能自私地只考虑自己的生活。\n大一上学期循规蹈矩学习课程知识，却苦于不能提高。后来问了自己，要么延续高中以来墨守成规地学习方式，要么脱离限制，做自己想做的事。果然，在下学期我试图改变自己的行为方式，断然放弃自己不想学的东西。像《只有偏执狂才能生存》一样，以固执己见的方式度过了这个学期，此刻回首，倾向于极端了吧？\n遗憾的是，临近期末我得奋不顾身地拾起我的高等数学线性代数大学物理等等等的书本，以应付即将到来的期末考试--处于我以前鄙视的一种状态--“以不挂科为目标”。\n但，我却可以告诉自己，取舍之间利弊权衡，我可能走上了不归路，但不后悔，因为起码我没有虚度这半年。\n这学期落下了课程的学习，但学到了很多关于网络和前端的知识，入门了还没深入且苦于周围没有志趣相投的人，但只要坚持下去，找个好团队，就是一个大好的机会。\n我决定不读研（尽管有时会萌发研读心理学、营销学的想法），所以我会有更多的时间去接触新鲜的玩意。\n回想下来，除了不爱课堂学习，我爱上了华工的图书馆，爱上了大学城。我喜爱一有时间就泡在图书馆看点杂七杂八的闲书，起码让自己觉得可以装文艺了。\n偶然触碰到《走吧，张小砚》，我毅然决然拿出自己自高考以来的存款，凑上下个月的伙食，买了个破单反，然后会流连于广州的某个角落，粗糙地玩弄它。构图混乱也好，模糊不清也罢，但简简单单的照片在快门按下时记录下的心情，能让自己真切地感受。\n偶然混上了网球课，并连续摸索几个星期后，又发现爱上了这项运动。尽管技术很差，规则不懂，但球场上每一次的酣畅淋漓，却又是一种释放。\n没有球打的时候（在这个苦逼的工科学院，找个喜爱网球的人还真是难额），夜晚拉上一两个好友，跑上一圈内环也是享受。闲聊也好，探讨也罢，在告诉别人自己想法的同时，可以坚定自己的选择。未来，其实是可以吹出来的。\n...此处省去几百字奇妙的体验描述...\n这学期过得没什么计划，自然导致“每个月总有那么几天”的迷茫。\n爱上了阅读，爱上了摄影，爱上了运动，同时不专一地爱上了网络和前端。\n然后，我有了大学规划（保密），我有了职业向往（保密），我还有了自己所谓的人生哲学（保密）。\n接着，我只想告诉全世界一件事：我在策划在毕业前的一次大旅行----带上一本破书，一个破笔记本，一个破相机，然后提前进行人体 验。把体验放到我的网站上，或者写本书再装装B？不装B的人生是不完美的人生。\n最后，我要开始学习高等数学了，等到四点半开饭就去买完汤犒劳一下四两小赖。</div>","slug":"第二通懒觉引发的心里革命","updated":1418908898000,"excerpt":"","_id":"ihyc5zvtloakkob1","comments":true,"layout":"post","photos":[],"link":""},{"title":"绝对有惊喜！！！","tags":[],"id":362,"categories":["casje7dbzdekawgu"],"date":1365510480000,"content":"<p>CSS3-animation动画的捣鼓，进去玩玩O(∩_∩)O~绝对有惊喜。</p>\n<p><a href=\"http://www.laispace.com/xiaospace/Demo/2013-03/CSS3-Animation%E7%9A%84%E5%AD%A6%E4%B9%A0/index.html\" target=\"_blank\" rel=\"external\"><img src=\"http://www.laispace.com/wp-content/uploads/2013/04/2013-04-09_201523.jpg\" alt=\"\" title=\"2013-04-09_201523\"></a></p>\n<p><a href=\"http://www.laispace.com/xiaospace/Demo/2013-03/CSS3-Animation%E7%9A%84%E5%AD%A6%E4%B9%A0/index.html\" target=\"_blank\" rel=\"external\"><span style=\"color: #888888;\">Demo</span></a></p>\n","source":"_posts/绝对有惊喜！！！.md","raw":"title: 绝对有惊喜！！！\ntags:\nid: 362\ncategories:\n  - 每日一发\ndate: 2013-04-09 20:28:00\n---\n\nCSS3-animation动画的捣鼓，进去玩玩O(∩_∩)O~绝对有惊喜。\n\n[![](http://www.laispace.com/wp-content/uploads/2013/04/2013-04-09_201523.jpg \"2013-04-09_201523\")](http://www.laispace.com/xiaospace/Demo/2013-03/CSS3-Animation%E7%9A%84%E5%AD%A6%E4%B9%A0/index.html)\n\n[<span style=\"color: #888888;\">Demo</span>](http://www.laispace.com/xiaospace/Demo/2013-03/CSS3-Animation%E7%9A%84%E5%AD%A6%E4%B9%A0/index.html)","slug":"绝对有惊喜！！！","updated":1418908898000,"excerpt":"","_id":"63zy40rhfom3i4ku","comments":true,"layout":"post","photos":[],"link":""},{"title":"编写爬虫会使用到的一些模块","date":1400838894000,"categories":["f1q8dl6bbauvoh8x"],"tags":["g297nxh511svj43y"],"content":"<ul>\n<li><p>request 模块</p>\n<p>  用于简化HTTP请求</p>\n</li>\n<li><p>cheerio 模块</p>\n<p>  jquery core 的子集，实现了与DOM操作无关的API</p>\n</li>\n<li><p>async 模块</p>\n<p>  用于简化异步代码的编写</p>\n</li>\n<li><p>debug 模块</p>\n<p>  用于显示调试信息</p>\n</li>\n<li><p>cron 模块</p>\n<p>  用于定时执行任务</p>\n</li>\n<li><p>child_process API</p>\n<p>  用于启动新的进程</p>\n</li>\n<li><p>pm2 模块</p>\n<p>  用于自动重启程序</p>\n</li>\n</ul>\n<ul>\n<li><p>uncaughException 处理错误</p>\n<p>  process.on(‘uncaughtException’, function (err) {</p>\n<pre><code>  <span class=\"built_in\">console</span>.error(<span class=\"string\">'uncaughtException: '</span>, err.stack);\n</code></pre><p>  })</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"参考资料\">参考资料</h3>\n<ol>\n<li><a href=\"https://www.npmjs.org/package/request\" target=\"_blank\" rel=\"external\">request模块</a></li>\n<li><a href=\"https://www.npmjs.org/package/cheerio\" target=\"_blank\" rel=\"external\">cheerio模块</a></li>\n<li><a href=\"https://www.npmjs.org/package/async\" target=\"_blank\" rel=\"external\">async模块</a></li>\n<li><a href=\"https://www.npmjs.org/package/debug\" target=\"_blank\" rel=\"external\">debug模块</a></li>\n<li><a href=\"http://nodejs.org/api/child_process.html\" target=\"_blank\" rel=\"external\">child_process</a></li>\n<li><a href=\"https://www.npmjs.org/package/pm2\" target=\"_blank\" rel=\"external\">pm2</a></li>\n<li><a href=\"http://nodejs.org/api/process.html#process_event_uncaughtexception\" target=\"_blank\" rel=\"external\">uncaughtException</a></li>\n</ol>\n","source":"_posts/编写爬虫会使用到的一些模块.md","raw":"title: 编写爬虫会使用到的一些模块\ndate: 2014-05-23 17:54:54\ncategories: Node\ntags: \n    -crawler\n    -spider\n\n---\n\n\n- request 模块\n\n    用于简化HTTP请求\n\n- cheerio 模块\n\n    jquery core 的子集，实现了与DOM操作无关的API\n\n- async 模块\n\n    用于简化异步代码的编写\n\n- debug 模块\n\n    用于显示调试信息\n\n- cron 模块\n\n    用于定时执行任务\n\n- child_process API\n\n    用于启动新的进程\n\n- pm2 模块\n\n    用于自动重启程序\n\n\n- uncaughException 处理错误\n\n    process.on('uncaughtException', function (err) {\n    \tconsole.error('uncaughtException: ', err.stack);\n    })\n    \n<!-- more -->\n\t\t\n### 参考资料\n\n1. [request模块](https://www.npmjs.org/package/request)\n2. [cheerio模块](https://www.npmjs.org/package/cheerio)\n3. [async模块](https://www.npmjs.org/package/async)\n4. [debug模块](https://www.npmjs.org/package/debug)\n5. [child_process](http://nodejs.org/api/child_process.html)\n6. [pm2](https://www.npmjs.org/package/pm2)\n7. [uncaughtException](http://nodejs.org/api/process.html#process_event_uncaughtexception)\n\n\n\n\n\n","slug":"编写爬虫会使用到的一些模块","updated":1418908898000,"excerpt":"<ul>\n<li><p>request 模块</p>\n<p>  用于简化HTTP请求</p>\n</li>\n<li><p>cheerio 模块</p>\n<p>  jquery core 的子集，实现了与DOM操作无关的API</p>\n</li>\n<li><p>async 模块</p>\n<p>  用于简化异步代码的编写</p>\n</li>\n<li><p>debug 模块</p>\n<p>  用于显示调试信息</p>\n</li>\n<li><p>cron 模块</p>\n<p>  用于定时执行任务</p>\n</li>\n<li><p>child_process API</p>\n<p>  用于启动新的进程</p>\n</li>\n<li><p>pm2 模块</p>\n<p>  用于自动重启程序</p>\n</li>\n</ul>\n<ul>\n<li><p>uncaughException 处理错误</p>\n<p>  process.on(‘uncaughtException’, function (err) {</p>\n<pre><code>  <span class=\"built_in\">console</span>.error(<span class=\"string\">'uncaughtException: '</span>, err.stack);\n</code></pre><p>  })</p>\n</li>\n</ul>\n","_id":"cxplyb163yg0s3q5","comments":true,"layout":"post","photos":[],"link":""},{"title":"读书笔记-程序员的思维修炼","date":1400845748000,"categories":["e1sopqoq892o5i0t"],"tags":["czf234glkhn8iaux"],"content":"<blockquote>\n<p>@小赖：这是《程序员的思维训练》随记，含个人理解。</p>\n</blockquote>\n<h2 id=\"新手到专家的五个阶段\">新手到专家的五个阶段</h2>\n<ol>\n<li>新手</li>\n<li>高级新手</li>\n<li>胜人者</li>\n<li>精通者</li>\n<li>专家</li>\n</ol>\n<blockquote>\n<p>经验：技术促进了思维的转变</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"1-新手\">1.新手</h3>\n<blockquote>\n<p>Novices need recipes.</p>\n</blockquote>\n<p>新手需要的是一份指令清单：当X发生时，执行Y。</p>\n<p>新手的问题是，处于某情景时，不知道哪条规则是最相关的，往往会不知所措。</p>\n<p>规则只会让你启程，不会让你走得更远。</p>\n<h3 id=\"2-高级新手\">2.高级新手</h3>\n<blockquote>\n<p>Advanced beginers don’t want the big picture.</p>\n</blockquote>\n<p>高级新手不想要全局思维。</p>\n<p>高级新手开始摆脱固定的规则。</p>\n<p>高级新手需要快速获取信息，在正确的情景中采纳建议。</p>\n<p>高级新手的问题是虽可以独立尝试任务，但仍难以解决问题。</p>\n<h3 id=\"3-胜任者\">3.胜任者</h3>\n<blockquote>\n<p>Competents can troubleshoot.</p>\n</blockquote>\n<p>胜任者能够解决问题。</p>\n<p>胜任者能建立问题的概念模型并有效使用。</p>\n<p>胜任者开始寻求和运用专家建议并有效利用。</p>\n<p>胜任者的问题是没有足够能力反思和自我纠正。</p>\n<h3 id=\"4-精通者\">4.精通者</h3>\n<blockquote>\n<p>Proficient practitioners can self-correct.</p>\n</blockquote>\n<p>精通者能够自我纠正，并学习他人经验，阅读案例研究，从故事中认真学习。</p>\n<p>精通者有全局思维，寻找更大的概念框架。</p>\n<p>精通者知道哪里最可能出错，有足够的经验知道下一步会发生什么。</p>\n<p>精通者能有效运用设计模式。</p>\n<h3 id=\"5-专家\">5.专家</h3>\n<blockquote>\n<p>Experts work from intuition.</p>\n<p>Intuition and pattern matching replace explicit knowledge.</p>\n</blockquote>\n<p>专家根据直觉工作，专家的直觉和模式识别能力已经超越了他们显性的知识。</p>\n<p>专家不断寻找更好的方式去做事。</p>\n<p>专家知道哪些细节无关紧要，哪些细节至关重要，擅长做有针对性的特征匹配。</p>\n<p>专家有丰富经验并在恰当情景中合理运用这些经验。</p>\n<blockquote>\n<p>当你在某个领域不是很擅长时，你更可能以为自己是专家，因此，你意识不到更好的方法和实践存在。</p>\n<p>一旦你成为了专家，你才会意识到自己知道的是那么少。</p>\n</blockquote>\n<p>正确评估自己：提高个人技能层次，从而提高自我认知能力</p>\n<h3 id=\"十年成就专家\">十年成就专家</h3>\n<blockquote>\n<p>专注、坚持，一万小时。</p>\n</blockquote>\n<ul>\n<li>有一个明确定义的任务</li>\n<li>任务可行但有挑战性</li>\n<li>任务环境可提供大量反馈以便采取行动</li>\n<li>提供重复犯错和纠错的机会</li>\n</ul>\n<h2 id=\"我们在自己行业中可以做些什么\">我们在自己行业中可以做些什么</h2>\n<h3 id=\"1-通过模仿并创新来成长\">1.通过模仿并创新来成长</h3>\n<blockquote>\n<p>“I was just following orders” doesn’t work.</p>\n</blockquote>\n<p>只是执行命令是无用的。 </p>\n<p>通过观察和模仿来学习：模仿 -&gt; 吸收 -&gt; 创新</p>\n<p>在项目中坚持实践尽可能多的现有技能。 </p>\n<h3 id=\"2-在实践中保持技能\">2.在实践中保持技能</h3>\n<blockquote>\n<p>Winners don’t carry losers.</p>\n</blockquote>\n<p>优胜者不会帮扶失败者。</p>\n<p>保持实践以维持专家水平，以找到一个有意义有价值的职业生涯。 </p>\n","source":"_posts/读书笔记-程序员的思维修炼.md","raw":"title: 读书笔记-程序员的思维修炼\n\ndate: 2014-05-23 19:49:08\n\ncategories: Reading\n\ntags: [Notes]\n\n---\n\n> @小赖：这是《程序员的思维训练》随记，含个人理解。\n\n## 新手到专家的五个阶段\n\n1. 新手\n2. 高级新手\n3. 胜人者\n4. 精通者\n5. 专家\n\n> 经验：技术促进了思维的转变\n\n\n<!-- more -->\n\n### 1.新手\n\n> Novices need recipes.\n\n新手需要的是一份指令清单：当X发生时，执行Y。\n\n新手的问题是，处于某情景时，不知道哪条规则是最相关的，往往会不知所措。\n\n规则只会让你启程，不会让你走得更远。\n\n\n### 2.高级新手\n\n> Advanced beginers don't want the big picture.\n\n高级新手不想要全局思维。\n\n高级新手开始摆脱固定的规则。\n\n高级新手需要快速获取信息，在正确的情景中采纳建议。\n\n高级新手的问题是虽可以独立尝试任务，但仍难以解决问题。\n\n\n### 3.胜任者\n\n> Competents can troubleshoot.\n\n胜任者能够解决问题。\n\n胜任者能建立问题的概念模型并有效使用。\n\n胜任者开始寻求和运用专家建议并有效利用。\n\n胜任者的问题是没有足够能力反思和自我纠正。\n\n\n### 4.精通者\n\n> Proficient practitioners can self-correct.\n\n精通者能够自我纠正，并学习他人经验，阅读案例研究，从故事中认真学习。\n\n精通者有全局思维，寻找更大的概念框架。\n\n精通者知道哪里最可能出错，有足够的经验知道下一步会发生什么。\n\n精通者能有效运用设计模式。\n\n\n### 5.专家\n\n> Experts work from intuition.\n\n> Intuition and pattern matching replace explicit knowledge.\n\n专家根据直觉工作，专家的直觉和模式识别能力已经超越了他们显性的知识。\n\n专家不断寻找更好的方式去做事。\n\n专家知道哪些细节无关紧要，哪些细节至关重要，擅长做有针对性的特征匹配。\n\n专家有丰富经验并在恰当情景中合理运用这些经验。\n\n\n> 当你在某个领域不是很擅长时，你更可能以为自己是专家，因此，你意识不到更好的方法和实践存在。\n\n> 一旦你成为了专家，你才会意识到自己知道的是那么少。\n\n\n正确评估自己：提高个人技能层次，从而提高自我认知能力\n\n\n### 十年成就专家\n\n> 专注、坚持，一万小时。\n\n- 有一个明确定义的任务\n- 任务可行但有挑战性\n- 任务环境可提供大量反馈以便采取行动\n- 提供重复犯错和纠错的机会\n\n\n\n## 我们在自己行业中可以做些什么\n\n### 1.通过模仿并创新来成长\n\n> \"I was just following orders\" doesn't work.\n\n只是执行命令是无用的。 \n\n通过观察和模仿来学习：模仿 -> 吸收 -> 创新\n\n在项目中坚持实践尽可能多的现有技能。 \n\n\n### 2.在实践中保持技能\n\n> Winners don't carry losers.\n\n优胜者不会帮扶失败者。\n\n保持实践以维持专家水平，以找到一个有意义有价值的职业生涯。 \n\n\n\n\n\n\n\n\n","slug":"读书笔记-程序员的思维修炼","updated":1418908898000,"excerpt":"<blockquote>\n<p>@小赖：这是《程序员的思维训练》随记，含个人理解。</p>\n</blockquote>\n<h2 id=\"新手到专家的五个阶段\">新手到专家的五个阶段</h2>\n<ol>\n<li>新手</li>\n<li>高级新手</li>\n<li>胜人者</li>\n<li>精通者</li>\n<li>专家</li>\n</ol>\n<blockquote>\n<p>经验：技术促进了思维的转变</p>\n</blockquote>\n","_id":"dnp507dojfo0v2vf","comments":true,"layout":"post","photos":[],"link":""},{"title":"阻止元素被选中及清除选中的方法","categories":["be592wtznj5wcvwn"],"date":1407836574000,"tags":["fvh08xdal89759fj"],"content":"<p>有时候，我们希望阻止用户选中我们指定区域的文字或内容。</p>\n<p>举个栗子，有时候用户在一个区域执行频繁的点击操作，一不小心傲娇地点多了，就会选中当前区域的内容。</p>\n<p>再举个栗子，制作轮播组件的时候，点击下一页，若点击的快的话，浏览器会识别为双击。</p>\n<p>双击的默认效果是选中整片区域，这时候轮播图组件就会被表示忧郁的蓝色幕布盖住，多忧桑啊~</p>\n<p><img src=\"http://laispace.u.qiniudn.com/%E9%98%BB%E6%AD%A2%E5%85%83%E7%B4%A0%E8%A2%AB%E9%80%89%E4%B8%AD%E5%8F%8A%E6%B8%85%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%951.jpg\" alt=\"\"></p>\n<p>你看，这妹子多赞啊，可是你一紧张就乱点下一张的话，就变成酱紫了：</p>\n<p><img src=\"http://laispace.u.qiniudn.com/%E9%98%BB%E6%AD%A2%E5%85%83%E7%B4%A0%E8%A2%AB%E9%80%89%E4%B8%AD%E5%8F%8A%E6%B8%85%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%952.jpg\" alt=\"\"></p>\n<p>不过别怕，给这个现代化浏览器说好了咱不要这种忧桑色调就可以了：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">.pretty-girl</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">-webkit-user-select</span>:<span class=\"value\"> none</span></span>;     </div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>可是！可是！不是每个浏览器都可以不忧桑！！！那就只能请脚本大王出山了。</p>\n<h1 id=\"阻止选中\">阻止选中</h1>\n<p>有时候，我们需要禁止用户选中一些文本区域，这时候可以直接通过让 onselectstart 事件 return false 来实现。</p>\n<h2 id=\"使用_JS_阻止整个网页的内容被选中\">使用 JS 阻止整个网页的内容被选中</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.body.onselectstart = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{ </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </div><div class=\"line\">};</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 或</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.onmousedown = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{ </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"阻止特定区域的内容被选中\">阻止特定区域的内容被选中</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> elem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'elemId'</span>);</div><div class=\"line\">elem.onselectstart = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<h2 id=\"使用_CSS_控制样式阻止内容被选中\">使用 CSS 控制样式阻止内容被选中</h2>\n<p>仅支持非 IE10 以下的浏览器。IE9 以下请使用 onselectstart=”return false;” 的方式来实现。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">.unselect</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">-webkit-user-select</span>:<span class=\"value\"> none</span></span>; </div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">-moz-user-select</span>:<span class=\"value\"> none</span></span>;    </div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">-khtml-user-select</span>:<span class=\"value\"> none</span></span>;  </div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">-ms-user-select</span>:<span class=\"value\"> none</span></span>;    </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/* 以下两个属性目前并未支持，写在这里为了减少风险 */</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">-o-user-select</span>:<span class=\"value\"> none</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">user-select</span>:<span class=\"value\"> none</span></span>;  </div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>user-select: auto;  =&gt; 用户可以选中元素中的内容</p>\n<p>user-select: none; =&gt; 用户不可选中元素中的内容</p>\n<p>user-select: text;  =&gt; 用户可以选中元素中的文字</p>\n<p>目前这个 user-select 兼容 Chrome 6+、Firefox、IE 10+、Opera 15+、Safari 3.1+。</p>\n<p>需要注意的是，这个 user-select 还带浏览器厂商前缀，意味着她们还是非标准的，将来可能会改变。在生产环境中要慎用。</p>\n<h1 id=\"清除选中\">清除选中</h1>\n<p>有时候用户选中文字进行复制后，我们使用手动的方式进行选中的清除。</p>\n<h2 id=\"使用_JS_清除选中\">使用 JS 清除选中</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clearSelections</span> <span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.getSelector) {</div><div class=\"line\">        <span class=\"comment\">// 获取选中</span></div><div class=\"line\">        <span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection();</div><div class=\"line\">        <span class=\"comment\">// 清除选中</span></div><div class=\"line\">        selection.removeAllRanges();</div><div class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.selection && <span class=\"built_in\">document</span>.selection.empty) {</div><div class=\"line\">       <span class=\"comment\">// 兼容 IE8 以下，但 IE9+ 以上同样可用</span></div><div class=\"line\">        <span class=\"built_in\">document</span>.selection.empty();</div><div class=\"line\">        <span class=\"comment\">// 或使用 clear() 方法</span></div><div class=\"line\">        <span class=\"comment\">// document.selection.clear();</span></div><div class=\"line\">    }       </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"使用_CSS_清除选中\">使用 CSS 清除选中</h2>\n<p>不考虑低版本 IE 的情况下，我们简单给选中元素添加以上 .unselect 的样式即可。</p>\n<h3 id=\"参考链接\">参考链接</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/user-select\" target=\"_blank\" rel=\"external\">MDN user-select</a></p>\n","source":"_posts/阻止元素被选中及清除选中的方法.md","raw":"title: 阻止元素被选中及清除选中的方法\ncategories:\n  - Javascript\ndate: 2014-08-12 17:42:54\ntags:\n  - clearSelect    \n---\n\n有时候，我们希望阻止用户选中我们指定区域的文字或内容。\n\n举个栗子，有时候用户在一个区域执行频繁的点击操作，一不小心傲娇地点多了，就会选中当前区域的内容。\n\n再举个栗子，制作轮播组件的时候，点击下一页，若点击的快的话，浏览器会识别为双击。\n\n双击的默认效果是选中整片区域，这时候轮播图组件就会被表示忧郁的蓝色幕布盖住，多忧桑啊~\n\n![](http://laispace.u.qiniudn.com/%E9%98%BB%E6%AD%A2%E5%85%83%E7%B4%A0%E8%A2%AB%E9%80%89%E4%B8%AD%E5%8F%8A%E6%B8%85%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%951.jpg)\n\n你看，这妹子多赞啊，可是你一紧张就乱点下一张的话，就变成酱紫了：\n\n![](http://laispace.u.qiniudn.com/%E9%98%BB%E6%AD%A2%E5%85%83%E7%B4%A0%E8%A2%AB%E9%80%89%E4%B8%AD%E5%8F%8A%E6%B8%85%E9%99%A4%E9%80%89%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%952.jpg)\n\n不过别怕，给这个现代化浏览器说好了咱不要这种忧桑色调就可以了：\n\n```\n.pretty-girl {\n    -webkit-user-select: none;     \n}\n```\n\n可是！可是！不是每个浏览器都可以不忧桑！！！那就只能请脚本大王出山了。\n\n# 阻止选中\n\n有时候，我们需要禁止用户选中一些文本区域，这时候可以直接通过让 onselectstart 事件 return false 来实现。\n\n## 使用 JS 阻止整个网页的内容被选中\n\n```\ndocument.body.onselectstart = function () { \n    return false; \n};\n\n// 或\ndocument.body.onmousedown = function () { \n    return false; \n}\n```\n\n## 阻止特定区域的内容被选中\n```\nvar elem = document.getElementById('elemId');\nelem.onselectstart = function () {\n    return false;\n};\n```\n\n## 使用 CSS 控制样式阻止内容被选中\n\n仅支持非 IE10 以下的浏览器。IE9 以下请使用 onselectstart=\"return false;\" 的方式来实现。\n```\n.unselect {\n    -webkit-user-select: none; \n    -moz-user-select: none;    \n    -khtml-user-select: none;  \n    -ms-user-select: none;    \n    \n    /* 以下两个属性目前并未支持，写在这里为了减少风险 */\n    -o-user-select: none;\n    user-select: none;  \n}\n```\n\nuser-select: auto;  => 用户可以选中元素中的内容\n\nuser-select: none; => 用户不可选中元素中的内容\n\nuser-select: text;  => 用户可以选中元素中的文字\n\n目前这个 user-select 兼容 Chrome 6+、Firefox、IE 10+、Opera 15+、Safari 3.1+。\n\n需要注意的是，这个 user-select 还带浏览器厂商前缀，意味着她们还是非标准的，将来可能会改变。在生产环境中要慎用。\n\n# 清除选中\n\n有时候用户选中文字进行复制后，我们使用手动的方式进行选中的清除。\n\n## 使用 JS 清除选中\n\n```\nfunction clearSelections () {\n    if (window.getSelector) {\n        // 获取选中\n        var selection = window.getSelection();\n        // 清除选中\n        selection.removeAllRanges();\n    } else if (document.selection && document.selection.empty) {\n       // 兼容 IE8 以下，但 IE9+ 以上同样可用\n        document.selection.empty();\n        // 或使用 clear() 方法\n        // document.selection.clear();\n    }       \n}\n```\n\n## 使用 CSS 清除选中\n\n不考虑低版本 IE 的情况下，我们简单给选中元素添加以上 .unselect 的样式即可。\n\n### 参考链接\n[MDN user-select](https://developer.mozilla.org/en-US/docs/Web/CSS/user-select)\n\n","slug":"阻止元素被选中及清除选中的方法","updated":1418908898000,"excerpt":"","_id":"9nmqc3409zti7mme","comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"好文阅读","_id":"suq57axt0wea01f5","posts":["8ightfglq4refdhe"]},{"name":"base64","_id":"kb7yc6e4l40ss7sh","posts":["33w1xg93csf647du"]},{"name":"css3","_id":"h1got1knp1kxsei5","posts":["v6lcce3sbbh5wp4z"]},{"name":"最佳实践","_id":"xrqknw180yx87gm8","posts":["rkn4yq8vsp2pzq7n","m35zp0ot8ct34taf"]},{"name":"碎片","_id":"icgldl43cc8gt0in","posts":["yn87bgs8j1qwbm72","qhc8eq8w87z9vzgu","4jzyuz20hpa2e0fy"]},{"name":"cookies","_id":"mgccz0i0yfo0tx1g","posts":["k2eq7hpquqfmsxqn"]},{"name":"git","_id":"ga9nt5ajygn70ngs","posts":["vyvtuadkaahc9iky"]},{"name":"goagent","_id":"pla62rrl9yhoir3w","posts":["ri6vh6igmjo3livv"]},{"name":"html5","_id":"6yokvvsaq2p5y620","posts":["w7jqfpv0kcln8v70","7wdf7dk76ekdzpd6","k5rx1cc3w6vunyxv"]},{"name":"socket","_id":"3iowu4fj304fdl5d","posts":["w7jqfpv0kcln8v70","p7w7fni30tg1iv5k"]},{"name":"websocket","_id":"5c7tzotym2of4isa","posts":["w7jqfpv0kcln8v70"]},{"name":"flex","_id":"d4yhogir9w034jce","posts":["9yxti6vofyzpv9lv"]},{"name":"jquery","_id":"fhulu8nr6f39n0l5","posts":["gcb69q21rvfv19hp","xejg9a6um4l9xz0i","4jzyuz20hpa2e0fy"]},{"name":"json","_id":"f36qkkcf1fsyzyf8","posts":["0kd08psdc0jw3ew3"]},{"name":"javascript","_id":"kzhdg37kxm157a04","posts":["mval4mujtyq0h0tk"]},{"name":"async","_id":"f07x04vd5edp23qx","posts":["vtojnzasx4b5kcsn"]},{"name":"闭包","_id":"cyi3e3xucfdnw3n1","posts":["g12207mg0li84e5b"]},{"name":"jasmine","_id":"l0qie8wsx4xs3o39","posts":["p1iaowdf9zwohb3j"]},{"name":"karma","_id":"8jv02yaflzg61pig","posts":["p1iaowdf9zwohb3j"]},{"name":"mysql","_id":"4g3dew5br4i0eqww","posts":["6g3z8atefmni0qus","ycqvbf3sibvg30a2"]},{"name":"python","_id":"fv6qpbjl890a18tr","posts":["6g3z8atefmni0qus","ycqvbf3sibvg30a2"]},{"name":"meta","_id":"e9ch81ifhln56ig5","posts":["bh9p8yeyqfw7aetm","fqybili5m2yoj97l"]},{"name":"mongodb","_id":"6ce4vvmry47srbd4","posts":["nt98bq48a1miz4dg","rzidvpo7izc0xi0y"]},{"name":"debug","_id":"yyqv81fhaequnn8n","posts":["hxoum11bd2ie3td8"]},{"name":"dns","_id":"2tfwjybvjy6xhqzj","posts":["hegvjbgtkj48n205"]},{"name":"spider","_id":"fa3yyjtyo5l2bxax","posts":["3jycg9g11svu07aj"]},{"name":"node","_id":"1r19h0mfxhgs7nzc","posts":["odzhwro8tfhh8wl1","dmj6cdd9spobe5qg","cg1piu34k6etmjz7","wipkjyhmh00olvw1"]},{"name":"fs","_id":"co9oz5jdtnentgvy","posts":["odzhwro8tfhh8wl1","08ovdk9i2x79zk8j"]},{"name":"NPM","_id":"gu3hmq4vzpxrop85","posts":["kduv0n4k6ityygde"]},{"name":"npm","_id":"9dl7su9k3pri3l6q","posts":["abqj3wp6s3qzksek"]},{"name":"stream","_id":"y61i4qrqqlf4l62x","posts":["oyi1ibz91pxa1nk0"]},{"name":"through","_id":"wm1t3br1q0iydlun","posts":["oyi1ibz91pxa1nk0"]},{"name":"concat-stream","_id":"z9v761uchs5r2lc6","posts":["oyi1ibz91pxa1nk0"]},{"name":"readable","_id":"a9p97ysmkdwzmarl","posts":["oyi1ibz91pxa1nk0"]},{"name":"writeable","_id":"u9vj4ei07jdie7je","posts":["oyi1ibz91pxa1nk0"]},{"name":"Phonegap","_id":"jh2bs60oxtltv09u","posts":["203h2lih97h8ztiz"]},{"name":"vm","_id":"i3soenzjj13smlgh","posts":["0hqnwivs1p2terki"]},{"name":"worker","_id":"oyirff88ysxmtap2","posts":["7c0mmpwb9wg7yy58"]},{"name":"ajax","_id":"kgid89vd8uhg2ply","posts":["6z9cl40ewtql9s4n"]},{"name":"bytewiser","_id":"paik0gi4y4o9uo9m","posts":["1xo2ohxclwjobgap"]},{"name":"buffer","_id":"7vh6slrie6ute0c3","posts":["1xo2ohxclwjobgap","efn8uirfln4qw9u7"]},{"name":"express","_id":"wp9ncps8ze53qc1e","posts":["9jl4r414qt1zfjmy"]},{"name":"middleware","_id":"ascr8ch9iyvrl11b","posts":["9jl4r414qt1zfjmy"]},{"name":"grunt","_id":"nnw358thjbsgh7zk","posts":["uflx76vgojlsdkwz"]},{"name":"fileupload","_id":"4sm1lzbot65figpw","posts":["t0vbr8w79l78nfxk"]},{"name":"HTML5","_id":"ndyjn5r8miqd29wq","posts":["ecnmmq4reusftmws"]},{"name":"Notification","_id":"3nqad3u3qfqiwl5n","posts":["ecnmmq4reusftmws"]},{"name":"animate","_id":"cku3mn9akxny14u9","posts":["xejg9a6um4l9xz0i"]},{"name":"learnyounode","_id":"uibn8wy0mp910u4h","posts":["dmj6cdd9spobe5qg"]},{"name":"-linux","_id":"widi8npuw1bm1e03","posts":["hpbrl9l8rmsirmlt"]},{"name":"lodash","_id":"uexsw91clqvjzltf","posts":["58gmsf705ctg8d6o"]},{"name":"viewport","_id":"9ba25ohigum68i69","posts":["fqybili5m2yoj97l"]},{"name":"moment","_id":"26ed9ofa52jpsb7g","posts":["uy1v1i0ha3f7h7cx"]},{"name":"mongoose","_id":"1w1wj1qb7pcv7lru","posts":["rzidvpo7izc0xi0y","cg1piu34k6etmjz7"]},{"name":"mongo","_id":"uoz9hvdqhu0y7qf1","posts":["cg1piu34k6etmjz7"]},{"name":"path","_id":"m4vxmftnnz9qf4vr","posts":["08ovdk9i2x79zk8j"]},{"name":"Node","_id":"lpay8ajzjtzrtm3e","posts":["jprjnyzv18tspcei","ys1vflummj07en07"]},{"name":"Child_process","_id":"xzgcz0yy9e9b355w","posts":["jprjnyzv18tspcei"]},{"name":"Cluster","_id":"phe2lff36se0m9i9","posts":["jprjnyzv18tspcei"]},{"name":"Node modules","_id":"6nw4rkrlz1uq9phz","posts":["x30wgnpawbi3h14g"]},{"name":"Mongo","_id":"3o3boffd22y5aqvb","posts":["ys1vflummj07en07"]},{"name":"Ubuntu","_id":"55hd6ydlzi3d7i1w","posts":["ys1vflummj07en07"]},{"name":"前端","_id":"lfo59y0zmr0yh0s3","posts":["xe832755ce1rfcyi"]},{"name":"wordpress","_id":"s16412qrcm7x4te5","posts":["l2p31b8gehozjcl5"]},{"name":"SAE","_id":"59khkqtqiioef01l","posts":["l2p31b8gehozjcl5"]},{"name":"ES6","_id":"7sfn5fw7t2bpmxsr","posts":["78id1lhzpfaa8sqm","rq9o2jpliix1g95f","le0utyo4vy3m87dq","5th0kei1kug0pll9"]},{"name":"generators","_id":"0pxk3k3oh5k9vb6a","posts":["78id1lhzpfaa8sqm","rq9o2jpliix1g95f","le0utyo4vy3m87dq","5th0kei1kug0pll9"]},{"name":"prefetch","_id":"6m2j6h1zzmuctz57","posts":["k5rx1cc3w6vunyxv"]},{"name":"workplace","_id":"3gdfok9h1ey5soks","posts":["pd18ykc82c0445au"]},{"name":"sourcemap","_id":"dh78xkz3qs1h2evl","posts":["pd18ykc82c0445au"]},{"name":"filter","_id":"6jngiezovkx8oyi2","posts":["38mznzbw3ejfso7n"]},{"name":"blur","_id":"b5luls91j9prayi1","posts":["38mznzbw3ejfso7n"]},{"name":"FormData","_id":"pehrqf4p66bfyhyp","posts":["8jlageesnyq9rf09"]},{"name":"net","_id":"g6walf4r9fxkcvnn","posts":["avfnohbv9270xm9m"]},{"name":"tcp","_id":"yyyaezl5wdv095zn","posts":["avfnohbv9270xm9m"]},{"name":"HTTP","_id":"izgm9cajg7ji9rjr","posts":["xwlizw8d7078999t"]},{"name":"HTTPS","_id":"exv23uev1cc6cki6","posts":["xwlizw8d7078999t"]},{"name":"Tools","_id":"s3hiqm9wbr2k03ig","posts":["1r52i15q8w1k3rwf"]},{"name":"Notes","_id":"czf234glkhn8iaux","posts":["1r52i15q8w1k3rwf","dnp507dojfo0v2vf"]},{"name":"职业规划","_id":"dl6zq55rwsmcdx77","posts":["olehtsnx7o84ywc2"]},{"name":"移动开发","_id":"hr98uj109s1e24iz","posts":["o9urrtoys1sxk9z8"]},{"name":"-crawler -spider","_id":"g297nxh511svj43y","posts":["cxplyb163yg0s3q5"]},{"name":"clearSelect","_id":"fvh08xdal89759fj","posts":["9nmqc3409zti7mme"]}]}